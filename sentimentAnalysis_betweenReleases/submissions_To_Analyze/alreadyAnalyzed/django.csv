date;submission_text;comments_text
2012-05-14 17:47:22;Episode two of our Django Podcast: Task Queues;"In response to a lot of feedback, we'd thought we'd get to a little more meat here. We are still trying to not drop down into *super nerd* talk as we want newbies and moderate Django devs to get a lot out of this as well.

Of course, we're still feeling it out but we have a *killer* guest lined up for next week. That will be a new experience for us as well.

As always, feedback is welcome! Thanks guys!Good podcast. stays on topic without rambling really gets into things and isn't a total gloss over on the topic.It's really nice to have again a Django podcast! Thank you for your work! Great podcast!"
2012-05-13 14:18:23;Good open source django projects for learning;"I think Samuel Clay's [NewsBlur](https://github.com/samuelclay/NewsBlur) is a good resource for intermediate learning. It's got a lot of the non-standard stuff that can come up with things get complicated (async, non relational DB, etc). I also like that he has his environment config all in there to peek at, too.http://www.djangosites.org/with-source/

I can't recommend any particular pages to look through, but there's a whole hell of a lot on there (312 as of the moment). After clicking on the sites thumbnail, there's a link to the site's code. It's not exactly what you were looking for, but it's a good resource for learning nonetheless.It'd be cool if someone wrote some design patterns for Django. Something like Pinax except in tutorial format and updated.https://bitbucket.org/dwaiter/proposalmaticWe made the sc2tourney @ pycon open source.

https://github.com/issackelly/sc2tourneyI'm biased, but I think you should check out LocalWiki: http://localwiki.org - https://dev.localwiki.org / http://github.com/localwiki/localwiki1. LFS - Lightning Fast Store - an eCommerce Store on Django.
I'm running 2 sites with LFS and trust me - its the best learning curve.

2. OSQA - a QnA system much like Stackoverflow (karma system + gamification)
One of the best OSS out there running on Django. Its powering some 3k sites !http://pinaxproject.com/ isn't a bad one. Or django itself. Both can be found on github. "
2012-05-11 18:04:54;Looking for a django freelancer;
2012-05-11 02:29:54;How Do I Get Started with Django Development?;"Run through the tutorial on the main django project site https://docs.djangoproject.com/en/1.4/intro/tutorial01/ that should be a start.  Then make something like a todo app or a blog to get more familiar with it. I also do Django screencasts at http://godjango.com To begin with let me tell you what are the major features of django that you should know->

basic:
you should be able to write your models, views, urls, configure admin and templates.
exercise: django polls application, the one mentioned in the tutorial. 

intermediate:
you should be able to write model forms, class based views, templatetags,  login/signup users, extend user profile etc.

exercise: write a small wiki application using class based views and modelforms.
Take help from online tutorials written by different bloggers and code hosted on github. 

advanced: 
you should be able to understand signals, middlewares, context processors etc.
you should know what a meta class in python means. 
you should be able to read and understand the djagno code itself and should have gone through the code for say contrib.admin. 

exercise: read the docs, and use wherever you want to.  

approximate time for the 
basic level: 1 week
intermediate level: 2 - 4 weeks
advanced: 1 - 2 months. 

The above is a rough idea, they should not be treated as exact figures, few things in advanced might go to intermediate and vice versa, depending upon the perception of each. The timings given assume you only learn django throughout the time, which is not possible, hence YMMV. Maybe i have missed few things, but as per me this does give fair idea of how to get started and get along well with django. 
I did the tutorial, but I actually had more luck with the published version of this: http://www.djangobook.com/en/2.0/

Unlike RoR, there actually aren't a lot of books out there. Welcome to the community! 

As others have pointed out, doing the tutorial is the number one thing you have to do. After that you should just pick a project idea and execute. No books needed. Django's documentation has more words than the bible (no kidding), there are thousands of blog posts and gists and django snipptes around so you should find just about anything that you might ever need by some googling. There are some books about creating an ecommerce system with Django and another one about TDD with Django at Packt Publishing, I have bought them but never read them.

If googling doesn't help, search the django-users google group and if even that does not help, go to #django on IRC and just politely ask your question. You won't always get a nice spoonfed answer, but at least someone might push you into the right direction. Also don't be afraid to go to github.com/django/django every now and then and just look into the code. By peeping at their test suite you can get good ideas about how to use the framework and more recently added stuff like class based views is a bit strangely documented, so looking at the code is much more efficient than any documentation."
2012-05-10 21:05:42;Choosing an API framework for Django;"I use tastypie in a few production applications. We've ripped their ModelResource apart a little bit to make it fit with some of our less than ordinary workflows, error reporting, and deeper hooking, but overall it offers a really easy and pluggable package that vanilla and even not-so-vanilla applications can be plugged right in to.My one problem with both of those is that neither generates what I consider to be ""good"" schemas. I assume this is intentional, since the tastypie code cites the ""REST worst practices"" blog entry, which mentions:

> It’s really tempting to have each resource have a different representation (i.e. schema if using XML), but I think that’s a bad idea — it makes consumption code really hard. 

But that's fallacious thinking. I'd suggest that it's roughly analgous to saying that typing variables is bad because it makes handling variables hard. Yes, it's ""easier"" to have dynamic typing silently converting for you; but it's dangerous.

Having well-typed REST resources makes sense, as they represent objects. **RE**presentational **S**tate **T**ransfer. There's a tendency in **every** python REST framework I've looked at so far on [this list](http://djangopackages.com/grids/g/api/) to treat XML as **serialization** rather than **state transfer**.

The thing is, good toolchains for dealing with REST XML (an example I'd use would be [scalaxb](http://scalaxb.org/) generating case classes from XSDs) empower programmers to use APIs in a less error-prone way. That, coupled with good practices like correctly content-typing the objects (ie, sending an address with something like *application/vnd.sitename.appname.objectType+xml*) means a firm definition for content types. It also allows a much more robust use; for example, an object can contain links (often in 0..n lists) which reference by content-type.

What's interesting is, the ""worst practices"" article cited by tastypie docs actually sort of follows a similar philosophy for links; it's a good practice to link to actual resources rather than something opaque like a list of IDs, but it's better to do so with a content-type so the client can know what it is requesting before it asks. (It's a bad practice, in fact, to assume a client can handle every type; strong content-typing avoids that)

Real xs:schema schemas for tastypie resources would be a fabulous improvement in my book. (It's actually something I'm probably going to work in in the next couple months; amazingly, someone already did some [generator code](https://bitbucket.org/eegg/django-model-schemas/wiki/Home); I'm hoping to just port that so that I can replace the tastypie schema generator with one that generates real XSDs.)

There are other reasons to use real XSDs; for example, some people might want to manipulate them with a tool like oXygen, an amazingly robust tool for generating/manipulating schemas; but it doesn't understand the random ""xml soup"" currently generated by tastypie. There are also constructs that, in w3c terms, have really interesting and potentially graceful interactions with Django's model handling; ie, party tricks with <xs:extension> come to mind. It's hard to express something like <xs:extension> in xml soup. My only other real issue is I'd like to be able to stipulate what is an element and what is an attribute; xml-soup generators tend to want to make everything elements, but that's sort of silly. Elements shouldn't used for something like a name. To go with the simplest example:

    <Widget>
      <name>Cheddar Cheese Widget</name>
    </Widget>

is bad, compared to

  <Widget name=""Cheddar Cheese Widget"" />

<xs:attribute> is good for... well, attributes. <xs:element> is good for collections (whether 1..n or 0..n or 0..x, etc). Partially this is because elements themselves can (and should where appropriate) have attributes. It's funny, because the REST worst practices blog entry (which I largely think is smartly written) mentions ""Resource != Model"". Entirely true, and it may well make sense to include elements that are actually (in Django terms) models.

For example:

    <System href=""http://example.com/system/45"" status=""running"">
      <Tasks>
        <Task status=""running"" startTime=""2012-05-12 12:12:12""
          type=""application/vnd.sitename.automata.task+xml""
          href=""http://example.com/task/80085"" percentComplete=""45"" />
      </Tasks>
    </System>

This is a simple representation of a system and some sort of automated task associated with it.

Anyhoo, I'm getting awfully long-winded here, but, suffice it to say, I'd like to see a REST-XML framework that did real rest schemas, instead of a tag-soup xml serialization.Tastypie is good, if you want to explore you might find [django-piston](http://www.ohloh.net/p/django-piston) or [django rest framework](http://django-rest-framework.org/) of help too. pydanny is lulz."
2012-05-21 17:12:02;My Personal Django Blog;"Are you seriously using nginx+uwsgi+postgresql+bootstrap+memcached to serve a blog?

ALSO: Loves to penetration test to server (lol) but leaves Django in debug mode on.Congrats man. Looks good. You're doing it right, start small and learn. Here's another Django CMS/Blog app thats really interesting, take a look if you have time.
http://mezzanine.jupo.org/Looking good, well done! At the moment I'm browsing your site from an iPad and I've noticed that the navigation menu button does not actually activate the dropdown menu. This is probably just a missing twitter bootstrap JavaScript, if you scale your browser window down you should be able to see what I mean.I was thinking in learn python + django this summer,I think I'll take a close look at it :=)Now,I opened to my personal blog.

This site is: http://www.halitalptekin.com/blog/Pretty decent.

You're only 18! You're well ahead of your peers.

Why don't you contribute to the community by writing tutorial guides?"
2012-05-21 11:00:18;Does anyone have any experience in storing time series data using Django ORM ?;"I'll have to keep an eye on this thread because I'm looking to do something similar.

[django-qsstats-magic](http://pypi.python.org/pypi/django-qsstats-magic/0.5.2)  
[highcharts](http://www.highcharts.com)
I think a relational database is pretty much the wrong tool for time series data, although in your case where updates are only daily it would probably be ok.

The databases designed specifically for time series data are **[rrdtool](http://oss.oetiker.ch/rrdtool/)** (used in many monitoring tools) and **[whisper](http://graphite.readthedocs.org/en/0.9.x/whisper.html)** (used in the [graphite](http://graphite.wikidot.com/) universe).

RRD has decent docs and multiple python interfaces like [rrdpy](http://coreygoldberg.blogspot.com/2008/05/python-rrdpy-round-robin-databases.html) and [rrdpython](http://oss.oetiker.ch/rrdtool/prog/rrdpython.en.html)

Whisper has the advantage of being written in python but lacks documentation. One thing we do get in the whisper docs is an explanation of the [differences with RRD](http://graphite.readthedocs.org/en/0.9.x/whisper.html#differences-between-whisper-and-rrd).Little bit late to the party but I've been working on a redis based solution for my own needs:
http://pypi.python.org/pypi/analytics/0.3.0The time data is most likely related to an object, right? You can have thousands of records in the database with a foreign key or you can use redis/mongo to store key/values in memory/files. SQL is not the answer here.  

I'd recommend an approach simular to the django-session-api. It's a key value base and it gives you the options of using cache files, databases, or in-memory. Storing the data chronologically will be a lot easier with a class that can do insertion orders  systematically behind the scenes. "
2012-05-21 04:07:45;prefetch_related filtering (to get specific related objects)?;"[deleted]Use select_related instead:

    Product.objects.filter(
        price__quantity=0,
        price__price_class_id=1,
    ).select_related('price')

You're welcome.prefetch_related can't do this yet. We did have some discussions about extending it to enable that, but decided to make sure it was robust in its basic implementation before extending it. The ticket for further extensions is here: https://code.djangoproject.com/ticket/17001

One way to achieve what you want is to do prefetch_related and then do the filtering in Python (e.g. using a 'my_special_prices' attribute on Product that starts with the prefetched 'prices' and throws some away), which is obviously inefficient if most of the Price objects will get thrown away, so it might be of little use, except that it might be better than doing dozens on queries."
2012-05-20 09:42:47;help with django TDD tutorial;
2012-05-19 23:08:37;where should I start? any good book you will recommend?;"[deleted]Also.. don't put ""self.django"" in the url field. just leave it blank."
2012-05-26 21:11:35;What are the best Django communities / resources when you are getting started?;"The official docs are cannon. http://djangoproject.com/community has pointers at a few other good places.

Technical questions are good at #django on irc.freenode.net or on http://stackoverflow.com

National or regional conferences are great for meeting people in person. PyOhio is coming up in July, DjangoCon in September in DC. The open bastion is running some single-day conferences in various parts of the US this year too.

djangopackages.com is pretty good for exploring the types of 3rd party things that exist, but not really great for judging them, the best thing for that is probably just to ask for recomendations between two until you get a feel for what's good.

I wrote up a text doc for a new guy at my company last year, it's a bit outdated and far from complete.
http://dl.dropbox.com/u/1528/Basic%20Things%20About%20Django.markdown
^-- e.g. I'm back to using sorl.thumbnail from easy-thumbnails, I was using a lot of pinax at the time, and almost none now, so it's maybe slightly favored in that direction. Maybe some other stuff (OpenStack, Instagram and Pinterest should be added to ""projects using django"")

Here's my version of how django works, it's... short.
http://dl.dropbox.com/u/1528/django.mdA good mentor can go a long way.  Hanging out in #django can be helpful also, as you can get questions answered pretty quickly there.  Feel free to DM me if you'd like to chat about anything Django or python related. I've found [djangosnippets](http://djangosnippets.org/) extremely helpful for seeing examples of how to do things with Django. But for the basics, you definitely want to start out with [the official docs](https://docs.djangoproject.com/en/1.4/).

I'm with ilogik about having a solid Python foundation first. Learning Django and Python at the same time is probably not a good idea.
[deleted]If you're new to Python, you should start with that first:
I'd recommend this: http://learnpythonthehardway.org/

After that, the best way to start with Django is to follow the tutorial in the docs:
https://docs.djangoproject.com/en/dev/intro/tutorial01/

**edit**: i looked at the ibm link, it's really old (django 1.0.2). stick with the official docs, and you should be good to gogithub.

reading open-source projects' code bases gives you best practices in the first place.

related: https://github.com/search?q=django&type=Everything&repo=&langOverride=&start_value=1My best resource really was the Django documentation: it fits my brain well, and made it very easy to figure out how to do what I needed to do.

One area where it does fall down is in helping figure out how to improve performance.  I worry that possibly my 'get-it-done' urges over-ruled my 'do-it-well' priorities, although my sites have all performed acceptably."
2012-05-26 19:02:11;Errors with models;"Adding the fields to the models doesn't add them to the database.  You'll need to either recreate your database (reset the app) or update the database yourself.  Look at the output of from the `sql <app>` command to get a hint of the changes you need to apply.

See the [FAQ](https://docs.djangoproject.com/en/dev/faq/models/#if-i-make-changes-to-a-model-how-do-i-update-the-database) for more information.

If you're constantly changing the models you can use a tool like Django South to manage the migrations for you."
2012-05-25 12:29:33;No-installation-required version of Django for Windows?;
2012-05-24 21:54:13;We're hiring a django developer for redditgifts.  Interested?;"If you're ok with someone working hundreds of miles away in SF, then why can't they just be telecommute?

Also, you mention nothing about compensation/benefits/free beer.Interested, underqualified :(I would love to but can't move (Las Vegas) :(
http://github.com/amccloudI'm interested and rather qualified. I've also participated in redditgifts in the past. What else might this job entail, any sysadmin stuff? I love me some administrating.How about an office in Iceland?

Just one project atm but a fun one!

https://github.com/andrijanOhh! that would be so great, but to far away http://github.com/mariocesar/  http://bitbucket.org/mariocesar/ 

You should always indicate prominently  where the office is located and if remote work is accepted, as a non-US redditor that's always the first thing I find myself looking for. If you would accept telecommute I would have already written up an application.

Most of us mangy senior engineers don't usually relocate easily ;)Hit me up when you understand remote devs are awesome :)"
2012-05-23 17:35:12;London - Django developer wanted for funded startup;
2012-06-04 19:33:08;My Personal Django Blog's Source Codes;"I don't remember where I read that but, naming the files or commenting in your native language is as good as влагалище коровы. 

Static urls in templates. Not a single string is translated with gettext. Jesus even field names are in Turkish. Hard coded loads of stuff. How is that more useful than a tutorial on Djangoproject...You submitted [virtually the same thing](http://www.reddit.com/r/django/comments/txqxy/my_personal_django_blog/) two weeks ago. Since that post included a link to the Github repository of your blog, I do not think that it was necessary to submit virtually the same thing again so soon.Aweasome"
2012-06-04 17:50:10;What is your preferred VPS setup for Django/Python hosting of multiple personal & small business sites?;
2012-06-04 15:49:56;Doing more with your Django models;
2012-06-04 13:11:40;Class-based generic views (anti)patterns;
2012-06-03 20:48:46;Exactly what are class-based views?;"There is a major distinction that needs to be made. Most of the major talk on CBV's is about Generic Class Based Views. GCBV exist to take over the Generic Function Based Views.

Plain function based views aren't going away, and as far as I have read there isn't an equivalent to the normal function based view that is a class based view. The only class based views I have seen or read about is the GCBV.

If a I am wrong and there is a CBV that isn't a GCBV or base class of a GCBV that I should be using when a GCBV doesn't fit the bill please let me know.Well class based views are nice because you can build your own classes you can inherit from, or use Mixins etc.

If you want to build custom CBVs have a look at https://docs.djangoproject.com/en/dev/ref/class-based-views/#simple-generic-views . Those are generic views you can use to base your own views on.

The documentation for CBVs is quite good actually, but it's a little too technical. But I'm not sure a CBV tutorial would be appropriate for the docs. Some examples would probably be useful though.Because it's something that's in the core and django usually doesn't accept ponies. And because it violates DRY principle in a way. And CBVs are documented. Same like FBVs."
2012-06-11 22:06:26;Considering dropping Django's ORM layer and either writing SQL directly or using another language entirely (PHP?) to query the database.;
2012-06-11 17:48:53;Django Podcast: Class vs. Function Based Views;"In case you want to add that to the show notes, I've merged some great improvements to the class-based views docs today: https://github.com/django/django/commit/c4c7fbcc0d9264beb931b45969fc0d8d655c4f83Thanks again to everyone listening, [last week's episode](http://3rdaverad.io/shows/django-podcast/episodes/deployment-for-humans-with-kenneth-reitz/) was a smash with Kenneth Reitz (before he turned on us and claimed [django sucked](https://speakerdeck.com/u/kennethreitz/p/flasky-goodness)) but we thought we'd get a little nerdier in this episode.

Love to hear any feedback you guys might havefunctions being long == greg aker's ""biggest"" reason to like CBVs?  sheeeeit.  the fact that you have squirreled away the complexity in a number of methods existing at multiple depths of the MRO is really no different and may be worse due to the additional complexity.  If a function gets long, you can always write utilities to break it up into logical chunks, which is a good practice for unit testing anyways.

Furthermore, the argument that this is a documentation problem seems to miss the point.  When you augment a pile of code with an even greater pile of docs, the implementer doesn't become a problem solver anymore, they are more like a chef following a recipe.  Recollecting the zen of python, ""If the implementation is hard to explain, it's a bad idea.""This is a great listen. Thanks!"
2012-06-11 09:25:42;Questions about Django static files and filepaths;"Static files have changed a fair bit in recent releases so old blogs might be a bit of a mess. 

I'll give it a shot:

In your templates you can use the static_url tag and django will fill in the path for you. 

    <link rel=""stylesheet"" href=""{{ STATIC_URL }}css/bootstrap.min.css"">

It fills in the static url by looking at your settings file.  STATIC_URL defaults to /static/ I think in settings?  If static files end up in a weird url on your corporate web server you can just change it in settings anyway and it will reflect in all templates. So it doesn't matter if they are absolute.

When you go to deploy you fill in STATIC_ROOT in your settings, this is just the path that you've set your webserver to find the static files. Then if you run manage.py collectstatic and it will copy them to that directory. That's the only function of STATIC_ROOT I think. 

I keep the template directory separate from my static directory, mainly because you want your webserver just to serve static files, while templates are processed by python. So, static files are almost not part of your application as far as the web server views them.  I keep my templates and static files in separate paths just in the base directory, mainly because both are not python source files. 

So my project structure would be like:

    manage.py
    website/settings.py
    app/models.py
    app/views.py
    templates/base.html
    static/js/jquery.js
    static/css/bootstrap.css

The problem with relative paths is that they will need to change if your url scheme changes.

*Optional*:
I found in [this blog](http://www.morethanseven.net/2009/02/11/django-settings-tip-setting-relative-paths.html) which helps to not put absolute file system paths into the settings.py which is good if your working from multiple machines eg work and home :(

With the slightly different layout for 1.4 I use this at the top of my settings:

    import os
    import django
    import manage

    DJANGO_ROOT = os.path.dirname(os.path.realpath(django.__file__))
    SITE_ROOT = os.path.dirname(os.path.realpath(manage.__file__))

instead of what they suggest (the location of settings has moved in 1.4 or 1.3) so SITE_ROOT is messed up. I think that might work.

Further on down in the settings I use this:

    # Additional locations of static files
    STATICFILES_DIRS = (
        os.path.join(SITE_ROOT, 'static'),
    )

This will tell the development server where to find the static files. You can do the same for templates or just use the full file path.

"
2012-06-09 13:21:51;Why Django Sucks, Except When It Doesn’t «  Coffee on the Keyboard;"It's interesting how much this conversation resonates with the Tannenbaum-Torvalds microkernel-monolithic kernel conversation from back on the day.

Pros of componentized/microkernel/SOA architectures: discrete services with accessible, public interfaces are reusable, create less dependencies, more manageable architecture

Cons of componentized/microkernel/SOA architectures: creating reusable services take time and there are performance penalties when the various services/components need to communicate
 
Pros of monolithic architectures: stuff gets shipped quicker, faster performance

Cons of monolithic architectures: code gets complex, more circular dependencies

From what I understand, Tannenbaum lost the microkernel debate because a) linux shipped and b) the performance issues relating to microkernels were unacceptable on modern PCs. In the SOA vs. monolithic web app debate, the performance issue is irrelevant. But as the author in this blog post notes, monolithic apps will always ship faster. Always.The last part is key:

>Django (or Rails, or even Flask with some packages from its ecosystem) gives you a lot in the box. Unless you know that you’re launching to millions of users, it’s OK to take that box and start building.

>If you end up in a place and at a scale where that’s technical debt you really need to pay off: congratulations!

Scaling is a good problem to have. Focus on shipping your product and worry about which framework would have been perfect later."
2012-06-08 19:06:57;Django: Find Most Recently Logged in Users - Gun.io;[deleted]
2012-06-18 15:10:51;Help with Django project;"I'd suggest starting from scratch using the excellent django documentation, especially the [tutorial](http://www.docs.djangoproject.com/en/1.4/intro/tutorial01/).

If you want more inspiration, you can find websites with their source on [djangosites.org](http://www.djangosites.org/with-source/)
I use django-cms with cmsplugin_blog and cmspugin_filer for this kind of projects. You will have to learn A LOT. I hope you are not on a tight deadline.for what it's worth, i don't think you'll learn much about django if you use django-cms... It's really good at what it does but isn't very... ""django"" like.. I'd really suggest building a site from scratch to get the basic understanding down THEN if you find that django-cms fits your needs, go with it. You might also want to check out [Mezzanine](http://mezzanine.jupo.org/).As a long time Django developer, I'd recommend reading the [Django book](http://djangobook.com/en/2.0/) as a starting point.  It's outdated (it's aimed at 1.0, current version is 1.4) but will help you to get a good grasp on things.

After that, I'd strongly suggest just diving in and making a site from scratch.  I'd highly recommend steering clear of any packaged app/cms like Django-cms or Pinax until you know what you're doing as they're likely to make things more confusing for you in the long run.

In the end, it's all Python though so you might want to spend some time familarising yourself with Python if you get confused.

Also, you don't mention what the website you've been asked to develop does.  What are the requirements?  If it's just a static site, then you'd be better off using straight html.  If it needs some CMS capabilities, you'd probably, in my experience, still be better off avoiding a pre-packaged solution and designing for your requirements.If you don't know Django, then it doesn't matter if you use an existing codebase, of if you start from scratch. You're limited by how much Django you know. Learn as much Django as you can is my only advice. Or hire a Django expert to do it for you.Imho in most cases you will not need cms unless you're certain of what you doing...
There are lots of standart recipes for django. They are installable python apps. But you need to completly understand Django apps system. Try completing the django tutorial step by step... It may help... Try to read django docs! They are exceptionaly awesome. Also you may try the book like http://www.djangobook.com/en/2.0/check out pinax"
2012-06-17 19:07:44;Use South to set your sites' domain names;"There is a more elegant solution. Just create all sites that you might ever need in your local development environment using the admin interface. Then make sure that each environment has the correct SITE_ID in it's settings. Then use `./manage.py dumpdata --natural --indent 4 sites > myproject/fixtures/masterdata.json` to dump your sites. I hope that you have a good deployment workflow, which involves running `git pull`,`./manage.py syncdb`, `./manage.py migrate` - you can now add `./manage.py loaddata masterdata` to that workflow and you are good to go.If you've bothered to ensure the correct domain name is your settings at runtime, why don't you just drop the sites framework and use the domain name directly from your settings? Bonus points as you avoid queries to lookup what is essentially static text.

(Also, specifying the subject and body of emails in your views is an obvious and ugly layering violation.)"
2012-06-15 07:04:53;DjangoCon Europe 2012 Videos;The video player from this website is brilliant .  I do my tech. video watching offline while commuting, so a download link is a must.  I couldn't find one there though, did I miss it? 
2012-06-14 17:46:50;Django development with Apache + Static files;I think https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#static-file-development-view is probably what you're looking for.Lookup the collectstatic command in the django docs. i've done development this way as well. we did it so that we could have our development environment mirror production as closely as possible with the exception of the runserver running the app itself.I think you should use nginx+uwsgi.Feel the fast :DIf you run as `DEBUG = False` and set a non-URL-ish `STATIC_URL` (something like `/static.app.com/`), and add the `staticfiles` urls to your urls, all of your static will come through Django and not your web server. 
2012-06-14 15:34:19;Flasky Goodness (or Why Django Sucks?) [video] - Kenneth Reitz;
2012-06-25 19:31:36;Users, Groups and their Permissions in Django + Recipes;
2012-06-25 19:27:04;[x-post r/seattle] Django Seattle Users Group Meeting Tuesday;
2012-06-25 19:05:59;Integrating Django and Filepicker.io;Cool stuff. Didn't know about Filepicker.io before. 
2012-06-25 10:43:20;"Django and Static Files; an overview";I've found creating a /public folder with media and static subfolders is nice, and running collectstatic to them. That way, your static folder stays nice and organized and you don't have to mess with git ignores.
2012-06-24 08:50:23;Stop typing 'python manage.py shell' and start typing 'django s';"[deleted]Or use a proper OS, a shell with tab completion and only type ""./m<TAB>shell"".    $ chmod 755 manage.py No love for shell_plus?!tab complete, does wonders:

    >> dja<tab> she<tab>
    ## django-admin.py shellYou forgot to print the contents of read me file to pypi, as there is a ""<open file 'README.rst', mode 'r' at 0x10d5d1930>"" at the description settings there ;)Bash specific:

    ^R runs RET

Brings up my entire runserver command from history, including prefixed environment variables. All the other shells (except windows') have a similary history function.Just edit ~/.bash_aliases to whatever shortcut(s) you want.Or you could use a Makefile: https://gist.github.com/2987101DJANGO... Y U BECOME LIKE RAILS?

Edit:

Was a joke people. Why all the down votes?"
2012-07-02 19:05:41;Django on Heroku - db:pull using pgbackups and custom manage.py commands;
2012-07-02 00:45:05;Hey Django, I am OCD about my code, and I find crap like this very annoying.  Is there a magically Django templatey thing to help me fix it?;"Are you sure this is not dictated by the way [pre](http://www.w3schools.com/tags/tag_pre.asp) is supposed to work?

How do you want to make a distinction between indentation and meaningful tabs otherwise?

If you really have ocd issues about this you could add css to a div tag to make it behave like a pre. Or your own django custom tag that would render a pre. But you should probably get over your indentation ocd with pre.I derped the title a bit.  Please forgive me. :(if it's your templates you're worried about (and not rendered HTML) try {% include ""code_snippet.py.src"" %}.

Otherwise: Not that I'm aware of.Write your docs in ReST, using the filter tag:

    {% load markup %}
    {% filter restructuredtext %}
    1. Install django-dbbackup and the required simples3 dependancy::
    
           >>> cd django-dbbackup
           >>> python setup.py install
    
    2. Add 'dbbackup' to INSTALLED_APPS in your settings.py file.
    {% endfilter %}

Note that this also correctly turns '>' into '&amp;gt;', unlike your HTML above, making it much nicer to read (A literal unpaired '>' inside a <pre> tag is invalid - <pre> only changes whitespace handling).That's just how <pre> works, everything inside is taken literally."
2012-06-28 20:33:00;Masters of Django's ORM and database connections - IntegrityError/No matching query found problem;"It sounds like request 1 starts a transaction and doesn't commit it's changes before request 2 begins.

Are you setting the commit=False kwarg when you save the first record?"
2012-06-28 17:27:45;Django and Static Files;
2012-06-27 17:59:00;Running Django Under Windows With IIS Using FastCGI;
2012-07-09 21:24:50;any django mezzanine experts out there?;"I think you should replace

    {% for element in page_set.all %}

with

    {% for element in page.periodic_table.element_set.all %}

Or do you really get nothing at all, not even the header? In that case make sure you have the template in the right place (project_root/templates/pages/periodic_table.html). Maybe you could try extending from pages/page.html and define a block main? Shouldn't really matter, but you never know. 

I also once had a problem where Debug was set to False, and some error occurred which didn't happen on my development machine, and it rendered an error-page template, which I didn't modify to use my own templates (which had different blocks), and the result was also an empty page. Small chance it's your problem, but FYI.I had a similar problem when trying to subclass and extend the Blog model. I found a way to extend the BlogModel through field injection. I put my notes here for you: http://pastebin.com/TB32GmAk 

Also the official documentation on this approach can be found here: 
http://mezzanine.jupo.org/docs/model-customization.html
"
2012-07-09 01:26:54;The Beautiful Simplicity of an nginx and uWSGI (Emperor) Deployment;"So, I'm currently using nginx/gunicorn combo. What reasons are there to switch to this combo?

The config looks about the same. Is this just the new hot stuff?
"
2012-07-08 20:46:51;Learning to Hack: the Tipping Point (with Django);"It seems to me that that kid didn't properly read the Django tutorials and documentation or didn't have any ORM experience..or both.

This isn't at all related to hacking in the sense of exploiting weaknesses in a system but more to randomly coding and hoping something good comes out.


> It's about hacking a way to a solution

Sure, if you want unmaintainable code."
2012-07-06 22:47:13;A lesson with inlines that I keep learning;The only thing I ever needed is nested inlines. Nothing else.
2012-07-06 09:16:01;Why Django is my choice ?;
2012-07-16 20:52:01;Does DB performance really matter that much?;
2012-07-16 14:06:03;Conditional inlines in admin?;
2012-07-16 09:12:12;User Fixtures in Django;
2012-07-15 14:46:58;Generating Unique Slugs with Django;
2012-07-15 09:32:50;Django: Unittest for HttpResponseRedirect method recipe;
2012-07-22 22:25:51;Create a custom authentication decorator in Django;
2012-07-22 17:18:35;Google OAuth2 SSO with Django;"There's no need for this setting if you are using the contrib auth app:

    SOCIAL_AUTH_USER_MODEL = 'auth.User'

Great post.Is that really how simple it is to add Facebook / Google OAuthy goodness to Django?  Wow.This is great.  There's always a need for more OAuth info.  Thanks."
2012-07-21 13:57:38;Django password reset tools usage recipe;
2012-07-21 06:19:34;Django 1.4 support for Firebird ready for tests;
2012-07-20 13:35:30;Use models for uploads;"This is the most well-timed Django post ever.  I am planning to implement a file-upload tool for my application in the very near future. 

Thanks @codeinthehole for the hookup."
2012-07-30 23:29:47;Security releases (Django 1.4.1 and 1.3.2) issued;"Just did a live update on my production virtualenv, working nice and smoothly.I should get off my ass and upgrade all my 1.2 code...All updated on my development server. Worked perfectly.

I had `./manage.py runserver` on in the background and it reloaded into 1.4.1 automatically. Seriously Django, you scary.TIL Django has switched to Github and does not update their own subversion repository anymore. It took me a while before I found out why my svn:external didn't have any updates.I'm glad they were willing to break backwards compatibility to ensure a more secure environment.

Now here's hoping they switch the ORM to SQLAlchemy in 1.6! ;)"
2012-07-30 21:47:02;Are there any step-by-step tutorials similar to the default django tutorial (poll app) that shows you how to create user registration and login pages?;
2012-07-30 14:59:56;Automatically invalidate browser cache of static files;"Thanks for posting, but is there anything we can do to improve the included CachedStaticFilesStorage (http://django.me/CachedStaticFilesStorage)?I am not sure if query parameters will invalidate cache on IE https://gist.github.com/3207357#gistcomment-382836 is a key comment: some CDNs and [worse] some proxy caches ignore the query string - you can test for the former but the latter can be a source of maddening errors.

See:
https://developers.google.com/speed/docs/best-practices/caching"
2012-07-30 13:32:06;Django compressor and image preloading;
2012-07-29 12:41:14;15 line function to import local settings while merging/extending dict and list settings;"I'd rather use http://django-configurations.readthedocs.org/en/latest/index.html than ""hacked up"" inheritanceI just use `execfile` instead of `import` to achieve all that in a single line.You should post this to Django Snippets so I can bookmark it with my other snippets.I don't get why people keep using variables named like ""var"" or ""G"""
2012-08-06 05:16:46;Django Calendar Help;
2012-08-04 01:33:09;Django Dash 2012 Registration has Begun;"Just signed up.  Had a blast doing this last year.  Interested to hear from any one else participating.I can't think of any ideas for apps to code. It might be a better contest if they provided the idea and everyone competed on the best implementation. The FAQ on this answers every question I have, except for ""What the fuck is this?"".  It seems to be a time-constrained competition to design and build some app, is that it?"
2012-08-02 19:44:35;South 0.7.6 released;oh wow `--update ` looks nice.
2012-08-02 01:48:28;Django 1.3 bugfix release;
2012-07-31 02:27:14;Scaling a Django Application with Memcache | Heroku Dev Center;
2012-08-13 19:56:49;Tutorial: Using Django's Multiple Database Support;I've been working on a project recently that required two legacy databases and I stumbled across this snippet: http://djangosnippets.org/snippets/2687/. I really liked using this method and was kind of surprised django didn't have something similar built in. 
2012-08-10 03:03:13;Models using Profile as foreign key, is this bad?;"Generally FKing to your User model is better, as there's always guaranteed to be a User model, so it's more portable, and often more convenient to get to the data you need from request.user, but I think there are also less frequent occasions when an FK from the Profile model makes more sense, and I wouldn't say it's the end of the world the way you've done it.I do it the same way and it's never caused any problems in my project. The User model just gets used for auth and permissions.

In fact my arrangement is one level more complex as UserProfile isn't really used directly in my code - StaffProfile and StudentProfile inherit from it and are used everywhere.I think User would be more appropriate probably... is there a possibility of a profile not existing for a user?This is how I do it.

I find it simplifies things quite a bit.  Most of the data I care about is on the profile anyway. So linking things to it makes a lot more sense imo. 

the `auth_user` table just gets used for authentication and perhaps first/last name.

edit: also when i have the profile and i need `auth_user` data (which happens almost never) its just `profile.user` instead of the `user.get_profile()` business in the other direction.
I've done both before, and I think that User is the better one to go with.  I find it's less confusing when I'm looking at the DB with a helper app, and you also get a quick reference to a lot of your data in views like this:

`request.user.something_set.all()`

as opposed to

`request.user.get_profile().something_set.all()`I have done this before in situations where there is more that one type of user profile, each with a set of permissions.  This way a singular user could have multiple profiles if needed.I've always done it the way you're describing because I considered it more compartmentalized (the stuff from X app keys to X's profile because they are all in app X.)  But reading the comments here has me thinking that integrating two apps that use this technique could be tedious/inefficient:

    object_one.profile.user.other_app_profile.object_two"
2012-08-09 14:24:46;How do I modify an app's admin?;"You can create an admin.py in a app that you have locally, and in that admin.py create a new `ModelAdmin`, followed by unregistering the original and registering yours.

For example, say you have an app named ""utils"" and you want to override the admin for zinnia.models.T:

    # utils/admin.py
    from django.contrib import admin

    from zinnia.models import T


    class ZinniaTAdmin(admin.ModelAdmin):
        # Your admin definition goes here
        pass

    # unregister the original admin
    admin.site.unregister(T)
    # and register yours in its place
    admin.site.register(T, ZinniaTAdmin)

Alternatively, you can subclass the original admin and just replace the parts you need:

    # utils/admin.py
    from django.contrib import admin

    from zinnia.models import T
    from zinnia.admin import ZinniaTAdmin as OriginalAdmin


    class ZinniaTAdmin(OriginalAdmin):
        # Your admin overrides go here
        pass

    # unregister the original admin
    admin.site.unregister(T)
    # and register yours in its place
    admin.site.register(T, ZinniaTAdmin)"
2012-08-08 18:55:57;Things to do in DC during DjangoCon;"By the way, anyone in northern VA interested in carpooling?  I just realized 66 is Hov only?

I'm also accepting advice on how to get there from 267 without going on 66...$525 for individuals? *Damn.*

And I thought $80 for Otakon was expensive.What if you're looking for things to DjangoCon while in DC? (student tix are too expensive!)"
2012-08-08 05:40:03;django-test-utils: make testing your Django applications easier;
2012-08-20 21:30:23;Newbies way to learn Django.;"Starting to work with Django is a good way to ""dig deeper into python.""

Read Django's [Getting Started](https://docs.djangoproject.com/en/dev/intro/).  Work through the tutorial linked there.
"
2012-08-19 19:59:45;Experimental Python 3 support in Django;
2012-08-19 13:12:46;Alternatives to using Celery;"Celery is still the best and most mature, regardless of what pylint says.thanks I was going to be googling something like this later todayI loved the anger that there are API changes when upgrading a MAJOR version number.Any thoughts on celery vs. [rq](http://python-rq.org/)?Rage-alicious.  Seriously -- it looks like the guy was importing internal modules then got upset when that caused problems.

Whatever.  If another project is more to his liking that's his prerogative but posting this rage-fest is just him trying to hurt a project that's been nothing but good for a lot of people. "
2012-08-19 10:02:13;A Django Admin Wishlist;
2012-08-18 17:47:51;Firebird Django and the Future : FDB pure python driver , Django 1.4.x;Is there much interest in firebird support for the peewee ORM?
2012-08-27 19:51:19;Django Vim Plugin;"Please feel free to test out my plugin if you are a VIM user and use django. Would love some feedback. To give more of a description. It will setup vim's python interpreter to work with django, setup omni completion, create apps, run commands through manage.py, django-admin.py and has some helpful features to activate a virtualenv and nerdtree to open the project once you activate it. I am pretty active on it and use it everyday.Interesting!
What I am looking for most out of a django+vim plugin is static error detection in templates.  It would have to involve a middleware that checks html output for errors (probably `tidy`), running the built in runserver, and a lot of glue to something like syntastic.  I know it would _really_ help me in the project I'm working on now."
2012-08-25 23:43:11;How should I open source an application I've been working on?;"""How should I open source..."" Toss it on github or google code or other.  

I think you are asking how to market this to potential interested people.  DAT BOOTSTRAPWhen you make it live, post the link here please :)"
2012-08-25 19:43:12;Another guy looking for a coding buddy.;"I'm a recent grad who is fairly new to django but somewhat familiar with python. I had a bit of experience with rails but finding python to be a more forgiving language to trace through. (vs ruby's meta magic)  I'm interested in someone to work with on a few small projects in django so build up my portfolio and (hopefully find a job doing django coding full time)  would love a coding buddy online to collaborate with on projects.

I currently have a fulltime job and I'm taking the algorithms course currently being offerred on coursera so my schedule is also limited. That said, I'm confident I could put in a good 4 hours 2-3 days per week . I also work full-time as a developer, however at work I mostly do ASP.NET MVC. I have written a couple Django apps in the past and love working with it. I have a Django project I've been meaning to redo for a long time now but never seem to find the motivation to start back up on it. I think having someone to work with would help get me going again. I would definitely be interested in working together. PM me if you would like to talk about it sometime!Hey, high school student here. I've made a couple apps in django and I'm quite familiar with the framework. Building up my portfolio is definitely my primary objective right now. School doesn't start for me for another 2 weeks ago I'm free 24/7. If you are interested PM me! Maybe everybody here can get together to make a small project. :)"
2012-08-24 22:08:56;twitter feed;
2012-08-24 16:36:38;Getting Started with Django Kickstarter;" > I'm a 100% freelancer, so my time is very much my money. With a wife and two children, it's hard to take a couple of weeks off to work on a labor of love like these videos.

It's not really a labor of love if you're selling them at the end! If you released them to the community for free, I'd support it for a thank you in the credits (low dollar amounts) - and maybe higher donations would buy them help with their own Django projects (set amount of email questions or hours Skyping / code review). 

Just my thoughts. In your intro video on KS, you may want to create a ""mini pilot"" (i.e. + screen share) instead of just talking about what you are going to do w/the money. In the same 4 minutes, you could give us a taste of those mad Django skillz you are going to share w/us.

Good Luck!I recommend coming up with some creative rewards for you different levels. Something with paper mache. :)I would like to very much support your project if there is any chance this will end up becoming free for all. It took me a while to get started with django and I spent countless hours on StackOverflow finding answers. Something like this would be a great resource for all starters.
When I say free, please note that I do want to see that your labor is properly compensated as well. 10 videos for 500 per video totalling the 5k kickstarter.  
Videos you will be selling after you're done.  
  
This is the kind of project that doesn't belong on kickstarter, it would be if the videos were free afterwards and with a slightly higher goal.  Prepared to take all your downvotes."
2012-09-02 20:22:39;Cacheback - asynchronous cache refreshing for Django;hey, I didn't see the post in reddit, but it's definitely interesting. I was planning to do something like that, I will have a look.
2012-09-02 17:30:59;Any redditors at DjangoCon US this year?;"What's a Django?I'll be there tomorrow.I'll be there but I live nearby. 

I'll be wearing jeans. Feel free to say hi if you see me. I'm here. I want to do commentary on some of the speakers, but I have a feeling they're reading this thread too.I wish :-(I'll be there during the days of the convention.  Mostly sitting quietly since I'm a relative newbie to Django.Will these talks be made public?  A lot of these looks awesome.I arrived this evening. I'm hoping to get some sightseeing (Smithsonian, anyone?) done before I leave next Sunday.@kennthlove (he's giving the Views Can Be Classy talk) and I will be there. Sitting in PDX waiting to fly out to D.C. right now. We're planning on doing the sight seeing thing all day Friday.I'm getting there tonight.Any DjangoCon first-timers want to meet up for dinner and/or drinks tonight?It's strange.  I've been a Django developer for 5 years but I've never really considered going to Django/PyCon.  I go to a lot of other F/OSS conventions, just not these two (even though they're my two primary technology stacks at the moment.)  

Is DjangoCon really worth $525+ to attend?no"
2012-09-02 12:42:39;Forms direct from Models;"You might want to look into [ModelForm](https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/#)s before reinventing any wheels.

[Class based generic views](https://docs.djangoproject.com/en/1.4/topics/generic-views/) would also be worth checking out, something like `CreateView` will handle practically all of what you have here."
2012-08-31 20:57:25;Test Helper Classes in Django Apps;Ummm [Factory boy?](https://github.com/rbarrois/factory_boy)
2012-08-31 15:58:29;Dear Djangonauts, I'm appying for an internship position. Could someone take a look at a piece of code of mine?;"Also, make sure you run it through pep8 and pylint before sending it.  That'll make sure you're using the standard Python style. If you are using 1.3+ then use 

render(request, 'signup/premium_payment.html')

not

return render_to_response('signup/premium_payment.html', context, context_instance=RequestContext(request))

much easier to readI'm not sure if this is a good advice for you but stuff that impresses me is something demonstrable. Instead of just sending out some code run it somewhere. Stuff that you can play with is worth more than some code that respects some arguable best practices - it shows that you can deliver. Just my two cents.Comments? Only 1 line of comments in ~150 lines of code. Why don't you have a running instance of the site somewhere and link it here? And post the code on github.https://gist.github.com/3555706

here are my quick edits:

user @require_login on your view because you are assuming a logged in user

you don't need if/else for a post. check post, be done with it or it is a get.

stripe.Customer.create not sure where this guy came from though I assume it is some import?

Not using forms for your submission? just relying on pure post is a great way to get in trouble. no validation going on.Keep JS in separate file.Had a quick look and I have a few comments:

* Nice and neat overall, good job.

* I would separate the JavaScript out to a separate file.  It's easier to manage and also makes your source control make more sense / gives you finer-grained control.

* I can't see that you've closed your {% block extra_js %} anywhere - unless I'm missing something?

Best of luck with your internship application, I hope you get it.  Just the fact that you've put the effort into doing what you've done here today would score you serious points with me.You should post it on pastebin, and link it."
2012-09-10 13:52:04;Does anyone know when the DjangoCon videos are being released?;"They often show up at pyvideos.orgFound this on twitter: 

... we’re not doing live streaming but the videos should be posted in the next few weeks // via @theSeanOC

3:37 PM Sep 6th via Tweetbot for iOS
http://twitter.com/djangocon/status/243704578938380288Does anyone have a status update?  Its taking quite a while. "
2012-09-10 12:26:54;Dear Django, help Python Packaging;
2012-09-10 08:13:07;Prefer WebTest to Django's test client for functional tests;My point is why not use selenium instead of WebTest? 
2012-09-10 07:02:56;Noob here, looking for open source django projects/apps that do video distribution. Anything similar to youtube/vimeo/hulu/netflix/etc.;
2012-09-10 05:42:36;Duplicating / deploying a project to create multiple instances?;"You have one instance of the software, one database, one uploads directory, etc. Each user signs up with their own account, when they add blogs, they all get added to the same database table.

The admin you speak of will have to be something you build, the django admin is not intended for the 'customer' use.

When a user logs into their 'admin' interface, you only show them blogs that they wrote, by filtering by user_id. But all blogs from all users are stored in the same table. Thats how all sane web development is done. Unless you plan on having your customers run/manage this software on their own machines...If you want your sites to be completely independent and customizable then you could deploy a new site on a VPS for each customer. It would be a manual process to deploy a new site and keep it up-to-date (unless you want to invest the time in automating it).

If your customer are more 'clients', each paying you regular good money, then that may be the way to go. But if your customers are anyone from the web, and you are expecting many sign-ups then the effort involved in setting up a new server with an independent database will hardly be worth it. Better to write your app so that you can make it appear as though each customer has an independent instance (see freework's comment).I would try and contain as much of your project's content in apps (take advantage of app template/static dirs), then bring them into your project/environment via pip.

That way, those apps can be maintained as separate repos, and whenever you update one, you can just use pip to install the updates into your project environments.  This can easily be automated by fabric, etc.

As far as db migrations go, follow up on those references to south and master it.  You'll find that once you do, the only command you'll need to issue after an update is `./manage.py migrate`."
2012-09-17 19:59:04;AJAX in Django with jQuery;"I would use a decorator to avoid a DRY violation on all of your AJAX views. There are literally 100s of these floating around the internet.

I would also not hard-code the endpoint URL in your javascript when you have a neat urlconf  system built into Django.I pass all my urls through the templates, using the urlconf system. And in my urls.py I split up, normal requests go to views.py, ajax requests go to ajax_views.py

I do tend to distinguish between normal and ajax calls. To keep in line with DRY, I just put the reusable function parts in helper functions or an utils.py module."
2012-09-16 03:42:27;New to django and am stuck! Any help would be appreciated.;"I am the poster over on SO. I thought I would see if you guys could help too.

Thanks"
2012-09-14 07:16:28;Use DB views to workaround django ORM limitations;
2012-09-12 12:16:01;Django FB authentication;
2012-09-11 22:12:50;filter, spurious tuples and distinct;"Instead of creating temporary models just to save them to the database, you can use the `create` method of the model manager:

    p1 = Person.objects.create(name='Orlando')
    ph1 = Phone.objects.create(person=p1, area_code='770', number='1234567')
Where did tuples, spurious or otherwise, even come into that?"
2012-09-24 20:39:26;Django project file structure;
2012-09-24 15:38:49;"I'd like to extend the ""Poll / Choice"" tutorial to have a ""question bank"". The question bank would be a standard set of polls with questions that pollsters could use to create their own poll. (Django newb inside looking for sanity check.)";"I don't understand any of the copying stuff you're talking about and I think you're overcomplicating it.

You just need two ForeignKey (or ManytoMany) fields on each question. One to Questionbank and one to Poll.If anyone is interested I'm actually trying to code up an application to help people manage audits. An ""audit project"" holds ""work programs"" which hold ""work steps"". Each of these has other attributes and methods in it. In my example audit project == questionbank, work program == question, and workstep == choice. I posed it this way because I thought people would be familiar with the tutorial. So far I have coded the models for my audit, work program, and workstep apps and I can use this to create my ""master"" copy."
2012-09-24 02:46:40;Quick guide on getting started with Django on AWS Elastic Beanstalk. Feedback is welcome!;"This was amazing and very informative. I'm wanting to get off rackspace cloud and I think this is my route!Thanks, I am on webfaction right now for prototyping, do you recommend moving to Aws for launch or wait to see it takes off. I am hoping it could get a thousand page view a day during betaExcellent guide. Any ideas on how to reference TEMPLATE_DIRS on Amazon's server? I got the local version working, but I'm not sure how to absolute path to a template folder in the main project directory.

* Edit * 

I solved this by using the method you reference the static directory with in the guide. "
2012-09-22 08:18:21;How, What & When to test django models and views;"Why are you writing a test to see if the model instance was saved to the database? Isn't that covered in the Django tests?Thanks for sharing: reading those tests gave answers to some of the test-related uncertainty I have had for a while.

Can anyone comment whether those view-related tests were a good example? I've always held a view that you have one test function and one test assertion per it.Kudos for sharing one organization's preferences and opinions on testing.  This sort of information is less sexy than ""look what I built!"" and ""here's how we figured out this interesting problem"", but maybe more useful.

Thank you.Thanks for sharing.. but for me I find this sort of unit testing fairly pointless compared to a functional test using something like Selenium."
2012-09-21 16:12:34;Avoiding database queries with Haystack;
2012-10-01 19:09:17;What are your favourite project bootstrapping tools?;
2012-10-01 11:34:19;Contributing to Django Documentation, Part 1: Generating and Editing Documentation Locally;
2012-10-01 00:15:14;Tendenci. the open source Content Management System (CMS) built for non-profits. Runs in Python, Django and PostgreSQL.;"What's the licence? 

I see on http://tendenci.com/pricing/ that there is pricing.

Are there differences between the open source and the paid versions, or are they the same?Why is Postgres forced?Are there any images about what this looks like, or anything before installing it? I checked the site and the github... but couldn't find anything."
2012-09-30 21:13:38;ScraperWiki is a django project !;I've been using scraperwiki for scraping work for a while now but never look beyond that. Today while searching on google if possible to run the scraper detached from my browser, I found a link to bitbucket issue queue which lead me to the source of scraperwiki. I've been wondering what's the tech behind it and never expecting it's an open source application and even more, build using django !
2012-09-30 14:11:56;Advice for class models in a time sheet app;"I really prefer a timesheet to be as flexible as possible. I'd probably opt for a simple Work model with a user, date, duration field and description. At the end of the month you'd query for all ""Work"" with a date between the first and last day of the month. No Timesheet model needed. 

You wonder how to link the Timesheet and TimeDuration models in your existing code. Easy: place a ForeignKey on the *TimeDuration* model pointing to the Timesheet model. This will add a reverse relationship to your timesheet model so you can recall all TimeDuration records using timesheet.timeduration_set. 

The Django docs contain abundant information on how form and model validation works: https://docs.djangoproject.com/en/dev/ref/models/instances/#validating-objectsI'm doing it a bit differently in https://github.com/pkropf/tempus/blob/master/tempus/timecard/models.py. There's a Timecard and multiple Stamp instances associated with the Timecard. The Timecard has some code to pair up matching clock in and out Stamps and to calculate the hours for a particular day or total for the Timecard.Have you looked at [django-timepiece](https://github.com/caktus/django-timepiece) ? I've developed a time-sheet application myself.  I highly recommend adding either a ""reviewed"" BooleanField on the ""timesheet"" model or include a ForeignKey to a review model (to store more data.)  I did this on my timesheet application because I would have employees frequently add a timesheet under the wrong date and it would be lost in my weekly snapshots.  It would then be floating out there erroneously and if I were to look at that timesheet years from now I may actually believe that person worked that day for those times even if it didn't make sense.  My secretary's login defaults to a page where it shows all timesheets that have not been reviewed and she has to review them before they are archived. "
2012-10-08 21:02:54;Django + Ajax: What's the right way?;
2012-10-08 19:10:41;"Getting Started With Django
Kickstarer";"I loved these videos and they actually inspired me to make a little batch of my own. I can't wait for the next batch to roll off the line.

Kenneth, you lurking? When can we expect the first one? Also, could you dumb it down for us newbies? I felt like your last batch was great but the pace was a little fast.

Great KickStarer!"
2012-10-08 16:27:51;RESTful API Playground as a Django Application;"What are you using for the API side?  Or is that part of it?  It looks like thesis strictly the testing side right?
"
2012-10-08 02:04:12;Django Internal Server Error;Your Python Path is wrong somehow and it's not finding DjangoUwsgi is it pointing to your virtual env? 
2012-10-07 04:27:37;The new easiest way to use CoffeeScript in your django project.;
2012-10-15 19:47:56;Client-side Form Validation Based on Django's Field Requirements?;
2012-10-14 21:21:52;Learning, hit somthing that confused me.;
2012-10-11 22:13:58;The scourge of slow tests (and what to do about it);
2012-10-11 20:00:36;Django-Sliver - lightweight REST API built on CBVs;"I built this after working with [tastypie](https://github.com/toastdriven/django-tastypie) for about a year and getting fed up with how over-architected it is for most of my needs.

Please don't rely on this for production needs right now; I just wanted to get it out there and see what people think of it's design.  The API is definitely not fixed."
2012-10-10 18:38:48;Looking for partner to finish/polish my Django Site!;
2012-10-21 13:05:19;Django Software Foundation calls for board nominations;
2012-10-20 01:47:53;Postgresql Index -- n00bie Q's;"Do something like this:

    articles = Article.objects.all().order_by('-year').prefetch_related(""page_set"")First things first, add pagination in there. Don't fetch ALL the records and iterate over them all.

Edit: You might also want use the select related feature. https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related and if the number of pages can be toooo long then limit them to a small number in the template with a 'more' link that shows the complete list of the pages (again paginated)"
2012-10-19 10:00:59;I'm trying to extend the User model with custom profiles. Having a bit of difficulty...;Next version of django will re-do the User class and how you extend it, if you want to skip the whole profile-thing you can use django 1.5 from github which has replaceable User-modelsThis is now solved.Just my 2 cents. Don't create UserProfile using signals. It's a bad practice. For instance, if you create an admin user during the syncdb, the signal will fail because usually contrib.auth syncs before other apps - in this case the app that stores UserProfile model. Better way would be a management command, or auth backend that would create a user profile once the user logs in.
2012-10-17 22:50:27;Django 1.3.4 and 1.4.2 are out for security patches;
2012-10-17 17:41:09;"DjangoCon Europe 2013 ""Circus Edition"" announced - complete with ""a real circus tent with all the circus extras""";
2012-10-29 10:34:01;Django + tinymce problem;Honestly, it's probably a static media serving problem. Either way, a WYSIWYG editor is fundamentally broken. You will learn to hate it and wonder why you never switched to Markdown or something sooner.[This](https://github.com/aljosa/django-tinymce/blob/master/testtinymce/testapp/admin.py#L9) or [this](https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_overrides).Thanks for asking about this.  I, too, had problems with TinyMCE, but I have been wanting to go back and make it work.  Use 'js/tiny_mce/tiny_mce.js' and 'js/textareas.js' paths.
2012-10-29 02:47:59;Tips for managing Template Context?;
2012-10-28 17:22:17;Anything you wish you knew when you were just getting started?;"Apps are your friends. Use them wisely and don't try to put everything in one giant mega app.  I did that at first and ended up with huge and un-maintainable code. 

It took me forever when just starting off to figure out what exactly an 'app' was and what, exactly, I was supposed to put in it. Apps are supposed to be 'loosely coupled' but if you're doing anything non-trivial, it's going to be hard to keep them entirely decoupled.  That's ok.  The general rule of thumb is any time where you might have a bunch of files, say in php, like 'members_db.php' and 'member_views.php' or 'member_profile.php"" that all have the same prefix (or whatever your naming convention is), put them all in an app.

One more thing, I usually create a seperate 'base' app that handles the low level application logic like the homepage, 404, 403 and 500 pages and logging users in and out.  Keep that very simple because that is going to be the least re-usable app.  Anything you think you might want to use again, put in a more specific one.Something I realised way too late is that *Django is open source, I can read the code when confused or unsure*: https://github.com/django/django

It's obvious of course, but it took me a while to get into the habit of checking the source instead of trying to find obscure details in the documentation, StackOverflow or mailing lists. After this, my understanding of how Django works grown much faster.Eventhough there is a large number of 'third party' apps available through github, bitbucket, pypi, etc make sure to review them properly before using them.  
Reinventing the wheel is something you don't want to do but grabbing random packages that haven't been supported in years sometimes create more work for you than writing the app yourself.  
You'll learn the hard way when one of your major projects revolves around a base app that has been abandoned and you're stuck with rewriting large parts of the code with no pull requests being accepted on the main repo.If you're tempted by the big monolithic apps like django-cms or Satchmo be sure and check out their leaner, more modular cousins first. djangopackages.com can help you survey the landscape.Get started using Class Based Views sooner rather than later. The docs don't do them justice with regards to just how crazy extendable they are. Interactive mode is your friend. You can save SO much time by writing your queries interactively in the shell and viewing results in real time. 

Use [shell_plus](http://packages.python.org/django-extensions/shell_plus.html) instead of the default shell and all your models will automatically be loaded when you launch the shell. 

I'm only starting with Python/Django myself... so far this is what I've learnt: use South, use git, read [this article](http://dabapps.com/blog/higher-level-query-api-django-orm/) (and the article mentioned in the comments), read the docs (they are awesome).Coming from PHP, I think [static files](https://docs.djangoproject.com/en/dev/howto/static-files/) were the biggest WTF PITA. Class-based views and/or generic views instead of function based views. 

* django floppy forms
* django crispy forms
* separate your dev/prod settings.py
* separate your dev/prod requirements.txt (for PIP)

Disclaimer ** this is my blog post: http://www.barrymorrison.com/2012/10/zero-to-django-in-4-months-what-ive-learned-part-1/

Page 48 of this presentation:  http://www.slideshare.net/itisreal/rails-vs-django-study-presentation

I can't tell you how helpful it was for me to finally have a visual depiction of the flow of the ""machine""A lot of things:
1) Don't use an external tool like Djangostack if you can help it - they are often buggy. A native install should be painless.
2) ""App"" doesn't mean anything special; it's just a module.  You won't always get to reuse them as much as you'd like.
3) The admin and generic views are your friends!Get to know the class based views.  This site helps you inspect their composition and APIs and is totally, totally invaluable: http://ccbv.co.ukThe biggest thing I wish I knew was: Inclusion template tags are easy as hell. The ""custom tag"" documentation has all the crazy parser-related stuff up front, and like 90% of tag implementations (noob and otherwise) can be taken care of with either inclusion tags† or (even easier) with ""simple"" tags^§ – the implementation instructions for both of which are buried on the custom-tag doc page.


† https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-tags

§ https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#simple-tags

I had my facepalm moments when I started using django, but right now I wish my predecessors knew some stuff about django before shoving features all over :

* django is a framework, so when you add a feature, think of it as a hook, not just a bunch of utility functions
* When you create a model you have a nice MyModel.DoesNotExist exception. Use it please. And think twice before thinking you're smarter than django core developers and make your own, horrible, ""get_or_none"" wrapper.
* extend your project by creating applications. Whatever you find at the root of the project is not just a bunch of folders.
* as in any other project, take a deep breath before you name anything ""utils"", ""common"", ""misc"", etc. You'll realize it smells quite bad.
* don't import models from your package's \_\_init\_\_.py
* even if you inherit a database make your life easier and make sure syncdb reproduce the very same structure.
* django's test cases can live in a transaction. If you have to cleanup your test data after each test case, you have a problem.
* don't let pycharm autocomplete import ""settings"" for you. It's from django.conf import settings, or you'll run into problems and/or lose nice features.
* don't reinvent your transaction mechanism
* django's ACLs are quite flexible and extensible. Don't reinvent your own system, extend this one.
* it's nice to display lists of records with all their related data, but please use django debug toolbar and see how much queries are needed to display them. Use select_related, prefetch_related, or even subclass queryset to cache data, or it'll become unusable over time.
* your models are classes, not just database wrappers. Operations on this model belong in this model's methods, or its manager.
* forms can just layout themselves. And the pattern to use it is : GET request : display initial form ; POST : if invalid, display page with errors, if valid, redirect to the same page so hitting ctrl+r doesn't repost.
* on the long run syncdb and south are smarter than sql you write by hand. Because you'll forget all the time to create indexes on foreign keys. Custom SQL is ok for database-specific operations.
* runaway screaming if you find yourself writing template inside python code. I'm talking to you, django_tables2.
* Metaclasses are powerful but wonder first why you can't do what you want to achieve in \_\_init\_\_ and simpler mechanisms like hooks, inheritance and composition
* python is object-oriented, and many refactoring patterns will apply. One of the bad smells you may have is a bunch of functions which take the very same object as the first parameter.

Sooo ... stopping there. Hope it'll help you not having a guy ranting after you, despite all the visible efforts you did to build something that works :-)Not everything has to be an app - all an app _really_ is is a module which contains a `models` module (and `templatetags` if you need 'em).

You don't have to put _everything_ in apps - if you want to give your ""project"" some models, you can stick your project module's name in `INSTALLED_APPS` so Django can find them.

Once you get a feel for where the extra modularity an app can provide is useful (e.g. completely reusable apps), it's easy enough to extract them out, but don't forget you also have Python modules if you need to split things up in the meantime."
2012-10-28 17:04:39;Easy testing django models and forms;Good stuff here.
2012-10-26 00:22:15;Django 1.5 alpha 1 released (including configurable User models, Python 3);I was always thinking that lack of posts and comments in this subreddit may mean that django does a quiet fine job. May be is not the one perfect tool, but helps people create projects, being productive, make a living. I am thankful anyway.
2012-11-05 10:10:43;The missing documentation for django.utils.datastructures;
2012-11-04 10:08:18;What does concurrency in web server mean?;"Concurrency means being able to serve multiple requests at the same time.

When writing your web app you first of all have the presentation layer, which is your CMS. This can be webapp2, django, or a simple PHP script. They all pretty much do the same thing: take a request, grab some data from a file or a database, and then output it.

Then you have the web server which handles all the incoming connections from users, this farms it out to the presentation layer, grabs the results back, and sends it back to the user.

The simplest web server is just a loop that waits for an incoming connection, processes that request, then waits for the next one. The django test server does this. This has 0 concurrency and is never used in practice as it's incredibly slow.

At the beginning the industry used CGI, which took a request and spawned a new Unix process to handle it. The advantage of this is that it is simple to program, and a rogue script could not take down the web server, only the process it was running in. However each process is like a virtual machine and it consumes a lot of resources to start up and shut down for each request. This limited its concurrency.

We then moved onto web servers such as apache, which run a configurable number of virtual threads. Each thread is its own virtual machine, and the number of threads is its concurrency. ie how many requests it can process at the same time. This number needs to be tuned to get maximum concurrency. Too few and users trying to connect will get an ""engaged tone"" (timeout). Too many and your CPU will be stretched jumping between requests and the whole server will slow down to a crawl and possibly fall over.

You can tune a server to be more concurrent. For instance lighttpd makes itself as simple as possible, reducing the CPU per request thus increasing concurrency, but at the expense of limited functionality. Hence it is often used to serve images, whilst apache serves up the HTML through django.

There are many ways to improve concurrency. Connection pooling, caching, etc. The idea is to limit the number of shared resources that a thread needs to wait on.

appengine is just Google providing a lot of web servers, each running a fixed number of threads. They just take your webapp2 or django application (django needs slight modification to run on appengine) and run it across as many threads as required to keep load level to an acceptable threshold.

If you want maximum concurrency, ie to process the maximum number of requests possible at the same time, then you will need to use an asynchronous thread. This means the moment a thread hits a wait request (for instance trying to request a resource) it goes off and does one of the other threads until it's notified that the resource is available. Look up greenlets and gevent.

gevent will absolutely blow away other methods for concurrency, but it's rarely used. You have to specially write your software to be concurrent, and it's less intuitive than farming procedural to threads. Programmers are more expensive than CPU. It's cheaper to double your CPU than hire a programmer to write and maintain async server code.

So in short, django is as concurrent as the web server you run it on. And the bottleneck is rarely concurrency. By the time gets the amount of traffic it becomes a problem, it's generally worth enough money to pay somebody else to worry about it.

Phillip.Wiki :

>In computer science, concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. The computations may be executing on multiple cores in the same chip, preemptively time-shared threads on the same processor, or executed on physically separated processors. 

TLDR : connections at the same time .

Imagine a lot of requests in a short span of time , for example 10.000 requests  at the same time . So connections on the same time are called concurrent connections . Probably because the requests will *compete* for resources and they will become part for ""the same race"" . Django can be concurrent, this is more of the server's job. There are several models for concurrency: synchronous, asynchronous, threaded, pre-forked, evented, etc. Which one is the best for you pretty much depends on your app."
2012-11-03 16:05:07;My vagrant setup on OSX - Reinout van Rees;
2012-11-02 18:52:34;Introduction to Django Selenium Testing;
2012-11-02 15:23:09;Coding / Mentor / Learning Partner;"I've been working on someone else's Django (1.2) code for almost 2 years now but just recently started writing my own site(s) using it.  

I still feel like a beginner in some ways, so I'd be willing to do this if you'd like!Just ask questions on IRC!  :)I could chat/talk on skype a little bit :) pm me if you would like to use this way of communication for coop :)Sure!"
2012-11-11 11:36:51;Following Djangobook tutorial. Stuck on chapter 5! I was wondering if anyone could help me out!;"I don't have a stack overflow account so I'll post it here. You seem to be misunderstanding the relationship between django and mysql. MySQL is completely independent of django. You must be running MySQL separately and then django connects to it. That is why it's saying it can't connect to MySQL through the socket, because MySQL needs to already be running.

EDIT: If you're just learning it might be easier to use SQLite until you get more of an understanding of the database.TBH the troubleshooting answers on SO are pretty good.

- You had errors in the config which you have fixed
- You are running MySQL on a non-standard port or address which needs to be set in the config
- You don't have MySQL installed locally

If you post a question on SO and then find errors, fix them and edit the post so that people can help you track down what is still wrong. Also write what you did to fix those errors because it helps everyone else who runs into these problems.

What I'd do next...

1. Type MySQL in a shell and see the result
2. Post how you installed MySQL. Did you make a table for Django to use already?
3. What OS are you using?Just a heads up, I was mocked for using the Django book on IRC. I don't know of alternatives because no one was interested in actually being helpful.You might not have MySQL running.

OR, you have it running, but it's not on your PATH.

OR, maybe it's not running on the default port number."
2012-11-10 11:21:08;Can the intro tutorial be extended with user logins? And an intro to South and version control?;"[deleted]Doesn't everyone just tend to use django-registration?Since the Django documentation (including the tutorials) are not static, I think the community would be better served if this ended up being committed back into the documentation. Otherwise, other new users in the same situation would not be able to find your new tutorials.

There has been [talk about extending the tutorials](https://code.djangoproject.com/wiki/TutorialImprovementSprint) before. You can also see [recent changes made to the tutorials](https://github.com/django/django/commits/master/docs/intro) in the Git repo; a new one was added less than 2 weeks ago.I think that extra tutorial material for the user account system, including the models and some of the default views would be helpful and within the scope of the Django project.  However, South and version control really shouldn't be in the Django tutorial, as South is a separate project and [has it's own tutorial](http://south.readthedocs.org/en/latest/tutorial/index.html), and version control is widely varied and thus is out of scope for the Django tutorial.

In addition, South is not the only database schema migration tool that exists for Django, which is another reason why it shouldn't be in the official tutorial - there's no reason for the Django team to bless any of those projects over any of the others.Read the documentation. Look at the django.contrib modules. Examples of most of what you describe is there.South is one of those things you kinda pick up along the way while working on projects... 

http://gitimmersion.com/ is a good tutorial for git "
2012-11-09 22:33:25;"TIL it's not a good idea to end a model field name by ""_id""";"Sounds strange. Are you sure you didn't have two fields named **abc** (foreign key) and **abc_id** (not foreign key)?ModelForm does no such thing, I think you're misunderstanding something (though I have no idea what as ""weird stuff will happen"" isn't very descriptive).Even if you don't define it as a ForeignKey? Interesting, thanks!"
2012-11-09 22:28:40;Django 1.4 TEMPLATE_CONTEXT_PROCESSORS not in settings.py. Is that normal?;That is normal. There is a default set ([docs](https://docs.djangoproject.com/en/1.4/ref/settings/#std:setting-TEMPLATE_CONTEXT_PROCESSORS)) but they are not included explicitly in settings with startproject. It is normal, unfortunately.  This is a handy thing to fill in when using [project templates](https://docs.djangoproject.com/en/dev/releases/1.4/#custom-project-and-app-templates).
2012-11-09 08:39:55;Help deploying Django Apps;"I'd stay with Heroku if I were you and just use S3 and django-storeage for your file needs. Will likely save you some time/headaches and can learn the other stuff as you really need it or have time and want to play.I recommend using nginx and gunicorn with django if you've got your own vps.

Once you've got nginx configured (which is fairly simple) the rest of it is easyWebfaction will probably be the simplest way to get going. You can set up a working Django site via the control panel and they have excellent support if you get stuck.

If you struggle with setting up Apache then it sounds like you are probably out of your depth running your own VPS (and I don't mean that critically - I'm not far beyond that stage myself).

A good Django-friendly shared host will be the best way forward until you really need the flexibiity of a VPS and have a good sysadmin to help you manage it. I'm happily running 20+ commercial sites on Webfaction some with moderately high-traffic.

BTW This honestly isn't why I posted but if you do end up using Webfaction then you could sign up with my [affiliate link](http://www.webfaction.com?affiliate=andybak) and make me happy :)Using Django with Heroku and S3 is easy when you've done it a few times. I've documented my own deploy procedure and settings in the readme file here:

https://github.com/etianen/django-herokuappI would take a look at Linode. They basically give you server space and you can do what you want with it. For those scared of setting up your own Linux environments, they have great tutorials for setting up server security, nginx, postgres, etc. 

Been using them, for a few years and love it.You should take a look at the [Django Friendly Web Hosts](https://code.djangoproject.com/wiki/DjangoFriendlyWebHosts) page as well. We run it on [Ubuntu Server](http://www.ubuntu.com/download/server) LTS (12.04), because it has support for python 2.7, and more importantly, an prebuilt Nginx uwsgi plugin.

[Nginx](http://nginx.org/) handles your static files, and proxies the rest to [uwsgi](http://projects.unbit.it/uwsgi/). You can set up uwsgi instances like you define virtual hosts (different files for different sites), in many config formats (ini, yaml, etc.). Both come with a init.d file, so they are easy to manage (no supervisord needed to manage different processes). And it's fast. And Nginx can do reverse proxying (no HAproxy, pound, etc, etc needed)

I myself have a VPS too and run it this way. If the instant dynamic scaling is something you need, I personally think you'll be better off at Amazon. Try some different config on your VPS (or in a VM) first, experiment with it, decide what you like, and run everything at one place for small sites. Makes it lots easier to manage.Using your own VPS with Django isn't too bad. There's a lot of support for using Apache, which is pretty plug-and-play. For a VPS provider, use [Linode](http://www.linode.com/).

If you want an easier host, [WebFaction](http://www.webfaction.com/services/hosting) is good."
2012-11-19 17:06:12;Django version of Ruby Toolbox;
2012-11-18 18:30:24;I made a Django report builder. Basically a GUI for Django ORM targeting admins and end users.;Awesome. I was just about to do something similar. I don't think the business people enjoy my 8MB CSV files.Looks great - what is the license? Thanks a lot! I am currently creating an online punch clock with django and this project here would be a great way to generate reports or timecards easily
2012-11-18 00:37:42;why is there no one true installation process for django?;"This is not Django's problem--this is Python's problem, but it's actually more or less solved. There's really only a few ways to install things, all of which are more or less the same: downloading and installing manually, `easy_install`, and `pip install`. Using `virtualenv` is completely out of the scope of this--it's a personal choice. You can have multiple sets of installed Python packages (in case you need to have, say, Django 1.3 for one site and 1.4 for another) with `virtualenv`. That's it. There's no relation between needing to use `virtualenv` and the procedure for installing Django, as written on the Django website.Use Homebrew (I'm assuming you're on a Mac) because it gives you a non-system version of Python that you can actually update whenever you want and doesn't require `sudo` for installing stuff.

My workflow:

    $ easy_install pip
    $ pip install virtualenv

(The two commands above are only needed when you first install Python with Homebrew.)

For a new project:

    $ virtualenv myproject
    $ cd myproject
    $ source bin/activate
    $ pip install django
    $ django-admin.py startproject myproject .

(Note the dot at the end of the command).

This keeps everything tidy, separated and upgradeable.If you're installing Django for development purposes on your machine; you should use `virtualenv` and `pip` so that you create a sandboxed environment with all the packages your app needs and none that you don't. By the time you've got three or four python web projects in progress you'll understand why investing the time to learn how to use `virtualenv` properly is not at all wasted. And being able to say `pip install -r requirements.txt` in the top-level of a freshly cloned repo means that you don't waste time looking for random things that are needed in that project.

If you're installing it on one or more servers, it's going to depend heavily on the context in which you're using it. There isn't one true way to install Django because  Django is plumbing and while the tools ( views, templates, context_processors, etc.) are the same from job to job; the specifics of how they are put together is different. A simple-minded CMS application is going to have different needs than a 10,000 member social networking app whose members look at an average of 4 profiles per visit and perform an average of two actions tied to outside APIs per profile view. 

Oh, and don't just use `virtualenv`; use [`virtualenvwrapper`](http://www.doughellmann.com/projects/virtualenvwrapper/)
it will save you much time, many keystrokes and much frustration.I've found this quite helpful: [Starting a Django 1.4 Project the right way](http://www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way/)This is the ""true"" way to install it for beginners (and it does mention virtualenv, so I'm not sure what you're looking at): https://docs.djangoproject.com/en/1.4/topics/install/#installing-official-release

There's no one way to do it because there are a lot of different things to consider when installing software--no one way is going to work for everyone. Installing in production is very often different from installing in development--that's true for most software, really.In manage.py:
sys.path.append(""/path/to/django/source/"")
This is what we use at my office to support multiple custom django versions for different apps written over the years.Here, check this out: http://docs.python-guide.org/en/latest/

"
2012-11-17 00:34:55;Pros and cons of passing arguments via session variables?;
2012-11-16 17:36:02;django/database related quest;
2012-11-26 20:20:35;Django Seattle Meeting Tomorrow (tues 11/27)!;
2012-11-26 18:42:33;Excited about Django 1.5, so am I;As awesome as Django 1.5 is looking to be, this is an awful blog post. [deleted]
2012-11-26 10:27:47;django-flexisettings: an effort to bring flexible yet powerful settings to django (xpost from r/python);"Your \_\_init__.py file still references ""fashionme_web"" in the comments. Any reason you're using `exec` instead of `__import__`?

I think it's an interesting way to solve the problem of settings in Django. However, I think most people who need such complexity use [Zach Voase's settings convention](http://blog.zacharyvoase.com/2010/02/03/django-project-conventions/) which just imports a default/base settings module into environment-specific settings. It's cool that you split security into its own thing, though.I finished coding this as part of a bigger project for the company I start wih a friend. Let us know what you think about it and the ways we could make it a better solution!"
2012-11-26 00:43:49;Extending Django's Model.save() Method | Re-Cycled Air;
2012-11-24 04:49:06;I need a little help understanding billing and payment;"We use Stripe, which has very simple js and python libraries. Highly recommended for rapid implementation.1. Satchless and Satchmo are more ecommerce solutions than just billing and payment frameworks.

2. When Bob clicks buy, if you transmit the credit card info to your servers, you are knee deep in PCI compliance. You pass the information to a payment gateway which responds yay or nay. Behind the scenes the card issuing bank, visa, your merchant bank and a credit card processor are all involved.

I would look at Braintree Payments and Swipe. They both have very programmer friendly reputations.So you have three things to think about:

1. A shopping cart application that allows to customer to gather items and checkout, including discounts, coupons, discounts and sales, shipping charges, customer service orders, call center orders, order history, notifications, etc.

2. Payments, including either on-site or off-site checkout, payment gateways, payment processors, merchant accounts, PCI compliance, SSL, refunds, credits, chargebacks, etc.

3. Order management, including fulfillment, shipments, order tracking, cancellations, refunds, returns, lost & damaged re-ships, etc.


You can make things as simple or as complex as you like (a Wordpress plugin, a full-on customized cart/order management system).  I've found inventory and order management to be the more complex animals.  Sales, coupons, and specials tend to be the biggest PITA in shopping cart space.

Regarding payments, [PayPal](https://www.paypal.com/webapps/mpp/merchant) has a decent explanation of the different kinds of options you can use (Offsite, Gateway/Merchant combined account, or Gateway only).  Their APIs also differ depending on what you're using.

I've had good luck with Authorize.net and it's parent Cybersource (for foreign currency payments), but you should look for a Gateway that offers the features you need: CC storage, recurring payments (though I'd use the CC storage with my own managed recurring due to out of stock situations), etc.

Anyway, it gets pretty complex with any significant order volume (100+ per day), so be prepared depending on your customer.  And good luck!If you're looking at ecommerce solutions, I highly recommend LFS. It's very modular and lightweight, very django-like.

If you need just the payments module, theres django-paypal and.. argh, one which was advertised on this subreddit very recently (< a week ago). The interaction is not done with Visa/MC itself, it's done with a third party intermediary service and its API.

With Paypal, you get notified of the payment by providing a URL to Paypal at which they will ping you with some data and you'll be able to mark your item as paid for there."
2012-12-03 23:04:46;Masonry, Infinite Scrolling, and Django [ brack3t ];Nice article! Pretty much copy/paste for a Pinterest like page, with great explanations ...
2012-12-03 21:33:05;I wrote a quick tutorial on how to use fabric, git and django together to deploy your projects.;I was literally just looking for something which covers this topic. Great work.404 :(Please don't use this. At the very least use a symlink for the correct dist files so that moving from one release to another is atomic. If you want to deploy something for real, please look at Chef (*disclaimer: I work there and wrote the Django stuffs*) or Salt.naw thanks
2012-12-02 15:03:06;Can anyone recommend a navigational/graph database backend?;"I'm new to django so I may have not understood your question but I like [Titan](https://github.com/thinkaurelius/titan/wiki) as a graph DB. Is that the sort of thing you are looking for?http://www.neo4j.org/[ArangoDB](http://www.arangodb.org/)I would use [Rexster](http://rexster.tinkerpop.com/) as an intermediate server.  This provides a little more independence from your underlying graphdb.  For example, it can work with [Neo4j](http://neo4j.org/), [OrientDB](http://www.orientdb.org/index.htm), or [Titan](https://github.com/thinkaurelius/titan/wiki).

Python packages that work with Rexster: [bulbflow](http://bulbflow.com/), [python-rexster](https://github.com/CulturePlex/python-rexster), [django-graphiti](https://bitbucket.org/amirouche/django-graphiti), etc.

If you want to go direct to Neo4j there are plenty of packages to give you a nice interface, for example [neo4django](http://pypi.python.org/pypi/neo4django/0.1.7) provides models similar to the Django ORM.Orientdb is another that looks pretty good, apache2 licensedude, just make your own.  I started making a reddit-ish distributed database two days ago and have gotten it to work already in some parts, although I'm still testing with the default XMLRPCLib in python.

(and I'm a terrible slow programmer who has to google everything for an hour to get every line of code working)

Edit: I should note that the application is a self-organizing graph, possibly to be implemented at two overlapping scales, to create or expand a distributed network."
2012-12-02 04:10:10;Testing Django with Travis CI;
2012-12-01 20:36:51;Getting ready to learn Django.;"Version 1.5 is being released in a matter of days :(Where did you get it bound?Why would you print it?Pretty cool. Though I find the main advantage of the .pdf to be able to CTRL+F through it.Why Oh Why?&#3232;\_&#3232;

This have to be the stupidest thing I've seen at this reddit. Learning django is done by two methods, usually in combination: creating something by yourself and googling.

Great you want to learn web programming, but don't ruin it for yourself trying to read all the documentation. Use your time more wisely.Since when does reading a manual teach you to use anything programming related ?"
2012-12-10 23:32:06;Django Security releases issued: Host-header and redirect poisoning;
2012-12-10 15:42:08;Django Performance Tuning Tips;"Disclaimer: The link is to my own site. 

Some of the tips might seem obvious, but I've never had problems with some of them until I started processing thousands of DB records every request. I'd love to hear additional performance tips!Thanks for posting.  I still consider myself quite a Django noob, so any tips on makings leaner and meaner are always welcome.django-devserver has some excellent profiling and query counting support. I prefer it over django-toolbar, as the slowdown you get from it is much less.You should be using the same database as production.Never saw django-profiler so that is neat.

Do you use [django-debug-toolbar](https://github.com/django-debug-toolbar/django-debug-toolbar) at all? I've found that to be very useful for profiling queries and the number of queries hitting the database.

In addition to *defer* I like to use *only* in queries where I only need one or two columns of a table with a bunch of columns."
2012-12-10 13:26:26;As a new django developer that relies too much on browser autocompletion, this site has helped me out more than once.;Uhm, what? Is this some pathetic attempt to get a few dollars out of ad revenue?
2012-12-07 17:04:49;Django Firebird updates - now with support for introspection  ready for Django 1.5 final;
2012-12-07 16:58:58;Django 1.4 get_absolute_url & reverse() How to use it properly?;"I think you should be using `kwargs={'postSlug': self.slug }` instead of putting the slug in args.

I would make the date bits into named parameters too and exclusively use kwargs, it's rare to just see args used in practice.You have an extra str in the line:

return reverse('post_single', args = [str(self.pub_date.year, self.pub_date.month, self.pub_date.day, self.slug)])you don't have any capture groups around the date components of the url:

    url(r'^(\d{4})/(\d{1,2})/(\d{1,2})/(?P<postSlug>[-a-zA-Z0-9]+)/$', 'whatever', name='post_single'),

*Note the parentheses.* That will work with args in a reverse() call. If you want kwargs as well, you'll have to add named capture groups (see your postSlug group for example). Reference material: [Regex groups in python](http://docs.python.org/2/library/re.html#re.MatchObject.group)

*edit: also you should be able to drop the 'str' in your get_absolute_url function.
Good web development is dying right before our eyes..."
2012-12-17 16:17:36;Firebird and Django's Wordpress alternative : Mezzanine;
2012-12-16 18:27:42;What's the best way to optimize a M2M field query in an app?;
2012-12-16 02:06:34;Serving Django Static Files on Heroku;Not sure why you are getting down voted, I enjoyed the read.Even discounting the Amazon free tier (since it only works for your first year, never understood that), that same 100MB of storage would cost you $0.0095/month, yes, less than a cent a month. Given rounding and the like I would expect a bill of 1-3 cents a month in the end, but still, really?
2012-12-15 20:52:34;Shortcomings in the Django ORM and a look at Peewee, a lightweight alternative;"I like PeeWee, I use it rather than DjORM for my scripting projects.Honestly, SQLAlchemy is a major reason I use Pyramid/Flask for personal projects and not Django. However for work, since SQLA can be intimidating for beginners, and my work is a PHP CRUD-app shop that *graciously* allows me to use Python sometimes, I stick with Django and the Django ORM because it's so freakin' easy to jump into if you're not familiar with Python.

My dream is for the Django dev team to break all backwards compatibility for 2.0 and make the Django ORM a thin wrapper around SQLA. I know that would cause some serious drama in the community, though."
2012-12-13 16:47:49;Django ModelForm with a Model that has a User field - Setting the user field to the logged in user;"Set owner as excluded from form:

    class BeerStashForm(ModelForm):
        class Meta:
            model = BeerStash
            exclude = ('owner',)

and in the view as you wrote:

    form = BeerStashForm(request.POST)
    new_entry = form.save(commit=False)
    new_entry.owner = request.user
    new_entry.save()
"
2012-12-24 18:34:44;django ratings problem;"Can you include the error/trace?That's not much of an error message. The default Django debug error page offers a ""Copy this issue""-type link; doing that and including it would be useful."
2012-12-24 05:38:16;Is it Possible to have a view redirect to another passing additional (keeping default params from view intact) params?;"You can use simple redirection on index page and [django messages](https://docs.djangoproject.com/en/1.4/ref/contrib/messages/)

    def logout(request):
        messages.success(request, 'You have been logged out')
        return HttpResponseRedirect('/')Just set something on the request and ``return index(request)``. This isn't a redirect though, a redirect is a real HTTP response with a special header in it showing the URL to redirect to. The only thing you could do in that situation is either set session flags (fragile, don't do this) or include query arguments on the destination URL.there's a generic CBV called [RedirectView](https://docs.djangoproject.com/en/1.4/ref/class-based-views/#redirectview)

    class LogoutView(RedirectView):
        def get(self, request, *args, **kwargs):
            logout(request)
            return super(LogoutView, self).get(request, *args, **kwargs)

        def get_redirect_url(self, **kwargs):
            return reverse('index')

most generic views have a ""get_context_data"" method, with which you can add extra context information. I'm not sure if it's also the case with RedirectView, but you might be able to access the request and modify it somewhere within that instance.Why not just call the other view if it's in scope?

    def logout(request):
        return my_other_view(request, a, b, c)
"
2012-12-23 20:21:56;Django and Scalability. Altering models and database tables.;"You use South to add migrations to your apps:

http://south.aeracode.org/yes south is great and is essential.

while you're learning and are in the early dev phase make sure to create migrations and get a workflow/decent understanding of how they work and how to avoid some of south's weird gotchas and whatnot. because while south is a wonderful tool, when it fucks up on merging a migration, the results are usually fairly destructive.  so try to learn how to use it and how to solve problems with it while your data is just a `manage.py loaddata initial_data.json` away"
2012-12-22 00:25:40;I just got PyCharm on sale and suddenly I feel better about Object based Views;
2012-12-20 22:35:11;How do you indent your Django templates?;"Personally I don't try to maintain indentation level between inherited/included files - each one starts from zero indent and I tend to set tabstop of two.Both HTML tags, and template–tags indent, it’s easiest to show with an example:

    {% block content %}
        {% if objects %}
            <ul>
                {% for obj in object %}
                    <li>{{ obj }}</li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No objects.</p>
        {% endif %}
    {% endblock %}

I use tabs.4-space soft tabs.

So I tab every html element so it looks pretty-- the real question is whether to also tab for the django templating structure or not.  On one hand, it really helps readability of the templating syntax.  On the other hand, it adds a little confusion when you're typing a multi-class selector for your CSS.  I usually tab the control structures anyway.

So a sample template looks like this:

    <h2>Press Room</h2>
    <div class=""pressRelease"">
        <h3 class=""announcementheader"">Announcements</h3>
        <h4 class=""archiveheader"">Archive:</h4>
        {% for onepress in recentpress %}
            <a href=""{% url pressone onepress.id %}""><p class=""archivedesc"">{{onepress.title}} on {{onepress.publish_date.date}}</p></a>
        {% endfor %}
    </div>
Somebody once suggested that one would indent included or inherited templates to match so that the view-source version was pretty.

Do not do this.

It's harder to read
we have good tools
you can write a beautifier on top of BeautifulSoup + Milddleware if this is your kink. 

Please, do not make your templates worse, each template is a unique snowflake and can be included different ways, make each template start at 0 tab level.

With 4 spaces like God intended.I keep templates readable individually; so I don't care about errors when including and have some loose stepping when it helps reading the template. I'm not strict at all.Tabs only of course. Less symbols. It's HTML still. But actually, who cares if its all spaceless in the end. I let vim sort it out for me. Why? because it looks ok and it's easy."
2012-12-30 09:14:23;I need your help. Question inside text field.;"They're trying to avoid ""mixing"" the data, I presume?  Find out what concern they're addressing with that design.  Then form up your argument to address it.

But simply put, they're doin it wrong.

It sounds like you're looking to segregate data for different instances, either by using separate tables per-instance (his suggestion), or by using a per-instance foreign-key (your suggestion).

I'd suggest the latter, maybe using [`django.contrib.sites`](https://docs.djangoproject.com/en/1.4/ref/contrib/sites/) as the FK target. Then, you can use the `CurrentSiteManager` as a default manager on all your model classes that require it (or better, put it in an abstract base class for them, something like (untested):

    from django.contrib.sites.models import Site
    from django.contrib.sites.managers import CurrentSiteManager
    
    class PerSiteModelBase(models.Model):
        objects = CurrentSiteManager()
    
        site = models.ForeignKey(Site)
        class Meta:
            abstract = True
    
    class BlahThing(PerSiteModelBase):
        thing = models.CharField(max_length=1000, ...)
    
    Do you need the tables customer1_table1, etc to be created?  If it can all be in the same database and schema, you might want to look into slugs and views.

You can then access http://hostname/<slug>/app or http://hostname/app/<slug> depending on what you're going for.  Unless I'm misunderstanding, you definitely don't want to create a table for each customer."
2012-12-29 21:58:38;Easy way to create your own threaded commenting system;"There's a small typo when creating the project, should be:

    django-admin.py startproject comments_tutorial && cd com[m]ents_tutorialAre there any negative speed implications with this type of implementation?If you're looking for a production ready MP implementation there's [django-treebeard](https://github.com/tabo/django-treebeard)"
2012-12-28 21:37:09;How can I check user permissions for all views under a given url prefix?;"Well, the URLs really aren't important. It's the views themselves that need the check.

If you're using function-based views, look at the @login_required decorator. If you're using class-based views, check out the LoginRequiredMixin from django-braces.Look at middleware. Inspect the path, and then return a responseredirect to your login view as needed.Take a look at https://github.com/dabapps/django-private-viewsI'm a big fan of class-based views using the LoginRequired and PermissionRequired mixins that are part of django-braces.  

It makes sense to me to keep the permission declarations with the views, especially when doing something complicated like object specific security."
2012-12-28 02:43:46;Ask /r/django: 2 questions about hosting (provider and costs);
2012-12-27 20:15:35;Complete Single Server Django Stack Tutorial;"This is excellent and comprehensive. Although you approached this with running the entire stack all the way down to Ubuntu, much of the same would be relevant for a Heroku deployment. What I don't get in this tutorial is why the hell download and compile everything? Why not use the packages to install the base (namely `python-pip`, `python-virtualenv` and `virtualenvwrapper`)? Same for celery and gunicorn. The security/bug patches are backported in the packages and will be kept up to date without your intervention. On top of it you will have init scripts and helpers.

The base will be kept updated by your system and your virtual environments will stay as you want it.

Also installing `build-essential` on a production server is really bad habit for security. It opens the door of easy compile in case your server is compromised.

You're allowed to disagree with my view on this but I think they are best practices for a clean production environment.An important tip to include there is to never manually do all that more than once (whilst getting a feel for things). Understanding, appreciating and implementing config management and automated test/deployment is a huge gap in almost every tutorial I've come across.  More on that with Django here: http://www.slideshare.net/mobile/mindsocket/towards-continuous-deployment-with-djangoThis is legit. It would be nice to see some sort of mention of fabric but I haven't got that far yet.How do I tell my shell where to look for the django-admin command?

I see it's located in .virtualenvs/myenv/bin/django-admin.py

However when I follow the tutorial and run
     django-admin start-project myproject

I get 

The program 'django-admin' is currently not installed.  You can install it by typing:
apt-get install python-djangoGood article. One point I disagree with: memcache. If you are running everything in one box, memcache isn't really going to have any benefit over using the locmem backend.

Now if you have multiple application servers, and you want to share cache between them, go with memcache. Otherwise, theres no real performance benefit.I remember reading a similar tutorial a very short while ago but now I cant seem to find it again. It was kinda ""full"" stack tutorial like this one but it covered how to use an deployment automation tool like fabric (could have been chef). It also included the code for the fabric/chef/etc. code he used. 

Does anyone know what tutorial I'm talking about?This is pure gold! Thank you for sharing this."
2013-01-07 21:39:10;Custom admin filters in Django;"Rather than run two loops in your `lookups` function, I'm pretty sure you can just return a queryset object with a `values_list` and `distinct` call.

Also, I modified your `queryset` method, because I believe it makes it easier to read.

This is untested, but it should work: https://gist.github.com/4498271/revisions"
2013-01-07 18:03:30;Python Weekly Job Board;
2013-01-06 16:49:01;Why are callback functions in urlpatterns set as strings?;"Strings mean less imports in the URLconf – to enable a rather declarative style. There's no performance difference.

Callable objects, on the other hand, can be generated on the spot.either one works, but the primary reason is that your views may reasonably want to reference the urlconf.  If the views file and the urlconf file imported each other, it would be a circular import and your Django project wouldn't run.  Django gets around this by allowing you to specify a string and handling the import magic for you at runtime.You can pass in functions as well as strings.Putting strings in there is, in my view, a giant antipattern. The only effect it has is to ensure if you have a typo that the traceback points to nowhere near where your error is. The best way to write a urlconf is:

    from django.conf.urls import patterns, url

    from . import views


    urlpatterns = patterns("""",
        url(r""^polls/$"", views.index),
    )"
2013-01-06 04:35:30;Including app-specific urls.py from project/myapp/urls.py;"Something to check: an error in home/urls.py or a file it imports could produce an error like this.Some functions moved locations. Try this import instead:

from django.conf.urls import patterns, include, url

Other than that the code looks fine to me. Try going to an incorrect page such as mydomain.com/sfdgdfgds and the django debug page will show you all the properly configured URLs for your project.    project/
        -manage.py
        -urls.py *
        -home/
            -urls.py

from the asterisked urls.py none of these lines work (""No such module"")

    url(r'^home/', include('home.urls')),
    url(r'^home/', include('project.home.urls')),
    url(r'^home/', include('myapp.home.urls')),

and just to clarify this is a brand new project created in 1.4Please don't stackoverflow on reddit.

If this keeps happening, I'm going to have to unsubscribe from r/django"
2013-01-05 03:44:35;Understanding Class Based Views.;"As Vohlenzer said - comprehending the whole class can help a lot. Mixins are just part of the recipe of a class.

A good reference site is http://ccbv.co.ukThis is a good read: http://lukeplant.me.uk/blog/posts/class-based-views-and-dry-ravioli/Most of what you assume is true. I wouldn't try to learn class based views by comprehending the whole class structure at once. Instead just start small and build up.

from myapp.models import Object
from django.views.generic.edit import CreateView

class ObjectCreate(CreateView):
model = Object

And then assigning that with ObjectCreate.as_view() does so much on its own. Then google for snippets and learn as you meet problems you need to solve. I have had a lot of fun learning about and working with class based views. I started simple, and I have worked up to some complex uses - including Ajax and tricky updates.  As already mentioned, the CCBV site is very useful. I'm using UpdateView.  Is there a way to have that view return values as well?

Something like:

    class CoupleUpdate(UpdateView):
        form_class = CoupleForm
        model = Couple
        template_name = 'pc/couple_form.html'
        def get_context_data(self, **kwargs):
            user = self.request.user
            content = {'user':user}
            return {'content':content, 'request':self.request}

This returns the dictionary, but not the form.  Is there a way do to do this, or am I way off?"
2013-01-13 22:09:56;Pop Quiz, How do you add a comment in Django Templates?;"    {# This is a comment #}
Silly:

    {% block never_use_a_block_with_this_name %}
    blah
    {% endblock %}

.. in a non-base template.

EDIT: mfw nobody on r/django has a sense of humour."
2013-01-13 04:57:02;How to Create a Realtime Django App Using Node.js and Socket.IO;"Thanks for putting this up. It is exactly what I needed to get my project started.Good stuff! Thanks.

Am I missing something or shouldn't you be able to just stick the sessionid in the headers (on the request to node_api) and use django's middleware to give you `request.user` . Removing ugly lines like 

`user_id = session.get_decoded().get('_auth_user_id')`

Or even better, remove the whole mess and just make an ajax call to django that publishes the chat message to redisAs far as my reading goes, hosting anything served by ""runserver"" will result in poor performance and knowledge that testing server is not meant to be secure.

Unless I misread and this runserver command gets replaced somewhere in the process.I was evaluating various options for this kind of thing recently. I decided that nginx http push module is the best for my needs (at least simplest), though I'm still just using interval polling and plain Django views.Using node.js in this setup doesn't really add anything that python haven't already, does it?"
2013-01-11 20:37:43;My first live django project;"Dude, use proper checkbox+label markup so that I can click labels too.A little PHP snuck into your templates :P

    <?php echo date(""Y"");?>

After the ""© Virginia Reggae"" in the footer.

Other than that, nice work.Got a link?If you want more feedback I'd suggest posting this in r/web_design. No love for favicon.ico?[deleted]http://virginiareggaeawards.com/contact/

div class=form-actions does not fit you could override the background to rgba with opacity for example404 template needs work. No media loads, for one thing. :-) "
2013-01-10 21:30:47;Any recommended project templates for a heroku and bootstrap-based app?;"https://github.com/tedtieken/django-project-skel. This is a template for starting Django 1.4 projects and rapidly deploying to heroku, with bootstrap.Integrating Twitter bootstrap with django-skel should be fairly trivial. 

Getting a Django project up and running on Heroku is a somewhat significant amount of work, so I would make your starting point django-skel, which handles that aspect for you, and then just add Twitter bootstrap yourself.

I gave a general overview of the process some time back on [stackoverflow](http://stackoverflow.com/questions/10157059/looking-for-an-explanation-of-different-bootstrap-apps-for-django/10604710#10604710) but it might be somewhat dated (I haven't used the new version of Django, does it handle static files differently?)Mezzanine is all Bootstrap with the out of the box templates.  Having used several other CMS's it is a joy to use.  It does the basics well without trying to do too much.My company uses our own [Django template](https://github.com/aurorasoftware/django-template/tree/django-1.4-heroku), appropriately called ""django-template"". There are branches for starting App Engine, Heroku, and stock EC2 Django 1.4 installations.

We've been using it for months now and it works right out of the box. For instructions getting set up, check out the [wiki page](https://github.com/aurorasoftware/django-template/wiki/Django-1.4-Heroku).

Hope this helps!I think what would be simpler and more beneficial towards learning Django would be to just bootstrap it yourself (pun intended :P). Those templates didn't look very useful to me.

Heroku set-up is a bit involved, but [Getting Started with Django on Heroku](https://devcenter.heroku.com/articles/django) covers most of it. Static files is really tricky with Heroku though. The [Django Development Server](https://docs.djangoproject.com/en/dev/intro/tutorial01/#the-development-server) handles static files for you so you don't have to worry about it, but you shouldn't use it for anything serious. I haven't found a way to get [managing files from a dedicated server](https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-from-a-dedicated-server) on Heroku to work, and I think most people just use [Amazon S3](http://django-storages.readthedocs.org/en/latest/backends/amazon-S3.html) for hosting static files (like bootstrap) instead.

Installing bootstrap is drop-dead simple, just follow the stack overflow link urbushey gave or look at how those templates set it up.I haven't used it but [django-herokuapp](https://github.com/etianen/django-herokuapp) ""is a set of utilities and a project template for running Django sites on Heroku"". On the Twitter Bootstap front, I've been happy with [django-boostrap-toolkit](https://github.com/dyve/django-bootstrap-toolkit).I'm throwing a shout out to this Django-Heroku-Bootstrap from Philip Nuzhnyi, https://github.com/callmephilip/django-heroku-bootstrap

There's a lot of tools baked in that I know I'm going to want down the road, like a built-in ChronJob and Interval manager, and super easy test and deploy commands with Fabric.  Twitter Bootstrap didn't come with it, but I'll add it myself.  I tried 4 other Django-Heroku getting started guides, and this one worked. I'm on a Windows 7 Host with a Vagrant Vbox of Ubuntu."
2013-01-10 18:51:36;Anybody use django-rest-framework?;
2013-01-21 22:39:44;Django REST framework and generic relationships;"Have you thought about subclassing HyperlinkedRelatedField? You could build a little registry on the field instance to map the models and serializers.Pasting from the same answer I've just given to this on StackOverflow...

http://stackoverflow.com/questions/14448764/django-rest-framework-and-generic-relations/14454629#14454629

Your right, REST framework doesn't support those use cases, and its not obvious to me what the design would look like if it did. You'd probably need an implicit registry of model->view (for the hyperlinked case) and model-> serializer (for the nested case) which I don't think I'd be very keen on.

The simplest way to do what you need is probably to subclass `ManyRelatedField` and create a custom field type, overriding `to_native(self, obj)` to serialize each object in the set exactly the way you want it. Try django-tastypie.This sounds like what django-hyperadmin attempts to deal with: https://github.com/zbyte64/django-hyperadmin

Inline data is treated as a namespace for an API endpoint. The media type decides how to present that data in the response and is plugable. The master branch recently added support for generic inlines. Also inlines can show up as sub urls: /mymodel/56/somerel/23/

"
2013-01-21 13:08:06;Resources for learning Django?;
2013-01-20 21:24:15;Two experiences with Django;"South will at some point be integrated into Django proper last time I checked. Still, most of the time you can get by by simply executing an alter statement on your database if you really don't want to use South just yet. 

And use the csrf_exempt decorator when you don't want to/can't handle CSRF tokens. I just stick the template tag in my base form template and I never have to worry about it again (JS helper functions are included in the docs).  I saw this link's title and though, ""hmm, a mildly clever but probably overdone title for this article could be Django, Unchained."" Then I clicked the link, and saw that it was so. "
2013-01-18 14:42:06;I just did a clean install for developement on Snow Leopard 10.6.8 Im getting a terminal print when i start a new BASH console. can you tell me what i can do to fix this annoyance? Django DOES work.;i should just rm the file from Library, correct?
2013-01-17 20:13:56;DAE have this issue with PyCharm?;
2013-01-28 20:33:01;Load Testing Django Applications - some quick and simple rules to follow to test your django site;
2013-01-28 20:28:09;Django Book recommendation for a 60yr old retiree with a lot of SQL experience?;
2013-01-28 19:40:27;Managing templates for e-mail body/content;"Yes, you can make a model containing your template and render it from the string in the database instead from a file.

What you do is that you pass the template string in to django.template.Template:

    from myapp.models import TemplateModel
    from django.template import Template

    template_string = TemplateModel.objects.get(pk=123).content
    template = Template(template_string)
    email_body = template.render({
        'name' : 'esacteksab',
        'date' : datetime_object
    })

But beware of the security risk of having the context available, so make sure you only include what you'll need in the template.

There is also a reusable app for this: https://github.com/jezdez/django-dbtemplatesDBTemplates is your friend.

https://github.com/jezdez/django-dbtemplates"
2013-01-28 08:29:42;Parsley.js integration for Django forms: Easy Client side validations;"It would be nice if this supported HTML5 validation via the different input types or RegEx>When you define a Django form, you get server side validations for free using the form field attributes. Django-parsley **moves these** to the client side, by tagging your form with data-* attributes.

Don't you mean that the client side validation is in addition to the server side one?It's a shame this requires you to use Form.\_\_unicode__; outside of scaffolding a site this is extremely restrictive - all of my forms eventually move away from this due to one customisation or another that is required.

If you could extract the data-blah stuff on a per-element basis that would be far more useful. Something like:

    {{ form.my_email_field|parsley }}

would simply render

    data-required=""true"" data-type=""email""Nice, thanks for sharing! I've been meaning to look up things like this for work. I will have to give it a closer look tomorrow."
2013-01-28 03:48:16;order_by() -- having queryset return specific top result;"I would look into creating a custom aggregate function that adds a field like 'should_be_first' that is 1 for the first item and 0 for every other item. Then you can order by should_be_first AND whatever else you want to order it by.

    Object.objects.annotate(should_be_first = ShouldBeFirst()).order_by('should_be_first','default_ordering_field)You can do this using an SQL CASE query:

    Object.objects.extra(select={'sort': 'CASE WHEN id=1 THEN 0 ELSE 1 END'}).order_by('sort', '-pk')

The select case creates a new column in the result set which depends on the id value of each row. In the order_by you can order the result set by this additional column.

This is standard SQL and should work on most database system. I tested it on PostgreSQL.

Here is the PostgreSQL documentation for the case statement: [PostgreSQL CASE](http://www.postgresql.org/docs/8.4/static/functions-conditional.html)

If you can evaluate the queryset, you could easily do this in a line or two of Python after you get the queryset back. That's probably a lot cleaner than custom aggregate functions or raw SQL."
2013-02-03 21:19:21;FT Django/Python Developer Needed £28k + Bonus - London;
2013-02-03 17:16:49;Django + Arduino need an asynchronus task;"A custom manage.py command should work just fine. Pass the data you need in a (by you) defined fashion, and put them in the database. (The Django docs know how to access command line parameters, and you can access your models just like in views.)

You could also pass the data over HTTP, and create a view that saves the data in the database.


Either option will work fine, and both are asynchronous. It does assume your arduino board triggers a post of data every x time.

If you want cronjob style async tasks: take a look at http://celeryproject.org/.

Personally: I would create a view, and later on protect it with some kind of authentication key, so it can only be accessed by the client you define. 


There's no need to drop Django because of this kind of simple problem. We've done something like this for a work project (essentially, a daemon process monitors the Django database, with the Apache process accepting requests and dropping them into an informal job queue that the daemon picks up and schedules). The model incorporates a nicely-configurable finite-state machine class that the daemon uses to indicate state back to the Apache process; this means that we can monitor the progress of any given job as the daemon processes it. I also have a nice little log extractor that lets me use standard Django logging but pull back the messages that are relevant to a particular job.

The only tricky bit is tracking file ownership so the daemon and Apache processes clean up their own stuff, but adding a model to the DB to track what needs to be cleaned up per job handles that fine. 

I should see if I can talk the powers that be into letting me open-source the relevant basic modules. 

Edit: it appears we've reimplemented Celery. Heh. Make a synchronous version, have it write into the database, call it from a cron job (issuing the request with wget or curl or something).How would you make entering data into a db async? it's like saying;

'Here, let store all this data, plus task metadata into a zeroMQ store, so i can go back later and store slightly less data in a database'Are you setting up a arduino to control an aquarium?

I've been thinking that one over myself. I figured it'd be best to just have the unit POST to the django powered site.

My other idea was to host the django site on my home server and just have the arduino write directly to the django database. I felt that this might be the best way as I'd like to pass commands back to the unit from a front-end UI served by that django site.Maybe node.js would be better suited for this kind of job.

It's possible to do it with django, but it's more work since it wasn't designed for this."
2013-02-03 14:01:06;Django Tutorial: Making Your Own Template Filters;"So, like, [timesince](https://docs.djangoproject.com/en/1.4/ref/templates/builtins/#timesince), [timeuntil](https://docs.djangoproject.com/en/1.4/ref/templates/builtins/#timeuntil), [naturalday](https://docs.djangoproject.com/en/1.4/ref/contrib/humanize/#naturalday) and [naturaltime](https://docs.djangoproject.com/en/1.4/ref/contrib/humanize/#naturaltime)Hm, I've found another cool article. Look.

https://docs.djangoproject.com/en/dev/howto/custom-template-tags/Your ellipses tag exists in Django, in case you didn't know

https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatechars"
2013-02-02 07:53:53;Taking up the gauntlet: defense of Django;"
I think Django is an excellent choice for the server component in an APIish website! 

If you follow the idea of keeping logic out of views its a piece of cake to API-ify your django apps, the parts that cannot be reused is the templates, templatetags and view classes, but the rest of django like forms and models etc works great to write API apps with, replace your views with tastypie resources and you're set."
2013-02-01 15:07:58;What would make you give up Django?;"A flood of vulnerabilities like the rails community is suffering through would make me considering abandoning it.  ""What would make you give up Django?""

Flask ! 

Now seriously... I prefer Flask for it's simplicity, beautiful api, good docs, power of choice, speed and mostly because it enables me to make my choices instead of enforce over me the choices of others. From time to time I maintain an old application that is built as many plain CGI-scripts. Since Django is very popular, several times I tried to use different parts of Django in order to someday move everything to Django completely. In reality, it is not so easy to mix Django in little-by-little, and not to give up.

I started with templates, everything was smooth until I needed to implement a custom tag. Custom tags require building a separate Django application, which I did not have and did not want to have yet then.

Then I wanted to use some of its ORM for a new functionality. Now I can have a new Django application, I thought, so everything should be fine (at least it looks so in the tutorial). I have MySQL as database so I started experiments. The first thing I came across almost immediately, is that Django expects database to be set up in a way, so that it would use the database defaults. So right from the start I had to fight the encoding issues, then non-default and different collation issues, then problems with composite primary keys, composite index definitions, positional arguments to the constructor (instead of named arguments) somewhere in the depth of the ORM (when selecting by the foreign key). I managed to solve the problems then, but I did not expect all that stuff.
The last thing I tried, is to use Django's url routing separate from Django. There is no clue about it in documentation, and when I tried, it started to swear about not having settings module correctly defined in environment parameters, so this time I gave up at once =) 

To summarize: at least for me, Django does not seem to like being part of something, but it is much easier to make something be part of Django.  Real API docs.

Modular components (as much as possible, anyway), perhaps with blessed/recommended combinations or defaults.

A huge swathe of docs saying: so you've done X in Django, here's the equivalency using Y&Z components in Fancy-New-Hotness.There really aren't any features that would lure me away from Django, not because it's better than the rest, but because it's pretty much equal to the rest.

A web framework is a web framework... the main kind of variety we have is batteries included or not.

Now an ecosystem on the other hand is something to value.  Forums/blogs, plugins, people to discuss topics with, etc... that is what makes me invest time in a new piece of code.Well to be honest, I got into django quite nicely with the tutorial. It was my very first web framework and shortly after I had learned python. So things were great. Built an application for work using Django. 

But now recently I often feel that django is too big. I don't know enough about it to use all its powers and being in that situation, the last two projects I've done have been made with something much simpler like web.py. 

I guess it's the fact that the projects are heavy in javascript UI and a RESTful API. I don't know two things about django, how it can help me build JS UIs and how it can help me build RESTful APIs. So I just prefer to go at that alone from scratch. I've been working on a project with a JS front end and a REST back end, Django/Tastypie just created more problems than they solved.

I was using Moustache templates, and they conflict with Django's templating.  So I'd have to try to include them as static files... I'm sure you've read Zed Shaw's opinion on Django static files.

Compare that to rails where the assets pipeline plus 'handlebars_assets' gave me precompiled templates and a noticeable speed boost on mobile.

Using an .hbs extension on files adds them to the HandebarsTemplates object in JS.

It's a neat feature.Real BPMN / BPL implementation in Python, or true SOA-oriented framework. When your code is getting bigger, one of the best ways to fight complexity is to introduce events and workflows, and decouple systems. Unfortunately, Django is not well suited for this, but anyway all current alternatives (Oracle BPEL, Activiti, jBPMN) are too Java-ish.Why I left Django about two years ago - it was overly complicated and frustrating to make both a web and API layer together. I played with Piston and got it working reasonably well, but Rails killed it, with the only trade off being no admin interface. Since I was doing more and more mobile programming and needed the API more than I needed admin or web, I jumped ship. Moreover, with the move to segregated front/back ends with JS frameworks like Ember and Angular, I'm even more content in my decision. 

For what it's worth, I have moved away from Rails in favor of Sinatra. I have a much leaner base template project that gets me the base set of components I need and can extend from there. I try to keep an eye on Django, but haven't had a reason to come back. Nice try RoR developer...Everything Django does, RESTful by default, better docs, stable, no django-style 'app' separation but still modular, better docs, cloning the framework repository also provides a python dev to do my work for me, and better docs. ok maybe that 2nd to last one is a bit much to ask, but the other stuff for sure.Being less RESTful.

I *love* REST, but implementing anything real time in django seems ineficient and hackish.

I don't really see this as a shortcoming of django because, unlike node.js, it wasn't built for persistent real time communication.

That said, the web is moving toward real time. So I guess django will have to adapt at some point.Nothing."
2013-02-11 20:29:30;Nettuts+ Tutorial: Build a Twitter Clone (Ribbit) in Django;"I'd recommend using the model-specific version of `DoesNotExist` over the way more generic `ObjectDoesNotExist`. Also, *wow* are those views messy (but I'm biased).`TEMPLATE_DIRS` is incorrect, as it's not a tuple.

People don't seriously do the `User.profile = property ...` thing, do they?"
2013-02-11 08:15:41;Should I use Django's comments framework?;"Just use Disqus and be done with it.I've just used it and have been pleasantly surprised so far, having only previously briefly used the previous version of Django comments, which wasn't as nice. I have a site with thousands of comments across a few apps, and have subclassed the standard comments to add some custom behaviour. I've only just allowed people to start adding new comments, so we'll see how it goes... It was nice to have some of the moderation and flagging stuff already done. 

In case it helps, this is the app that's part of my project which includes the custom stuff I've done: https://github.com/philgyford/pepysdiary/tree/master/pepysdiary/annotations (it's not a standalone app). if you think about using threaded comments(like reply a comment) you should have a look django-mptt.it is better."
2013-02-10 23:50:34;django app part 3 help;
2013-02-10 19:33:21;Class based e-mails;"Feel free to steal parts of [my hack](http://code.playfire.com/django-email-from-template/) so you don't need multiple templates for HTML and text/plain emails, as well as avoiding interpolating/translating your email subjects within Python.Pretty slick!

I find it clearer to have mixins inherit from Object (or a parent mixin) rather than another class. Makes for an easier time of figuring the inheritance of a given method.Awesome idea. I'll try to find time to contribute as I have some idea based on your problems/ideas.I've been using a similar system I developed a while ago; it's the only way to fly for sending emails in Django.

As far as text/html templates go, I would resist the temptation to use the template block hack for defining the different parts of the email.  It ruins inheritance and is just unexpected behavior.

My email class simply takes a template name like ""registration/emails/signup"", and then it scans for suffixes like "".html"" and "".txt"" and attaches them to the email.

As far as URLs go, the solution I've used is to specify a `DOMAIN` variable in my settings (ex: www.example.com for production, www-test.example.com:8000 for dev) and then make a custom template tag that takes standard reverse() parameters but prepends the domain to the result.  Just `{% load %}` it into your email templates and you're good to go."
2013-02-08 21:04:50;Up to date blog engine tutorial? ( v1.4.3 currently);
2013-02-18 22:17:38;Django Sprint in Kansas City | Weblog;
2013-02-15 18:58:31;Django EmptyChoiceField;"Why not just use None or N/A?The reason I chose to do this in the field class rather than the choices list was to keep the presentation separate from the business rules.  ""None"" or ""N/A"" or ""------"" are not valid choices.

Thanks for your comments."
2013-02-15 16:04:29;Scheduling morning emails with Django and Celery;
2013-02-14 17:17:35;SourceTree for Windows beta signup!;
2013-02-13 04:15:06;Chronicler: A model auditing tool;
2013-02-25 05:35:39;Django based Web Interface to Retroshare (x-post from r/retroshare);
2013-02-24 21:51:00;Mezzanine 1.4.2 and Cartridge 0.8.1 released;"I recently built a small shop with Cartridge, overall it went well. I foolishly replaced BootStrap with Foundation so I had a lot of template modification to do, more I think than if I just styled BootStrap possibly. I also struggled a bit with integrating external checkout through PayPal, the workflow was not easy to integrate at all.

But anyway, thank you to the developers for a solid Django shop/CMS solution. "
2013-02-24 01:24:49;Moderation, approval of an admin before edit submission?;"[django-reversion](https://github.com/etianen/django-reversion) might work out; just save the change, but keep track of the 'last moderator approved' version, and display that instead of the most recent.I recently did this for a project I worked on as I couldn't find a great solution either. I'll see if I can track down the code and put it on GitHub. Keep in mind that is was a quick hack job and may not be super generic, but you may be able to get something from it. "
2013-02-22 20:36:05;Django noob requests assistance with a search form (hope this is acceptable);
2013-02-22 15:02:39;Using Johnny Cache with Heroku and Memcachier;I don't use Heroku, but as I understand they have Varnish in front of most of their instances, which I think would also help because then Django doesn't also have to the majority of cache hits. You essentially would get time based caching (varnish) and object based caching (johnny-cache).Question that isn't related to heroku but I'm rather curious for normal usage. Is this better than pylibmc, python-memcached?  I'm still pretty new at Django.
2013-03-04 21:17:55;Django Retrained - How a few best coding practices will make you a better investigative journalist (NICAR 2013);Ben's a bad ass.I'll be the first to admit this isn't the most Django-centric thing ever, but I found his advice useful given how often Django is used in news environments.
2013-03-03 04:17:24;need help w/ virtual hosts and virtualenvs in apache2;
2013-03-02 18:55:09;Dynamic settings: django-constance;
2013-03-02 00:19:11;Need help setting up basic website with layout.;
2013-03-01 21:41:27;Run a Django Debug Server with SSL;"Not sure why everyone is negative in here. Not like he's suggesting using it for anything but debugging. 

I'll definitely use it from time to time when testing our mobile API. Thanks for sharing.Thank you! So much easier to test (request.is_secure) stuff now.Use a real web server as the front end and have it server the static files. Behind it you'd put your django application using a middle such as uWSGI (really easy to set up).

The SSL certificate goes into the web server and that way you'll be able to serve all the static files and your application requests through SSL.

Just don't use runserver in production.Yuck.  Tell me a good reason that one needs to use SSL with the runserver?

The runserver is just barely serviceable for development on purpose."
2013-03-11 23:07:58;domande: an app to represent generic questions on forms;
2013-03-11 20:04:38;"Django Co-Creater Jacob Kaplan-Moss talks ""Caring for Your Baby Ecosystem""";
2013-03-11 20:01:11;"django security; and proving it's just as secure as the other options";"Django core developer here. 

One possible way to look at security: Look at the [OWASP Top Ten List](https://www.owasp.org/index.php/Top_10_2010) (this is the 2010 version; there's a 2013 revision underway), and determine how many of these affect a framework. 

Django essentially provides out-of-the-box protection against all 10 on the 2010 list, to the extent possible at a framework level (A6, for example, requires a sysadmin to maintain a site, which is outside the control of Django itself). It's certainly possible to write Django code that exhibits problems from the top 10 list, but if you follow the documentation and use default settings, you're covered. There are several blog posts out there that confirm this.

The same isn't true for all platforms/frameworks/languages. The top 10 list exists because they are problems that are seen frequently in the wild -- in some cases, because official project documentation gives bad advice, or doesn't warn of the problems associated with certain approaches. 
Well, for starters:

* https://docs.djangoproject.com/en/dev/topics/security/
* https://docs.djangoproject.com/en/dev/internals/security/

From there, if they want to see how Django handles security issues:

* https://www.djangoproject.com/weblog/2013/feb/19/security/

And really, you could find 1,000s of ""Django is Secure!"" articles but that's not going to convince anyone. I might take the ""why NOT Django?"" tact and see what sorts of reasons are given, then respond to those.

I would say that they don't have a leg to stand on regarding Java security as there are some pretty serious issues released...every day? Maybe a list of recent Java issues in a presentation titled ""Reasons Not to Use Java""? ;)

If you ran your Django project on an isolated server, what's the harm?Django has been around for roughly the same amount of time as Rails and has a similar level of popularity (same order of magnitude). I've been using Django for the majority of that time and I can't recall a single high profile attack on a Django-based website like those that have plagued Rails and Java lately.

That's not to say such attacks aren't possible, it could just be that for whatever reason, Django breaches don't get publicised all that much. And you can certainly misconfigure a Django project in such a way to leave some glaring security holes. But you can rely on Django's core devs to take even the slightest vulnerability very seriously, and handle the announcements and security releases responsibly.If it helps, we get sites security tested annually by a third party auditor that specialises in this area. They never highlight too many major issues, and any they do are usually logic based."
2013-03-11 12:25:41;Django User registration validation problem;"One way is to toggle it with JS if there are any errors. I have a modal dialog that shows if there are errors in the form contained by the dialog: 

	<script type=""text/javascript"">
	{% if form.errors %}
		$('#modalMessage').modal('show');
	{% endif %}
	</script>
Maybe create a login form, bind the data to that form and dont call save, I think, in login_view.In your view check for _if request.is_ajax_ and if that is true then return a different template that only consists of the form markup. In order to prevent code duplication {% include %} that new template in your current login template.

In your modal you need a div as a wrapper around your form that you can easily select. Now when you fire your ajax request, take the response data (the partial template) and replace the wrapper div's html with that data."
2013-03-09 20:35:00;Custom ErrorList in a Form;
2013-03-18 18:44:05;I wrote an app to aggregate CSS & JS files that does everything with a template tag. I'm curious what /r/django thinks.;Have you seen django-compressor? http://django_compressor.readthedocs.org/en/latest/I've been using another project similar to this called [django-assets](http://elsdoerfer.name/docs/django-assets/). It's been great so far.How do you think it will do with files stored on amazon s3?I think it is great.  I didn't really like the app that forced pre-definitions of groups (was that django-compress?)   The other one that works similarly to yours is on my list to eval.Simple and clean, good idea.
2013-03-18 09:41:32;Introduction to Django – presentation;
2013-03-18 03:25:20;Newsblur, open source RSS reader written in django;"It's OSS, so it's a guaranteed up vote to me. Still, I think there's plenty to do on the UI side. There is too much on the eye to be a real alternative to Google Reader, and it doesn't work very well with small displays (like my 11"").

Anyhow, very nice work!"
2013-03-17 18:04:37;Django Settings File Tricks;"I much prefer the pattern found in 2 Scoops of Django or the GSWD tutorials:

- define a file containing production settings in settings/base.py
- override production settings (e.g. DEBUG, database settings) with development settings in settings/development.py

    #settings/__init__.py:
    from .base import *
    
    try:
        from .development import *
    except ImportError:
        pass

- add settings/development.py to your .gitignore so that when you push to production you don't pickup your development settings.  This first part with environment variables is **very wrong**. 

    >>> bool('False')
    True

Calling bool() on a non-empty string will result in a value of True, and thus DEBUG will always be True. Not what you want on a production deploy!



"
2013-03-17 13:32:57;Copyright year template tag with caching;
2013-03-24 19:14:14;New to Django. Writing a computationally intensive app. What are good ways to give a submission response and update when the computation finishes.;
2013-03-24 15:50:36;Any good online Django bootcamps?;"www.gettingstartedwithdjango.com is only in its second episode, but the material is awesome and takes you from 0 - functioning blog deployed on Heroku in 2 episodes.

http://soyeahdjango.com/post/43597484963/me-when-a-new-episode-of-getting-started-with-django

From there, you're going to want to get the ebook 2 Scoops of Django, as this will help flesh out some of the concepts you've just learned.  djangobook.com is really easy to understand. you don't need to read/do all chapters, 1-7 should get you started.Team Tree House has a great Getting Started with Django video series.  It's uncatalogued so you need to search for it.  It helped me get started.

EDIT: http://teamtreehouse.com/"
2013-03-23 17:32:10;How can I make this view code less awful? CBV?;"I would use repeated applications of the [extract method](http://refactoring.com/catalog/extractMethod.html) refactoring.  For example, you could have a set_breadcrumbs_for_register(request) function.  The key is to find good, meaningful names for each function you extract.  

Do this several times and you could get the view to look something like this:

    @login_required
    @transaction.commit_on_success
    def register(request, id=None):
        set_breadcrumbs_for_register(request)
        model = try_get_model_for_register(request)
    
        if not model:
            return register_with_no_model(request)
        
        if request.method == 'POST':
            return register_POST(request)
        else
            return register_GET(request)
    
    
This function is much easier to understand because it's much shorter and much flatter.  I'm sure you can do a better job with naming things and finding which parts of the code to extract, but you get the general idea.  

I have to be honest, I don't think it's too bad.  I don't know the code or context at all and I managed to read it and fit it into a mental map quite easily.

A comment or doc string would be nice, though.Yeah - my rule of thumb is always move code out of the view. To the model or manager if its row or table based code, but usually to the form. 

Try writing your own custom form.save() method that registers the instrument, sends messages and does the notify bit. You'd have to pass it the form (but since its a method this is self), the model (wait - you already did) and the request (to tweak the session, access user, etc.) 

Hey - and are you checking is_valid anywhere? 

Lots of good suggestions!  I don't think switching to a CBV would make it any cleaner, but it would be a fun exercise to try.Fat models, skinny controllers.

Also, if there's a lot of 'set up' and 'tear down' style code you're using, consider making a request context middleware to do this for you.You can easily move most of this code into your forms and models; that will make things much cleaner and more reusable. "
2013-03-23 07:19:34;django-quickly - Adding url and view decorators to Django;"Am I missing something or the readme is just plain wrong ?

    @url('/user/\d+')
    @view(render_to='user.html'):
    def user_view(request, id)
        ...
        return {'users': users}

That regular expression needs to have a group so the view receives the id argument. Eg: @url(r'/user/(\d+)') ... and you forgot to put it as raw string (r'...')

You say that ""Avoid declaring @url(r'\^$') first"" - but \^$ can only match the empty string. Maybe you wanted to write ""Avoid declaring @url(r'\^') first"" instead ?So now you have to go searching through all the views files to find out what's handling a URL? I'm rather sceptical, sorry.If I wanted to use decorators for everything I would stick to spring MVC and JPANot sure how I feel about @url, but this is neat:

> @view(render_to='json')Function based views? I don't like..."
2013-03-22 19:30:07;Pinterest Redesign - Anyone know if they're sticking with Django?;
2013-04-01 19:15:37;Creating groups that inherit permissions of subordinate groups?;"Have you thought about using a different approach? I see what you're doing here and why you'd want something like this but I feel there are other ways to go about doing this using the facilities already available. I just want a Hat.
"
2013-04-01 07:33:43;Tastypie and Timezones;
2013-03-31 23:02:30;Help me with my first step -> How to install Django? Details below:;
2013-03-31 19:54:42;Django seems a great thing to learn. Getting confused on how to get it onto a production environment.;"Great question. My feeling is that deployment onto Heroku is the easiest way to go. Heroku has pretty good documentation (also use the django deployment documentation). Basically deployment involves making sure you've got all your static references ready to go, changing some settings for deployment (e.g. set debug=False) and making a simple git push.

Hopefully you're already using a git repository, but if not you will have to convert, which should be just a couple of commands in the terminal. 

Also, be careful about your database stuff if you've got migrations. It took several 'oh shit!' moments to get used to making sure my db was in shape for production. Good luck.I deploy on webfaction; they have a one click installer and it's super easy to get started. https://github.com/callmephilip/django-heroku-bootstrap

I used this bootstrap project by Philip Nuzhnyi and it is now absurdly easy to deploy my project.  It uses Heroku, plus AWS for static files.  Uses Fabric to manage a lot of the commands, so when I want to start the dev server: fab run, to deploy: fab deploy -- Absurdly easy.As people above mentioned, Heroku is definitely the easiest way to get your app into production, they have a great help topic here that lays out the steps: https://devcenter.heroku.com/articles/django

However, if you'd like to run it on your own server, I would suggest a stack like [Nginx](http://wiki.nginx.org/Main) + [Gunicorn](http://gunicorn.org/) (this is what heroku recommends as well). With maybe [supervisord](http://supervisord.org/) for daemon management. 

There are a couple great blog posts out there on how to get that setup:

* http://senko.net/en/django-nginx-gunicorn/
* http://f.souza.cc/2011/11/setting-up-django-production.html

And another (this one opts for [uWSGI](http://projects.unbit.it/uwsgi/) instead of gunicorn):

* http://zacharyvoase.com/2010/03/05/django-uwsgi-nginx/
You would use chef/puppet and vagrant with PHP to if you wanted production. Those tools are dev ops tools that work regardless of language/framework. You can deploy with WSGI - https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/I have deployed to Joyent and AWS using [red-fab-deploy](https://github.com/ff0000/red-fab-deploy). This starts an instance on either service, sets up nginx and gunicorn, pushes code as well as a few other things. Since working with Django this has been the easiest way to do deployments I've used. And in the interest of full disclosure I work for the company that developed this, but if I got fired tomorrow I would still use this for my deployments. The difficulty with your question is that there are too many things that may or may not be a part of a Django app. I prefer Fabric, combined with a Mercurial repository. But the thing about Fabric, or Chef, or similar, is that unless you first know exactly what you are doing by hand, they aren't useful.

As far as I know, there are no pre-packed modules for Fabric or Chef that will give you a starting point, so most people end up writing their own deployment module. In any case, no one more fully understands the requirements of your app than you do, and every deployment target presents a unique challenge. Therefore you are probably best writing your own Fabric or similar module anyway.

I prefer Fabric because I can start with a base deployment module which I use for my own EC2 or Linode deployments, and then can add extra functionality as needed, in a local Fabric module in each Django project, and everything is in Python, rather than in Ruby, as with Chef."
2013-03-31 16:14:34;Are there any small django apps that I could learn from the code?;"Check out the tutorial on the django website. It's short and walks you through setting up a simple website. It's what I used to get started with.I walked through http://effectivedjango.com/ and it did me wonders.http://www.tdd-django-tutorial.com/ is also a well written tutorialSome of the best I have found. 

http://lightbird.net/dbe/index.html

Entire apps, practical and useful. Well written and with function and class based views. you can check out all the apps me and my team has written at https://github.com/bitmazk - all small, focused reusable apps, all written with TDD in mind...why not start writing one of your own?

Take a simple idea and just get at it, that's the best way to learn!Django rest framework has a really good tutorial that helped me with class based views and rest stuff. 

Two scoops of django is a good rebook as well with lots if examples. And u have not read this one yet but it looks like a good read http://effectivedjango.com/Remember the Django IRC is a great resource as well!"
2013-04-08 11:47:18;How to create a multiplayer online game with Python/Django;"Django isn't very good for real time stuff. Try Tornado or Twisted.web, then websockets or such lower latency Javascript on the browser side. 

Django is still very good for plain old HTML document stuff.[deleted]"
2013-04-08 08:24:28;Just started using South, its great !;
2013-04-08 08:05:36;Prevent email notification on SuspiciousOperation;
2013-04-07 23:30:04;Django as an auctionhouse platform;
2013-04-07 20:26:02;two different modelforms one page CBV;
2013-04-15 21:00:20;Django for Web Prototyping;
2013-04-15 20:42:02;"A ""find users near your area"" feature, with map. Where do I start? (GeoDjango...?)";"It seems terrifying but it's not too bad!

Install all of the GeoDjango requirements, for me on win64 was osgeow, postgres 9.2, postgis 2.0 and link them all together properly! On windows I had to set some LIBGEOS path or something.

Make a model with geomanager and point fields. I use haystack and elasticsearch to search through the stuff, but I'm pretty sure you can get by with simple distance db queries.

Setting it up is the hardest part!GeoDjango is a reasonable way to go.  There's a bit of a learning curve but with some patience, it's not too bad.

You *could* go with a hometown, but it's trivial to be more precise.  The google maps api allows you to get a latitude/longitude for an address.  You can use that latitude/longitude info to create an attribute on a model for the location.

    class Foo(models.Model):
        place_name = models.CharField(max_length = 80)

        latitude = models.FloatField(null=True, blank=True)
        longitude = models.FloatField(null=True, blank=True)
        location  = models.PointField(null=True, blank=True)

        objects = models.GeoManager()

        def __unicode__(self):
            return self.place_name

        def save(self, *args, **kwargs):

            if self.latitude and self.longitude:
                self.location = Point(self.longitude, self.latitude)

            super(Foo, self).save(*args, **kwargs)


So if you set the lat/long, the model automagically updates the location.  Then it's easy to do queries based on distance -- just as it's easy to query all the items within a range.

hthI store the lat+lon for each item, then use a raw Haversine formula query to select items. You can get the users location via the Google API. This approach doesn't require GeoDjango at all and its quite efficient.

Edit: heres the formula in Postgres flavour:

    locations = Location.objects.raw('''SELECT id, name, street_address, city, phone, latitude, longitude, ( 3959 * acos( cos( radians(''' + current_location['latitude'] + ''') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(''' + current_location['longitude'] + ''') ) + sin( radians(''' + current_location['latitude'] + ''') ) * sin( radians( latitude ) ) ) ) AS distance
        FROM accounts_location GROUP BY id
        HAVING ( 3959 * acos( cos( radians(''' + current_location['latitude'] + ''') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(''' + current_location['longitude'] + ''') ) + sin( radians(''' + current_location['latitude'] + ''') ) * sin( radians( latitude ) ) ) ) < 35
        ORDER BY name asc''')I would say geodjango is absolutely the right tool for your application.

While researching it myself, I realized it really comes down to understanding postgis. I would start by working through this fun and simple online tutorial to wrap your head around the queries and then dive into the geodjango documentation. 

http://postgisonline.org/HTML5 offers a built-in Geolocation [link](http://www.w3schools.com/html/html5_geolocation.asp)I haven't really looked at GeoDjango, but everything I've heard about it in terms of installation sounds like ""you're gonna have a bad time"".  

That said, I remember watching a talk (either from a PyCon or a DjangoCon) extolling the virtues of Vagrant for Django development and the presenter said he had made a box aimed at GeoDjango development.  Someone mentioned google Maps. I think if you are familiar with sphinx search, you can implement a search by radius and dispaly the makers in google maps.

You should set some settings in sphinx.conf file: radians(latitude) as latit, radians(longitude) as longit in your query.
sql_attr_float      = latit
sql_attr_float      = longit

And in your Django view: 
km = 25.00
nbre_km = int(zoom)  #the google Maps zoom
latit, longit = to_radians(float(latit), float(longit))
places = list(Place.search.geoanchor('latit', 'longit', latit, longit).filter(**{'@geodist__lt':nbre_km*km}).order_by('-@geodist'))"
2013-04-15 15:11:46;A helper script for runserver. Managing development of multiple projects;
2013-04-15 10:42:10;Using MongoDB with Django, what's the status?;"It does not exist yet. And I'd strong recommend not using MongoDB unless you have a good use-case for it. Needing lots of reads/writes in some parts isn't enough to justify it IMO. MongoDB's read/write performance falls back down to earth once it's put in a real world scenario.

However, if you REALLY want to build your app in MongoDB, and you genuinely feel you're operating at a scale where it will help, I would recommend doing the following:

* Use short field names (Like 'c' instead of 'created') as MongoDB does not have field name compression. At scale this matters.
* Make sure all of your models have strict **run-time** validation. This validation should go beyond just ""Make sure this field exists and contains a <type>"" and should also take into account your application's ""business rules"". MongoDB ORMs only get you about 50% of the way there, but they're a good place to start.
* Have cron jobs that run on off-peak hours that scan your documents for discrepancies and flag or repair them. Kinda like a fsck.
* Have test coverage for the 2 bullets above.
* Think about your sharding strategy now, not later. Do NOT assume Mongo will painlessly take care of it with no thought on your part.
* Avoid using JavaScript for queries unless its infrequent ad-hoc stuff. No, the new V8 engine does not change this rule.
* Understand locking occurs at the database level, not the collection or document level, so segment your data accordingly. As your app grows you'll find yourself in the position of having to move stuff out into separate databases to avoid locking.

Let me be blunt: If you are unwilling to heed the advice above you will regret it. Well, *eventually* regret it. Maybe not at 50 users, or 500, or  50,000. But once you cross half a million boy oh boy Murphy's law rears its head and things get ugly.

Disclaimer: I'm a dev working on a series of MongoDB apps that service hundreds of thousands of users and wish very much my predecessors just went with Postgres. Don't mix. Just use a python mongodb library on its own next to django models. If you are using both they are very different in what they store. mongoengine is the tool de jour for python/mongo.  That includes django.

What you are looking for (a pluggable backend) does not exist and likely won't really.  The document model is just a very different approach than a SQL model.  It will be hard to fully reconcile that without giving up a lot on one end or the other.  This is despite projects trying to do this...

Mongo is a fucking tough tool to use.  Every single thing that jrbattin said is true.  I really can't urge you to stay away from it enough.

Unless you are doing things that flex the schemaless nature or that SQL is terrible at you're probably better off not using mongoEdit: Oh, it's a rewrite ... 

If it's a rewrite then you'll probably won't be able to use much of the contrib apps (admin&co) even if the php had used a sql db. Then again, if you can migrate your data then you can remodel it, on postgresql :)Isnt mongo supported by Django nonrel?I know that you don't want to be using Mongo for the reasons you've outlined.

Postgres, MySQL, basically anything else. These two can be very fast and scalable, and they're not going to eat your data like Mongo can.Depending on your use case, you might consider django-denormalize: https://bitbucket.org/wojas/django-denormalize/

Django-denormalize makes it easy to sync data from a SQL database to any other storage backend. It includes support for MongoDB. It allows you to map a tree of database tables onto a document, and it will automatically update the document if any data that it relies on changes. This way you can use MySQL as the primary storage backend, managed by the Django admin, but read from MongoDB for speed or query convenience. Note that this is a one-way sync, however.

I'm the author of this package. Be aware that it's currently not yet feature complete nor production ready, but it will improve in the near future.There is a django project that brings in support for Document stores in django called Django-DocKit (https://github.com/zbyte64/django-dockit/). Instead of using django.db.models to define documents it has it's own dockit.schema.Document that is patterned after django and provides glue for forms and class based views. Currently it supports MongoDB and has a django app that emulates a document store. "
2013-04-13 07:55:37;django-allauth 0.10.0 released -- with Python 3 support;"how would you compare this to django-socialauthGood job, I use that package on my apps.I can't wait to use this on my project. I've been using a hacked-together version of django-registration and django-socialauth. Socialauth was such a pain!

This seems like it'll be a lot easier, I wonder if it supports AJAX logins!?"
2013-04-21 20:59:36;Demo django-inlinetrans and django-inplace-edit apps;"I'd be interested to how this interacts with feincms or django-cms content types.I try not to be harsh when talking about Python or Django, but. Stop fucking making a CMS from it, with all that ugliest inline bullshit.

Thanks."
2013-04-20 10:30:01;Cartridge Shop App Installation will NOT work, no clue why!;
2013-04-20 01:16:56;Shrink size of CSS files with Genetic Algorithms and Python.;[Code](https://github.com/ryansb/genetic-css/blob/master/css.py)Interesting from a programming point of view but I feel like this is the most computationally intensive way of doing this you could think of.
2013-04-18 16:14:44;11 Things I Wish I Knew About Django Development Before I Started My Company: — CS + Math;Thank you for sharing.Love the site's design!You should reshare this to some bigger groups -- it's got great advice (I think) for non-Django people too.
2013-04-17 22:52:10;Two Scoops of Django is in print!;"If nothing else, this has taught me a lot about how to market ebooks :)This is gold!

I got this book quite a while ago, it sat there on my todo list for a couple months. Finally I got a pretty big new client and they wanted a Django project, I started reading this ebook and finished it in one day. I couldn't stop reading it. I finally had the perfect way to setup my requirements files, settings, and relative folder structure. I whipped up a couple example projects for fun, tried to implement and use best practices. What a dream! I feel so confident in my projects now. They introduced me to django-braces and I got a much firmer grasp on CBVs. I put each chunk of my project into a separate app now and write tests for everything Python at least. 100% coverage so far on my latest project!

Simple, concise and effective.

One criticism I do have though is it doesn't give many examples for tests. One thing I'd like to see more of -- and maybe they changed this since I last read -- is tons of neat testing strategies. I'm a lone developer and I have been completely self-taught in Idaho... so more insight into fundamental testing strategies would be nice!

Really appreciate all the hard work and time put into this, thanks.And they added Mobi and ePub versions, which is awesome, since I wanted to try reading it on my phone and the pdf was a bit small/hard to navigate.I started learning Django and Python (and largely OOP) in August of last year. I'm prototyping a project and this book is very handy. There are only about ten Django books anyway on Amazon, and only a few of those are version 1.4+.I bought the paperback based on the good reviews here and on Amazon. 

We use Django at the company I work for and I have been applying design patterns from my company's apps to my private projects. I have the feeling at least some of the design patterns and approaches are not optimal, so I hope I will learn a lot from this book.Recently left the asp.net world.  Toyed around with django the last few years, been running through this book to walk through my first large project using django.  I like the style of ""there's three ways to do X, we say do option 1 because Y, but here's why the other 2 ways exist and why you might choose them"".  The explanations (some with flowcharts) of design decisions are really helpful.  Thanks!Just got the book and it looks great! One thing though is that I wish there were a place where people who bought the book could discuss its contents, ask and answer questions, things like that. Does something like this already exist? Maybe you could make a private forum? I'm not sure how much demand there is for something like that. Or maybe just someone who wouldn't mind helping me with my questions, I would really appreciate it.Thanks for your hard work, got the digital variant. :)"
2013-04-29 23:13:48;Empty django project with a pre-configured sqlite3 database to test or start developing new apps in a few seconds!;"It's great that you're working on streamlining your project start up process, and you have some good starting points in here.  However, I'd strongly recommend that you look into implementing this using Django's built-in [project templating system](https://docs.djangoproject.com/en/dev/ref/django-admin/#startproject-projectname-destination).

Of particular importance is the ability to dynamically create a new SECRET_KEY in your settings each time the template is initialized.  Using the key that you'd published publicly is a major security problem (so I'd go ahead and replace it in any apps you have already written using this same one).

I'd also recommend taking a look at some of the other project templates that are out there--I think the [*Two Scoops* template](https://github.com/twoscoops/django-twoscoops-project) is pretty solid.I have one of those as well https://github.com/herrmendez/django-1_5-sandbox A little tip to you and others,

STATIC_ROOT etc. is a very common source of misunderstandings and faulty setups, these directories are not meant for the programmer to put files in.

I would suggest, to rename static_root to ""static_serve"" or ""static_dest"" or similar name that triggers the memory that these directories are not supposed to be used by you directly.

Then you have a parallel directory named static_source or similar, where you put the actual static files you need, which doesn't have a particular application tied to it, and a directory for third party dependencies separate from your own files.

so my setup is this

    STATIC_ROOT = PROJECT_PATH + ""static_serve""
    MEDIA_ROOT = PROJECT_PATH + ""media_serve""

    STATICFILES_DIRS = (
        os.path.join(PROJECT_PATH, 'static_source'),
        os.path.join(PROJECT_PATH, 'static_vendor')
    )


and of all these directories, only static_source/* is checked into revision, the contents of the others are ignored.

i install dependencies into static_vendor with a js package manager and my own code goes into static_source OR apps/appname/static/ if its application-specific static files."
2013-04-29 15:34:39;Common testing scenarios for Django apps.;
2013-04-29 08:33:04;Does Restangular make hooking up a django backend easier?;
2013-04-28 15:40:01;Django User Best Practices;
2013-04-27 19:14:19;Lessons learned defying Joel Spolsky with Django;I loved the Hot Startup Optimization Strategy.  So true.I'd really like to know more about his point re: celery. Are there any speaker notes? The presentation doesn't really convey much.
2013-05-06 15:47:36;Why is serving static files so hard?;"It's also apparent that the person in the stack overflow question didn't read the comments in the settings.py file.

    # Absolute path to the directory static files should be collected to.
    # Don't put anything in this directory yourself; store your static files
    # in apps' ""static/"" subdirectories and in STATICFILES_DIRS.
    # Example: ""/var/www/example.com/static/""
    STATIC_ROOT = ''


or 

    # URL prefix for static files.
    # Example: ""http://example.com/static/"", ""http://static.example.com/""
    STATIC_URL = '/static/'Some recent tutorials give great solutions to serve static files from the development server.

More importantly though, the reason Django makes it seem hard to serve static files is simply because serving static files isn't Django's job. Django's job is to receive a request and to render the response. Serving static files is a much simpler task that should be handled by a web server alone.It's hard because it's messy.

It's messy because it's a problem that lies at the intersection of four different technologies -- your source code, your filesystem, your web server and django itself.

Django could make things easier, I think, but it's more of an ""explaining itself"" problem than a coding problem.

What I would prefer:

1) Don't let django serve up static or media files at all, not even in development.

It's actually really easy to set up a separate web server (or two, or three) running on a different port for static files. Go to that directory and run: python -m SimpleHTTPServer portnum. Having django do that when DEBUG = True but not when DEBUG = False confuses things, in my opinion.

I do this already, actually simply because I don't want the output of the web server to be polluted with a bunch of requests for image files that I don't care about when debugging.

This also would make it clear to the newbies that it's not django's job to serve up static files, and thus remove all confusion about what should happen in production (i.e. they need to configure nginx or apache to do the work).


2) Make the distinction between STATIC and MEDIA a bit clearer

It's a bit late now, but this threw me when they were both introduced. I had to google and figure out that STATIC meant the images, css and javascript that's checked into your source control, and that MEDIA is simply a convenience to keep the user uploaded stuff separate from all of that.

3) I always thought STATIC_ROOT was a bit confusing - calling it STATIC_DIRECTORY or STATIC_FOLDER would be better. For a while I kept thinking that STATIC_ROOT was the URL root --- i.e. what STATIC_URL is.

4) Improve the comments in the settings.py

* Make it clear that STATIC_ROOT/MEDIA_ROOT can't be the same place.
* Make it clear what the difference between static and media actually is.

5) Maybe call the staticfiles app something else... like staticfileprocessor. I remember initially looking at STATICFILES_DIRS and STATIC_ROOT and going 'huh?'. What's the difference?This was one of the prickliest thorns for me whilst learning Django (with almost everything else going quite smoothly), and it causes no [end](http://stackoverflow.com/questions/14799835/django-static-files-results-in-404/) of [questions](http://stackoverflow.com/questions/4565935/django-staticfiles-app-help/4566907#4566907) on StackOverflow.

Can't there be an easier way?"
2013-05-06 14:18:34;What's the good way to handle multiclient when it comes to saving model forms ?;"I think it depends on how important the form data is to client-b.

* If you're fine with throwing everything that client-b has entered away, then you'd probably want to go the simple way of rendering the form with a hidden <input> field that contains the time of form rendering. 
Then when user tries to post form, compare that time with the last update time of the mode. (Like you say in the fourth bullet). If render_time < update_time, redirect user to form page again.

* If data is important, either preserve data through the backend (then the  question is how to render the form...)

* One way is to do the post in ajax, (so that you dont leave the page), and if render_time < update_time, then return an error code. Then you could open a popup with the new form, so that the user can compare...

EDIT:
Here is some discussion:

* Some guy with the same problem in the admin: https://code.djangoproject.com/ticket/11652
* Some discussion regarding django features around this: https://code.djangoproject.com/ticket/16549

There it's suggested to do the save as UPDATE ... WHERE ID = xxx AND VERSION = xxx
and check the affected number of rows (which was added in https://code.djangoproject.com/ticket/16891 ) This is definitely a non-trivial scenario, but I can tell you right now that Option 1, the Ajax method, won't work since it's always possible for the model to change in between Ajax calls.If you're just looking to prevent the save() from overwriting the other save's data, I'm working on an app for that: https://github.com/gavinwahl/django-optimistic-lock

It adds a `version` field to your model that increments every save. If the version doesn't match what it was when the form was rendered, the save will fail and you can start a merge process."
2013-05-06 14:17:47;i made a witter app to share your photos blurred. what do you think?;
2013-05-05 22:06:53;django-monitio, a messaging framework for both persistent and live notifications;"It looks pretty neat, and I can definitely see it's usefulness, but the requirements are pretty extensive.  If your project isn't already using all or most of those other packages, it's a lot of overhead to undertake for a handy feature.Hi,

I just started this project, I added some tests to the originally forked code and a demo application. I wonder what do you think about it and I would love to get some extra hands working on that code. It is already pretty good for the app I create, but as I see, that Django ATM lacks such application, I would really love to see this project become a new de-facto standard for django notifications. 

There are still missing parts, but what I plan to implement this week is live sse notifications (this part is done) via signals when Monits are created (this part is not done yet) at the end of transaction (you don't want to send an e-mail to the user with an information, when the transaction is still in progress, don't you?). Not bad! We built something similar (basically having Trello' s notifications in mind): https://github.com/bitmazk/django-object-events"
2013-05-02 19:42:52;Deploying on CPanel, the rabbit hole.;"[ah cpanel](http://kristopolous.blogspot.com/2010/10/fuck-cpanel.html)I don't mean this harshly, but why are you deploying on CPanel? There is plenty of documentation out there on how to do a normal Django deployment and I have not seen one howto which mentioned CPanel. There is no way it should be anywhere near this difficult, you are swimming upstream.

If the reason is cost of hosting, maybe mention how much you are paying for this hosting and people can help you find a service which won't make it so hard.I have cPanel on two of my server put I manage my own python because the version on centos is too old. I installed it on /opt. For my python / django site, I use nginx which listen on port 80 to a specific IP. I can tell apache of cPanel to not bind on that IP. "
2013-05-13 18:02:01;Start Lending | Lessons | Getting Started with Django;I really would love to see an episode when you go over using S3 for static assets. You mentioned it in a few episodes, and the tutorials already on the web seem kind of shoddy! Love the series!
2013-05-13 14:07:54;How does one separate multiple forms from a single view ?;I'm not sure what your question is, but based on the subject I think [this might be helpful](https://docs.djangoproject.com/en/dev/ref/forms/api/#prefixes-for-forms).
2013-05-13 14:01:37;High Performance Web: Reducing Database Round Trips;"It should NEVER be an **N*20ms** situation in the first place.

You should always use a connection pooler/persistent DB connections in production. 

The problem with select_related and prefetch_related is they can result in nasty JOINS that will take much longer than a persistent/pooled DB query if used on massive tables (especially without narrowing the query scope). 

Great tools in certain instances, but not to reduce connection times - there's a much better solution for that (connection pooling). 

Also, template rendering shouldn't take that long if you use the cached template loader (uses the same ""trick"" as jinja2 templates to speed up Django templates). *Note: The name is a misnomer - it has nothing to do with ""caching"" - it's more accurate to say ""template precompilation"".* One line in the settings file and your template rendering speed will increase ~10x. 

The keys to much better Django performance in production that will take less than an hour to add (and probably no code changes other than settings):

* Cached template loader
* Keystore sessions backend (I like redis)
* DB connection pooler
* Queryset caching (I like johnny-cache with smart blacklists)
* Full page caching for unauthenticated usersGood write up. Taught me something I didn't know in a pretty straight forward way. Never thought of using django-debug-toolbar until I read this post.. You have opened my eyes :)"
2013-05-12 15:41:58;I'm tasked w/upgrading a 3-yr-old Django 1.1 site & server (MediaTemple DV, CentOS 5.5) for a new client, got a couple questions.;"Don't go with MediaTemple, so over-priced. I run a [VPS company](http://www.vps-forge.com/) but there are [many](http://aws.amazon.com), [many](https://www.linode.com/) others for a far better price than (mt).

Make a fresh server and try to configure it from there. How many LOC is the Django app? Does it have many (or any) tests? Django is pretty good with backward compatibility, I've moved a Django 1.2 site to 1.5 with very few issues, mostly configuration related.

Setting up CentOS is pretty easy. Just yum install postgresql92-server, then get pip installed (yum install python-setuptools perhaps, then do easy_install pip?). Then just setup a virtualenv inside the web users home directory etc.

Handling the dependencies might be a nightmare depending how many there are, any clues?Fresh box. If you can afford a little bit of downtime, I'd bring the new box up with fresh versions of everything (including postgres), and import a db dump to the new machine.

Verify everything's working. Test to the high heavens. Once you know everything is working, drop the newly imported database, schedule some downtime and do it for real this time.

* Bring down all services that might alter database
* dump database
* xfer pg_dump file to new server
* import dump file
* bring up all services on new server
* repoint Domain or load balancer to new server

Old boxes are a giant pain after a while, and that's getting damn old.I had to deploy Django (1.4 currently) on a CentOS 5.5 box. Wound up using various tutorials on how to set it up, so it's possible, but it's a pain in the ass.

Usefull link could be: http://blog.adlibre.org/2010/03/07/how-to-install-django-cms-on-centos-5-4-with-python-2-6/

Other links I had in my bookmarks are all dead, unfortunately :(

But yeah, I'd say start over with a clean box if possible.Given the opportunity to move to a rebuilt platform I would go that way.

CentOS is my platform of choice, but I too would upgrade to a (ve) in 6.x with PGDG packaged Postgres 9.2 and just work through the issues on that environment and switch them over.

With virtualenv and preference to Ubuntu, I'd probably switch to your platform of choice.  I prefer CentOS or LTS releases since I've been at this since Python/Zope days and software stays deployed for a long time.

Edit: Oh and for python 2.7, use EPEL on CentOS 6"
2013-05-12 05:08:21;South Migration Help. Migrating FK field.;"Your problem is that you created a foreign key that references the title of an article instead of the id. 
I suggest you do this in three steps:

* rename field article to article_title, http://stackoverflow.com/questions/3235995/django-how-to-rename-a-model-field-using-south

* Create a new ForeignKey field article, ~~where you have to set a ""default"" method that finds the id corresponding to article_title to set the value for article_id, similar to: http://stackoverflow.com/questions/7080486/how-do-you-specify-a-default-for-the-django-foreignkey-field~~

* Delete article_title

EDIT: see p3n15h34d's reply for step 2 Hmm, I can see what's gone wrong.  I think the easiest way might be to write the SQL to fix it manually.  If you need to keep the data associated the way it is now, but by a different column, that is a very difficult thing for south to understand and do manually.

I would suggest creating a new column with a different name, then looping through your table and setting the field to the Article.id corresponding to the Article.publication column you already store (this should be numeric).  Then delete that column.  I'm not sure which of these south should be able to understand, but you can always to a 'fake' migration after setting the columns correctly yourself directly in mysql.more information:

https://gist.github.com/esacteksab/3a7520f52d7cd3cbf51e#file-shell-py


I was expecting an int, like article.id = 34, rather than The title of the article."
2013-05-20 06:55:08;Creating Reddit-like threaded discussion with up/down-voting in Django;
2013-05-19 20:53:44;Where can I find good, well maintained Django apps?;"Try this: https://www.djangopackages.com/http://mezzanine.jupo.org/ is excellent.  It is a CMS but can be used for other stuff, for example http://blog.jupo.org/2013/04/30/building-social-apps-with-mezzanine-drum/
For your quest to find good and well maintained login/account apps I'd recommend you to have a look at these

[Django AllAuth](https://github.com/pennersr/django-allauth)
""Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication.""

[Django Userena](http://www.django-userena.org/)
Userena is an django application that supplies your project with full account management. 

There are many good apps to find inspiration from. Have a look at Cartridge, the shopping cart app. 
[https://github.com/stephenmcd/cartridge](https://github.com/stephenmcd/cartridge)
"
2013-05-19 18:51:39;Radpress 0.4 released with Markdown support;any demo page?
2013-05-19 15:54:19;// Deploy Django on gevent with nginx // Miroslav Shubernetskiy;
2013-05-19 13:26:50;Django Profiling;
2013-05-27 18:06:07;How to interact with django(database) from an external application;
2013-05-27 06:08:23;Django 1.6 alpha 1 released | Django weblog;"Really looking forward to the addition of persistent database connections.

* [Release Notes](https://docs.djangoproject.com/en/dev/releases/1.6/)So with the sites framework disabled by default (which seems sensible, since most Django deployments are just a single website), what is the proper way to get the site's hostname/domain name?Anyone know if schema migrations will make it in? The kickstarter proposal mentions 1.6 or 1.7: http://www.kickstarter.com/projects/andrewgodwin/schema-migrations-for-djangoAwesome, persistent connections! I wonder what the GeoDjango fields look like? I've been using django-olwidget and like that so far.

If anyone working on django sees this: THANK YOU!"
2013-05-27 00:15:03;Template for obj in Ojbect.page_set.all -- not returning anything as expected;"I think it's due to the related_name attribute on Page.article, try {% for page in article.new_id.all %} the related_name attribute should be something like related_name='pages' though, so it makes more sense for something like {% for page in article.pages.all %} to work. If you remove the related name attribute at all your template code should work as it is.Hope you have better luck with your *Ojbects* in the future ;-) "
2013-05-26 06:19:22;Django, AngularJS, and CSRF/XSRF protection;"Here's a better way to set the CSRF Token for angularjs.

```
app.config(['$httpProvider', function($httpProvider) {
				$httpProvider.defaults.headers.common['X-CSRFToken'] = '{{ csrf_token|escapejs }}';
			}]);
```"
2013-05-25 08:16:52;Dealing with Existing Django apps;
2013-06-03 16:55:32;Adding /admin/ as a wink to Django developers;Is it bad then that I go out of my way to hide my framework? I argue that for the same reason I hide my version number in nginx.On my site, typing in the Konami code presents you with the Django Pony.I have certain personal, development-oriented sites where it's cool if people can easily see what frameworks (or even libraries) I'm using. At work, however, we obfuscate every trace of it as best we can. 
2013-06-03 12:14:00;First Steps with Mezzanine;
2013-05-31 17:06:39;Android app that syncs sqlite to Django;"Probably best to send it to your Django app via a JSON post or something. The REST framework is a bit to wrap your head around, but if you just follow the tutorials on [this page](http://django-rest-framework.org/tutorial/1-serialization.html), then it should give you an idea of how to push up data.You could also try Tastypie for Django. I found it a little easier to get started with. I'm not sure if you're having trouble understanding the django REST framework specifically or just the concept of REST but if it's the latter, this link might help you get the general idea: http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming

Assuming that your app isn't much more complicated than it sounds, then you should be able to make it restful by managing urls correctly. Otherwise look into:
https://bitbucket.org/jespern/django-piston/wiki/Home

I don't know too much about android development but the general idea will most likely be using GET and POST requests to retrieve and send information(likely JSON) to your web server. Django makes this relatively easy. 

The idea is that you'll send some sort of http request to your webserver which will direct it to an appropriate django view. If you are fetching information(likely using a GET request), the view will query your database, grab the information, format it as JSON, and return it to the client. The client(an android device in this case) takes the information it received and displays it to the user or in your case updates sqlite. I'm not sure how necessary synching the databases is for your app as opposed to just keeping data on your web server and displaying it on the android device without necessarily synching it.

If you are using the android device to update your web server database(likely a POST request), the client sends data(represented as JSON) to your web server which directs it to a view which changes those values in the database.

Some Possibly Useful References:

http://en.wikipedia.org/wiki/JSON (not sure what you know about json)

http://stackoverflow.com/questions/2428092/creating-a-json-response-using-django-and-python (how to create a json response using django)

http://www.androidhive.info/2011/10/android-making-http-requests/ (making http requests on android)

DISCLAIMER: I know nearly nothing about android development and my understanding of REST and django is limited. If I made any mistakes please correct me. I hope this helps.I've found descriptions of two synch algs:

http://dev.evernote.com/media/pdf/edam-sync.pdf

and

http://blog.deeje.tv/musings/2009/06/notes-on-writing-a-history-driven-client-server-synchronization-engine.html

I was able to leverage the fact that users do not need to modify existing data on my mobile client to greatly simplify the synchronization."
2013-05-31 14:59:21;Django PaaS that supports requirements.txt properly?;"You want to look into Heroku.  I know they support requirements.txt, but I'm not sure they support exactly what you are doing. 

https://devcenter.heroku.com/articles/djangoTsuru: http://tsuru.io

Unfortunately, it's still in private beta, but it's open source, so you can run your own PaaS.Gondor.ioJust realised there's nothing Django specific about this so I might crosspost to /r/PythonHerokuHeroku and Gondor both support this.HerokuStackful.io looks neat. Havent tried it myself, but it does run git deployments so I assume that it would run a requirements.txt check.

http://stackful.io/"
2013-05-31 05:24:51;Caching a prefetched queryset issues?;This looks like a case for [Stack Overflow](http://stackoverflow.com/questions/tagged/django)!What version of Django?  [Is this your issue](https://code.djangoproject.com/ticket/20257)
2013-06-09 10:39:18;15 Key Resources to Learn Django - Yipit Django Blog;
2013-06-09 10:29:03;How I Taught Myself to Code in 8 Weeks;
2013-06-08 19:43:05;Using Django querysets effectively;"Really a great article. I didn't know about .exists(), pretty neat.I'm learning Django right now and the last example was really helpful. Thank you.Wow, this is awesome. So many headaches that I could've avoided if I knew this.That's a very informative post. Nice work.

You've pretty much summed up a lot of the knowledge our team has accumulated over 2 years with django.Nicely done!"
2013-06-08 14:29:42;I thought all django hostings are free on the list. What can you say about this website? http://freedjangohosting.com/;
2013-06-08 03:50:54;What's better for simple geospatial searches: Postgis or Apache Solr?;"PostGIS/GeoDjango has always been my tool of choice for geographical stuff. Easy to setup and easy to build with. Never used Solr.i would suggest using postgis with geodjango.
we had good experiences using it (but it can be little pain in the ass to setup - it got better since django1.5 and postgis 2.0 though)
can not speak for solr as i never used it for geo-queries.

so summarized i would go with postgis because of the better django support and it seem to fit your needs better as you're building a rest api.
i would consider using solr if you intend to add a search later on but wothout it postgis is probably the better choice.

BTW [django-rest-framework](https://github.com/tomchristie/django-rest-framework) together with [django_filters](https://github.com/alex/django-filter) may be very usefulDirectly from GeoDjango's installation documentation: ""PostGIS is recommended, because it is the most mature and feature-rich open source spatial database.""

While this doesn't directly answer your question, it does bring up a point - any geospatial DB can do simple distance queries, so you may as well go with the most mature one to give yourself the best opportunity to avoid complications throughout the lifetime of the project and give it more scalability later.

I hope this helped."
2013-06-17 06:23:31;Deploying django using docker;
2013-06-16 23:02:52;Which class should get the ManyToManyField?;"See the [Django docs on the question](https://docs.djangoproject.com/en/1.4/topics/db/models/#many-to-many-relationships).  It boils down to whether, in the admin interface, it is better to associate pubs with an article (that is, on the article's form), or to associated articles with the pub.  I would think the former.There is no difference IF you use related_name as it creates a property back to the other.let's say you have 2 publications: ""the django blog"" and ""web frameworks weekly"". you, a feisty django blogger, write an article about the admin, ""top 10 django admin tops"".

if your article will only be published in ""the django blog"" (and not ""web frameworks weekly""), then you want a `ForeignKey`. if the article can be published in both publications, then you may use `ManyToMany` as you've described above."
2013-06-16 17:24:33;Django's Architecture;
2013-06-16 11:24:23;Any good project/tutorial available to follow to learn advance Django?;
2013-06-13 17:27:52;How I Made the Django Admin Scale for Stik.com;
2013-06-24 17:31:23;How to set up a Django project (for non-programmers);">Setting up a Django Project for the Non-Programmer

>the Non-Programmer

If you're a non-programmer, then you shouldn't be setting up a django installation. 

Learn to program the basics first in python, play around in sql, then start looking at django. 

In that order - or you're going to have a baaad time. Will read later ! Looks awesomeLearned about south. Awesome!"
2013-06-22 22:16:19;Ask /r/django help me dissect the following code snippet. How it does, what it does?;"Well, here's the thing: it doesn't actually **do** much of anything. You are looking at a bunch of variables being set. Onebox.py imports all the symbols in base.py, overrides some of them, and the imports local_settings.py for further overrides (this typically contains settings that should not be committed to git, like passwords).

This file is being used as a [django settings file](https://docs.djangoproject.com/en/1.5/topics/settings/). The different files are used in different deployment environments. Onebox.py looks appropriate for testing during development.

This is *part* of the settings.py for a django project.

The project in questions involves at least:

* django-celery (a task queue, for doing stuff async or on schedule)
* Haystack (a search system)

Not that this is not a complete settings.py"
2013-06-22 15:33:17;My first-ever attempt at web-development: HashPix - search & collect images tagged with the same hashtag across Twitter, Instagram & Twitpic. WIP. Feedback requested. Thanks!;"Very cool; nice job!
Have you shown it to HN yet?Dear /r/Django,

Long-time lurker, recent submitter here.

Six months ago, I jumped head-first into the world of programming and started teaching myself Python & Django. My first few projects were mostly duds. Undaunted, I kept at it and I have (finally) felt pretty confident enough to deploy HashPix to Heroku.

The idea is pretty simple. Enter a hashtag and it searches for images tagged with that hashtag on twitter, instagram and twitpic. 

If you are a logged in user, you have the option of choosing pictures and adding them into your very own album - which, at the moment is publicly accessible via its permalink. 

In the pipeline:

* Private albums, accessible only to owners.
* Ability to delete albums
* A better, more usable and more consistent visual interface
* Integrating Facebook & Google+ albums.

I'd love your comments, feedback, suggestions, bouquets, brickbats - you get the drift. Thanks for being such an awesome community! :)

EDIT: Formatting."
2013-06-22 07:35:29;Can anyone recommend a django-friendly host in Europe, particularly Germany?;
2013-06-22 06:02:46;Can't Get Models to Display in Admin View;"just a suspicion, did you uncomment the admin.autodiscover in your main urls.py?

from django.contrib import admin
admin.autodiscover()Shot in the dark here: Have you uncommented ""admin.autodiscover()"" in urls.py?

Also, why are you registering the model named 'Section' twice in your admin.py?"
2013-07-01 04:42:37;Django hosting.;"digitalocean is cheap & good service. i recommend.Webfaction has been really great. They also scale really well. I've tried a few different options: WebFaction (shared host), Digital Ocean (VM), and Heroku / Elastic Beanstalk (PaaS). Here's my personal view:

Heroku is by far the best - it's the fastest to setup, easiest to scale, and potentially cheapest (free if you only need one dyno). And if you ever need to scale up, it's a one line command to scale up or down. Deploying updates is super easy too.

The one downside of heroku that I see is the databases are pretty expensive (The free one is limited to 10K rows, and lowest ""production"" level one is $50 per month). Since my app needed a very large database, I ended up building a dedicated PostgreSQL machine on Digital Ocean - 1028MB dedicated database for just $10 per month - awesome!

I recently was forced to learn Elastic Beanstalk by a client who didn't want to use heroku. My two cents on EB is it's a poor imitation of heroku. Whereas heroku built up an environment easily, EB kept breaking trying to install certain packages in my requirements.txt file (i.e. readline). So I had to snapshot the logs, figure out the problem, and then completely rebuild the environment (takes about 10 minutes). All in all it was a really painful process, and after using heroku it just felt like a big waste of time.

WebFaction is a nice option if you want your own Django server (either shared or dedicated server), and they have a nice web interface for installing Django, setting up Apache, etc. So that's a nice option and makes setting it up pretty easy, but it's still more trouble than heroku and also doesn't help you with scaling if you need to.

BTW you should check out the Heroku Hacker's Guide if you want to learn more about heroku.

Linode, $20/mo Vps works well.Webfaction only.

Probability that you'll be in the need of scaling is super low. Just like in 99.99% of time people trying to move people on Heroku or Linode, they either don't know what scaling is, or never have enough traffic for the time being, yet scaling is the main argument. In many cases app scaling is a direct path to a bad coding/programming that is easily fixed by ""MORE POWER"" instead of better programming. So, try Webfaction, even on default settings that apps are installed you'll have a huge list of tools and options how to use and configure your apps. When you are in the need of scaling and you really understand that — buy more ram, r&d and don't think about scaling beforehand.I'm surprised nobody has mentioned Rackspace?Gondor.io is run by a django shop. They're pretty similar to Heroku, only they've built tools/deploy scripts specifically for python and Django. Kind of expensive, but if you're looking to avoid the time of setting up your own stuff, they're awesome.Heroku is free and comes with a great testing tool to make sure your application works in production. It gets kind of expensive to scale but it's worked super well for me. The free tier is essentially the same as an Amazon micro instance and I haven't needed to scale past it.I'm using the Google App Engine. It takes some additional learning, but is fairly easy to set up. You also can't use Django's ORM, instead you use the Google Datastore, and there are various ways of doing it. Personally I'm using NDB as you can use the memcache facility that google provides pretty simply to save on R/W costs. And the speed of deployment is just great, plus Google's services can be really easily integrated. This of course depends if you mind Google holding all of your data on its servers =PI use amazon's EC2 micro instance. Works great for 3 sites I have for different customers (1 site per micro instance since they pay for it, I only set it up).

It costs me around 15 a month, but will scale to however large you need. Also if it's your first year using amazon, the micro instance is free (just pay a few cents a month for a dedicated ip and any monitoring you want).hostgator works for meTry OpenShift. It looks quite promising."
2013-06-30 18:45:05;Required Nonempty Foreignkey Backwards Relation;"You need to override the save method:

    def save(self):

        if not self.children.exists():  # == Post.objects.filter(parent=self).exists()
            # assign at least one post or raise an Exception ?

        super(Thread, self).save()

For specifying the child was assigned upon creation maybe you need an extra boolean field on Post which should be set as True when it is assigned on the save method.
http://www.python.org/dev/peps/pep-0008/"
2013-06-28 22:13:19;django-cas vs django-mama-cas?;"Well the latter is a clever reference.We maintain and actively develop this fork. We've added a ton of features, so check it out. 

http://github.com/kstateome/django-cas/I've been using the original django-cas for a few years in a production situation with Django v1.3.  No issues, but it seems to be a little neglected.

I hadn't heard of mama-cas or the K-State fork, so I'll check them out.  As I upgrade my apps to v1.5 or 1.6, it will be a good time to re-evaluate options.I happened across this link, and as the author of django-mama-cas, I thought I'd point out an important difference: django-mama-cas implements the *server* component of CAS, while django-cas is the *client* side. Based on the original question, it sounds like django-mama-cas wouldn't meet your needs as you're authenticating to an existing CAS server.

Hope this helps narrow things down!"
2013-06-28 15:11:33;Django 1.6 beta 1 released;Anyone know the status of the DB migrations that were projected to be included in 1.6?
2013-06-27 19:09:00;Django Sky Visitor Tutorials;
2013-07-08 22:41:53;Seems to me like Django is more like a MV framework not MVC?;"Yeah, in Django it's more like 

models.py = Models  
views.py = Controllers  
templates = Views  

Slight tangent, but I only just got into Django recently, but I really love how segregated and well-implemented the entire framework is. No more mucking around with any SQL whatsoever, it's all just python objects. Template inherits are so much cleaner than a bunch of PHP includes (which have always felt backwards). View functions are nice little packages that don't get mixed in with any other code. It may not be strict MVC, but if anything they've improved on the concept. It's as close a web application framework I've found to perfect.Here's a great article on the topic: http://lukeplant.me.uk/blog/posts/mvc-is-not-a-helpful-analogy-for-django/General attitude is Django is more of an MVT (model view template) system than MVC. Most of the controller aspect is handled automatically, with the exception of URL dispatcher to view transactions. Instead, a large focus of the framework is making a distinction between business logic (your view, retrieving, modifying or preparing data) and your presentation layer (your template, rendering the context provided from your view within a given template or series of templates and associated static content.)"
2013-07-08 21:37:02;Noob here - question about regex in urls.py;"Yes, that's exactly what it means. 

^ matches the start of a string

$ matches the end of a string

therefore

    ^$

matches an empty string

So let's say your website is example.com. What regex do you use for the pattern that matches http://example.com/

    ^$If you're interested in learning some more regex, You might want to look into [zedshaw's LCTHW for Regex](http://regex.learncodethehardway.org/book/)."
2013-07-07 21:12:10;Removing a Django App;"It gets more complicated than that if you have migrations that depend on migrations in the app you're deleting.
> In order to completely ununstall

And I'm done reading."
2013-07-07 04:21:07;django-postgres-fuzzycount: fast / fuzzy PostgreSQL counts for Django models;Hm. Why this trick isn't in django core? It seems so simple.
2013-07-05 17:08:23;How to Make Waffle Compatible with Django 1.5's Custom User Models;From Smartpager, I say you get an upvote.  Also this is awesomely helpful.
2013-07-15 20:03:57;New to django, trying to implement a comment system, and rather uncertain about how to go about it;"**My first question is whether it seems like I'm thinking about this whole thing in a reasonable way based on the last two paragraphs**
Seems ok. I don't like the class based views and still implement everything with function based views, but thats just preference.

**what is the best way to implement a (detail-type) view that will let me display a single posting and all of the comments that are related to that posting**

* Define a URL with a parameter (e.g. primary key of the post, slug)
* In the view, load the post from the Database (get_object_or_404 is your friend)

You can sort the comments in a model method or directly in the view. Define methods like get_comments_by_date on the model and use them in the template like:

    <ul>
    {% for comment in post.get_comments_by_date %}
        <li>{{ comment.author }} wrote on {{comment.date }}: {{ comment.text }}</li>
    {% endfor %}
    </ul>

If you want to sort the comments based on e.g. a GET variable, you have to do the sorting in the view or call the model method in the view:

     #python
     if request.GET.get('sort') == 'date':
          comments = post.get_comments_by_date()
     # or
          comments = Comment.objects.filter(post=post).order_by('date')
     # template
     <ul>
     {% for comment in comments %}
        <li>{{ comment.author }} wrote on {{comment.date }}: {{ comment.text }}</li>
     {% endfor %}
     </ul>

You can't do anything with an AJAX framework alone, you always need some sort of server side code. My suggestion for the comment reply form: Create the form dynamically with javascript, but send the POST request to a normal django view. After saving the new comment redirect back to the detail view."
2013-07-15 19:49:22;Django + Stripe + User Registration;"Good effort! Two comments:

**First**, In Django development, the convention is 4 spaces, not 2. For your own personal or commercial projects this isn't a big deal, but for working on common, open-source efforts it's a bit jarring.

**Second**, In Django and most Python development, the convention is not to use ""import star"" (reddit won't let me use an asterisk here). This becomes really important if you are touching models and forms since **you will have namespace collisions**. For example, this is disastrous, since the models import will override critical form components:

    # in forms.py
    from django.forms import *
    from django.db.models import *

Where this gets nasty is when you do this:

    # in views.py
    from .forms import *
    from .models import *
 
Why? Because the second code example is an *abstraction* of the problems caused in the first code example.""2.9% + 30 cents per successful charge"" - Ouch!"
2013-07-15 15:21:13;application has no migrations;
2013-07-14 10:26:02;Ask /r/Django: TastyPie or Django REST Framework?;"My thoughts on why I prefer django-rest-framework:

**API**

I prefer django-rest-framework because it's built off Django CBVs. Like django-tastypie it's easy to implement a CRUD-style app, but unlike django-tastypie it's much, much easier to implement a non-CRUD API. 


**Performance**

I've not seen anyone do anything like a real performance analysis between the two frameworks. However, it doesn't really matter. Like everything else, as performance for APIs is not determined by framework. Instead it's more a concern of your database, caching, and other factors. Seriously, trying to ueek out a few iota of extra performance by deliberating over framework choices when you've not set indexes or implemented caching is the wrong way to go.I've worked extensively with tastypie, and found it a rather poor fit for what I was doing (serving up fairly complex nested Resource structures for consumption by a JS grid plugin).

There are a goodly number of 'hook' methods you can override to customise some of the behaviour, but it always seemed like they were in the wrong places, and I ended up having to duplicate entire methods because the call I needed to alter was in the middle of their methods.

(Note that this was with (iirc) 0.9.12, and it looks like it's on .15beta now, so things may have improved.

I haven't really played with DRF beyond the toy examples in the docs, but my understanding was that it uses a lot less magic (and hence, requires a certain degree of boilerplate that tastypie hides), although I think the recent releases there were working on that problem too.

I'm somewhat of the opposite side of the 'djangoness' of tastypie - it feels like it's trying to reinvent a lot of things like the URI routing, view handlers, etc. This makes it harder to understand exactly where your data is coming/going.

**Edit:**

Agreed with /u/pydanny[1] that it's great for throwing up a fast CRUD interface, but the choices that permit that make it harder to do more complex things.

[1] Buy his book! `:)`Also related http://dabapps.com/blog/api-performance-profiling-django-rest-framework/Rest framework was recently completely re-written and I must say, it is the beats everything else. I think it is the most django like api afraemwork. It used Generic Views and Serializers (very much like Forms). I've been using rest-framework for the last 6 months on a project and it has been awesome but things change a lot so you've to be careful with upgrades. 

http://www.django-rest-framework.org/

EDIT: Actually I wouldn't worry about updates. The developers change things in every release but most of the time you have to make only some minor changes to the code. I have used them all and I think Django Rest Framework is by far the best.  That said, they tie heavily into your database.  It can be difficult to build any fine grained caching you need if you have to go to a larger scale.  As well, you may not to consider using one at all.  Django comes with all the HTTP plumbing you need.Django REST Framework for sure, because of the close relationship with generic and class based views.I definitely like Django REST Framework better than TastyPie. The Class Based Views are much nicer than the resource based TastyPie versions.Have used both and whilst I started with tastypie I definitely prefer django-rest-framework. The main reason I think is that the class based views feel like a natural extension of django's generic views and it therefore seems easier to see what exactly is happening, whereas tastypie's resource definition style approach seemed more arbitrary and less clear. TastyPie

Pros: cute name; the best feature set to implement customized serialization and to tie into non-ORM sources of data.

Cons: not an easy pie actually. it's sure a overkill for simple tasks.

Django REST Framework

Pros: comparatively easy. using this django framework a child will make a web services referring a guide, e.g. 
http://cases.azoft.com/create-web-services-django-rest-framework/ ; its productivity.

Cons: so-so name; difficult to find a manual if a task is specific. if you are just starting there's tons of material, like the link above. yet you mature so do your apps and... find a good advice becomes difficult.
If I'm really honest, the name is the main thing that stops me adopting Django REST Framework, I just don't like importing module names with underscore. Now this is obviously a terrible reason and therefore I'm a horrible person.

I usually go with Tastypie because it's fast to get up and running, then about 30 minutes later I find that it's incredibly hard to get it working how I need. And the documentation isn't all that great either. The next time I do a REST API I'll be using REST Framework."
2013-07-14 04:18:07;Serve Static Assets in Production from Gunicorn;Since gunicorn already needs to be behind a buffering proxy like nginx, why not just have nginx serve them? I agree that a CDN is overkill in 99% of cases, but nginx is far faster, defends against Slowloris attacks, and involves minimal additional configuration.I'm pretty sure its recommended that you let your upstream server (Nginx, apache) handle the static files for you.
2013-07-22 15:07:19;Which cart + shipping + payment apps?;"You didn't tell us anything about your application's requirements, so it's impossible to give good advice. That said, start here: https://www.djangopackages.com/grids/g/ecommerce/I evaluated a lot of django packages and used cartridge( based on mezzanine) finally.. It should contain most of the stuff that you might need for a standard commerce site. you can add custom pages with the help of mez , offer admin panel for the same.You can even add custom categorisation options for your products and in your django models as well....Since you say you need a custom solution, may I recommend our very own [`saleor`](http://getsaleor.com/), [`satchless`](http://satchless.com/), [`django-payments`](https://github.com/mirumee/django-payments/), [`prices`](https://github.com/mirumee/prices/) and [`django-prices`](https://github.com/mirumee/django-prices/)?I'll tell you this: I greatly regret choosing Satchmo for a project.Heres a presentation from Djangocon 2012 comparing payment options. http://www.youtube.com/watch?v=vZc5mETltzM&list=PL0QM1wfr-MYzocgVBNgPuooMjt-Pupbki&index=8Cartridge:

http://cartridge.jupo.org/overview.html

Cartridge extends the Mezzanine CMS.  It's great to work with and worth contributing to.i have a basic boilerplate with a custom registration system that requires a user to pay, via stripe, in order to register - https://github.com/mjhea0/django-stripe

if you provide a few more requirements, i can give you some better advice. cheers!Any comments on this piece of software? https://pypi.python.org/pypi/django-cart-improved/1.0.1I've had success with Braintree, very easy to integrate, very helpful support.

https://www.braintreepayments.com/  
https://github.com/Tivix/django-braintree"
2013-07-20 20:17:09;"Forms for Intermediate Models (using ""through"")";"I looks like you're creating two instances of `Membership` here.

* one by calling `new_obj.save`
* one by calling `Membership.objects.create`

Calling `form.save` should work out of the work for what you're trying to achieve. The following assertion should fail if the relationship is not correctly created.

	def membership_form(request):
	    if request.POST:
		form = MembershipForm(request.POST, request.FILES)
		if form.is_valid():
		    membership = form.save()
		    assert membership.portfolio.stocks.filter(pk=membership.stock.pk).exists()
		    return HttpResponseRedirect(reverse('portfolios', args=[]))
	    else: 
		form = MembershipForm()
		return render(request, 'portfolio/form.html', {'form': form})

The `Membership` intermediary models is really just a model like any other."
2013-07-20 01:52:36;Anyone here experienced with django-mptt?;"Django mptt ~~~might not be your best~~ **is a terrible** choice for a comments app. Let me show why.

                  0-21
            1-10    11-20
          2-9            12-19
        3-8               13-18
    4-5   6-7          14-15  16-17


What happens when a comment is inserted as a reply to 4-5?

The entire tree will need to be re-ordered. Each time we make an insertion, 11 fields require to be touched.
If we add a new comment after 16-17 it is not bad since only 5 comments need to be re-ordered.

What if a user deletes a comment? inserting a deleting are expensive when using MPTT. The benefit is that once the tree is made, it is efficient when looking up items. Every algorithm has a weakness and a strength. know when to use one or another.

Since this is a comment app, mptt is not a good choice, since there are a lot of updates on comments. your host will spend a lot of resources re-ordering comments.

It looks like the [main developer](https://github.com/django-mptt/django-mptt/issues/173#issuecomment-5960498) suggested it would work if your make sure to correctly set `parent_id` and call `rebuild()` on your models manager. If your comment system is not already hierarchical it will be set correctly automatically else you'll have to make sure the newly added `parent_id` field point to the parent of each `Comment` (you should write a data migration for this) and call `rebuild()` after.

I took a look at the [source of rebuild()](https://github.com/django-mptt/django-mptt/blob/master/mptt/managers.py#L464-L483) and the method seems to be only based on the `parent` field."
2013-07-19 16:44:51;Django and versioning of static assets;"Use [CachedStaticFilesStorage](https://docs.djangoproject.com/en/1.5/ref/contrib/staticfiles/#django.contrib.staticfiles.storage.CachedStaticFilesStorage) - a standard feature of Django since 1.4.

In your settings.py:

    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.CachedStaticFilesStorage'

Make sure you've got a [caching framework](https://docs.djangoproject.com/en/1.5/ref/settings/#std:setting-CACHES) setup, like memcached. Always use the static template tag, and not just {{ STATIC_URL }}, such as:

    {% load static from staticfiles %}
    <script src=""{% static 'js/example.js' %}""></script>

Run collectstatic, and you're done. Every time you upload new static files, run collectstatic again and it'll copy the latest file and append part of an MD5 hash of the file to the end of the file name.

Now you can set very long expires headers, safe in the knowledge that when you need to deploy a new version of a file, it'll come out with a different file name.[django-compressor](https://github.com/jezdez/django_compressor) does what you're describing. It's easy to use: just follow the [quickstart guide](http://django-compressor.readthedocs.org/en/latest/quickstart/) and don't worry about the optional stuff.

Example usage:

    {% compress css %}
    <link href=""{% static 'css/bootstrap.min.css' %}"" rel=""stylesheet"">
    <link href=""{% static 'css/bootstrap-responsive.min.css' %}"" rel=""stylesheet"">

    <link href=""{% static 'css/project.scss' %}"" rel=""stylesheet"" type=""text/x-scss"">
    {% endcompress %}

Output (in production, with compression applied):


    <link rel=""stylesheet"" href=""/static/CACHE/css/7e81b68c8f86.css"" type=""text/css"" />

The output file is based off of the unique hash of the `{% compress %}` contents, so you can apply infinite expires headers. It's fully compatible with all other django-static directives, so you can e.g. have `collectstatic` upload to Cloudfront, use a static subdomain, etc.This is not versioning. This is simply setting the right expires/cache-control headers on those assets. However, this should be done at the webserver level and not directly with Django.

Django is not supposed to be serving static files!"
2013-07-19 07:03:16;Working with unix timestamps;
2013-07-29 21:02:56;Building An API - Part One;"Is it common for people to leave debug mode enabled on their sites? I'm, new to this whole django thing but everything I have read thus far says to create a 404 page. Also, the guide doesn't really ""teach"" anything. Its just a step by step with no insight as to how any of the programs work together or what the purpose of your actions are."
2013-07-29 15:16:00;Create a Super Basic REST API with django-tastypie;[Django REST Framework](http://django-rest-framework.org/) is arguably a better option than tastypie.
2013-07-29 11:25:29;I am new to web development. Is django the right tool for my endeavour?;"You have a lot of wildly separate goals there :)

Django encourages you to keep related features separated into ""apps"". Your varying goals should fit into one (or a handful) of apps each.

Writing a blog app is the Hello World of web frameworks. You shouldn't have any trouble finding example work around the web. There may even be drop-in blog apps at https://www.djangopackages.com/. You want to write your own, but may be handy for reference.

For running compute jobs, check out http://www.celeryproject.org/. Celery began its life requiring Django. It doesn't any more, but it's still very easy to use them together. You could also hook this up with [boto](http://boto.readthedocs.org/en/latest/) and spawn temporary ec2 instances to run your jobs.

You're reinventing the wheel in making a remote-control torrent interface, but no harm if it's for learning :)If you want to learn web development and Django, writing your own blog engine is a great way to accomplish that goal. But if that is not your main interest; skip it and install a wordpress blog.  
*Edit:* Reread your post. Wordpress and a python app working together is possible but not fun. Maybe a separate Flask app for the login part or do it all in Django and use a blog app to save time.Your story is strikingly similar to mine.

> Physics grad. A bit of Fortran77 during my Uni days, a long time ago. Little to no experience with web development - a self hosted wordpress blog. A strong desire to learn.

Since you're starting out, I'd recommend you go with WordPress for your blog. The WP community is almost as robust as the software itself. 

Also because writing your own blog in Django is somewhat of a PITA when you are a beginner. Sure, it is exhilarating but it is mostly a PITA. You might end up spending more time on coding the blog than playing with your RPi and Arduino sets

As /u/execrator/ mentioned, Django encourages you to think in terms of apps - separate modules that you can plug into a basic framework. Learn Django and Python to create any and all other kinds of web applications - interactive stuff that does not fall into the 'posting thoughts' category. The kind of stuff that involves playing around with RPi and Arduino. 

So, all your experiments can be setup as individual apps on a basic Django framework that runs separate to your WP installation. - maybe you can run both on the same server as separate subdomains.

The world is your oyster! All the best!"
2013-07-28 00:15:34;Can someone please create a freaking reload() function for the python manage.py shell??;"There is a [reload](http://docs.python.org/2/library/functions.html#reload) function in the standard python shell!? 

Btw. you should install [django-extensions](https://github.com/django-extensions/django-extensions) and [IPython](http://ipython.org/) and run python manage.py shell_plus. So much yes!

As an alternative, you could use pdb though, instead of the shell.You mean %autoreload? It requires ipython I believeInstead of using the shell, write tests. I'm curious what you think reload should do different to quitting the shell and starting it again (aside from saving a few keypresses). How could it catch any changes to Django code whilst still preserving the current state of your shell?    def reload(*args, **kwargs):
        pass

but seriously, what functionality do you require, and under which circumstanses will it be used?


"
2013-07-27 21:05:32;Question about use of signals;
2013-08-05 15:07:02;Testing in Django (part 1) - Best practices and examples;[deleted]The unit test for ``Whatever.__unicode__`` hits the database. Why not make an instance using the constructor directly? Also, why not just use FactoryBoy or ModelMommy like you recommend instead of creating a non-static factory method in ``WhateverTest``?
2013-08-05 03:25:30;Must Have Django Libraries for Beginners;
2013-08-03 16:39:42;New Django 1.5 Course added to Real Python;
2013-08-03 04:44:44;Django on Google App-Engine Tips;"I setup a basic GAE + Django + Angular skeleton if you wanna check it out. https://github.com/robrocker7/django-angular-gae-skeletonThe free plan on [openshift](https://www.openshift.com/products/pricing) is also a good option
See [here](https://github.com/openshift/django-example) for an example that runs on one gearHeroku offers a free tier, but it can get a little pricey if you decide to upgrade. "
2013-08-02 12:29:43;Reflecting on my first project using Django: An absolute beginner's perspective;
2013-08-11 21:37:14;Working with file storage in Django;"The whole point of using a_file.chunks() is you don't have to read the whole file into memory, only one chunk at a time - appending it to the chunks list renders this completely pointless. Get rid of that. If you only want to enforce file uniqueness then you could just make the file name the SHA1 hash, as long as the file name isn't that important. Directories work fine as well though.

You can replace your entire file writing code with:

    path = FileSystemStorage(settings.MEDIA_ROOT).save(os.path.join(hex_digest, file_name), a_file)

The path object will be a path relative to settings.MEDIA_ROOT (full_path = MEDIA_ROOT + path). Check out https://docs.djangoproject.com/en/1.5/ref/files/storage/ for a full list of methods the FileSystemStorage class provides.@duplication: you can always avoid duplicating code by refactoring the code into a useful function and only **using** it in multiple places."
2013-08-11 13:51:21;New to the whole scene, need some guidance;
2013-08-09 21:57:10;"How to pass ""auth data"" from a remote python script";"Try the requests library, its perfect for simple remote calls over http:

    r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
    r.status_code
    200

http://docs.python-requests.org/en/latest/I think what you're looking for is to pass the user credentials as request headers instead of an input form data (possibly insecure)

try with ""http headers"" and ""www-authentication""There are many ways to do it of course, but to keep it short take a look at the HTTPAuthBackend along with curl example here: http://www.videntity.com/2012/10/a-collection-of-handy-django-authentication-backends/
Is your script just making a single call, or do you want to be able to login with one request and then make a series of requests as that user?

If it's just one request, why not just add username and password as form fields?I don't understand if you're writing the urllib script or the Django form or both :) the way the urllib script operates depends entirely on how the Django site authentication is built.

for the common case the Django auth will be using cookies to keep track of the session so in that scenario you'll first have your urllib script do the login and save the cookies, then make the authenticated requests simply by sending the cookies you received back to the server.Just make sure eve isn't listening in!"
2013-08-09 16:50:36;export ppt from django;
2013-08-08 00:14:21;Control Your Laptop with Android, Django, and Twisted;I like the idea of controlling a laptop remotely from you mobile phone, but I don't understand the need for django in this case.  It seems like an unnecessary layer in the stack when the Android client could connect directly to the twisted server.
2013-08-19 23:05:03;[Screencast] Build a 'Hacker News' clone with Django, Part 4, (AJAX and Mixins);
2013-08-17 22:32:13;Pypy or Cython on Heroku;"PyPy works fine on Heroku: https://github.com/mtigas/heroku-buildpack-pypy

As for using PyPy with ReportLab or PyPDF2, I recommend trying it locally against PyPy before running it on Heroku."
2013-08-17 21:51:03;A diagram showing the entire Django Class Based View system inheritance and mixins.;"It was created in DIA and took me the entire night.

I also uploaded the diagram and SVG to Google Drive [here](https://drive.google.com/folderview?id=0B4OX1EeVEeoKQWtQNF9ZMUpMOVE&usp=sharing).

**Update:** New version now on Google Drive, image: http://i.imgur.com/zKrqO9S.png. This one is easier to read (imho) and fixed a missing template response link.

**Update 2:** Redesigned to be much more readable, the mixins have been moved to a better location to better represent the views. http://i.imgur.com/jMq2kkU.pngExcellent resource.  Well done.  This deserves to be incorporated into the docs.

With that said, I hate Class Based Views because:

    Simple is better than complex.
    Complex is better than complicated.
    Flat is better than nested.
    Sparse is better than dense.
    ...
    If the implementation is hard to explain, it's a bad idea.

If this diagram doesn't show they broke all those rules, I don't know what does.
Could you provide an explanation to the meaning of the different colours of the boxes and lines as well as what the difference between solid, dashed and dotted lines represent?This is a great resource for CBVs too: http://ccbv.co.uk/  It has the methods and attributes and some diagrams as well as class hierarchies. Combine it with kingdomsprite's diagram and you will have a pretty clear idea of the CBV process flow."
2013-08-17 17:15:50;Testing in Django - Model Mommy vs. Django Testing Fixtures;I've used Factory Boy for a fixtures replacement and its worked pretty well.
2013-08-16 19:49:13;Architecture queries regarding Django on AWS;"Rabbitmq can be a pain to setup, unless you really need it simplify your life and use SQS or just Redis and Celery. Your celery worker instances will need the whole project code, for the actual task code but mostly for the settings. Otherwise you're pretty much on the moneyI'd focus on keeping it simple, particularly if you intend to use some sort of autoscaling. If your computation tasks can be relatively isolated, it's probably worth doing that from the beginning.

Celery has some neat ideas but it adds some complex requirements (e.g. RabbitMQ) and it's a little more administrative overhead. If you're solely AWS, I'd consider using SQS directly — especially if it made it easy to have your workers avoid pulling in the whole Django app, tons of configuration, etc. You might still reasonably decide that celery adds enough to be worthwhile but it's good to check.

Two other notes: ELBs load balance but they don't cache or prevent the thundering herd. I'm quite happy running Varnish on my web servers for those needs, particularly since I have some media files which Varnish serves directly from S3 which is quite fast.

The other note: Django currently does not use persistent connections, which adds latency since RDS means a TCP connection for each request. Look into a proxy or jumping on Django 1.6 ASAP for connection pooling if latency matters greatly for you."
2013-08-26 20:48:23;high level modeling advice - player/game instance/table;"Look at using a ManyToMany relationship between Player and Team, with a ""through"" relationship for Game. You need only these 3 models and not an extraneous game_instance model.

See this link: https://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationshipsI assume when you say game_instance, you're talking about a Roster that lists which players are on which team for that specific game.  Ignore the model specific fields, it would look something like this:

    class Team(models.Model):
        pass
        
    class Player(models.Model):
        pass

    class Game(models.Model):
        pass

    class GameRoster(models.Model):
        game = models.ForeignKey(Game)
        team = models.ForeignKey(Team)
        players = models.ManyToManyField(Player)
        
        class Meta:
            unique_together = ('game', 'team', )    # Only 1 roster per team per game


Regarding your original question, I can't see how a `post_save` handler does any good, you just need to create each model instance like so:


    game = Game.objects.create() # (or retrieve an existing game)

    # for team 1
    roster1 = GameRoster.objects.create(game=game, team=team1)
    for player in team_1_players:
        roster1.players.add(player)

    # for team 2
    roster2 = GameRoster.objects.create(game=game, team=team2)
    for player in team_2_players:
        roster2.players.add(player)

"
2013-08-26 17:03:10;Minimal Nginx and Gunicorn configuration for Django project;"One of the trickiest parts of running this kind of setup is setting gunicorn to run as a managed process that gets restarted on failures and starts up when the server starts. This tutorial would be enormously more useful if it covered that step as well.

(I've tried all sorts of things for this in the past, including init.d scripts, upstart, supervisord - I don't particularly enjoy any of them though).If this had been posted 24 hours before the original post time it would have saved me so much time! Great tutorial, thanks for sharing.
I'd just spent the previous evening working all this stuff out from different scraps of tutorials around the net, came into work, saw this, kicked self."
2013-08-26 14:45:28;Running DJango apps under IIS on Windows;"If you move to windows you're going to have a bad time, trust me.

Pretty much anyone with a little experience with Django will advise against running it on Windows.

Why don't you simply use virtualization ? 

Most of my servers are virtualized these days. It saves lots of headaches and the performance cost is negligible.Could you find a pure-Python standalone WSGI server that'll run on Windows (I think CherryPy comes with a production-ready server that satisfies this) and set IIS up as a reverse proxy in front of that?

Basically, like a standard gunicorn setup, but not UNIX.pretty curious how this turned outI've been meaning to write a blog post about this, but haven't got around to it yet.  

I wrote and manage a medium sized intranet app (maybe 15kSLOC & ~150 users) written in Python and Django running on Windows Server 2008R2 w/ IIS and MSSQL 2008R2. 

Like you, before I got into this project I was very concerned about whether this was feasible or not (and would have much prefered to use a Linux server) but decided to just jump in and try it. You know what? It hasn't been that bad.

We use are django-mssql as the database backend and an ActiveDirectory auth backend and I use IIS for two things:

* to serve static files &
* to act as a reverse proxy to a [CherryPy WSGI server](http://docs.cherrypy.org/stable/refman/wsgiserver/init.html) which serves the Django app.  This CherryPy server is [run as a Windows service](http://tools.cherrypy.org/wiki/WindowsService) so it gets started up automatically if the server ever gets rebooted.

This approach allowed me to forgo most of the headaches dealing with IIS and keep me mo.  It's easyish to set up and has been very solid for us so far. 

I don't have experience personally, but I know some people have had success using FastCGI and IIS to serve their apps.

edit to add:  pydanny is right. Sometimes you just don't have much of a choice about the platform you run on and it's not always desirable to ""quit & move"" either because a) you really like your interesting/decently paying job (like me) or b) because you have ""stuff"" external to work that makes it way more of a headache to move or find another job then to just shut up, deal with it and make the best of it.If you have to move to Windows, why not use Apache? Or, bring to light how terrible of an idea it is running Django on Windows.

Last time I tried, all of the various ways on the internet to run django (via ISS) are either extremely out of date or simply don't work. 

The only way I saw that might work is this: http://www.helicontech.com/articles/running-django-on-windows-with-performance-tests/ , but if I recall correctly, it doesn't work on the newest version of IIS and it's using an out-of-date version of django. (You have to install packages from their collection, as far as I remember) In the end, it was a masssive failure for me, but maybe it'll work for you.

edit: Clarified that running django on ISS is what's out of date, not running django period.I'm actually in a similar boat as OP at the moment (well, not exactly, but I see the boat approach on the horizon). I hope to figure out a way to make IIS act as a reverse proxy server to a real WSGI application, or figure out a way to just make Python act as a FastCGI.

If you are willing to just use FastCGI (you said this is low traffic), you may want to look at [this guide](http://mrtn.me/blog/2012/06/27/running-django-under-windows-with-iis-using-fcgi/).  You said that there are 15 users max, so there's the possibility that foregoing WSGI could be a solution.

I personally haven't done it though, so I can't vouch for if it is a good way to proceed or not, but I was planning to set up a test server at home and try both it out and [randlet's post](http://www.reddit.com/r/django/comments/1l4asn/running_django_apps_under_iis_on_windows/cbycsr1) to see how feasible they are. I had only heard of CherryPy in the context of a framework. I didn't realize it could serve as a WSGI server that is production quality. If randlet's solution works, then it would probably be the best way to handle the situation, provided the IT team you are working with doesn't mind having CherryPy in their stack."
2013-08-26 13:30:18;Asynchronous Testing with Django and PyVows;
2013-08-26 00:31:48;Tell me your favourite, non-default, admin skins/themes ?;"What /u/rackmountrambo is referring to is that, while some of these alternative themes are cool, they sometimes break with other django apps.  This is probably because doing extensive rehauls of the admin can be pretty tricky.  I've used Grappelli in the past and it was nice, but I've heard of people having problems with it.

A project to keep an eye on is https://github.com/pydanny/django-admin2, which is intended to be a more easily-customizable rewrite of the admin.
This is such a beginner trap.Check this out: https://www.djangopackages.com/grids/g/admin-styling/ (9 entries currently)

If you see something that's missing please add it.Happy Grappelli user here.  django-admin2 definitely sounds interesting, but it's got a ton of [dependencies](https://github.com/pydanny/django-admin2/blob/develop/requirements.txt), so it's really approaching more of a CMS framework in terms of weight compared to a skin/theme."
2013-09-02 16:04:34;12 most popular websites built with django;Did I miss the memo which detailed how 12 now equals 9? Are we counting in some obscure base or something?[Readability](http://readability.com) is ranked #11k and is written with Django: http://www.alexa.com/siteinfo/readability.comAssuming relative measures are remotely accurate on alexa (I doubt it, but what the heck), this is missing `rdio.com`.Much more than just addons.mozilla.org is powered by Django. See http://www.reddit.com/r/django/comments/1ldats/why_django_sucks_except_when_it_doesnt/cbycjgrPinterest?This is missing usatoday.com, which uses Django for templating.HubSpot.com is powered by their COS which uses Python and Django. Rank is 769.The NASA home site is Drupal, not Django. It does some feeds powered by Django sites in other parts of NASA.I thought reddit was written in django. Shows what I know.
2013-09-01 15:43:39;Adding Persona authentication to your django project;FWIW, django-social-auth has support for persona. Makes it a breeze to integrate.So does django-allauthThere is also a GoDjango screencast on it. https://godjango.com/11-browser-id/ However, using django-social-auth is probably a better idea.
2013-08-30 11:10:43;Seamless static files with Django, Compressor, and S3;An elegant solution, but a little light on code.I tested a similar setup with our django-based site (based on  dj-compressor).  The upload time to S3 was abysmal.  We make heavy use on in-request compression (with precompilers for coffee and lesscss), so it wasn't something that could be offloaded to deployment time (though even then, 15 minute deployments are a real burden).
2013-08-30 00:44:43;Why Django Sucks, Except When It Doesn't;"[deleted]After 11 years of working at a very successful startup I have learned the following:  you can be very successful regardless of technology.

Our product is a software-as-a-service and has roughly 25 million users all over the planet. We grew from 10 employees to 700 and are making a ton of money.  

The product is written in a language that was released in 1997.

The important thing is that you ship a delightful product.  If you can ship a product that is written in the world's best language...great.  But all that is secondary to shipping a product. 

Let me tell you, having the code in this old language has created some headaches but nothing we couldn't overcome.  Anyone know if there is a video about the talk of why django sucks? 
https://speakerdeck.com/kennethreitz/flasky-goodness [deleted]"
2013-08-29 18:56:14;Collectstatic on user uploaded files?;"Yeah, it's not the normal way to do it. Normally you'd set up the static web server to serve `app/static` and `app/media` at `/static` and `/media`, respectively. You'd then change `MEDIA_URL = '/media/'`.Just to add, this won't work.  `collectstatic` searches through your `STATICFILE_DIRS` and usually `static` in each of your app directories (this is all defined by `STATICFILE_FINDERS`).  And copies/links the files into your defined `STATIC_ROOT`.  Media assets are kept separately under `MEDIA_ROOT` where user provided files are stored.

To use static files in your templates you use `{{ STATIC_URL/wherever.png }}` or better yet `{% static ""wherever.png"" %}`.

For media files, you use '{{ MEDIA_URL/wherever.png }}' or your_model_instance.image.url.  Easy-Thumbnails provides [template tags](http://easy-thumbnails.readthedocs.org/en/latest/usage/#templates) that provide the url of the image scaled to the specified dimensions (and/or other thumbnailing parameters).Yeah, no. 

If you need to run an external command from within your code just so you can serve something that your code is supposed to serve, then you're in trouble.

There are quite a few third-party apps that can handle file-serving. Check out the File managers grid on Django Packages: https://www.djangopackages.com/grids/g/file-managers/

Alternatively, if you don't want a third-party app for your images, you can roll your own using PIL or Pillow. Links:

PIL: http://www.pythonware.com/products/pil/

PIL Tutorial: http://www.effbot.org/imagingbook/introduction.htm

Pillow: https://github.com/python-imaging/Pillow"
2013-09-09 18:16:32;Django App to user comments with admin approval and user e-mail notification of new replies.;"Admin approval is already something you can do using [the built-in moderation tools](https://docs.djangoproject.com/en/1.5/ref/contrib/comments/moderation/).

For the notification bits, you'd need some way to track what a user is subscribed to, so probably write a model for that and a subscribe/unsubscribe view. Then you could either listen for the [post_save signal](https://docs.djangoproject.com/en/1.5/topics/signals/) from comments, or go back to your `CommentModerator` subclass and tweak the email-sending method there.

Though in either approach, I think I'd recommend looking into something that background-queues the email notifications rather than trying to send them all during the request/response cycle, and possible consider just installing one of the already-built forum apps for Django which integrate this functionality (since it's pretty standard for forum setups)."
2013-09-08 20:29:14;Save The Change: Model Mixin That Automatically Saves Only Changed Model Data (Faster Saves for Free);"Wow, TIL django does not do this at default. With all the nice stuff in django, I just expected this feature.Do you have some benchmarks for performance improvement with different backend databases?

Whilst I see the logic in what you are doing, is it definitely faster to find the changed fields in python than it is to let the database handle the update?Tabs instead of spaces! Ahhhhhhh!Doesn't this potentially carry issues into your application where you'd expect your model/rows to have an invariant and concurrent updates on the same model may end up violating these unless you also formulated them as constraints in the database?For the times when inefficient updates are the cause of slowdown in a site, using Model.objects.update() will be the best optimisation, as it will avoid fetching columns, ORM overhead etc.

Applying a catch-all solution to address this specific potential bottleneck automatically just feels like extra code complexity and premature optimisation.We covered this in episode 10 of the Django Round-Up podcast, so expect tons of fame, acclaim, and money.


Or just a couple extra Github stars."
2013-09-08 09:03:55;forms.py with inputs/kwargs?;"can you post a code snippet? that would make it alot easier to understand your problem.

https://gist.github.com/

If I'm understanding your question correctly, you can't and shouldn't directly call forms.py from your form action.  

Remember, your forms.py is just defining the form class and methods, and you must instantiate the form in your view (creating a form object, *unbound* for rendering an empty form to your template, *bound* to request.POST for submission). 

I would also recommend reading up on Class-Based-Views (CBV), if you're not using them already.  It makes handling forms a cinch. "
2013-09-07 22:23:22;An Introduction to Django - A Series of Articles;"Why are you suggesting people use python packages from their distribution? They should be installing off of PyPI to make sure they have the version desired (usually the newest).Was just able to glance at this on my phone briefly but it looks really good. I'm a Django noob but I've been slowly but surely trying to learn in the evenings and am working on a website with it. I'll need this exact thing for my site so  should come on handy!I'll definetly check this out. Starting to learn Django and this comes at the perfect time!Any reason you chose to use sql instead of manage.py loaddata on step 2?

Edit : I'm also not a fan of model forms but I get why you go over it. You should cover normal forms though since that's what you are going to be using 99% of the time when doing stuff outside of the basics. "
2013-09-07 17:53:36;Unit Testing with pyVows and Django;"Neato!

We just started using Jasmine + Karma to test our JavaScript stuff, I'm noticing this ""expect"" ""toBe"" type stuff more often, I like it!Great article. Very thorough. Thanks!"
2013-09-16 20:38:59;Can someone help me with this views.py issue?;"If you edit your post to include the current state of your models that would be a good starting point for people who wish to help you.

Something like this should work:

Inside your views.py:

    from django.contrib.comments.models import Comment

    def myview(request, pk):
        #inside your view:
        user = get_object_or_404(User, pk=pk)
        comment_list = Comment.objects.filter(user = user)

Inside your template you can use this:

     {% for comment in comment_list %}
         {{ comment }}

You can access the object belonging to a comment with:

    {{ comment.content_object }}

You might want to use .select_related() to prevent lots of SQL queries every time you access an object related to a comment. "
2013-09-16 19:10:03;How do you name your Models?;"Go with singular, and don't worry about name collisions. Don't be afraid time split models into new sub modules if the current one is starting to bloat.

Imagine you have 2 submodules called blog and forum. You can have blog.models.Post and forum.models.Post. there's no need to call it BlogPost because it's implicit when you import it from the sub module.

Now if for any reason you need to refer to both in the same file, you can do this.

From blog.models import Post as BlogPost
From forum.models import Post as ThreadPost

And there you have it!Models with the same name should not be a problem if they are in different apps.

I'd submit it as a bug to Django Suit.you should name your models anything that is descriptive and helps you understand what the data represents. 

there's only one real hard rule I'd recommend for naming. The class name is the SINGULAR form of the noun. there are specific [meta attributes](https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options) you can use to describe the plural name if you want to. "
2013-09-16 19:07:09;Guess at least part of pbs.org runs on django...remember to set DEBUG=False on your Django apps!;"I work for WGBH (we make a large portion of PBS's content) and I can confirm that we (and PBS) use a lot of Django.

It isn't a WGBH site, so I can't fix it, but I'll let PBS know.Perhaps report it to the site admins?Well, it looks right to me now, but perhaps I'm just not looking in the right places?

Does someone care to explain exactly what gives it away and supply a screenshot of the issue in case it's been fixed?The PBS guys were at DjangoCon last year but not this year.PBS has been a long-time presence in the DC Django scene. Unfortunately they made a strategic failure hiring some senior managers looking to replicate their successes at AOL with an army of lowest-bidder outsourced coders so I believe much of the DC Django team has moved on.I used to do work on pbs.org. The bulk of pbs.org is actually built on a heavily modified django-cms they codenamed ""Bento"". It gives them a lot more in terms of permissions, authoring workflow, and a lot of stuff that large content driven websites require. At one point they were talking about open sourcing their changes, but I don't think that ever happened.


I do know that when I was working on pbs.org (around the time the new website first launched) the pbs developers were active redditors.

https://projects.pbs.org/confluence/display/lunchbox/BentoAs a relative newbie to Django, can someone explain the security implications of leaving debug = True in production?"
2013-09-15 22:35:16;Adding and removing custom Django Userena form fields?;"Hi.

This example is based on overriding default form. Place the code for example forms.py in some aplication. 

Then make change to main urls.py and there you tie the new form to registration view. You have to ""from yourapp.forms.py import customform""   before url line shown in example.

CheersIf you are new to python, you should probably read [this](http://docs.python.org/2/tutorial/modules.html). As with all python code, you can put the code anywhere you want and import it where ever you need it. 

If you have followed the [userena installation tutorial](http://docs.django-userena.org/en/latest/installation.html#start-new-app). You should have a folder called accounts. In that folder you can create a file named 'forms.py'. You can put your code in this file. 

Now you can import the form by putting the following line in your urls.py:

    from forms import SignupFormExtra
"
2013-09-15 18:13:20;Django, Webfaction, Apache Issue?;"You could try caching to disk rather than what I can only assume you're doing entirely in memory as a dictionary or whatever.Does the memory go down on your local version when you do this? If not, you might have a memory leak somewhere or you might not be dereferencing things.

Also, make sure you are not running in debug mode on your webfaction instance as it caches a lot more and is more of a memory hog.Thank you for the suggestions guys!  
I found a solution that ended up working for me.  
In the httpd.conf file I added a peramter to the WSGIDaemonProcess settings.  
I added maximum-requests=1, and now it dumps the ram as soon as it finishes working. "
2013-09-23 19:11:52;Is this intended behaviour? (select_related + annotate);"Erm, this might be slightly off-topic and a very n00b question but where/what is `bravo__charlie`? 

The `Bravo` model doesn't seem to have an attribute/relation named `Charlie`, from what I see. `Charlie` does have a `bravo` relation but shouldn't that make it `bravo_set__charlie`? (That's cyclical but serves the purpose of the example, I guess.)

Am I missing something? Help?"
2013-09-23 13:24:14;Integration testing with pyVows and Django;
2013-09-23 12:58:15;Deploying a Django application on AWS Elastic Beanstalk using S3;
2013-09-21 09:36:12;New to Django, not sure how app should flow?;"There is a tool built-in Django which generates Django models from a legacy database. This will help you access your existing data without importing it everytime. Eventually you can run the two different apps on the same database. There are docs for this here: https://docs.djangoproject.com/en/dev/howto/legacy-databases/#auto-generate-the-models

By installing mysql-python, you will be able to connect your existing database and working in Django with it. I recommend cloning it first so you don't develop on a production database.

A model instance (you call it object, I think you are referring to the instance) is nothing more than a Python representation of a row in the database. Changes will be saved in the database, you probably yes, you need a model instance for each dashboard.

You can use the Django admin for this, but at some point you will run in its limits and need to do some serious customization, or just make some 'normal' pages to work with particular data.

My tip: import your existing database by generating models and work on a clone of the live database, then enable your models in the admin (needs to be done in admin.py, see the docs), and see what you can do. 
Play around in the shell (explained somewhere in the beginning of the tutorial of Django), and notice that you can access your existing data. This will probably help you learning how models work, and chances are you can solve it yourself from there."
2013-09-20 19:09:57;Problem with UserProfiles;"CosmopetUser is just a Model and you seems to be trying to use it like it inherits the built in User model. I'm guessing this because you're calling `set_password` on it.

I think you should change CosmopetUser to inherit django.contrib.auth.models.AbstractUser. This also makes your `user` field on CosmopetUser unnecessary.

Edit: [Relevant Docs](https://docs.djangoproject.com/en/dev/topics/auth/customizing/#extending-django-s-default-user)Well... I have UserCreation working, but now I can't seem to allow the user to login. It keeps the users in a whole sperate area I believe. I can log into my login form with my superuser account, but when I try the users created with the custom registration form, it fails.

I've added a custom backend as well, but that just broke the ability of my super user logging in.

from models import CosmopetUser

    class CosmopetAuth(object):
    
        def authenticate(self, username=None, password=None):
            try:
                user = CosmopetUser.objects.get(username=username)
                if user.check_password(password=password):
                    return user
            except CosmopetUser.DoesNotExist:
                return None
        
        def get_user(self, user_id):
            try:
                user = CosmopetUser.objects.get(pk=user_id)
                if user.is_active:
                    return user
                return None
            except CosmopetUser.DoesNotExist:
                return None"
2013-09-30 20:39:25;Requesting help adding attendance in the admin view.;"https://docs.djangoproject.com/en/dev/ref/contrib/admin/ 
If you have already created the ModelAdmin class, then read the section about ModelAdmin.fields. specifically:
> The fields option, unlike list_display, may only contain names of fields on the model or the form specified by form. It may contain callables only if they are listed in readonly_fields.

You're going to want to specify a function on the model to return the total attendance for that event. Then, on the ModelAdmin you've specified, add a readonly_fields with that function name.I don't think you can do exactly what you're describing, but you can get something similar by creating an InlineModelAdmin for the EventAttendance model on the Event model admin.

Here's some quick sample code:

    from django.contrib import admin
    from app import models

    class EventAttendanceInline(admin.TabularInline):
        model = models.EventAttendance

    class EventAdmin(admin.ModelAdmin):
        inlines = [
            EventAttendanceInline,
        ]

Basically, instead of marking a checkbox, you just create a new instance ""EventAttendance"" for each Member who came to an event. To ""uncheck"" the box, just delete the instance."
2013-09-29 18:16:42;Protecting code and IP.;"> impossible to reverse engineer it

No code is impossible to reverse engineer.

The short answer is: nobody is going to bother with the effort of infringing your copyright.

The long answer is: this is not possible in Python. It's also not possible in Java or C#. It's arguably not possible in C. There is no such thing as ""impossible to reverse engineer"". If you get to where you have an actual real case of an actual real person actually really infringing on your copyright, then all the ""obfuscation"" and ""encryption"" in the world will do squat. What you will want is an actual real lawyer who knows actual real laws and will actually really accomplish things for you.How can any company deal with a service contract where their host is an attack vector? If you can't trust them, you shouldn't be sending them your code. > we are thinking on how to protect the code and the intellectual property of our source code

Get a lawyer. Django/Python puts no effort into that area.The bad news is you can't really accomplish that and still be sending source code to servers outside your control. The good news is, this is an age-old problem for lots and lots of web-architected products, and so mechanisms do exist to help deal with it.

A good starting point is licensing agreements, NDA, and other legal-type things where they promise not to use or transfer the code except in the very precise ways laid out in the contract. I would especially recommend (with the help of a qualified legal professional) looking into what are called liquidated damages. LD are where you specify ahead of time what the financial penalty is if the contract is breached in a particular way. For example, you could have your licensing agreement say that they can't use your proprietary code in any unlicensed products, but if they do you agree to liquidated damages equal to $25k or 30 percent of gross sales of that product, whichever is larger.

Past that, think like the most successful companies you can think of. For example, Coca Cola does not have any kind of IP protection for its secret formula. Instead, it keeps it a secret and provides the concentrated syrup directly to bottlers. If the bottlers behave badly, it can withhold the syrup. In the case of a product like this, you can stipulate in the licensing agreement that patches for security and so forth are contingent on your client performing according to the agreement. Even if this isn't explicitly spelled out in the agreement, withholding things like that can be a bargaining chip.

Finally, in keeping with the spirit of /u/ubernostrum, if they were capable of diving into your code and stealing it in a profitable way, they probably would have just coded it themselves and not hired you.

Best of luck. Let us know how you end up addressing it!the solution to your problem is legal not technical. I'm assuming you're making some sort of commercial, publicly-purchasable, user-hosted webapp; if you're not, and you can't trust the people running your servers, you need different people running your servers.

As others have said, reverse engineering is doable in any language and not particularly difficult in Python. I'd suggest you only ship the `.pyc` files of your application to keep honest people honest, but it's not going to stop anyone who seriously wants to decompile your code.

Dropbox [go to great lengths - even modifying the Python interpreter itself - to obfuscate the Dropbox client's source code](http://stackoverflow.com/a/15583739/445398), but researchers have still been able to successfully reverse engineer that.Your protections are going to be two main options: Legal based, NDAs/agreements. And No one really cares about your code. 
The company I'm currently working for uses a specially modified version of python that loads encrypted .pyc files. I wouldn't recommend attempting to do the same. It's way more hassle than it's worth, and ultimately still vulnerable http://lmgtfy.com/?q=python+obfuscate"
2013-09-29 15:37:27;I'm starting a Django project template. Feedback would be nice.;"you should look into [cookiecutter](https://github.com/audreyr/cookiecutter), specifically [cookiecutter-django](https://github.com/pydanny/cookiecutter-django).Your layout differs significantly from the default:

'Lib' isn't a meaningful keyword to have on your import path. I suggest ditching it and moving everything in it up to the Python path root (which is the same as your project root, right? it should be.)

Your main urls.py, settings.py, models.py and views.py are all floating in the top level directory. It is more standard to put urls.py and settings.py into a main folder, and separate any instamces of models.py and views.py into folders named after the purpose provided by the views and models. If you end up with a lot of views, you can add an additional urls.py to each of these folders as well.

Now, the beauty of Django is it adapts to your situation, so if you have known reasons for these non-standard layouts, then go for it. But be aware that differences in layout can make your project less compatible with other apps and middlewares.Take a look at the --template option of django-admin.py startproject here:
https://docs.djangoproject.com/en/dev/ref/django-admin/#startproject-projectname-destinationFor what it's worth, creating new projects is one of the least common things I do.

I would wager most developers spend much more time writing and fixing unit tests, as well as reading and debugging code.

Greenfield projects are not super common, and creating the initial project is a very short part of that process.

But hey, it's a learning project..."
2013-09-29 03:42:55;Including a Sidebar on each page of your site?;"An example including templates.

user_links.html

    <div class=""btn-group"" style=""margin: 0 auto; display: inline-block;"">
        <a href=""/users/detail/{{user_id}}"" class=""btn"">User</a>
        <a href=""/subscriptions/user/{{user_id}}"" class=""btn"">Subscriptions</a>
        <a href=""/payments/user/{{user_id}}"" class=""btn"">Payments</a>
    </div>

And then in your template you can actually include another template and even pass it some parameters.

    {% include ""user_links.html"" with user_id=user.id %}
You need to use a templatetags to display data from different sources on each page. in the view that renders the template you are displaying, you need to pass the data from the other apps into the context of the template.

so if you want a sidebar that shows the 10 most recently created comments you'll probably need something like this:

    context = {
        'recent_comments': Comment.objects.all().order_by('created_date')[:10],
        # and also whatever else should be in the context
    }
    return render('my_template.html', context)
"
2013-09-28 23:01:30;"Setting up ""likes"" or ""faves"" question.";"Search for ""Django generic relations"".django's generic [ContentTypes](https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/) system is probably what you're looking for. 

I've used it before and its decent, but not without some difficulties. Alot of the auto-magical model operations that django does for you (like cascading deletes on Foreign Keys, for example) don't happen automatically with generics. "
2013-10-07 15:19:51;Suggestions for Javascript framework to use with Django;"I've used Angular with Django. it works very well actually. HOWEVER you do need to make use of django's {% verbatim %} template tag in order to be able to use Angular's template system inside django templates.

https://docs.djangoproject.com/en/dev/ref/templates/builtins/#verbatimYou can use $interpolateProvider to change angulars's tags. See this SO for more info, and a warning against using both template engines together

http://stackoverflow.com/questions/8302928/angularjs-with-django-conflicting-template-tags
I've been using ember with a lot of success in a recent project - making heavy use of verbatim tags. 

There is also https://github.com/noirbizarre/django-embern00b question, what's the advantage/use of incorporating a JS framework with Django? Aren't the JS frameworks just front-end componentry? Your scripts should be included as `<script src=""/assets/js/filename.js""></script>` in your templates.  So you won't actually see any JavaScript in your Django templates."
2013-10-05 13:43:32;Choosing primary data store, cache and message broker;"The question is, do you NEED a noSQL solution for your data store? Sure, they can be fun to play around with, and they have their uses, but postgres or mySQL is going to be fine for the vast majority of django projects. If you drop it for mongo, you'll be losing the orm, which is a huge part of django's ease of use. Unless you have a real need for some kind of scalable noSQL solution (now, not ""if my site gets popular"") or you're just playing around for funsies, I'd stick to sql.

Redis would work fine for a cache and/or message broker, but I'd use memcached for your cache, as it plays so nicely with django and maybe varnish on top of that if you really need performance. Check out celery for message brokering as well, I think it supports redis as a backend.

EDIT: If you're doing something that involves high volume light messaging, you might want to use something other than django for that part of the application layer. I've had great results from a django + erlang (mochiweb) + a message broker setup and I know that's what Rdio does too. Feel free to substitute node, tornado or the like instead of erlang.> Anyone regrets switching from SQL to NoSQL?

Sure. I can think at least 5 startups in London that completely regret starting with NoSQL, and those are the ones that are introspective enough to admit it.

Unless (and until) you have a demonstrably intractable problem that Postgres cannot solve I see no benefit in looking elsewhere.If you're having to ask whether to use NoSQL or not, you probably don't need NoSQL. I get it, it's neat to be able to hammer out quick ad-hoc schemas, but you're going to take your lumps eventually.

Something we found was that yes, we were able to change our schema at will, but we ended up writing a lot more code to check things over, to enforce rules, and to handle different ""versions"" of the ""schema"". Unless you have zero need for documents to refer to one another and you really just want to store some dumb, flat data, you probably want a relational DB.

Also keep in mind that you can create NoSQL tables with Postgres (HStore). Why choose one when you can have the best of both worlds? You say primary data store, but I assume you really mean celery task result backend?  Most use cases for message oriented middleware only require temporary persistence for the work while in-progress, not necessarily built for long-term persistence and retrieval (think your SMTP servers, they keep a copy of the email until confirmed delivery vs your email inbox which is more of a database of received messages).

For those common off-load/background workloads, I've found that using redis for all 3 (result backend, message queue and caching layer) works great and simplifies deployment.  If you eventually need more complex capabilities you can separate those into more dedicated backends (say redis, rabbitmq and memcache).

I wouldn't suggest you use your database as a task result backend since it's basically just a scratch-disk for temporary results.  Ultimately, the results from these background tasks are collected and stored in a more persistent location such as an RDMBS that your users and/or systems interface with.MySQL, rabbitMQ, and memcached. Mainly because they are what I know, and none of my requirements needed anything different.if data integrity is important i wouldn't go with redis as the main data store - it does a good job as a cache (besides memcached) and a message broker (using it with celery) though.

with redis as the main data store you're practically bound to the size of your RAM as the maximum storage - you probably don't want that.

i would recommend postgresql as the main data store - [it even got descent noSQL storage options in the latest versions](http://thebuild.com/presentations/pg-as-nosql-pgday-fosdem-2013.pdf)

are there any you want to stick to a noSQL data store?postgresql - rock solid database

redis - has persistence to disk 

rabbitmq - fast, reliable

If you can - use RabbitMQ for celery.

I was in a similar situation, wanting to use fewer servers to do the job. Redis was already installed, RabbitMQ felt a little bit strange - and uses Erlang.

Using Redis with Celery has a [few caveats](http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#caveats) to take into consideration. Make sure your visibility timeout exceeds the duration of your longest task, and understand the potential consequences if a worker node dies.

Redis can do the job, but I'd prefer using something which celery was designed to work with."
2013-10-05 04:11:03;"when defining ""__init__(self, *args, **kwargs)"".. why do sometimes statements go before/after the 'super(..)' call?";"Consider this code (ignore the python3 use of `super`):

    class Parent(object):
        def __init__(self, arg):
            self.some_variable = arg

    class ChildA(Parent):
        def __init__(self, arg):
            self.some_variable = arg * 10
            super().__init__(arg)

    class ChildB(Parent):
        def __init__(self, arg):
            super().__init__(arg)
            self.some_variable = arg * 10

    print(ChildA(1).some_variable)  # prints 1
    print(ChildB(1).some_variable)  # prints 10

`ChildA` performs an initialization task differently than the parent class, so to prevent the parent's `__init__` method from overwriting this, we need to perform the customization after calling it. In a different situation, you may not want to call `__init__` on the parent class until you've sufficiently modified something about the child. As u/davvblack said, this is all down to the specifics of the classes from which you're inheriting. I should also point out that in this specific case, there's no real incentive to call `super().__init__(arg)` in the first place, since it doesn't do anything the child classes don't do for themselves.Sometimes a child will receive different kwargs than its parent. In this case you need to pop them off the kwargs dict before calling super or it will raise an error.It depends on what you want to do, and sometimes it just doesn't matter.  The super is the part that calls the parent \_\_init__, so it depends on if you want your custom code before or after that."
2013-10-04 21:50:57;True Facts About Time Zones;
2013-10-04 14:25:25;how to migrate to (start using) Virtualenv..?;"vitualenv is just a python virtual environment, it has very little (if anything) to do with your existing codebase. The one exception to that is, you'll need to install the correct packages TO your newly created virtualenv.

One way (I wouldn't recommend) is to:

    pip freeze > requirements.txt
    mkvirtualenv project
    pip install -r requirements.txt

This will get all of your currently install python packages into a new virtualenv. However, I would probably take this opportunity to clean out and only install the packages needed by this particular project. 

I would recomend reading a bit about virtualenv http://www.virtualenv.org/en/latest/

Virtualenv is also not a requirement, it's just HIGHLY recommended. It makes your life better. It prevents you from screwing up more than a single environment, and it keeps things separate. Take the time to learn.

Your code will still be commited the same way, it doesn't need to be pulled down again, and when you setup your production env, you'll still want to use the virtual env. I personally use Supervisor to activate my virtualenv before calling gunicorn. 

Edit:
I also just realized I used mkvirtualenv in the example above, this is specific to virtualenvwrapper http://virtualenvwrapper.readthedocs.org/en/latest/  Another tool I'd recomend. > From what I've read, if I want to serve my project properly I'll need to use Virtualenv.

not really, venv is most useful on dev environments where you might have several projects and thus collisions regarding the installed versions.

when you serve your application you're likely on a dedicated environment so unless you have several python projects on the same box you won't need it.

having said that venv is very good and you should definitely use it in your local env, try `virtualenvwrapper` too which adds more helpers to get the venv dir out of your way.Hey pookguy88,

So, getting started with `virtualenv` can seem a bit daunting at first--certainly did for me. FWIW, a disclaimer, I develop locally using `./manage.py runserver` and deploy using either [Gondor](http://gondor.io) or [Heroku](http://www.heroku.com). In this setup, I use `virtualenv` (and `virtualenvwrapper`) locally and let my hosting provider handle it on the production/staging server.

Using just `virtualenv`, some of my coworkers use this workflow when setting up a project on a development machine:

    $ git clone <repo_name>
    $ cd repo_name
    $ virtualenv .env
    $ source .env/bin/activate
    $ pip install -r requirements.txt
    $ ./manage.py syncdb
    $ ./manage.py migrate
    $ ./manage.py runserver

Mine's a bit different, because of `virtaulenvwrapper`, but essentially the same. The third and fourth step in the workflow above are key: the command in step 3 creates the virtual environment in the `.env` directory inside the checked out repo (so it would be at `$PWD/.env`; step 4 sources the virtual env activation script that does the `PYTHON_PATH` munging (and other necessary background bits) that isolates the virtual environment's Python install from the operating systems Python install.

When Danny talks about not editing the files in the virtual environment, in [2 Scoops](https://django.2scoops.org/), he means don't edit the files inside of the `.env` directory. All of those files have been downloaded from [PyPi](http://pypi.python.org) and are full on 'releases' of the packages. Having said that, I'll sometimes drop into the Django source (somewhere inside `.env`) and drop PDB break points to see what's going on.

Of special note, in this workflow, is what happens on step 5 `pip install -r requirements.txt`--`pip` installs all of the Python packages listed in your `requirements.txt` _only_ in the virtual environment you just created.

As for the question about developing on your production Apache server, you certainly can, although I find that's not terribly convenient for me. First, unless set up correctly code is not reloaded dynamically by `mod_wsgi` the same way it is with `runserver`. Secondly, this often means I am coding in `vim` in the terminal or via a shared mount, which often means lag time between typing and seeing the output.

But, to actually answer the question, one of the original use cases for `virtualenv` was to support isolated environments for Python apps on servers that had both subtle and extreme differences in dependency versions. As part of the setup of the Apache virtualhost, you'll active the `virtualenv` you've set up for the project. Adding another instance, or even a different web app, is as simple as setting up another virtualhost that points at a different `virtualenv`.

I hope this helps. If I've totally missed the point of the question (or even a piece), let me know.If you are planning on using Apache and mod_wsgi, then there are a few things you need to do to make this work well, since mod_wsgi does not have any support for virtualenv.

First, create a clean virtualenv, and install nothing in it. I call mine ""wsgibase"". This will serve as the Python installation that mod_wsgi will use.

Next, edit your apache config to direct mod_wsgi to use this Python installation. For example:

     WSGIPythonHome /srv/virtualenvs/wsgibase

This will give mod_wsgi a clean site-packages installation, and prevent any possible collision with Python packages installed on the hosting OS. Never install anything in your wsgibase virtual environment.

Finally, in the wsgi.py module for your project, add the site-packages directory in your app's virtualenv to the Python path. I also set the VIRTUAL_ENV environment variable, as I use it in my settings.py file. Here's an example wsgi.py:

    import os
    import site

    venv = '/srv/virtualenvs/MYPROJECT'

    site.addsitedir('{}/lib/python2.7/site-packages'.format(venv))
    os.environ['LANG']='en_US.UTF-8'
    os.environ['VIRTUAL_ENV'] = venv
    
    
    os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""local.prod_settings"")

    from django.core.wsgi import get_wsgi_application
    application = get_wsgi_application()

The caveat here is that mod_wsgi only ever runs on one Python version. Every project running on that server will be using the same Python binary, although, using the above instructions, each will have its own independent site-packages directory.I'm actually busy trying to make an easy to run virtualenv/django project. You can see how I do things [here](https://github.com/deonbredenhann/djtemplate/blob/master/scripts/local.py).

One of the tips I got from the bright people I work with, is to calculate a hash of your requirements and rebuild your env as soon as that changes. [here](https://github.com/deonbredenhann/djtemplate/blob/master/scripts/buildenv/__init__.py)

So my build scripts are checked into git, but the env is ignored in the .gitignoreI tried to write a short quickstart guide to Virtualenv some time ago: http://blog.dbrgn.ch/2012/9/18/virtualenv-quickstart/ It's directed at people totally new to Virtualenv, so maybe you already know some of those things :)"
2013-10-14 19:26:50;Django Rest Framework and AngularJS;"Good to see people starting to do this more.

Though you could save a metric tonne of code by using `ModelViewSets` and registering them to DRF's router.Woh, that's awesome, thanks for this long article on this!Great writeup, thanks Kevin.Great, I was looking for this exact thing for quite a while now. Thanks for this very detailed article!"
2013-10-14 16:25:27;Introducing Django-Easy-Timezones;
2013-10-14 09:21:32;Help on how to explain templating!;"Analogy is probably your best bet here.

Say you want a child. You want the child to look exactly like Charlize Theron. So you hand your doctor a photo of Charlize Theron and say, ""ok, here's a fertilized embryo, alter its genetic code to make my baby look like this! You just have to upload the photo, right?""You need to own it.  It takes time to do things.  Say it confidently and don't lose an inch when it comes to discussing the billable hours.  If it took you 4 hours and he thinks it was only a '5 minute job', well that's why you make websites and why he pays people to make websites; because he doesn't know anything about it. [deleted]Could always invite the client to sit with you while you make the changes. I suspect that after about 30 minutes they will get the idea. All the client really needs to know is there's going to be a bit of (hopefully billable) time to integrate what the designer has done with what you have done.  Unless your custom framework uses a custom templating engine, it shouldn't be a huge amount of effort to make this happen.  Work with the designer directly if you need to and are able to."
2013-10-12 13:16:12;Good Django Project for Beginner;"Not really a project per se, but I'm a fan of [Two Scoops of Django](https://django.2scoops.org/). My personal philosophy is that if you create a project based on solving an actual problem you have, you're far more likely to be passionate about learning & develop relevant (re-usable) tools for what you do. Step by step guides don't provide the same amount of creative thinking and problem solving. 

TL;DR design patterns > sample projectsAnother resource is [GoDjango](http://godjango.com) where you can screencasts on different parts of django. 

note: I am the creator of the site.Let me give a quick warning about the Django Book; it's really old. A lot of the practices/conventions in there just isn't used anymore. 

Have you done the tutorial in the [Django docs page?](https://docs.djangoproject.com/en/1.5/intro/tutorial01/) It's a really great place to start. After that I'd suggest finding a person or two and collaborating on a project with simple focus (RSS reader, twitter clone). It probably will be a flop but you'll learn a lot by just trying stuff out and failing.

Just my $0.02, good luck!http://gettingstartedwithdjango.com
is a video series that will show you step by step how to get a simple app up and running.Check out the mike hibbert's video on YouTube. Complete directions are given for a beginner to start a project from scratchI know you're getting a lot of conflicting ideas, but I started with the Django tutorial and went from there. It teaches you almost everything else you need to start a website up, and after you can start to analyze existing Django apps against each other to see if they will work for you.I learned Django by reading the docs. The intro has a step by step guide with examples. It was just right to learn how everything works and works together.On my phone so don't have a link but there's a twitter clone tutorial on TutsPlus called ""Ribbit"" that has some good information. Might be worth a look. I'm in the same boat! My first project was a ""post wall"" for simple tweets. It was a nice way to get into it. Working on a website for my wedding now. Great language.For me, Django is better than Rails for a beginner because there's less implicit shit going on so you learn how it works better.[Effective Django](http://effectivedjango.com/) can serve as a great beginner's guide. It explains Django usage using standard examples without going into deep discussion. Is there a need for fast production, especially when learning something new? I would say it's better to take it slow, and learn it well instead of rushing it and only knowing the basics.

Blog is usually a nice and easy way to start. Or maybe something like pastebin."
2013-10-12 11:43:01;Gondor & Django - Backups and Data Migrations;"> Does anybody have recommendations on how to sync data between 2 or more instances on gondor, so as to get all the data from the prod instance to the dev instance?

https://gondor.io/support/databases/#copying-data-between-instances

> What backup strategies do you have and what tools are you using for backups?

https://gondor.io/support/databases/#downloading-a-sql-dump

Store the dump like you would any other backup file."
2013-10-21 12:34:29;Tutorial to set up a Mezzanine local development environment;
2013-10-21 02:15:28;Vagrant template with Django already included?;"https://github.com/cacois/vagrant-python-django

The line in the vagrantfile to take note of:

config.vm.provision :shell, :inline => ""pip install -r ./app/requirements.txt""  so you can put anything you want in the requirements file.If you were making a Vagrant box specific to a project, then it might make sense to have Vagrant install the project's requirements.txt.  

Otherwise, everyone's needs are going to be different - some could start with the latest release, some the latest beta, some the current master and some unlucky few might need a really old version because that's what their project works with.There is a case for vagrant when you use more than just django. Say you need redis or memcached or solr etc, it would be easier to do  `vagrant up` than have each dev configure the same environment. What for? You don't use virtualenv?I've done exactly this to save our Windows contractors from having to mess around too much. Send me a message and I'll give you access.

We need someone to test it so you'd be doing me a favour!For the love of all things holy, don't use vagrant for django.

My coworkers just spent a few days unfucking a django project some vendor made that was designed to run in vagrant. 

Yes, your dev machine is going to be slightly different than your production machine, but the differences are minor. I use sqlite3 for dev and mysql or postgres for production and have never run into an error because of those differences. There's no reason to install a VM with all sorts of dumb variables you need to add to your path and whatnot FOR SOMETHING THAT'S WRITTEN IN A SCRIPTING LANGUAGE.

Like /u/nobloodyusername said, use a virtualenv and save yourself a headache and a half.

I can see the uses for vagrant, but django isn't one of them (unless your project relies on solr, redis, and cassandra, or something like that).

Sorry if this comes off as a rant."
2013-10-17 21:23:36;Django - SkyThumbnails Tutorial (Automatic Image Cropping);sorl-thumbnail is better simply because it does not have you pre-define the thumbnail sizes.  Why do that except for the last second?  You want the templates to make that decision, not the model code.what i'm missing, pardon me if I glossed over it. Is the image simply dowsized in presentation, at the same MB, or, is actual filesize downsizing going on? if the image size doesn't change this could yeild a serious performance hit.
2013-10-17 18:23:37;Python/Django Meetup in Lake Success, NY;wow right near me. This is awesome.Thanks for hosting, it was very informative.
2013-10-16 18:24:05;n00b problem deploying django+mod_wsgi+apache+osx;"What version of django are you using?
Check all your file permissions.
Also have you looked at this: http://stackoverflow.com/questions/15128135/django-setting-debug-false-causes-500-errorcheck if your mod_wsgi is loaded:

http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide#Loading_Module_Into_Apache

Also if you can paste here the error_log after restart and specify the django/apache versions you're using, it would be useful.

Have you added the ALLOWED_HOSTS setting?Kind-of a long-shot, but if the site is not very well-used you could set DEBUG=True ... and run it - it might show some extra information on the screen ... Just make sure to switch it back once you're done.

Also, not sure if this helps, but my apache config was giving me errors when I made the ""ServerName example.com"" instead of www.example.com. I ended up using ""ServerAlias example.com"" as well though.

"
2013-10-28 21:57:07;Django’s Class Based Views;FYI, OneToManyField doesn't existI'm from mobile, but is it just docs copy?
2013-10-28 08:24:01;Digging Up Django Class-based Views - 1;"http://ccbv.co.uk/ ... end of story.    context['readers'] = Readers.objects.count() 

Shouldn't it have Reader rather than Readers?Your EvenExtractor initializer needs a self parameter."
2013-10-27 20:51:17;Is your Django deployment idiomatic?;"a couple notes:

your way of doing settings_local is very common (I've certainly used it a lot), but makes it difficult to extend base settings, eg ``INSTALLED_APPS.append('some other junk')``. see the [two scoops project template](https://github.com/twoscoops/django-twoscoops-project/tree/develop/project_name) for an example of how to flip things around. It's a little more flexible. 

also you shouldn't serve static files with python if you don't have to. Since you already have nginx running on the box, add a static location block that points to some directory. Point STATIC_ROOT to the same folder and then run manage.py collectstatic as part of your deploy process. This will grab all the files and put them where they need to go. I'm not sure I'd really want to introduce Ruby just to deploy my DJango apps.I think you're using the word *idiomatic* when you're probably targeting best practices as the process is not inherently natural or pythonic. As others have mentioned, you're a bit short in a couple areas (like serving static files using your app server), but overall a helpful guide.

As an aside, why use fabric and chef?  If you're investing in cookbooks for configuration, they can also handle deployment. If you're looking to minimize dependencies, redis can take the place of both memcache and rabbitmq.Why not use some full page caching directly with nginx -> memcached?That gunicorn and django aren't separate boxes in the diagram bothers me way more than it probably should.  

Also, django talks to celery which talks to rabitmq.  Not d->r->c as it is drawn.

And finally django, not gunicorn talk to memcached and Postgres.

I suppose it is valid to say that django is running inside of gunicorn, but most of what is attributed I gunicorn in this write up is actually done by django. 

Apparently I care a lot about boxes and arrows precisely matching reality."
2013-10-27 09:25:24;"Tango With Django problem adding ""Add Page"" form";"I'm not totally sure as I'm just starting this section of the same tutorial myself, but it  think you need to add something to your urls.py that will split the request into 2 strings.  Similar to the way that you did in chapter 6.3.5 of the tutorial and stores one that is the request and one part that is the expression that points to the category that you want the page stored in.Your urls.py addition for that view doesn't match the view definition. Your view takes two arguments - ""request"" and ""category_name_url"". Request is passed automatically but where do you expect the second argument to come from? What are you expecting it to contain?

View arguments are captured from the URL, but at the moment you're not capturing anything. I suspect in this case you actually just want to delete the second arguments.Think about this hint: Update the category.html with a link to /rango/category/<category_name_url>/add_page/.  Your url doesn't have the <category_name_url> in it.  That's the missing second argument.  The function needs something in the URL to include as the second argument to the function. You also need to think about the first hint: ""Update the category view to pass through the category_name_url."" "
2013-10-26 23:28:31;django-redisboard - Redis monitoring and inspection tool in django admin;
2013-11-04 20:00:48;Show /r/Django: landscape.io - hosted static code analysis for Python with Django plugins;"Some more information about this: it's my side project I have been working on and off for a few months now. It's trying to do two things: 1) make more people do code analysis and 2) make existing tools easier to use.

Hopefully the ease of use of Landscape fixes number 1, and I have developed an (also open-source) tool called [Prospector](https://github.com/landscapeio/prospector) to wrap existing tools like pylint to try to make it all a bit easier.

Please let me know what you think!

Also, if you think it's warning about Django things that it shouldn't (BlahModel has no objects member for example) please let me know. It's supposed to auto-detect usage of Django

*Edit - of course the first person to try it caused a bug :)  Fixed now, hopefully django detection is betterVery cool! I've had an idea for something similar which does various types of fuzzing and security testing rather than this kind of analysis, but maybe you could add that in the future.

Trying it out now.. Seems a bit slow! So you can only work with Github repo's right now, correct?  Any plans for BitBucket, or any repo for that matter.Threw one of my projects in, ran into a bug, but I'm sure you'll fix it ;)Seems like it's stuck on pulling down my repo list. I'm really interested in this and might want to use it for a private repo, is that on the list in the future?

Edit: Finally went throughAlso ran into a bug :)It does not seem to like people with access to ~20k public repos. I am a team member of a Linux distribution hosted entirely on GitHub.

EDIT: Finally it imported the list of repos. I've let it analyze some projects and I have to say it does not play well with Django: https://landscape.io/github/mirumee/django-payments/1/messages/error

Also most of the messages are displayed off by one line.The ""Python Only"" language filter on the dashboard doesn't seem to do anything for me. Other than that, great, I've been looking for something like this for a while.Very very very nice tool. Just as I was looking for python version of Code Climate.

I'm hoping you will continue working on it, making it valuable friend of every python programmer.

As for problems and issues I've spotted, errors detection gives false positives on django model managers not having  "".get()"" attribute or django's mtpp not having insert_at. Still those reports that are real are still very helpful."
2013-11-04 06:52:56;Announcing the inaugural winner of the Malcolm Tredinnick Memorial Prize: Curtis Maloney;
2013-11-04 05:21:15;Is it bad practice to use sys._getframe like this ? It sure doesn't feel right, but I can't define why.. thread-unsafe ?;Yes. The `inspect` module would be a step up, but this kind of magical meta-programing is the kind of thing the next person to work on this code will hate you for. Pass in the request as an argument if you need it, or use a threadlocal and at least be explicit about what you are doing (but really, don't do that).What happens if there's a local variable called 'request' that isn't a request object somewhere in your call stack?Calling that bad is an insult to bad practices all over the world. It gets way too internal. Just define a thread local globally accessible name and use that instead. It's still bad but can be communicated and doesn't break in maddening ways.
2013-11-03 20:54:49;A question about Django application architecture/REST API (2 separate instances working together);"1. I currently have a large REST Framework API living in it's own ""api"" application. This contains all serializers and views for exposing other application resources. I actually regret having structured it this way, and would now use a much smaller ""api"" application. I'd prefer to have the serializers and views in e.g. `blog/api.py`, `account/api.py`, as this now feels to be the more appropriate division of responsibilities. You'd still use an ""api"" application for `urls.py`, custom fields, mixins, auth classes, etc.
2. Depending on the level of integration you're talking, just use the RequestFactory and pass requests directly to the views. I use class based views, inspect the Accepts header, then call different get methods (get_html, get_json, etc). You could do that in a decorator if you, or write a base View class which calls the desired GET. Most of the logic should be in your model and the views should be fairly lightweight in any case.I am working on something similar. We have one django app exposing a REST api, and a stateful javascript frontend.

We use [django-rest-framework](http://django-rest-framework.org/) to develop the API. It has ""viewsets"", which correspond to a collection of items, with create, read, update, delete, list operations.

If you want to do the frontend in django, make it a separate application. I.e. it has it's own folder with `models.py`, `views.py` etc. This *can* be deployed in the same django instance but can be easily separated. Put anything they have in common in a third app which will always be present.

For testing it depends very much what your back-end app does.  Look at the `mock` python package (unittest.mock in python3). Also look at [django's test client](https://docs.djangoproject.com/en/dev/topics/testing/overview/#the-test-client).I'm working on a number of different Django REST frameworks, all using the Django Rest API. 

Like execrator and AdvisedWang, I just start a new application called api, and then include the URLS from api and mydomain.com/api/rest/of/the/urls/here

I use class-based views and django rest  class-based api views for everything, and I have found that this setup gives a good, clean, easy way to add rest requests.I'm not an ember programmer, but there's a library out there. 
:-) 

https://github.com/noirbizarre/django-ember"
2013-11-03 16:17:16;Django Simple Publishing, a simple CMS / Blog app for Django;Very cool! Although It'd be nice to see a live demo of the app to get better insight without going through the installation procedure.
2013-11-11 01:02:43;[Question] Longer urls lists, fat conditional views, and server vs client side js functions.;
2013-11-10 03:09:17;Saving model with circular foreign key references in admin section.;"If I'm understanding you correctly, you might actually be wanting a many-to-many relationship (probably on album, pointing at image).

If an image can be on multiple albums, to what extent does it even have a foreign key relationship to an album?  If each album can only have one image, then you won't even need the many to many, just nuke the foreign key off of the image table.  

I think I need to understand your structure better to give you more specific advice."
2013-11-09 21:10:10;CMS / editable block favorite apps and best practices;"I use Django-CMS pretty heavily - I've built over 40 sites in it so far and haven't found anything else that so closely fits my way of building sites. It may be overkill if you just need basic text blocks, but it is very versatile and doesn't take over your site entirely, so should be able to sit alongside your existing site if necessary.

You can add placeholders to other apps outside the CMS - for example, a news article app that uses a CMS placeholder for the main content block, giving you access to the full set of content plugins.

You can also attach an app to any page and it will live under that URL, while still using CMS placeholders in the app templates, so for example you can add a product catalogue app to the CMS, but manage the content around it from the parent CMS page.

Plugins are also very easy to write, so it is very extensible.

I use Mezzanine as my CMS of choice. The community produced an extension to get flatblocks like functionality with it. https://github.com/renyi/mezzanine-blocksI wanted ""editable blocks"" for a site that didn't really need a full cms. I just made my own. It uses ckeditor inline for front end editing.

https://github.com/burke-software/django-content-editI personally really like the approach django-scribbler takes:

https://github.com/caktus/django-scribbler

"
2013-11-08 13:36:14;Having trouble with css files;Check the content type being assigned to the CSS files, maybe?Web2py makes this easy
2013-11-07 20:20:27;Question on the proper approach to store Django data and application data separately;"If you have multiple apps taking to one database, not only will you just end up building all much of your code multiple times and in multiple languages, but you will need to ensure that all of the apps feature sets stay in sync and you always use the right combination of apps with the same database. That will be a maintenance and deployment headache.

Unless you have very specific requirements, build one app that talks to your database and presents an API for other apps to communicate with. This will allow you to keep all of your business logic in one place and maintain a versioned interface when new features or added if you have old clients apps to support. You will also be able to change the database structure entirely without touching the other apps. I'd say a multiple dbs in the settings + a router is the way to go.Out of curiosity, why do you want to separate the two?"
2013-11-18 23:23:21;Django context processor for getting lots of request info;"Any reason why `import re` is on line 2 instead of at the top of the module? FWIW, every time that function is called, it's calling the re module.Mixed tabs and spaces in the example ...

And I thought user-agent sniffing isn't cool anymore ..."
2013-11-17 19:50:13;Get Started with Python Web Development;"that post doesn't seem to focus on eb development much

also i would say that django is actually more beginner friendly than using flask together with sqlalchemy for example"
2013-11-16 22:41:32;Issues setting up Django static files on a heroku deploy.;"Just a check, have you run collectstatic?Heroku doesn't host your static files. You need to host them somewhere else and adjust your STATIC_URL for that location.Not sure if you've seen these so I'll link them just in case:

Heroku Dev Center article on [Django and Static Assets](https://devcenter.heroku.com/articles/django-assets) which uses [DJ-Static](http://kennethreitz.org/introducing-dj-static/)

I had been planning to use Heroku + DJ-Static to host a tiny service that should run fine on their free plan and then use [CloudFlare](https://www.cloudflare.com) as CDN for serving the static assets using their free tier... but the CloudFlare DNS has been little flakey for me so I'll have to come up with a new plan.what version of django, and have you included 'django.contrib.staticfiles' in your INSTALLED_APPS?With issues like that, you don't need heroku. I had the same issue yesterday. If `DEBUG=True`, then static files are shown correctly. However, if you set `DEBUG=False` (try it on localhost), static files won't be served by the included web server. Try it with ""`foreman start`"" too. Following the steps as described [here](https://devcenter.heroku.com/articles/django-assets) I could solve the issue. I had to create a `static` and a `staticfiles` directory in the base folder (where `manage.py` is located). Then run ""`python manage.py collectstatic --dry-run --noinput`"". If it gives no error (`echo $?` should print `0`), then it's fine. When you upload to Heroku, `collectstatic` is run normally (no dry run) and static files are copied to the `staticfiles` directory from where `dj-static` will serve them. After a `git push` you should see that static files are copied."
2013-11-16 12:42:25;Binary Clock in Django;Interesting article, but using Django for this is so overkill it's not even funny.
2013-11-14 21:49:16;Django authentication CBV;"Hey,

you might find this project interesting:
https://github.com/stefanfoulis/django-class-based-auth-views/blob/develop/class_based_auth_views/views.pyDo you guys recommend using django-braces?don't be so sure that class based views are the future. the existing system is very convoluted (with all the mixins) and has a lot of problems. jminuscula: Thanks for the link. I'll take a look and see if I can adapt it to my needs.

metaphorm: It seems like there are a lot of people that share that opinion. I've come across several blog posts that say CBVs aren't any good, but some of them are dated so I'm sure how relevant they still are. Personally, FBVs are easier for me to understand, but like I said, since I'm new I don't have a problem taking a little more time to learn CBVs if that's the way things are going. Right now, it seems like both are commonly used, so it's just a matter of picking a side.OP, 

Here's a class-based authentication view for the application that I'm working on right now: 

http://pastebin.com/5g1Hs0st

This is a little bit more complicated, because it uses generic templates (so that developers can add different templates ( to increase conversion rates, so have you), but it definitely gets the job done. 

Some of the things done in the view need to be moved to the form, but it definitely works. 

At the bottom is also the quick and dirty form that is used on the template. I can send you an example template if that would help you, too. "
2013-11-25 22:32:55;Lack of Django screencasts ?;
2013-11-24 18:05:15;CSRF verification suddenly failing (Tokens are present to so what gives?);"Are you using (page) caching? Which caches the CSRF token of the first visitor.I'd first check that the CSRF cookie is really being sent in the GET headers. If it is, then check that the domain, path and 'secure' flag are being set appropriately - if they don't match your setup then the cookie will never be sent and you would see what you are seeing.

For the same reason, check that you aren't trying to accidentally POST across a domain - are you perhaps accessing the site differently? eg. with or without SSL, or maybe even with or without a www prefix.

Also I'd check your server's clock - if it's very far in the past then the cookie will immediately expire and not be sent by the browser.

It should be a clue that it did work before though and has now stopped without any changes, but I can't seem to work it out as it should be stateless - Django's CSRF protection doesn't use the session engine (which could presumbly fill up)I believe the CSRF token is set as an http cookie as well. I'd recommend validating the cooking against the <input type=""hidden"" /> manually."
2013-11-24 15:00:12;Use Fabric to boostrap a Django project;"That's pretty god damn incredible actually. I use Fabric quite a bit in my day job, fabtools looks like a nice little companion. 

Admittedly I used the excuse of needing to bootstrap Django/Postgres/Nginx/Memcache/uWSGI to learn Salt - but this IS simpler in my opinion. 

With that, how do you manage pg_hba.conf to handle auth for user(s)? Is that a part of the magic of fabtools? 

"
2013-11-24 02:22:09;Add Logged in User to ModelForm;"The easiest place to do this is in the view. You don’t actually need to present it to the user in the form.

Where you `save` the form to create a model, change it to this:

    new_course = form.save(commit=False)
    new_course.instructor = request.user.instructor
    new_course.save()

You’ll probably want to make sure that `request.user` is logged-in, and that they have an `Instructor`.I generally do what sneeu suggested, but you always have the ability to override the save method. And inside of the save method context, I believe that you can make a call to self.request.user and update it there. Could potentially cut down on repeated code. 

https://docs.djangoproject.com/en/dev/topics/db/models/"
2013-11-23 23:44:28;TIL: Django has LTS release - currently 1.4 (supported until at least March 2015);Yep. Started doing this after they ramped up their development schedule. I believe at Djangocon they said that they would probably make 1.7 (the first with integrated migration support) the next LTS release.
2013-12-02 07:43:47;Why isn't this subreddit more popular?;"Everything has already been solved on Stackoverflow. If you want smalltalk, you can spend the whole day on #django at freenode. If you want updates on interesting packages, subscribe to the django weekly newsletter. If you still read RSS subscribe to Planet Python and the Django community aggregator.\#django on freenode is a good place to start if you find this subreddit not as active as you wish :)

Edit: Thanks, /u/sli You answered your own question.

The size and quality of existing communities and documentation is already quite good.Because Django sucks

EDIT: You haters know it's true."
2013-12-01 23:39:40;Deploy Django applications with Fabric. X-post /r/python;"    def collect_static():
      with cd(env.manage_py_dir):
        with settings(warn_only=True):
          virtual_env(""python manage.py generatemedia"")
          with cd(""_generated_media""):
            run(""gzip -9 * -r"")
            run(""find -type f -name '*.gz' | while read f; do mv \""$f\"" \""${f%.gz}\""; done"")
          with cd(""giaola/_static""):
            run(""gzip -9 * -r"")
            run(""find -type f -name '*.gz' | while read f; do mv \""$f\"" \""${f%.gz}\""; done"")
    
          virtual_env(""python manage.py collectstatic --noinput"")    

What this does is generate my media first, which is done through django-media-generator. This combines and compresses all my css (from sass) and js files. Then, after moving into that directory, it gzips everything and removes the .gz extension. It does the same for my regular static files.

This saves significant client side time. Imagine, 100kb to 10kb for my css. 
    
    app_name            = ""giaola""
    env.site_root       = '/srv/www/' + app_name
    def get_localization_files():
      locale_path = env.site_root + ""/current/src/giaola/locale/""
      el_path = locale_path + ""el/LC_MESSAGES/""
      en_path = locale_path + ""en/LC_MESSAGES/""
      local(""scp ubuntu@"" + env.hosts[0] + "":"" + el_path + ""django.po tmp/el/"")
      local(""scp ubuntu@"" + env.hosts[0] + "":"" + en_path + ""django.po tmp/en/"")

So, here there are a few specific variables to my project. ""giaola"" is the name of my app and it sits in /srv/www/giaola/. In there, I have to folders. ""current"" which is a symbolic link to my latest deployed release and ""releases"" which houses my last 20 or so deployed code releases.

""locale_path"" is where my locale files exist, for english and greek. What I do here is I scp the two .po files to a temporary folder locally. Then I use this:

    
    def put_localization_files():
      locale_path = env.site_root + ""/current/src/giaola/locale/""
      el_path = locale_path + ""el/LC_MESSAGES/""
      en_path = locale_path + ""en/LC_MESSAGES/""
      local(""scp tmp/el/django.po ubuntu@"" + env.hosts[0] + "":"" + el_path)
      local(""scp tmp/en/django.po ubuntu@"" + env.hosts[0] + "":"" + en_path)
    
      with cd(env.manage_py_dir):
        with cd(""giaola""):
          virtual_env(""django-admin.py makemessages -l el"")
          virtual_env(""django-admin.py compilemessages -l el"")
          virtual_env(""django-admin.py makemessages -l en"")
          virtual_env(""django-admin.py compilemessages -l en"")
        run(""touch apache/django.wsgi"")

To upload them back to the latest code deployed. Now, some might ask why I don't simply upload them with git, like all the rest of the code. The problem is that other parts of my team maintain the translations through Rosetta and they don't know Python. So, that's why I need to copy it from the remote server and re-upload it after deployment.I love using Fabric. It's set up so that I can fully deploy, collect static files, gzip them, link to Apache, restart supervisor etc all in one line. I just type fab <server name> deploy and I go and grab a cup of coffee. I've introduced other developers to it and they just love it. It's kinda hard to initially get a grasp on it but it gets much easier once you get the hang of it.bookmarking.  Still in development phase look forward to testing this out when I get to deployment :)"
2013-12-01 14:26:57;Real E-Mail validation;"don't do this.

1) it can potentially tell you an email address exists.  checking the helo CANNOT tell you an email address does NOT exist.  many modern servers will reject these requests as part of anti-spam techniques.

2) checking whether an MX resolves once in real time is not reliable.  SMTP servers check multiple times before reporting the message failed to send because MX results occasionally come back as null for even the largest email providers on earth (gmail and yahoo).  No no no. This is one of the **worst** tips and can easily lead to a denial of service attack.

I could setup a malicious SMTP server which keeps connections open for as long as possible, lingering on each response to keep the remote client connected. Now all I have to do to is submit a form using such a malicious email address and it'll prevent one of your Django processes from handling requests for other users.

So if you've limited your site to 4 processes (for example), it would be trivial to keep the site locked down with just a few requests.

Maybe I'm missing something about Python - why does the author not close the connection to the STMP server in this code?

        try:
            for server in [ str(r.exchange).rstrip('.') \
                            for r \
                            in dns.resolver.query(hostname, 'MX') ]:
                try:
                    smtp = smtplib.SMTP()
                    smtp.connect(server)
                    status = smtp.helo()
                    if status[0] != 250:
                        continue
                    smtp.mail('')
                    status = smtp.rcpt(value)
                    if status[0] != 250:
                        raise ValidationError(_('Invalid email address.'))
                    break
                except smtplib.SMTPServerDisconnected:
                    break
                except smtplib.SMTPConnectError:
                    continue
        except dns.resolver.NXDOMAIN:
            raise ValidationError(_('Nonexistent domain.'))
        except dns.resolver.NoAnswer:
            raise ValidationError(_('Nonexistent email address.'))What a shitty advice ...

Everybody knows that the only way to validate an email address is to send an actual email with a confirmation link."
2013-11-29 22:18:04;"Hey /r/django, Digital Ocean is having a Black Friday sale - use the code ""BLACK50"" for a $50 coupon";Says it has already expired for me.ExpiredIt's probably being hosted on their Amsterdam server so the time is wrong. It is now Saturday in Europe.You should also be more upfront when using referral codes.
2013-11-29 17:54:33;Announcing the first ever Python Indie Bundle sale!;"We've included the following:

* Two Scoops of Django: Best Practices For Django 1.5 (Daniel Greenfeld & Audrey Roy)
* Treading on Python Volume 1: Foundations of Python (Matt Harrison)
* Treading on Python Volume 2: Intermediate Python (Matt Harrison)Very cool combo. i have two scoops, but the other books are new.

hang on... i can get it with bitcoin! YES!!![deleted]"
2013-12-09 20:44:10;Djangocon EU 2014 is to be held on an island;"Can I be the first to say ""FUCK YES'""is it going to be crazy fucking expensive like the last dangocon?[deleted]Looks like I will be getting my employer to bankroll my holiday :DAwesome. How much will be the ticket price?"
2013-12-09 06:58:48;Now that Django 1.6 uses JSON serialization for sessions instead of pickles, what risks does a leaked SECRET_KEY present?;"The secret key is used to sign data that you send out to a client (usually in a cookie) so that when the data comes back to the server, you can check the signature and be sure that it wasn't tampered with. If your secret key gets out, anyone could tamper with that data, potentially allowing them to change their session state at will. Just how much of the session they can tamper with depends on how much you store client side, but it's a massive problem either way.
Not the worst exploit ever, but one could generate valid CSRF tokens for your site and thus get around that protection.Could you not generate valid password reset tokens for any user? Pretty bad then."
2013-12-08 22:23:59;A plugin that helps creating key-value models, do you think it's useful?;
2013-12-08 19:34:52;Should I use foreign keys across apps?;"I'd wager most devs have written a foreign key to `django.contrib.auth.models.User`.yes, this is totally fine. in practice, this is no different than having foreign keys to other tables in your database. here are a few things to watch out for, though, when designing your models:

- if two models from different apps are often used together, consider if they have the same overarching theme. if they do, considering moving them into the same app.
- beware circular imports. if you're finding yourself in a circular import scenario, consider whether or not you'd be well-suited to combine these models into an app, or break apart functionality further

past that, FK away.
As long as app A claims app B as a dependency, there's no problem with A containing a foreign key to B.Related - I'm curious if there is anything ""official"" suggesting the size of scope that apps should be?    The sample app from the tutorial is just a Poll.  Really tiny in scope but it is quite self contained.   there's really two different types of apps that both get called the same thing, but in practice are distinct.

the first type of app is basically just a folder in your project that helps you organize things for yourself but its for internal use only and there is no expectation that you'll ever use it in another project. 

the second type of app is the ""pluggable"" app, which is designed to be re-used in many different projects, and possibly even bundled up in a package and distributed via PIP. 

for apps of the first type its absolutely fine (in fact basically inevitable) to have dependencies on other apps. for apps of the second type its very important to have no dependencies at all or else you'll have a hard time re-using them. My opinion:
For most ""complex"" projects (let's say 50+ entity types) you can't always avoid having relations between apps.

Otherwise your apps becomes ""super-apps"" which is the same to not having apps structure at all.I've been doing web development since 1997 or thereabouts. I have experience with applications getting large and a bit out of hand, and steps you should take to keep the records clean.

I would recommend against using numeric foreign keys across applications if you can. Instead, I would use UUIDs and/or slugs (in cases where you know you can always have unique slugs).

The reason for this is if you ever have to decouple the applications for any reason. For example, if they're moved to a new database. It might end up being complicated to keep the IDs the same as they were before. Also if the new system handles new sequential key generation in a different manner you may end up having to rewrite code.

If you start from the assumption that cross-app records aren't going to know each other's actual numeric IDs, then you will be writing code that can handle records in nearly any format you can imagine. Django supports foreign keys on fields other than the primary key so long as they are unique.

EDIT: **Wait, are you talking between completely different systems or just between smaller Django apps? If the latter, than ordinary foreign keys are fine.** I thought you meant different systems. For example, I have systems running on Wordpress, PHP, Django, Java, etc. Some use different databases and some use the same.

If *all* you're talking about is small apps created by Django, then in fact foreign keys are not only recommended but essential. In nearly every app, at some point a record is going to be tied to a user. In which case you're going to be using a foreign key pointing to `django.contrib.auth.models.User` (or whatever User model you're using instead)."
2013-12-07 07:41:40;Displaying inline thumbnails in admin;"http://sorl-thumbnail.readthedocs.org/ onlyHow about [django-form-utils](https://pypi.python.org/pypi/django-form-utils)'s ImageWidget ? Otherwise you can search yourself, can't be [that hard](https://www.google.com/search?q=django+image+field+form+thumbnail) ...Look at [feincms](http://www.feincms.org/). It comes with a [media library](http://feincms-django-cms.readthedocs.org/en/latest/medialibrary.html) particularly suited to display thumbnails inline. I've been using that the past few days and you just need to plug it in the admin and your model. About three lines of extra code.If you want to save a thumbnail version of the uploaded, you can do it with PIL after adding a new field to your model and overriding the default `save` method. Here's a snippet of code pulled from one of my projects that does it:

    import os
    from cStringIO import StringIO

    from django.db import models
    from django.core.files.base import ContentFile
    from django.core.files.storage import default_storage as storage

    from PIL import Image

    from <project>.settings.base import MEDIA_ROOT
    from <app>.settings import THUMB_SIZE


    def thumb_upload_to(instance, filename):
        filename = os.path.basename(filename)
        return os.path.join('thumbs', filename)

    def photo_upload_to(instance, filename):
        filename = os.path.basename(filename)
        return os.path.join('photos', filename)


    class Photo(models.Model):
        photo = models.ImageField(upload_to=photo_upload_to)
        thumbnail = models.ImageField(upload_to=thumb_upload_to, editable=False)

        def save(self, *args, **kwargs):
            """"""
            Make and save the thumbnail on save.
            """"""
            super(Photo, self).save(*args, **kwargs)
            if not self.thumbnail:
                if not self.make_thumbnail():
                    raise Exception('Could not create thumbnail - is the file type valid?')

        def make_thumbnail(self):
            """"""
            Create and save the thumbnail for the photo (simple resize with PIL).
            """"""
            fh = storage.open(self.photo.name, 'r')
            try:
                image = Image.open(fh)
            except:
                return False

            image.thumbnail(THUMB_SIZE, Image.ANTIALIAS)
            fh.close()

            # Figure out the filename, and extension for the thumbnail
            thumb_name, thumb_extension = os.path.splitext(self.photo.name)
            thumb_extension = thumb_extension.lower()

            thumb_filename = thumb_name + '_thumb' + thumb_extension

            if thumb_extension in ['.jpg', '.jpeg']:
                FTYPE = 'JPEG'
            elif thumb_extension == '.gif':
                FTYPE = 'GIF'
            elif thumb_extension == '.png':
                FTYPE = 'PNG'
            else:
                return False    # Unrecognized file type

            # Save thumbnail to in-memory file as StringIO
            temp_thumb = StringIO()
            image.save(temp_thumb, FTYPE)
            temp_thumb.seek(0)

            # Load ContentFile into the field to get saved to disk
            self.thumbnail.save(thumb_filename, ContentFile(temp_thumb.read()), save=True)
            temp_thumb.close()

            return True

The basic gist behind it is to resize the image using PIL and save the thumbnail to an in-memory file that gets written to disk once the thumbnail field is saved."
2013-12-16 22:27:55;PhantomJS, Selenium, and Django: Headless Browser Testing for the Rest of Us;https://github.com/dobarkod/django-casper is quite good too.
2013-12-16 04:42:42;urls.py ?regex? error;"The ""\d+"" in that regex will only match one or more digits, so your slug ""first_reaction"" won't hit that route. Try replacing it with ""\w+"", which will match letters, digits, and underscores."
2013-12-16 00:59:35;Just finished the Django tutorial - What now?;"I would recommend [Tango with Django](http://www.tangowithdjango.com/) It kind of continues where the official tutorial left off and it goes a lot deeper. http://effectivedjango.com/ Has some good materials for moving on and there is a youtube video of a talk about it.

Youtube's got a lot of decent videos for django. There is one on how to make a blog in 8 minutes. Another long set by [Mike Hibbert](https://www.youtube.com/user/MickeySoFine1972) that goes over some decent stuff.

1.6 was just released so some of the tutorials may be a bit dated. Still, you should have a lot to work with.
probably something like `Polls.objects.filter(choices_set__isnull=False)`http://chimera.labs.oreilly.com/books/1234000000754/index.html

Try this.  check out this post. there's a bunch of beginner tutorials here
http://www.reddit.com/r/django/comments/1ut7ap/in_need_of_tutorials/Have a nice cold one. I suggest having a bottle of [Edmund Fitzgerald](http://beeradvocate.com/beer/profile/73/226) by Great Lakes, the best American porter you'll ever find. Pours as dark as night with a deep, smokey robustness. two scoopsFor the polls you can chain filters and use distinct.  so something like:

Polls.objects.filter(choice__isnull=False).filter(another filter).distinct()

Order of filters can make a performance difference for LARGE datasets but shouldn't make any difference with the size of data your working with.

Also for the general question of learning django / web development (and a shameless plug :) ) I'm running a kickstarter right now for an advanced django book, but we have a package of three books, starting at intro to python, then to basic web development and finishing with advanced django development.  You can check out the kickstarter here:

http://kck.st/1b0tz6I

Hope that helps.
Jeremy
after reading the tutorial I started building something and instantly got stuck as the tutorial was great but really just skimmed the surface.   After asking a lot of questions and googling I eventually discovered this 
http://www.djangobook.com/en/2.0/index.html
It warns that it's dated  but it's done wonders in fleshing out what the tutorial skimmed over
"
2013-12-15 13:10:18;Dynamically creating a filter from request.GET.;"See if you can use django-filter or an app like that. You can also shorten this code very easily with something like this


        q = Q()
        formattedq = request.GET
        formattedq = formattedq.copy()

        if 'industry' in request.GET and 'industry' is not None:
            q = q & Q(industries__id__in=formattedq.getlist('industry')]

        if 'deployment_model' in request.GET:
            q = q & Q(deploymentmodels__id__in=formattedq.getlist('deployment_model'))

        result = Software.objects.filter(q)>formattedq = request.GET
>#QueryDict instance is immutable so we need to make a copy
>formattedq = formattedq.copy()

You are not mutating the dictionary, so you do not need a defensive copy of it.

> if 'industry' in request.GET and 'industry' is not None:
the ""and"" clause is unecessary, the string 'industry' can never be None

If you are ONLY using and filtering, you do not even need a Q object.

for example

                            
    def some_view(request):
        software = Software.objects.all()
        _filters = [ ('industry', 'industries__id__in'),
                      ('deployment_model', 'deploymentmodels__id__in')]
        for attribute, lookup in _filters:
            if attribute in request.GET:
                software = software.filter(**{lookup: request.GET.getlist(attribute)})


However, I would recommend that you let the filtering be performed within a django form instead, that way you 
can get user input validation almost for free.

Do you have a question? I believe this is called a ""faceted search."" You might be able to find an existing django package as either an example or to use directly.  Here is what i ended up doing but looking at the answers chyrssler's solution looks very elegant. 

def software_list_ajax(request):

    if request.is_ajax() and request.method=='GET':
        result = []

        if 'industry' in request.GET and request.GET['industry'] is not None and 'industry' != '':
            formattedq = request.GET
            formattedq = formattedq.copy()
            formattedq = formattedq.getlist('industry')
            softquery = Q(industries__id__in=[ind for ind in formattedq])
            result.append(softquery)

        if 'deployment_model' in request.GET and request.GET['deployment_model'] is not None and 'deployment_model' != '':
            formattedq = request.GET
            formattedq = formattedq.copy()
            formattedq = formattedq.getlist('deployment_model')
            depquery = Q(deploymentmodels__id__in=[ind for ind in formattedq])
            result.append(depquery)

        if 'features' in request.GET and request.GET['features'] is not None and 'features' != '':
            formattedq = request.GET
            formattedq = formattedq.copy()
            formattedq = formattedq.getlist('features')
            softfeatquery = Q(softwarefeatures__id__in=[ind for ind in formattedq])
            result.append(softfeatquery)

        if len(result) > 0:
            result = Software.objects.filter(reduce(operator.and_, result)).distinct()
            result = serializers.serialize('json', result)
            return HttpResponse(result, content_type=""application/json"")
    else:
        SoftwareSearchForm()
    return render_to_response('software_list.html',
        {
        #'software_list':results,
        'SoftwareSearchForm':SoftwareSearchForm,
        #'formattedq':result,
        },
        context_instance = RequestContext(request)
        )[django-filter](https://github.com/alex/django-filter) is pretty nice, and very easy to integrate in your application (just create a FilterSet for your model and use a FilterView). Each a filter is a different GET key/value pair, and you can have filters that follow relationships (book\_\_author\_\_name=""X"").

Shameless plug, if you want to follow relationships, you may want to check out [my fork](https://github.com/pstch/django-filter) of django-filter, where I implemented the possibility to use select_related when querying the available objects for each model field (used when displaying the filtering form). I shall soon be submitting a PR to upstream, but I need to clean up the code, write docstrings and add tests beforehand."
2013-12-15 02:22:57;Django 1.7 Schema Migrations - Good enough to replace South?;"(I'm the person who wrote South and is writing the new 1.7 stuff)

They're fully intended to replace South - I've taken the lessons from the past 6 years of maintaining South and put them into some big design changes that make the whole thing much better designed for modern workflows/version control systems, as well as making it even easier to use.

As /u/Kabal303 says, the code will re-emerge from core as South 2 and be backported to 1.4 so you can ship new-style migrations with third party apps.Definitely looking forward to them.  The schema migrations in Django 1.7 are developed by the developer of South and he intends them to replace South, so it's a safe bet that they are good enough to replace South.  I've followed what he's said about it somewhat and it sounds like there are a lot of improvements in terms of long term maintainability, which can get very messy with South.1.7 migrations ARE south. They are going to be back ported to 1.4 or so as South version 2.0. Funded by a [kickstarter](http://www.kickstarter.com/projects/andrewgodwin/schema-migrations-for-django) you can keep up with the main django migration developer on [his (Andrew Godwin) blog](http://www.aeracode.org/category/django/)This is really cool, thanks for sharing this.. And thanks aera :DAndrew talks in detail about the upcoming switch to internal migrations and the components of the rewrite of that code. Great talk.

https://www.youtube.com/watch?v=JXGW56CGsCMROFL - best stupid question evar"
2013-12-23 18:46:34;Bookkeeper: A double-entry bookkeeping system for Django;"I've been waiting for something like this. Can't wait to try it out.I use this: http://ledger-cli.org/

also double entry book keepingCan someone explain this to me?

'#Someone pays you can advance.  Yay!
>>> bank.debit(120.00, revenue, ""our first sale"")
(<AccountEntry: 120 >, <AccountEntry: -120 >)

#but now you have to do some work.  The local coffee shop has free wifi..
>>> bank.credit(2.20, expense, ""coffee"")
(<AccountEntry: -2 >, <AccountEntry: 2 >)'


Where is the double entry?

You debit 120 for revenue into the banks accout??

If someone pays you, you credit revenue and you debit your bank cash.  Where is the credit to the revenue?  Does it just keep track of your bank balance? because that is not double entry.   

Also you credit your bank and categorize it as an expense.... the proper entry is to debit for expense and credit your cash(bank).  By double entry do you mean you take the account from the debit side and the dollar boolean from the credit side?  That seems kind of confusing to me.

I am thinking about this in my accounting mindset so please correct me if I am just way off.  "
2013-12-22 17:07:11;Django Debug Toolbar 1.0 released;"I've been using it for long time.

Didn't realized that it was not released yet.

However, an essential tool for Django programming."
2013-12-22 16:57:18;"New edition of ""The Definitive Guide to Django"" out soon? Looks doubtful. Any news out there in the community?";"IMHO Two Scoops Of Django is the current definite guide to Django and they are working feverishly to update it to Django 1.6 judging from their tweets.i doubt that serious effort to update ""The Definitive Guide to Django"". Apress isnt going to pay them enough to make them drop the money making things they are doing...just go to djangobook.com"
2013-12-22 12:00:07;Lightweight state machine for Django;"Interesting. 

Perhaps an example using an [enum](http://www.python.org/dev/peps/pep-0435/) or an enum-like class would be helpful as the 'first_state', 'second_state' bits seem arbitrary and no help is provided about the validity of the state if you happen to use an IDE. "
2013-12-22 10:50:46;Could this sub get some sidebar links?;I was really hoping to find some resources in the sidebar when I first came here.  I was surprised to find a sub with almost 9k readers and no information available in the sidebar.Agreed. I found this post by searching for beginner resources. It didn't come up with any actual resources, though. :/
2013-12-27 15:50:06;Transaction Management with Django 1.6;"> Why didn't the transaction roll back correctly? The reason is because transaction.atomic is looking for some sort of DatabaseError and well, we caught that error (i.e. the IntegrityError in our try except block), so transaction.atomic never saw it and thus the standard AUTOCOMMIT functionality took over.

Does the decorator rollback the transaction on any error, or just `DatabaseError`?this is just marketing 4 the kickstarter the y maked... the get u 2 pay on kick starter then u pay for the book... they should give it away like getting starterd with django... open source amiright!

make sure to get the book 4 free from bittorrent!!!

Information should be free... live free or dieeeee!"
2013-12-27 00:16:03;How to override parts of an app without editing files in site-packages?;"Just did a quick google search...hope this helps:

https://gist.github.com/elidickinson/1379652

Also:

https://docs.djangoproject.com/en/dev/ref/contrib/flatpages/#flatpage-templatesIf there is no other way (the other comments suggest there is) then the cleanest way is forking the original repo. Then you make your changes and put your repo in the requirements.txt. When bugs appear in this package it's likely that they get fixed in the original repo so that you can pull these changes over easily.Adding CKEditor: http://stackoverflow.com/questions/14864642/how-to-integrate-wysiwyg-editor-with-django-flatpages

Changing the form widths: http://stackoverflow.com/questions/7231551/how-do-i-set-custom-html-attributes-in-django-formsI'm on my phone but the answer is subclassing. You can rewrite just the one method you want to change.  You'll probably copy and paste most of it and just change some lines.

    import moduletochange

    class mymodule(moduletochange):

    def newmethod(self, var):
       """"""code here over writes code in newmethod of moduletochange""""""
"
2013-12-26 23:34:29;Quick hack: automatically redirect to specific version of documentation (Chrome/Chromium);Hah, thanks. I was just looking for this for Qt docs. 
2013-12-24 16:56:09;Thinking about starting a new project with Django. What do I need to know to get started?;"To start a dev project I usually start with sqlite3, when I go into production I stay with sqlite for very small sites (<100 requests a day), for bigger I go with Postgres. If you think it will get big, go for Postgres or MySQL from the beginning, since converting from one database to the other could be a headache.

Put static files and templates in the app folder, not in your projects root folder.

Don't write your urls in the templates, but let django generate them for you.

When I first started on django development, I did everything wrong. After some time I realize why it is wrong, but not so hard to do it the right way afterwards. It's part of the learning process :) do it wrong, learn why, never do it wrong again.

(Sorry for typos, I'm on my phone)
EDIT: typosCheck out the book 'two scoops', it covers everything you need to get started and moreThis might be helpful: http://lincolnloop.com/django-best-practices/projects.html.[deleted]I recommend deploying with Nginx as a proxy in front a worker pool. I've used both Gunicorn and uWSGI for running the worker pool and both are easy to configure and work well. 

PostgreSQL as the database backend, no matter what size the project. Its just a great database in general and can definitely handle scaling up very well. 

 Use virtualenv x100
Check this out: http://www.jeffknupp.com/blog/2013/12/18/starting-a-django-16-project-the-right-way/"
2013-12-24 13:52:13;Mezzanine 3.0 and Cartridge 0.9 released;
2014-01-06 07:00:15;Django-Celery;"What do you have set for CELERY_RESULT_BACKEND?  Based on your error, I'm guessing you don't have anything set.

I'm new to Celery myself, but these helped the most:
http://docs.celeryproject.org/en/latest/django/index.html
http://hairycode.org/2013/07/23/first-steps-with-celery-how-to-not-trip/I would start with redis rather than rabbitmq. Rabbitmq can be a little intense to setup, and that may be what's going on right now. You could at least get it running with redis, then see if you want to go with rabbitmq afterwards.[This framework-agnostic intro](http://hairycode.org/2013/07/23/first-steps-with-celery-how-to-not-trip/) was posted (maybe to /r/Python) a few months back and seems like a good intro to getting the Celery basics up and running.Start celery with debug mode to see the connection status and errors,  check if the path is correctly set for rabbitmq, also be sure to having configured permissions correctly for your rabbitmq host."
2014-01-06 00:50:03;Django and Redis -- Which one do you use/recommend and why?;"Django-redis-cache was the more mature library when I did my competitive analysis a few months back.

Generally I pick the library with more configuration options and flexibility (as long as well maintained). 

And while github stars and forks can be helpful, those shouldn't be the only consideration, as they tend to favor older projects, and can sometimes misrepresent rising stars. If I recall correctly, niwibe's features some special client for sharded cache and other multiple redis server setups. If you need that sort of thing then it's obvious.In that cases I'm always checking an amount of the stars, forks and contributors. Also do not forget to check issues list, it can contain very significant problem reports.
So, more activity - more chances that this repo better.

P.S. I can also suggest to store user's sessions in the redis, if you have a highloaded site."
2014-01-05 21:07:45;Connecting to SQL Server From Django on Linux;"You should try using the *pyodbc* module. It works well on my LAMP server.I've done it.  hold on and I'll get my documentation for you :)

Actually driving it right now on Debian and MSSQL 2008

edit - here you go - 

apt-get install gcc
apt-get install g++
apt-get install make
apt-get install python-dev

download stable unixODBC
./configure
make
make install

download stable freetds

./configure --with-tdsver=8.0 --with-unixodbc=/usr/local
make
make install

ldconfig -v

**copy z:\mssql file to /usr/local/etc/**

tsql -S mssql -U user -P password

isql -v mssql user password

apt-get install python-setuptools
easy_install pip
pip install pyodbc
pip install Django==1.6
pip install django-pyodbc-azure

Note on the **bolded** section it's due to me having my pre-created files for the following - 

freetds.conf

    # The basics for defining a DSN (Data Source Name)
    # [data_source_name]
    #       host = <hostname or IP address>
    #       port = <port number to connect to - probably 1433>
    #       tds version = <TDS version to use - probably 8.0>

    # Define a connection to the Microsoft SQL Server
    [mssql]
            host = <servername>
            port = 1433
            tds version = 8.0

odbcinst.ini

    # Define where to find the driver for the Free TDS connections.
    [freetds]
    Description     = MS SQL database access with Free TDS
    Driver          = /usr/lib/odbc/libtdsodbc.so
    Setup           = /usr/lib/odbc/libtdsS.so
    UsageCount      = 1

odbc.ini

    # Define a connection to a Microsoft SQL server
    # The Description can be whatever we want it to be.
    # The Driver value must match what we have defined in /etc/odbcinst.ini
    # The Database name must be the name of the database this connection will connect to.
    # The ServerName is the name we defined in /etc/freetds/freetds.conf
    # The TDS_Version should match what we defined in /etc/freetds/freetds.conf
    [mssql]
    Description             = MSSQL Server
    Driver                  = freetds
    Database                = <databasename>
    Server 		        = <servername>
    Port			= 1433
    TDS_Version             = 8.0

the part that isn't documented well online is the fact that the django-pyodbc is for 2005 and earlier which more often than not your SQL is newer than that.I'm on my phone or else I'd give you the proper fork, but I maintained a database backend for this case at https://github.com/avidal/django-pyodbc that was then superceded by another fork (linked in my repository) after I no longer needed the backend. 

Check it out though, it worked well for us for years (and still does iirc) Success!!! 

I found [this article](http://www.tryolabs.com/Blog/2012/06/25/connecting-sql-server-database-python-under-ubuntu/), which was super helpful for me. It looks like I won't be using Django directly, but that should be ok..."
2014-01-05 19:30:43;Abstract models;Maybe change class Records_Communication to RecordsCommunication?Did you syncdb (or migrate after creating south migration) after creating your new model?So `Foo` (or whatever) is in INSTALLED_APPS?
2014-01-05 05:15:30;Django 1.5 will be the death of me;"It looks like you're banned from Reddit (your user page is a 404 and your post automatically went into the spam queue). This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.

You should [contact the Reddit admins](http://www.reddit.com/message/compose?to=/r/reddit.com) about this."
2014-01-13 21:04:07;Decorators vs Mixins for Django Class-Based Views;
2014-01-13 17:14:11;My colleague wrote a fun, simple deployment tool in Python, pls have a look.;So kind of like an early version of ansible if it was written by a single person? :)
2014-01-13 15:41:17;Adrian and Jacob retiring as Django BDFLs;"I think it's time to enforce the ""For Life"" portion of the BDFL clause... Someone have a heavy, blunt instrument?

/s> But please, no more Django Pony. It's stupid.

Official outgoing request. Here's the important part, people.Seems fair.glad to see them go... they dint maintain the offical djangobook.com site or book.. which is free for needy devs"
2014-01-13 15:11:39;Kickstarting a Django Open Source Project;so stupid... not a kickstarter even... this is so funny you cant make this stuff up!!
2014-01-12 21:36:37;Altering FlatPages app to recognize capital letters in the URL?;"I don't think the issue is with the URL. The URL pattern will allow any combination of uppercase and lowercase. The issue is with the database lookup in the view.

It currently does [this](https://github.com/django/django/blob/master/django/contrib/flatpages/views.py#L42-L43):

    get_object_or_404(FlatPage,
                      url__exact=url, sites__id__exact=site_id)

Which does an exact (case-sensitive) lookup on the FlatPage. If you want it to be case-insensitive, you will need to modify the view and use url__iexact which does a case-insensitive lookup.
I should note that URL path is case-sensitive, so technically django works properly: http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.3"
2014-01-20 19:04:05;The curse of Django podcasting?;"Thanks for the kind words re: Django Round-Up. We really enjoyed doing it and neither of us wanted it to stop but...shit happens.

Anyway, Brandon and I both want to do another show sometime this year. It won't be Django-exclusive, but since Django is still a big part of both of our lives, it'll be included.Someone should start DjangoDose back up.>  Is there a way we as a community can chip in

Seconded, I'd gladly pay a small monthly fee for a quality Django podcast (like e.g. Lincoln Loop's)I missed this announcement and was feverishly hitting refresh on my netcast catcher every few days to get my next episode of the round up. 

It's a bummer that you had to wind up ..but looking forward to the next show. "
2014-01-20 18:51:43;Having trouble wrapping my head around views/templates;"Templates are HTML. You can put some tags in there to pop in python variable values, and there's some conditionals available.

Views are more like Controllers. Urls.py tells the program which view to run. Your view is called, and a request object is passed. From the request object, you'll access your variables such as any request variables sent via GET or POST, among other things. 

Views should be commanding other things to do most the work for you. My views often instantiate one or more Model objects, and call a function on the Model objects. Therefore, my views are essentially a collection of other methods that need to be run. 

Finally, views will determine which template is loaded, and will pass appropriate variables to that template.

Assume we load a ""list view"". The view will instantiate my Model, do a filter on the objects, or just return all objects, depends on what you want to list. And it'll pass that array of objects to the template

The html for the list view can be the same for ""all objects"" list, ""objects in X state"" list, a search result, or any other time we want to display a list from that model's objects. The template will have a  header, footer, and a table with my data listed in it. My template might be expecting an array called ""objects"". It'll go through this list and add more HTML (<tr> and <td> tags) to fill in the table as necessary.Take this simple view example (stolen from django's documentation) :

    from django.http import HttpResponse
    import datetime
    
    def current_datetime(request):
        now = datetime.datetime.now()
        html = ""<html><body>It is now %s.</body></html>"" % now 
        return HttpResponse(html)    

The example above uses python string substitution as a basic template system, but we could use the more advanced django template system instead with the following code (overly verbose for the sake of clarity):

    from django.template import Template, Context
    from django.http import HttpResponse
    import datetime
    
    def current_datetime(request):
        now = datetime.datetime.now()
        t = Template(""<html><body>It is now {{now}}.</body></html>"")
        c = Context({""now"": now})
        html = t.render(c)
        return HttpResponse(html)

Now, to refine our code, we're going to put the html code in a separate file called mytemplate.html in the ""templates"" directory, and use the ""render_to_response"" shortcut that django provides us.

mytemplate.html :

    <html>
    <body>It is now {{now}}.</body>
    </html>

views.py :
    
    from django.shortcuts import render_to_response
    import datetime
    
    def current_datetime(request):
        now = datetime.datetime.now()
        return render_to_response('mytemplate.html', {""now"": now})
    
By having our template in a separate file, we can now have lots of html code in it while keeping our python code clean and separate.
Imagine you are making an ugly looking website and plan to hand the website to a designer after you finish to make it look really good.

Now a designer doesn't really know template tags, if statments, loops , ...
a designer only know html and css.

The idea of templates is to make it as ""html"" as possible with as few weird things (like tags, filter, ...) as possible while keeping all the code in the view (or better is putting the code as model functions and call it from view then pass it to the template to present it)
Here's how my n00b brain understood (still understands) views & templates in Django. What follows is rather ELI5, so, apologies if you wanted a higher (lower?) level explanation...

#**The ELI5 intro**
Suppose you were to design a blog that hosts all its posts on plain, static pages, i.e. a single HTML file for each post. What you would probably do is write up the post, put in the appropriate HTML, and maybe put in some fancy JavaScript & CSS to spice things up a bit. 

But you soon realize that you are writing the same HTML over and over again. Only the actual content of the post is being changed with each post - the surrounding design along with the JS & CSS continues to remain the same.

So you snip out the surrounding design along with the JS and CSS and put in a placeholder in it that says <BLOG_POST_GOES_HERE>. In other words, you create a standard, consistent template for your blog posts.

#**Lazy-ass is lazy...**
But wait, your blog post is basically two things: the title and the post! So you put in TWO placeholders - <TITLE_GOES_HERE> & <CONTENT_GOES_HERE>

Hmm. That should do it. Let's check all the posts we have written so far... HOLY SHIT! You have written one post per day everyday for three years! Your blog folder now has > 1000 HTML files!! WTF? This is where you realize that you don't need 1000 files - you just need that template and something that will replace the two placeholders as per requirement.

#**Welcome to views.**
Views are basically routing mechanisms/controllers that pick up the template and fill in the placeholders with corresponding values from the database. Django refers to these placeholders as 'context' usually and stores it in a (rather appropriately named) variable named `context` which is a key-value dictionary. So, in a typical Django template, you will find stuff like `{{ post.title }}` & `{{ post.content }}` which just another way of representing <TITLE_GOES_HERE> & <CONTENT_GOES_HERE> in a way that Django can 'understand', so to speak.

This is how I use templates & views:

- Templates are exactly what the name means, they are a template to structure and display your data. Everything related to 'design' of the page goes in here...

- Views are where I write the necessary logic to extract the relevant info from the database associated depending on what has been requested. I will then store whatever information I extract in a `context` dictionary for the view, which Django then forwards to the template.

#**From the View to the Template**
If you have been following the travel of the `context` dictionary closely, you will have realized by now that the template has access to all the keys and values stored in the `context` dictionary. What's in the `context` dictionary? The various keys and their corresponding values - the latter being the information you want to display, and the former being a short-hand way to access that data. 

Now think, what would make a good placeholder? The keys, of course! Replace the keys with their corresponding values and you have the complete page. Your >1000 files have been shrunk to one template, one view and one database with 1000 entries!

^(Of course, there's the urls.py and also the entire Django codebase in tow, but hey, does that even count? ;P)

<TL;DR> 
- How to construct a template for a Django 'page'? Put in the keys from the `context` dictionary as placeholders in the template HTML and access the information that exists in their corresponding values! 
- Where do these key-value pairs come from? From the View, where we wrote the logic to extract them from the database! YAY!Views are the piece of code which is run in response to a request for a given URL. The URL mapping system picks the view to run. Fundamentally, it is a function which takes a request (and maybe parameters extracted from the URL) and returns the response to that request.

A template is literally just that. It could be HTML, or anything else. It is used to generate some text, usually as the body of a response returned from a view. The ""normal"" way to use a template is to do whatever data processing you need to in your view, then at the end use `render_to_response` to render your response using a template, with whatever data you want to fill in the template.have you done any other work that utilizes the Model-View-Controller design pattern? Django is also a version of MVC but uses some slightly unconventional vocabulary. What django calls views is analogous to what other MVC frameworks usually call controllers. What django calls templates is analogous to what other frameworks usually call views. 

The controller part is responsible for interacting with your data and preparing it to be presented to the end user. The view part is responsible for formatting and displaying the data to the user. > I have no issue with what views and templates do, I just cannot for the life of me get my small brain to *understand how to use them together.*

**Write each view to tell Django two things:  1) which template (html page) should be shown in the browser, and 2) what words the ""blanks"" should be filled in with.** The words the view should use to fill in those blanks are due to whatever Python code (including getting stuff from the database) you put in that view, and you store those words in a Python dictionary, called a ""context"".  Once all that is done, you use Django's render_to_response() function at the last line of your view to send back to Django two things:  the template you want (the first argument), and the context it will need to fill in the blanks (the second argument).

 
Basic explanation: 

Views should do the work of figuring out ""what"" to display.
Templates should only be focused on ""how"" to display the data that the view provided.

"
2014-01-20 17:18:13;Advice on HOW TO learn. Give me your opinions;"I know how you feel man. I myself have my degree in CS & spent my first job maintaining a massive codebase in Django .96 (actually our branch was called -.97 Gay Unicorn). My next (and current) job involved rewriting a php site that was 6 years old into Django in 2 months. I believe that the only way to build confidence is to start with a project from scratch in which you are forced to make design decisions, for better or worse. A thorough understanding of framing an abstract user experience into appropriate models and views builds a foundation for transferring ideas to code. Django/Python is the easy part in all of this, just as with anything *practice* is what will build confidence. As great as tango with django, 2 scoops, etc are, you at some point need to implement their ideas into projects of your own. Doing the polls app 20 times can only take you so far. One of the things I like to do for my practice is looking at other sites and browsing the DOM and seeing how I could mimic their source with my rendered templates. Even if I don't write the code I'll often sketch things out. If you're doing side work at all as well I highly encourage using some kind of Agile tracking software to manage your time.[deleted]to get good at django, after the tutorials read the Two Scoops of Django book. Its helped me through 2 interviews now... You can find it at http://django.2scoops.org/This is my approach:
1. Do a tutorial (obviously). Look at the big picture and work on understanding the high-level functionality. Don't get super bogged down by syntax (although don't neglect completely. Refrain from cut, copy, and paste).
2. Think of a dummy project project of similar or slightly higher complexity. Go through the tutorial again this time as a guide rather than as an explicit instruction sheet and code up your dummy project.
3. This step is huge and I think pretty neglected. Find BEST PRACTICES. Literally Google ""[technology] best practices."" This helps you understand how to harness the full power of whatever technology you are trying to learn. It also helps you understand how other people are ACTUALLY using the technology.
Props man. You're asking the right questions.> My next job exposed me to Django, Python, JavaScript/jQuery, HTML/CSS and some SQL, obviously. I learned a ton, but don't feel confident in my knowledge. 

Later you basically suggest you don't know Python or Django all that well at all (going through the tutorials, etc).

So what *did* you learn if you ""learned a ton""?  I'm not trying to be facetious, I am sincerely really asking you:  what did you learn?

I'm just trying to understand the mismatch here.  I mean, if you were in a good CS degree program from a good univeristy and ""didn't learn SHIT""---how is that even possible?  You had to have taken 5-6 CS coures, no?  

What's going on?Try giving the book Apprenticeship Patterns a go:http://chimera.labs.oreilly.com/books/1234000001813/index.html

Also, The Pragmatic Programmer is a classic (if getting a little bit dated now): http://pragprog.com/the-pragmatic-programmer

I found it really well written and I was already doing a lot of the things the authors suggest, so it was good to know I was on the right track. If you're after something more technical, pick up anything with Martin Fowler on the cover (either as an author or one of the 'Martin Fowler Signature Books') and you can't go wrong.  

Scope out Meetup for any programming-related meetups and hack nights and get talking to other developers.  This is really valuable experience and is also good to mention in an interview.I've found doing my own projects a great way to learn, it's very easy to start a django project and you'll learn stuff as you work towards a goal. once your project is useful to you, adding features and learning more becomes addictive. by this stage you've learned lots about django and might have started a second or third project. good luck!I learned python from MIT's OpenCourseware, which was great, but only got me to a point where I felt like I had the syntax and some of the nuances down. Ultimately, the mentors I had at my first python gig were what made me... less terrible. I still recommend the open courseware stuff, but would highly recommend finding a mentor of some sort. This may be a good place to start: [python mentors](http://pythonmentors.com/)

[open courseware](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/)"
2014-01-19 17:41:32;Don't use Gunicorn to host your Django sites on Heroku;"Never been a big fan of heroku. 

VM slice using nginx and gunicorn is the better route imo. 

The argument against Gunicorn in that environment makes sense. But what about uWsgi? It would be nice if this weren't an obvious plug for a much less mature competitor.Gunicorn async workers are actually a pretty workable solution in this case. You can use Django-Postgrespool https://github.com/kennethreitz/django-postgrespool to solve your database connection issues on Django 1.4+. Not saying its necessarily better than waitress but an option.

So I guess this would be a great alternative to Gunicorn for Python 3 users since there's no async worker available for Python 3 (at least that I know of)?I understand why people use services like Heroku, but honestly... just get a Linode and write a stackscript for deployment, so much easier IMO when you control the environment."
2014-01-19 14:26:07;Auth with JSON Web Tokens and Django REST Framework;Is this similar to authtoken?Is it a better architecture (easier to maintain) than [tokenapi](https://github.com/jpulgarin/django-tokenapi)? 
2014-01-26 01:24:23;Any interest in a Vagrant box that has Django/PSQL/Nginx/uWSGI/Redis available at localhost:8080?;"Checkout http://rove.io/What a coincidence - I've been working on more than less the same thing for my own use. I do provisioning using simple shell scripts, I automate some commands on the host machine using Fabric, and I've recently migrated to building it using Packer from an Ubuntu 12.04 image, rather than installing my stack on top of a pre-built Ubuntu box which had some stuff pre-installed that I didn't need. I'm looking forward to building an AMI and/or docker container using Packer.OMG yes! ;)I run all of that (minus Redis) in a Vagrant VM and it's pretty useful, mostly because it's an opportunity to dog food changes I make to the Puppet manifests. 

By the way, I really like avahi-daemon and private networking, so you don't need to worry about port forwarding and can access the VM by <hostname>.local.I'm working on one with Vagrant and Ansible. My mind is blown how awesome ansible is. Currently stuck at installing postgis, I guess the precise32 box is not cutting it for me. I'll try a 13.XX one next.I've been doing something like that for myself, http://github.com/benregn/ansible-django. It's still under development so some features don't work right now :)   ""Features"": Postgres, nginx, uwsgi, Redis (incomplete), Celery and supervisor. 

Contributions are welcome. Do you mean a vagrant recipe, or a virtualbox image? 

But yes, I think this might well get some traction. Although, you might like to think about what you can add to make it e.g. automatically update to the latest versions of things when first run (shouldn't be too hard - could just be a script mentioned in a readme), and add more things like celery, supervisord, and alternatives to the stack you mention, such as gunicorn and mysql.Tell you what I'd love to see: a Python-oriented version of [PuPHPet](http://puphpet.com), where you can select from a few basic options & have it generate the the necessary vagrant config. Like gunicorn or uwsgi, redis or not, pgsql or mysql, etc.

The vagrant box I use to dev with is based off of a puphpet config, and it's been a good base to work from. Just had to write a shell script to install & set up the nginx/python stuff.

The main challenges I've run into with vagrant are that it takes for-fucking-ever to stand up a box, and to reload/re-provision... but to be fair, that's probably not a problem with Vagrant, it's just unrealistic wishes (give me a fresh ubuntu box now!). Because of that, it can take hours upon hours to nail down the details of your provisioning scheme, and verify that in fact it works as expected. But once you get that out of the way, it's mostly downhill.I use http://github.com/jairtrejo/doko as a template for Django development. Using Fabric makes development a breeze."
2014-01-25 21:22:15;Anyone out there running a site with bloggers that login and submit content?;"I'm actually starting to play around with a blog app using flask (normally I'm a django guy, though.)

here are my thoughts so far.  I'm considering using tinymce to allow publishers to create posts as well as handle the image uploading.  you can hook it in to django pretty easily, and should be able to have a size limit as well.  basically, it forces them to upload the image(s) before the image can be used in the text, which makes it pretty easy for you to manage the size restrictions as well as file placement on the server.

I'd be wary about trying to control too much about the articles.  no matter how smart you try to make the software, it's almost guaranteed that it won't handle it the way your users want or expect.

by using tinymce or ckeditor, the user gets to handle all of the layout, but you still get the level of control you need.  it might take a little work to get it functional, but i'm sure there is plenty of support out there too.> The downside is that it kind of handcuffs the contributors to only a certain number of images.

    class Article(models.Model):
         title = models.CharField( max_length=255 )
         slug = ...
         content = ...

    class ArticleImage(models.Model):
        article = models.ForeignKey('Article')
        image = models.ImageField( upload_to=""images/"", blank=True, null=True)

Is one way you can allow infinite images per article.

Sorl-thumbnail auto-magically resizes your images for you. Is nice to use when one person takes care of front end (css, js, and html-templates) while another does the back-end.As for the first part of your question, I would not recommend using django-admin for end user entry.  Security is less granular than what a custom front end would be - you could setup owners for each post, editor groups, and other access models.  Plus, writing a front end is not hard to do, so why not?"
2014-01-25 10:53:12;I love Django (the framework and the guitarist both);"Also, Django the movie!

Welcome :)Welcome, you might want to have a look at http://www.soundslice.com/."
2014-01-24 14:53:07;I'm using Django-Userena. Need to add a couple things to the profile detail page.;"Create your own class that inherits from UserenaBaseProfile and make AUTH_PROFILE_MODULE point to your class.

http://docs.django-userena.org/en/latest/installation.html#profiles"
2014-01-23 23:29:58;help! - I at least need to know how I should be wording this so the folks at stackoverflow can help.;"is the blah blah blah a string containing key:value pairs for the attributes you want to assign to the root node?

you are messing up between the node name and node attributes, (I think) you are mixing them together.. normal DOM manipulation allows you to set attributes separately from the node name. I haven't written a letter of python/django so far (I'm subscribe to this subreddit as I intend to start working with python/django), but this is basic XML knowledge"
2014-02-03 23:57:32;Django not on system path;So I seem to have bypassed this problem by trying something different. As described on [this](http://www.jeffknupp.com/blog/2012/02/09/starting-a-django-project-the-right-way/) site, I am using virtualenv to manage a Django installation. Apparently there are some other benefits to doing it this way but I don't quite yet understand them. All in good time.
2014-02-03 20:19:39;How do I return the result of a celery task to the client?;"You should not delay the response from returning, otherwise why even bother running celery?

Each of celery's delayed tasks returns what is effectively a taskid - an id that you can use to retrieve the results from some task. Store that for the user (somewhere) and have them refresh the page/you refresh it programmatically via javascript.

It is hard to give advice without more info on what you're doing. You've got to ask yourself - is this something that the user MUST wait for before continuing or can you push it off into the background?To keep it simple:

    async_result = task.delay()
    return_value = async_result.get()

Now some people might say 'why run this sync, don't use celery at all!' .. but keep in mind that you can also use celery to use a pool of workers so you can spread your load.. so there are plenty of use cases where one wants to use celery, but run the task in a synchronous method.

Obviously, the point still stands. Don't make a celery task for something you plan on running synchronous anyhow.There are 3 ways to do it:

Simple polling:

    def check_task(request):
        result = AsyncResult(request.POST['task_id'])
        status = result.status
        traceback = result.traceback
        result = result.result
        if isinstance(result, Exception):
            return HttpResponse(json.dumps({
                'status': status,
                'error': str(result),
                'traceback': traceback,
            }), content_type='application/json')
        else:
            return HttpResponse(json.dumps({
                'status': status,
                'result': result,
            }), content_type='application/json')

You might not like simple polling because you don't get fast response in the client. If you poll more often then you generate more load in the webserver ...

You could do long polling:

    def check_task(request):
        async_result = AsyncResult(request.POST['task_id'])
        try:
            result = async_result.get(timeout=5, propagate=False)
        except TimeoutError:
            result = None
        status = async_result.status
        traceback = async_result.traceback
        if isinstance(result, Exception):
            return HttpResponse(json.dumps({
                'status': status,
                'error': str(result),
                'traceback': traceback,
            }), content_type='application/json')
        else:
            return HttpResponse(json.dumps({
                'status': status,
                'result': result,
            }), content_type='application/json')

While this improves response time somewhat it does not scale out well as it holds up resources in the webserver.

You could avoid long polling by using some form of async response. Websockets, SSEs, streaming response - it could be anything. For that you will need an async celery client. Few choices:

* https://github.com/mher/tornado-celery - only supports amqp result backend
* https://github.com/mher/node-celery - supports amqp and redis result backends
* or your could use gevent in your webserver

You don't. Celery is for doing things that you do not need to return to the client immediately. 

Let's say a user is uploading a video, and you are going to process it. Well, obviously that takes awhile. The video processing is an excellent thing to put into a celery task. How do you return it to the user? First you immediately return a message saying that their video processing is pending. Then you have a status page that they can check which will simply tell them the current status of the task. You could even put something at the end of the task to e-mail the user."
2014-02-03 17:04:28;What is a 'Full Stack Developer'?;"Full stack means just that. You can work at each level of the stack.

1. HTML/CSS for markup and styling of content.
2. JavaScript for adding dynamic functionality to content and for handling data on the client side.
3. Python/Django for implementing your business logic on the server side.
4. Database stuff, which is somewhat tightly integrated with Django, but is a whole layer of the stack unto itself really. Database design, provisioning, and maintenance is a skill-set unto itself.
5. Managing your technical infrastructure. Setting systems for deployment and testing. Setting up backup and recovery systems. Setting up efficient dev environments. 
I'd say that definition is pretty accurate of what comes to mind for ""full-stack developer"" for me.  I think it entails a fair degree of CSS and JS mastery as well as knowledge of back-end systems and databases (SQL, Python in Django's case, etc.).

I think that if the ""usable, well-designed web app"" entails:

- The use of a fair bit of JavaScript (perhaps even a MV* framework such as Angular, Ember, or Backbone) 
- CSS that is not just Bootstrap or another framework that has not been heavily customized
- A complex back-end that deals with issues such as complex relational data, user auth, and security 

The it is fair to call the (single) developer of that website a full-stack developer.

As for your second question, you can say you're a full-stack developer whenever you want.  But it will always be with the caveat that other, more knowledgeable devs may call you out if you are not truly knowledgeable.Full-stack developer: an overworked and likely underpaid developer forced to do the work of an entire team single-handedly: frontend, backend, QA, database & server maintenance, deployment, you name it.  Typically employed by a stingy company that doesn't understand software development or just doesn't care.

This accurately describes my current job position.IMHO, the full stack developer is one who can write deployment automation scripts in the morning, Python by noon, and JavaScript in the evening.

The stack doesn't stop at python, it stops at the platform (on both sides of the stack). By all means, let a sysadmin or DBA do their job, but a full stack developer should know what they mean when they say the application is swapping, or their tables need indices.> Edit: I'm getting the impression that marketing oneself as a full-stack developer is a really bad idea.

Not for the company that pays one salary instead of three.  :DI consider myself a full-stack guy, and I don't think it's a bad idea.  It just means you have a diverse skill set.  I am the sole developer for my project, so if I don't do it, it doesn't get done.  I'm underpaid, but I love my job, my boss is awesome, and I have complete autonomy.

I would like to work on a team again.  I used to work with a killer team doing something completely different, and I miss that.  


""Fullstack developer"" immediately makes me think: ""jack of all trades, master of none""

And more likely, mediocre at a few of those things.
A Full Stack Developer is one who does not send out a email saying, it runs on my machine :P ,  And never says i am done. 
Might be Develop + deploy + maintain and scale"
2014-02-03 14:07:35;Using Django for basic websites;"* find designs that you enjoy in the web and write down what you like about them
* write down what you need your web site to accomplish 
* find how the first step will help execute the 2nd
* DRAW a basic lay out for your site and start thinking about user interaction
* With the drawing start to fill it out more in Illustrator/photoshop/indesign
* look at your well fleshed out design and think about how you are going to break it down into divs and appropriate tags, then write the tags and start giving them classes
* then do some styling css
* finally do the js
* if you are going to have a back end do it after you've finished the static site.> If a client came to you and said, ""I want a website for my business"" and gave you total control as to how to design it, where to host it etc, besides coding, what considerations would you have to make? 

That is one broad question!  What kind of answer are you expecting?  If you're interested in Django for a mostly static website, I can point you towards a different approach. I use Mezzanine for my personal website and find it pretty great. You can just customize it to be set-up as a blog! 

It will have a lot of overhead you don't need, but perhaps the workflow of setting it up will get you in the feel for making your own Django app. Mezzanine is basically built on Django. If your site will just consist of a few static HTML pages, there's no need for Django or any web framework for that matter. 

But if you want to learn Django, by all means go for it. Installing/configuring Django on your computer and your web server will probably be more difficult and time consuming than the coding itself if it's just a basic website.There's nothing wrong with building a static (or mostly static) site in django. You can always then add some dynamic functionality later, like a ""contact me"" page with a web form, say, without needing to hack it in.

Read this: https://docs.djangoproject.com/en/dev/topics/cache/

For some background on making sure your pages that can be cached **are** cached, because you don't want to pay for dynamic page generation when you don't need it.There's two ways to look at this.


The first would be one of efficiency. What's the minimum amount of work you can do to provide the client with a website that solves their problem. This is usually the way you want to start approaching problems. If its a single page with no interactivity or persistence, then Django is almost certainly overkill. HTML/CSS/Javascript should be all you need. Easiest to install, requires the least amount of extra knowledge, fewest external dependencies, etc. If you need more than just a single page, then its worth looking into other options. The level above this would be a simple templating engine, something like Jekyll. Jekyll will build static HTML, but would still be insufficient for persistence. Beyond any of that, sure, Django would likely be a good choice. 


Now, ask yourself if you're building the website purely for the client, or if you're looking to learn something out of it. Maybe you want to spend extra work building something that may be overkill just so you can gain the experience involved with that. I think, as developers, we need a healthy mix of the two.> It may be too powerful for just a website with a splash page and a few about pages. True or false?

False. In what sense could it be too powerful? Just don't use the features you don't need.

It is, IMO, completely silly to use Django for a basic website like that.  I wouldn't pay a website developer any money for that part.  It can and should all be done with HTML, CSS and (maybe) Javascript."
2014-02-03 07:24:22;Basic question about session variables. [Praw];Why would you need to manually authenticate for every view?
2014-02-10 18:30:08;Need help finding cause of syntax error, trying to install ckeditor.;"The syntax is fine as that is your urls.py; the error states there is invalid syntax in an admin.py file on L16. Unfortunately from that screenshot alone I cannot tell you which admin.py, but it will be one of them (perhaps even from an external package...).django-ckeditor-updated works better with the latest Django & Python.Like sk3tch said, it's hard to tell from that screenshot what the problem is.  I'm not sure how you're installing ckeditor, but I highly recommend using https://github.com/shaunsephton/django-ckeditor"
2014-02-10 17:52:57;New Django Kickstarter: Improved PostgreSQL support in Contrib by Marc Tamlyn;"This is truly awesome initiative, and I can't wait to see it fruit.

On a sidenote, what version will next Django after 1.9 will be? 1.10?Throw in a utility to migrate an app from MySQL to Postgres, and I will personally donate £50.I wonder if it will support migrations?"
2014-02-10 13:13:53;What python versions of front end management tools are there?;"I understand the reason for this inquiry, but you're on the right track. The more common front end tools require ruby or node -- grunt, bower, sass -- so I would keep with that path. It would be great to keep a python project's dependencies down to Python and some pythons packages but there aren't many tools that I'm aware of that are comparable to the ones you're using that live exclusively in python. if you don't mind my asking, why does it matter that the tools are written in Python vs. Ruby or any other language? There's no problem with interoperability since you're just dealing with the outputs. 

in my own work I use lots of tools like this and quite a few of them (Chef, Vagrant, Compass) are written in Ruby. No big deal. Gem is a nice and easy to use package manager and Ruby interpreter is readily available on hosting environments. I've never had any problems with using Ruby tools in a project that is otherwise written in Python.There are some existing python libraries for frontend asset management. I've used many of the following previously:

## CSS
* [cssutils](https://pypi.python.org/pypi/cssutils/)
* [cssmin](https://pypi.python.org/pypi/cssmin)
* [cssselect](https://pypi.python.org/pypi/cssselect)
* [tinycss](http://pythonhosted.org/tinycss/)

## Javascript
* [slimit](https://pypi.python.org/pypi/slimit)
http://brunch.io/ it is not python, but at least is only one tool to do it all. I'm trying to find time to integrate it with django.https://github.com/miracle2k/webassets
"
2014-02-10 08:47:37;Postgres aggregate functions with timedelta objects;
2014-02-10 07:06:26;Review - Two scoops of django 1.5;This is a terrible reviewWhy did you review the older book and not the one that was just released? This book already had tons of reviews posted in the past year.
2014-02-17 08:07:35;Advice for django deployment;"You should avoid fcgi. The alternatives are much better. Personally I think uWSGI, Gunicorn, and apache+mod_wsgi all work great behind nginx. For your use case Gunicorn is fine.nginx in front of uwsgi (or gunicorn). generally a good idea to run in a virtualenv, even if you have dedicated servers. just makes it easier to sync up your dev and prod environments. if you start using packages that have some more complex setup required consider using a system like Chef to automate your deployment.I've been using nginx + uwsgi + ansible to keep unnecessary deps out of the stack with little issue.I use gunicorn+nginx, using fabric scripts for deployment.Pure C: uwsgi + nginx. Only.I gave a talk last year on deploying python apps (as well as testing and continuous integration) that explained a Django+uWsgi+nginx setup.  You can read the [slides](http://slid.es/kevinastone/python-integration-deployment) for some example configurations.I use gunicorn and nginx.  Gunicorn and celery are wrapped into upstart scripts so you can do sudo service celery [start/stop].  Everything is run from a virtualenv.  I usually use celery with redis, which works pretty well, you just have to make sure to change the memory settings (states this in the celery docs).

Ansible playbooks to create the deployment configuration and do updates (ansible is awesome, use it).  If you are on EC2, I would also look into cloudformation to quickly make reproducible machines.I've done ec2 with gunicorn, ec2 with wsgi, and heroku. 
Heroku is expensive and makes it difficult to run server side scripts, but I suggest it for bootstrapping a project. You can run celery from a workerI just use heroku. I'm not a sysadmin, and have very little experience with any of that kind of stuff. Heroku seems to just work though. It's beautiful. I have a personal site on the free plan, still got a custom domain.Fwiw, I use Apache mpm_worker and mod_wsgi.

Lots of nice, stable documentation that will be around for a long time.

Using the worker model gets you a lot more bang for your buck and smaller VPS instances.  Plus it's dead simple to set up.I use gunicorn (managed with supervisord) + nginx. I also use Fabric for deployment and vagrant to have a clone of production setup on my dev laptop.."
2014-02-17 05:15:18;Newbie here. Need help on deployment.;Your settings mentions the `USER` as `userone` but the server validates for `usertwo`? How? Why?
2014-02-17 00:36:47;Advice for a personal project;"This is entirely possible! I've done something similar with Flask (another Python web framework) you check it out the code [here](https://github.com/arfar/flampc) if you want, and a running example [here](http://flampc.siska-modern.co.nz/)

I'd suggest you look into [MPD](http://en.wikipedia.org/wiki/Music_Player_Daemon) as your music player. It's a music playing server, so it's designed for the same sort of server/client interaction you're wanting. Also if people wanted, they could also use other MPD client apps on their phones/PCs.Awesome thank you all so much for your help. Yes, just run python manage.py runserver 0.0.0.0:8000 and visit you're pc's ip with the port and address ... yourepcpublicip:8000/you can also use local hostname so that you dont have to use a local ip address"
2014-02-16 21:39:34;Run Django tests in Vim;This is amazing ! Can't test it since I'm an emacs user, but it makes me think that my development workflow really misses such a thing.Hello, I'm new to vim and I'm struggling with basic things like getting powerline up and running but even to me, this looks absolutely awesome! Can't wait to try it, good job!
2014-02-16 13:24:10;My own django website. Need hints;"I suggest:

simple crawler for grabbing more data to my site from gov sites. >> with scrapy

user-accounts >> django userena

take a look http://openplans.org/work/

http://imgur.com/8aTsRQm

Why not put the Facebook button on the right side of the search bar or something? It looks a bit odd with it being on its own in a space of its own at the top of the page.

I'd put the ""New"" button in the ""Home"", ""New"", ""Category"" and ""Help"" button-bar after ""Category"" or possibly on its own. I'd remove ""Home"" since there already is a ""Home"" button right beneath it.

What's the middle bar for, with the red icon and the text ""Oglos.info"" on it? It doesn't seem to do anything when I click on it.

Expand the search text field to the entire height and width of the surrounding white area, or at least hide the native borders of the field.

Also, could you perhaps give us a short explanation of what the usecase is as well as the intended target audience?"
2014-02-24 21:12:31;How do I make simple URLs without creating a new app or making a new URLS.py file?;[deleted]Maybe [contrib.flatpages](https://docs.djangoproject.com/en/dev/ref/contrib/flatpages/) fits what you're looking for?
2014-02-24 19:28:49;Django-ecommerce beginners tutorial free ebook;This book is 5 years old. It's terribly dated. Please don't use it as a reference.
2014-02-24 19:19:21;Migrating to a Custom User Model in Django;
2014-02-24 12:26:32;How to 'hook' into a package's default html pages to make adjustments. Specifically regarding the new Wagtail CMS.;"The order in which the template files are loaded depends on the order in which the paths are setup in the `TEMPLATE_LOADERS` variable in your `settings.py`. You can also see this order if you have Django Debug Toolbar installed - it clearly outlines the template paths that Django evaluated and stops at the last path where the template is found.

So, when your HTML is being constructed, if you have a path that corresponds to the plugin template path, create a similar structure in your `DJANGOPATH`. For example, if your plugin's template path is:

    $PYTHONPATH/plugin_folder/templates/some_file.html

...it (usually) gets evaluated to:

    /usr/lib/python/site-packages/plugin_folder/templates/some_file.html

If instead, you create a folder called templates inside a folder called `plugin_folder`, inside your `templates` folder (assuming the `templates` folder is where your templates are being picked up from, for your apps), Django will then also evaluate and look for:

    $DJANGOPATH/plugin_folder/templates/some_file.html

...effectively, checking to see if `some_file.html` exists at the location:

    /path/to/your/django/app/templates/plugin_folder/templates/some_file.html

One thing I've realized in my short stint with Django is that Django goes to great lengths to allow you to override most of its batteries. The more complex the overrides, the deeper you have to go down the rabbit-hole, that all. :)

Here's what the official documentation has to say on the subject: 

[Django searches for template directories in a number of places, depending on your template-loader settings, but the most basic way of specifying template directories is by using the TEMPLATE_DIRS setting. (Click this link for more...)](https://docs.djangoproject.com/en/dev/ref/templates/api/#loading-templates)"
2014-02-24 09:19:06;Howto: deploy on App Engine;Hownotto: deploy Django
2014-03-03 20:23:42;Using post_save to send email breaks app functionality.;"The problem is that a post_save signal is still executed synchronously as part of the request. Sending an e-mail takes awhile. The django app server will not send an HTTP response to the client until the e-mail sending is complete. If any error happens in the e-mail sending process, they will either timeout or get an error response. Even when it succeeds, it will probably take too long and timeout.

This is why celery exists. When the user clicks the button, you immediately send them an HTTP response after scheduling the celery task. This takes almost no time. Then the celery daemon will handle sending the e-mail some time later.Regardless of whether you're using Celery or you do the mail sending in the main request/response cycle, do you really need to wait for the email sending to finish before letting the user know the post was reported?

I would immediately change the link from ""report"" to ""reported"" in JavaScript, *then* make your AJAX call and let the backend notify the admins.

By the time the user refreshes the page (if he ever does) the process will be finished and the label will still consistently say ""reported"".

I think this could be...
the ajax function get the result from the django server but when you add the post_save function ajax waits until that function return a value but it does not return anything useful for ajax. so that's why you only see the changes until you refresh the pageUse git, and signals"
2014-03-03 18:52:59;It is sometimes faster to use built in python function for model filtering;"Yes, when you need to pick a random item from a list of 20 in a loop, you should definitely avoid having to fetch these 20 items from an external storage on every iteration.

But the code you use to demonstrate that is very contrived and unidiomatic. Also consider that the rabbit doesn't necessarily get faster the further it outruns the turtle."
2014-03-03 02:13:04;My template includes are working but inheritance isn't;"Can you provide more context?

What's your environment setup? Where are your templates stored? Is this template and the extended template in the same directory?"
2014-03-02 17:52:08;Options to allow user to update HTML page.;"Forgive me, if I have misread the entire situation and please ignore this answer if you don't agree with the next paragraph.

I've had very little PHP-experience in my short-life as a newbie web-dev, but the way you said 'editable python page' kinda tells me that you are probably looking at the whole thing from a PHP-like perspective...

**There are no 'editable python pages' in Django - it is a framework based on MVC principles - MVT, if you look at the way Django is structured, actually.** 

There are ""models"" which broadly define the architecture of your project, there are ""views"" where the logic for generating the various pages in your application is written and then there are templates which determine how your front-end will look. 

Each module (called an ""app"") in Django is equivalent to a Wordpress-plugin. **Many apps can be (and usually are) 'cobbled' together to create whatever you choose.** By default, Django provides you with an app for authentication & authorization, an app for commenting, an app for administration. You can write your own app to create or extend any functionality you desire. You can use other third-party apps either as-is or tweak them to suit your needs. 

If you have an HTML mockup, it will certainly go into the templates folder. The logic for generating the dynamic portions of the HTML, however, will need to be coded in the ""views.py"". The routing is handled by ""urls.py"" and the structuring of your data happens in ""models.py"". 

Your actual coding process is likely to see you do the steps in the reverse order of my description, i.e. first you write your ""models.py"", then you write your ""views"" and then you design the output in your ""templates"".this sounds like a nightmare in the making already. Flatpages is just a textbox that you can [output](https://docs.djangoproject.com/en/dev/ref/contrib/flatpages/#flatpage-templates) wherever you want on a page. Really, it's nothing more than that. If your page is not going to change a lot, flatpages might work, but it's very limited. Django-cms provides a template tag called [placeholder](https://django-cms.readthedocs.org/en/2.1.3/advanced/templatetags.html#placeholder) that you use to output dynamic ""cms-points"" that can contain content of multiple types in multiple languages.Have you even gone through the tutorial? without getting too involved with django itself, what you're looking for is ""front end content editing"" 

mezzanine cms has that included already. or you could look at various other django plugins that'll do the job without being part of a larger project."
2014-03-02 16:38:44;How to send asynchronous calls to a 3rd party api and also your own database?;"Not sure exactly what you're doing but celery will work best for this type of thing.I'll second the suggestion to use Celery, but I also would like to give python-rq (see ""Getting started"" on http://python-rq.org) a +1, as that's what I'm using in production right now.

Personally, I find it easier to get something up and running quickly than I could with Celery.  I can't comment on whether python-rq is a replacement over Celergy for large asynchronous problems, but for basic tasks, you can do no wrong.

Celery's scheduling looks a lot more mature, so if you happen to also be shopping for a cron replacement, perhaps go with Celery.Yeah, django-celery is probably what you're looking for.It's best to do this on the client-side instead of blocking server resources making 3rd-party calls. Using jQuery, you can:

1. Make two `$.Deferred` instances, ""a"" and ""b"", one per AJAX call. Each resolves itself on receipt of the foreign data.
2. Collect results from both `$.Deferred` instances (from the previous step) via `$.when(a, b)`. The `.done` callback, which receives results from the successful execution of both ""a"" and ""b"", can trigger updating your UI.

And that's it!

Involving an offline queue and reworking the client side to wait on backend resources sounds like overkill for your use case.

The best to handle this use a front end framework like backbone and get this working. I had followed some of the advices mentioned here. http://ozkatz.github.io/backbonejs-with-django-15.html. In the comment section of the blog you can see some of them have mentioned links to some example as well. "
2014-03-10 15:32:53;Need advice on when to make a separate model in Django;"If I understand correctly, you probably want to model customers and products separately, and model the price list as a many-to-many relationship between them.

    class Customer(model.Model):
        ...
        price_list = models.ManyToManyField(Product, through='Price')

    class Product(model.Model):
        product_id = ...
        ...

    class Price(model.model):
        customer = models.ForeignKey(Customer)
        product = models.ForeignKey(Product)
        price = models.IntegerField()


See:
https://docs.djangoproject.com/en/1.6/topics/db/models/#many-to-many-relationships

Be sure to read the section ""Extra fields on many-to-many relationships"".Lets break down the various relations you'll need to be able to track and represent.

PriceList has the following relations:

1. has many Items
2. has many Customers

Item has the following relations:

1. has many Price Lists

Customer has the following relations:

1. has one PriceList

that suggests that your PriceList model should have a Many to Many relation to Items and that your Customer model should have a ForeignKey to PriceList.

You'll also need to keep track of one additional piece of information, which is that the price of an item depends on the Item and the PriceList (and thus the Customer). this is a good candidate to add as an extra field on a the through table that manages your Many to Many relation.
        I think it makes more sense for the customer to have a foreignKey pointing to the price-list that customer uses. There's a lot of great answers here for this specific question. For guidance like this in general you'll want to read up on Database Normalization. A quick googling came up with this write-up that looks pretty good, and doesn't require an understanding of relational theory: http://www.bkent.net/Doc/simple5.htmYou might benefit from a crash course in relational data, which is a more fundamental and useful skill than just within Django (although Django is a great way to learn about it).

I thought _Learn SQL in 10 Minutes_ was surprisingly comprehensive even though it was concise. Others have recommended _Head Start SQL_.  I am sure there are good online guides too.

Even if you never actually write a single SQL query yourself, it's how the database is working behind the scenes and it will help you to understand how your data is being pulled in.

Just as a start, if you see yourself making tables that have fields that look like

    some_value_1
    some_value_2
    some_value_3

You are probably doing something wrong (the one exception is something where the values are fixed and expected; a classic example is `address_line_1, address_line_2, address_line_3` another might be `price_list, price_actual`).

Instead, those values should be moved out into a separate table (the technical term is ""normalized""). Many of the answers below separate out the products, the prices, and the customers into separate objects. This avoids the `pricelist_rate_1, pricelist_rate_2, pricelist_rate_3` situation.As a beginner myself too, I'd try something like this.

    class Customer(models.Model):
        ...
        price_group = models.IntegerField()

    class Product(models.Model):
        ...
        price_1 = models.IntegerField()
        price_2 = models.IntegerField()
        ...

Then in the view match the Customer's price_group to the correct price.

    "
2014-03-09 19:37:26;Django-Associations 0.1.7 Launched;"Regarding the motivation for this app, my normal workflow for finding templates is:

* look for some phrase in the part of the template I'm interested in
* do a project wide grep for that phrase.

This has the advantage that it will find the right template whether it is in an include, a base template or a template used from a template tag.

Also, django-debug-toolbar lists the templates used.
"
2014-03-09 18:58:10;Planet Django Shut down;"I really liked Planet Django, is there any interest in picking up where they left off and someone else running it?looks like http://django-planet.com is live giving us the latest feeds.I just checked and there is a total of 275 sources in the OPML file - too many for me to consume on a regular basis. However, there are a few blogs/sources in there that I keep coming across very often in my google-fu moments and I'm going to subscribe to them very seriously...

^(shameless self-plug follows...)

While learning Django/Python over the last year, I built a RSS reader bot for subscribing/unsubscribing to feeds via Twitter messages/DM. All updates arrive directly (and almost instantly) in my Twitter inbox via DM. 

I'm currently using it to follow some really good but low-velocity feeds. The bot is [@updt_me](http://twitter.com/updt_me) and [details about the bot are available here](http://update-me.herokuapp.com). Could you try it out & tell me what you think? What's missing and what is unnecessary?"
2014-03-09 14:17:46;Need help with giving an image instance an ID before uploading it;"Using a secondary id could be helpful in this scenario to avoid the need to stand up additional infrastructure which seems like overkill for your project. Why not pass in a UUID that you generate before uploading? Django can save the Id however it wishes, which sounds like it's just incremented field, but your app can reference by UUID.Remove your hack. Let django use whatever filename it wants for the image. Then fire off a Celery task that will rename the file and update the database to point to the new filename.You shouldn't be giving links to objects that don't yet exist.

Anyway, in your ""object image"" class, allow the image to be null.

Save the object instance so it gets an I'd.

Now you can get the link to it. Then proceed to update the image later.I just found the [index_together](https://docs.djangoproject.com/en/1.6/ref/models/options/#index-together) meta attribute for models. This might just be what I need."
2014-03-09 14:06:23;Visualizing Django Component Dependencies;
2014-03-17 18:33:21;Better Models Through Custom Managers and QuerySets;
2014-03-17 18:30:34;Automatic generation of URLs, names, and template sources;"I tried to look through urlmagic and it feels like a complicated Java package disguised as Python.  As a person looking through it for the first time, I had to dig through module after module to get a rough idea of what you were going after.  This alone should tell you that you might've gone too far.  It would be hard for another developer to take over if you have to stop maintaining the code.

""Large site"" doesn't have to mean ""complex site.""  You might be able to get away with one url pattern and a view that handles requests based on Django's user permissions.

**urls.py:**

    urlpatterns = patterns(
        'yourapp.views',
        url(r'^(?P<model>)/(?P<action>)', 'handle_crud'),
        ...
    )

**views.py:**

    from django.shortcuts import render
    from django.db.models.loading import get_model

    def generic_add_view(request, model):
        model_class = get_model('yourapp', model)
        template = 'yourapp/%s/add.html' % model
        # Do something more exciting here
        return render(request, template, ...)

    _crud = {
        'add': generic_add_vew,
        ...
    }

    def handle_crud(request, model, action):
        if not request.user.has_perm('%s.%s' % (model, action)):
            raise Http404 # Or some other error

        if action not in _crud:
            raise Http404

        return _crud.get(action)(request, model)"
2014-03-17 09:27:50;Django VS. .NET;"Sounds like your answer is ""because we know django, not .net"". 

If django doesn't work well with his existing systems then it might not be ideal. Otherwise it shouldn't matter. 

""We refuse to use IIS""I would say ""because there are facilities at the core of Django which allow us to fulfill your requirement with less time and therefore cost than would be the case using the .NET platform"". If he asks what they are point him at close integration of the ORM and 'auto-magic' Admininstration functionality.

You can of course mention the very valid points about ongoing costs which mbrochh mentions but in my experience most suits care mostly about : 

 * the upfront cost; 
 * and not being seen to wander too far from standard orthodoxy. 

His/her question is probably prompted by their boss asking *them* why they're not using Django because their boss has heard of Microsoft and that constitutes 90% of their awareness of IT issues.

because open source. end of discussion :)

because licensing costs. because no one wants to maintain a windows server (and more licensing and hosting costs). because working with visual studio is a pain in the ass (more licensing costs) and you need high end pcs for all your developers just to compile the bloody site in a reasonable time (more hardware costs)  and of course each developer must use windows (more licensing costs) which is easily the most horrible operating system for doing software development (scare away all the good talented developers). because every little tool to ease your development workflow will cost money,  because every little addon to the .net framework will be proprietary code and cost money.  because show me one significant modern website that uses .net. because you will likely use VSS,  which sucks. because you will likely use MsSQL which sucks. or oracle,  which costs a bomb. because microsoft doesn't 'get' the web.  never did. never will. I'd say it depends a LOT on the ecosystem surrounding it (deployment platform, related systems you may interact with), as well as the knowledge base of developers and future maintenance.

So, if you are targeting a windows platform, deploying on ISS in Windows, then .NET may seem the most logical choice. 
But if you will deploy on any Unix environment, and in Nginx or Apache, then less so.

And, if you are interacting with other systems, their platform may be relevant, depending on how tightly coupled the integrations might be.

And of course people. Who are you handing the project over to for maintenance when it's done? What do they feel comfortable working with? 

I mean, if they mantain .NET systems, they might NOT be willing to mantain software running on top of on a totally different stack. 

I'd say those factors are a lot more important than the benefits/disadvantages of the actual platform. Both are excellent technologies, I'd bet on something like ServiceStack on top of .NET being faster in most situations, and likely better organise/abstracted. However, Django is a great solution and I think .NET would be overkill.

Here are some reasons:

* Django allows you more freedom for hosting and development because it is fully open sourced, and runs on Linux/OSX/Windows/whatever. Unless you want to pay for a ServiceStack license (which was built with Mono in mind and is more for building APIs), you're going to be stuck as a second class citizen doing MVC on Linux/OSX.

* It is quite difficult to find affordable freelance .NET guys, because most seem to get eaten up by large companies.

* Django is faster to learn than .NET as Python is a simpler language.

* Django is widely used and well known. They chose you for your ability to deliver, which I'm presuming you have. Choosing one good technology over another one is not a bad thing.


Basically they are both good. Django is probably quicker to develop in. A bytecode language running on the CLR is likely going to scale vertically better than an interpreted language running on CPython, however, there are pros and cons either way.Free vs Not free (depending on requirements)there aren't really any meaningful arguments to be made on the basis of the capabilities of the technology. django and MVC.net are, for all intents and purposes, equivalent. 

the ultimate argument is the economic one. you know django. you will work quickly and efficiently and produce code with fewer bugs if you work in django. if the customer wants to work with your company, then django is what they get. 

> Hi, my client is asking me why we chose Django for his project

The best response is because that that is the toolkit with which you are most familiar.There are many factors to consider:

1. Does he have a lot of existing infrastructure in one or the other platforms. That may be an argument for going with the platform he already has infrastructure in
2. Does he have expertise/developers trained in one or the other. Then he should probably go with what his core expertise is in


I am a Django developer as well as a teacher. Here's a link to my Django course if interested, with a coupon for reddit users: 

https://www.udemy.com/building-great-web-back-ends-with-django/?couponCode=REDDIT 

)

I personally prefer Django since I know it well. It was one thing if you were comparing between Django and Ruby on Rails, but comparing it with .NET leaves a huge gulf as you would end up going in very different directions by the choice of one or the other technology.

I doubt you will find many arguments for things that Django provides but .NET does not. All things being equal, I'd say go with Django. But that's just me!So you don't know why you yourself choose Django over .NET? Did you throw a dice? Or shuffle cards? If you follow objective reasons for your initial selection, you can present them directly to the customer.

From your information I see is no specific reason, why Django/Python would be a better fit. From a technical perspective you can do a AJAX based CMS with both of them.

The main difference between a .NET project and a Django project in my opinion is: a .NET project will never run equally good on a non Windows platform.If I had a client ask me that I would say:

""We know Django. It's open source and very secure. Unless you choose to ignore all the many years of poor security history for Microsoft, then the security alone is enough to justify not using . Net.""

If they didn't like my answer and ask for more, I would remind them that our talking about this is be billable time. Nothing wrong in billing clients for asking stupid questions!"
2014-03-17 04:58:43;How to sort a retrieved list alphabetically in a template;"[deleted]You shouldn't really write any logic into your templates. At least that's what I've been taught...

That being said, you could use {% with %} for each item in the list."
2014-03-16 19:00:44;settings.py on Github;"There are two approaches. 

The first is to put the secret key as an environment variable. Then to set it with:

    SECRET_KEY = os.environ.get('SECRET_KEY')

The same applies to database - though [dj-database-url](https://github.com/kennethreitz/dj-database-url) makes this much easier.

The second route is with a local_settings file. You put local_settings.py in your .gitignore and then you can use the following code to try and bring in the variables at the end of your settings.py

    try:
      from local_settings import *
    except ImportError:
      pass

This will override any variables (or bring in any that are missing). This allows you to keep the file local to each machine (you can set DEBUG to True/False per machine etc) as well as keep your secret key to yourself.Quoth [the 12factor manifesto](http://12factor.net/):

> twelve-factor [..] requires strict separation of config from code. [..] A litmus test for whether an app has all config correctly factored out of the code is whether the codebase could be made open source at any moment, without compromising any credentials. [..] The twelve-factor app stores config in environment variables.

Consider giving https://github.com/doismellburning/django12factor a spin (shameless plug) - at the very least, whack `SECRET_KEY = os.environ['SECRET_KEY']` in your `settings.py`Remember that settings.py is a python module, not a simple setting file. You can load information from a .ini file for example if you'd likeYou could use [django-flexisettings](https://django-flexisettings.readthedocs.org/en/latest/install.html) with a [`.gitignore`](https://django-flexisettings.readthedocs.org/en/latest/security.html#vcs) pattern. You would achiueve your goal in less than 5 minutes.

Disclaimer: I'm the author.I use environment variables thanks to Two Scoops of Django. They also have provisions for Apache setup with settings.json.

http://twoscoopspress.com/products/two-scoops-of-django-1-6

To them local_settings.py is an anti-pattern because you have executable python outside of version control.I usually don't hardcode paths -- it's pretty easy to put something like this into settings.py:
    
    ROOT_PATH = path(__file__).dirname()
    REPO_PATH = ROOT_PATH.dirname()

I also put defaults into settings.py (ie SECRET_KEY=""test""), and then put the real values in a private.py file that isn't committed, and is conditionally imported in settings.py:

    try:
        from private import *
    except Exception:
        pass

It makes it slightly cumbersome to move configuration, but you can always mirror with dropbox or another sync tool.

For deployments, I generally make a separate settings file (let's call it aws.py), import settings.py at the top, and override with values from json files that are created by the configuration manager (ansible, puppet, etc).  You can then run your django server with those settings instead of the defaults.im working on a django package to handles this:
https://github.com/joke2k/django-environBecause nobody mentioned it: django-configurations has support for it (via environment vars), and allows to uses classes for your different settings (instead of different files): https://github.com/jezdez/django-configurations/blob/master/README.rstI usually use the local settings override approach.

Another option is just keep your secret key on the file system, not under version control, and do something like:

with open('id_rsa') as keyfile:
    SECRETKEY = keyfile.read()I usually have a private_settings.py, and I added it to ~/.gitignore, so that I can't add it unintentionally even with a new repoI see people here and elsewhere recommending environment variables. This seems like a huge security problem. Please let me know if I am misunderstanding something. It seems like there is no protection of environment variables from other users, applications, etc. It makes more sense to use a config file owned by the django user with mode 0400.I tend to go for a localsettings.py (which is in gitignore) plus a localsettings.template.py for if I'm handing off the project."
2014-03-24 15:50:58;What are the best web-dev Django bootcamps out there?;"I always recommend New Circle since they brought in Kenneth Love of django-braces fame. (He also was a reviewer for our book, Two Scoops of Django). 

You can find their course selections at https://thenewcircle.com/training/python/It looks like Big Nerd Ranch has a Django bootcamp. I really don't know much about them.Maybe the question should be are there any bootcamps left for Django training? I can't find anything despite companies listing them. When you go to their website and inquire, they're not actually offered.This might help: http://bootcamper.io/t/focus/pythonhttp://codingcamp.us 

"
2014-03-24 01:39:37;JSON schema validation with Django Rest Framework;"jsonschema:
> **Features**
>
>  * Small and extensible

Well, I'd like to call this one small: [schema](https://github.com/halst/schema) (barely 200 LoC)Good stuff!!this is my blog"
2014-03-22 18:47:09;[Question] How can I get results from a web api into a Django site?;"There's no specifically django aspect to this, and there's no one right answer. You don't actually tell us anything about your application needs that would allow us to help you.

Generically, reading into the db via the orm is probably the easiest solution, although the faster you update, the more that might be the wrong choice.I had to do something similar where I had to construct an XML-request using POST-data in a Django-view.

I would then get back a response also in XML, then I would parse the data and save the results into several Django models.

The Django part of doing this was quite simple actually, the tricky part for me was how to generate and read XML in python, and send requests/getting response.

For the XML part I used xml.etree.ElementTree and for the send/receive part I used [requests](http://docs.python-requests.org/‎).
The web api you're interfacing with might have python bindings, this is generally how I do things, however you could create you're own module with request, caveat of this are 
1. You're solely responsible for it's maintenance and compliance with the actual API
2. It's boring to go through someone else's code
3 If anything changes it could be a while before you notice and things might brakeUse a caching proxy between you and the REST APIs, like nginx. Don't bother caching internally."
2014-03-22 02:51:06;How do YOU deploy to Webfaction?;"I'm running a lot of sites on Webfaction (more than 20, I think). Here is how we do it:

1. On the server, I clone the git repo of my project into `~/src/projectname`
2. In the control panel I create a Django app, but I immediately delete the `webapps/django/myproject` folder and the `webapps/django/lib` folder
3. Then I install virtualenv and virtualenvwrapper and install all requirements (which are in a `requirements.txt` in my git repo) into the venv
4. Don't forget to edit httpd.conf and change the pythonpaths (replace myprojects with yourproject and the django/lib with virtualenvs/yourproject/lib/python2.7/site-packages)

A deployment works like this:

1. Dev changes code locally
2. Dev commits new code and pushes new code
3. Dev runs a fabric command `fab prod run_deploy_website` (this is the actual deployment and takes about 15 seconds, there is no downtime for your users)

That fabric task will do many things on the server:

1. Get the latest commit: `cd ~/src/projectname/ && git pull`
2. Update the venv: `pip install -r requirements.txt`
3. rsync the project folder from the `~/src/projectname/` folder (the git repo) into the `webapps/django/projectname` folder - at this point your new code is in place but apache is still running the old code. If you would restart it, it would pick up the new code which would be risky because your database is not up to date, yet.)
4. Run syncdb && migrate (at this point your code and database is in sync - now it is safe to restart apache and your new version will be live)
5. Run createmessages and compilemessages if it is a multilingual site
6. Run collectstatic
7. Restart memcached
8. touch wsgi.py (at this point your users will experience their next request to take a second or two longer than usual, your new version is now live)

Why rsync? Why not just have the git repo at `~/webapps/django/projectname`? One day you will deploy code and somehow you will have a bug which only happens on the server. It will be something that should have been fixed long ago and you will have no fucking idea why it happens on the server and nowhere else. When this shit happens (and it happens always at the most inappropriate time possible, for example Friday evening), it's always a sign that a leftover `*.pyc` file has some old code inside and although your `*.py` files are all up to date, your app runs partly old code.

When you use rsync, it will compare source and destination folder and delete everything in the destination folder that is not in the source folder - namely all those bloody `*.pyc` files because those are not part of your git repo. Or maybe you had to do some debugging on the server and you inserted some prints or `console.log` or whatever and then you forgot to remove them at the end of the day. No problem! At the next deployment, those changes will be removed nice and clean. You just have to tell rsync to ignore the `local_settings.py` file because of course you want to keep that file (with DB settings and the secret key and such things).

This is the short version of how we do it. Pretty much all bits and pieces of this puzzle are open source on our github account, if you need some inspiration, you could have a look at the following repos:

1. Better shell (zsh) and proper Vim installation: https://github.com/bitmazk/webfaction-dotfiles
2. Start your Django project from this template: https://github.com/bitmazk/django-project-template
3. Make this part of your requirements.txt: https://github.com/bitmazk/django-development-fabfile
4. How to install virtualenv: https://gist.github.com/mbrochh/8826147

The development fabfile is pretty much the fabfile that we use for all our projects. In some projects we override some of the tasks if they have special stuff in their stack. This should also answer /u/sailboatusername question why fabric is better than a shell script: It's python, you can access your django settings. And: It's python, you can re-use parts of it and override other parts if one of your projects has special needs.

The fabfile is seriously awesome. Let's say the customer found a really weird bug and I can't replicate it locally. First thing I want is to get the current production database on my machine. No problem:

1. fab prod run_export_db (exports the current db on the server)
2. fab prod run_download_db (downloads the last export from the server)
3. fab drop_db (drops my current db for this project)
4. fab create_db (creates a fresh db for this project)
5. fab import_db (imports the downloaded db locally)
6. fab reset_passwords (sets all passwords to test123)
7. ./manage.py runserver and happy debugging

And if you do that really often, just chain all those commands into one big `fab prod download_and_import_db`, for example.

We have other tasks for compiling our `*.less` files (`fab lessc`) or for running our test suite (`fab test`) or for restarting the apache server (sometimes `touch wsgi.py` is not enough - `fab prod run_restart_apache`).  Basically we can control every part of the app with tailored fabric tasks, our developers rarely ever need to manually SSH into the machine in order to do anything.

EDIT:  Added hint about httpd.conf, one step for multilingual sites and a link to a gist, fixed some typosI use git repos. I make one django project and each app living inside that project is a separate git repo. I set the webfaction repo as upstream and push changes to it when I'm satisfied. Aside from certain things (mentioned below), changes pushed to the repo are immediately live.

I've only ever started new projects there, so I don't know about migrating an existing database. I use south for every django project, though.

One hassle is having to ssh and restart apache for any change to settings or any urls.py. I've been meaning to look at fabric for automating this part, but have not done so. I also often have to ssh and `collectstatic` when doing frontend stuff, but again, I'm only pushing changes when I'm sure they need to go to production.

I like using git because there's a record for everything and I can rollback and mistakes that slip through the cracks (but I really believe that staging and then committing changes keeps me more conscientious and that I treat it differently than FTPing over directories)."
2014-03-21 08:41:53;[beginner] seeking help with getting started in Django;"You should really go through tutorial on the official Django website:

https://docs.djangoproject.com/en/1.6/intro/tutorial01/What stage of learning are you in? Did you create a ""hello world""  app? Which version of django are you using? 

Follow each and every step of django's official tutorial on the official site. Then come back here and ask specific questions, and we'll help you out.This book is great once you get past the tutorials:  http://twoscoopspress.com/products/two-scoops-of-django-1-6Definitely find newer learning resources. You're basically only asking for trouble by using something so out of date. I was doing the tutorial, and I got stuck on the part where it says ""explore the API"": https://docs.djangoproject.com/en/dev/intro/tutorial01/

I'm not asking for someone to walk me through it but is there a better tutorial than the official one?"
2014-03-31 23:29:02;How to set up Django to be a backend for a mobile app with correct CRSF protection?;"You can set the token in a header, here it is for AngularJS: http://angularjs-best-practices.blogspot.mx/2013/07/angularjs-and-xsrfcsrf-cross-site.htmlCould you be a little more specific?
Are you talking about a mobile site?
Or do you have a native app that for some reason requires remote login?"
2014-03-31 21:53:46;Simple Django Page Search.;"Haystack with elastic search is the best...Render all your pages with micro formats (for your model properties) and use the Google search APIs. Like http://ebuyer.com (look at your network console)Have you seen django-watson? https://github.com/etianen/django-watson

Maybe it will do what you need? It's pretty easy to get installed and operational. "
2014-03-31 21:08:47;Humble social network : Django or Wordpress ?;"Django and Wordpress would both be able to do what you outlined, so really it's a matter of preference. I'd imagine Wordpress would be easier to install, deploy, and build up a frontend. However, Django would provide more customized functionality (especially backend), better performance, and more long-term maintainability at the cost of more trouble/learning curve up front (it's much more trivial to deploy a WordPress site than a Django site, though I wouldn't consider either difficult). Note that WordPress is only a CMS, whereas Django is a web framework. Obviously this subreddit is going to be a bit biased, but I'd honestly lean in the direction of personally recommending Django because I feel like in the long run you'll be glad you did. Since WordPress is only a CMS, you may eventually find that your needs exceed its capabilities and hit a wall. Most web applications take on the order of months to develop, so a more cumbersome installation/deployment is irrelevant in context of the entire project lifespan, especially if it affords you full customization and control over your content.There are a number of Drupal Distributions (https://drupal.org/project/project_distribution) which provide out of the box solutions for this, like:
https://drupal.org/project/openatrium
https://drupal.org/project/commons

plus probably others.

These will be very quick to get up and running - and because it is Drupal you can then configure further.

Django would still be a good solution for someone with Django development experience and the possibility of re-using the solution.

Good luck - sounds funIf you aren't a developer... then I recommend Wordpress or Drupal. If you get traction and need customization, switch to Django."
2014-03-31 20:17:16;How would you build...;"The Django by Example page has good examples for projects in Django 1.5: http://lightbird.net/dbe2/http://agiliq.com/books/djenofdjango/chapter4.htmlTumblr clone  

Apps:
Blog
    Would consist of making posts, automating posts, etc
Register (use a plugin)
     Creating user accounts. Verifying user accounts.
Feed
     Handling tumblr feed, searches, discover

Look at Pinterest too. It runs on Django. Imagine how they do theirs."
2014-03-31 18:34:37;Client Admin and the Future of Django Admin;"I like django-xadmin...Very interesting. I am going to try this out for sure. Thanks!This is an interesting project. Django admin is one area I'm always thinking of changing the look of but never have time or energy to do so. I imagine that any modern admin interface that is easy for others to customize has a good chance of becoming popular. 

With that said, the post says that it works on django 1.4 and 1.5? Cool, thanks for all your hard work, it looks great from the screenshots!Perhaps I missed something, but what was your reasoning behind extending django.contrib.admin over being a standalone app? I wonder if you could reuse the admin API (i.e. autodiscovering admin.py) without reusing anything else?"
2014-04-07 22:26:47;Need advice on a good Django host, or if I should build my own hosting box on a VPS?;"I'm a django noob so take this for what it's worth. But I've been extremely happy with WebFaction so far. If you want more of a hands on, full control sort of deal, a vps is probably your best option. This does require a significant amount of attention compared to other options, but you do get very close to absolute control over your setup.

If you'd rather not worry about firewalls and security updates to your operating system, shared hosting would be a good choice.

For the vps option, I've had good experience with linode and rackspace. For shared hosting, webfaction is pretty fantastic.I personally like WebFaction on a smaller scale.I use DigitalOcean and never had any problems with them. I run a Django App, Flask App and a static blog (generated by Pelican). I would highly recommend a VPS over PaaS simply because you can run more than one app/site at once

Do you have very much Linux experience? It may take a lot more time to get it up and running if not. It's a good learning experience either way.

[My referral link for Digital Ocean](https://www.digitalocean.com/?refcode=6ac499dd40ce)

[Or the regular site](https://digitalocean.com/)

EDIT: wordingConsider this, heroku/etc. take care of everything for a little bit more. $20/mon vs $100/mon probably.

How much is your time worth? Avg developer lets say is $40/hr. Will you spend more than 2 hours tinkering with installing postgres/something with the server? Is it worth it to you to ""not worry about those things?""Are these personal projects or commercial projects?I've been wondering about this question as well. Does anyone have any experience with the $5/mo Digital Ocean offering vs a shared hosting account on WebFaction?http://www.lowendbox.com is great for snagging VPS deals. I'm running several low-medium traffic Django sites in addition to some static-only websites on a 1GB VPS that I pay $20/year for.Shit man, you need Webfaction. $102/yr, 512MB of RAM, tons of disk space & bandwidth, a beautiful hosting admin realm, and you can build almost any damn stack you can possibly think of, like django and gunicorn and redis and postgres and celery and varnish and a fucking hand-compiled, bleeding-edge nginx build... it's Wonkaland over there. Out of interest, are there any virtual appliances that people recommend for a Django host? It'd be nice to test apps in a deployment environment, whilst having a lot of the heavy lifting done without needing to pay for an externally hosted service.I have run Django (and other python) apps on Heroku and VPS's. You really can't beat a VPS simply for the educational aspect of setting everything up yourself and having all the flexibility you want. As others have mentioned Digital Ocean is fantastic for a VPS. Take a look at setting up Nginx with Uwsgi or Gunicorn. Uwsgi will have more performance but Gunicorn is easier to setup. My personal setup is to use a single heroku instance (free) with a database hosted on digital ocean for around $10 per monthI've been happy with [PythonAnywhere](https://www.pythonanywhere.com/). They just added custom pricing plans which allow for flexibility based on how much you want to spend.I've recently started switching sites to App Engine. It is fairly affordable (compared to Heroku, especially for low usage sites), you can get a MySQL DB and/or a NoSQL DB, they run caching, logs, error stats, etc for you. Once you get over the first hump of getting it deployed (having to package your libraries with your code, not use requirements.txt), it is really nice. I have integration through PyCharm that makes deployment as simple as hitting Ctrl+Shift+P. Logs from the site are a click away in PyCharm as well. It has made running a test version, dev version and a production version of the site ridiculously easy. You can even set up A/B testing extremely easy. 

Edit: And git deploy. And automatic DB backups. Which is extremely helpful when you mess up a DB. Which I definitely didn't just do.maybe you can try openshift? like heroku but cheaper (or probably even free)My personal preference is Puppet managed Digital Ocean VPSes. Simple to spawn a new instance if I ever need one, cheap, and easy to use.

I would definitely recommend rolling your own setup if you're knowledgeable about Linux systems, or even learning about them because it'll pay off in the long run.

However, if you're worried about managing everything yourself, definitely stick with a hosted solution like Webfaction.If you're working independently and see yourself creating a considerable number of sites for clients, working with VPS's can be rewarding in and of itself. The initial learning curve can be brutal without help, but uwsgi has great tutorials on their [read the docs pages](https://uwsgi.readthedocs.org/en/latest/tutorials/Django_and_nginx.html?highlight=uwsgi%20nginx%20django) and the linode library is a strong resource as well.

If you have the time/energy/hours to put into learning to set up a VPS, it's a high yielding investment.

edit: If you want to shop around for cheap VPS solutions to play with, you can find promotional deals on different forums. I personally read [Web Hosting Talk](http://www.webhostingtalk.com/forumdisplay.php?s=615fac3cc920b9eef413e6d55354ceb9&f=104), which allowed me to jump in and start playing with relatively low startup costs. You have to vet each company individually, but with bandwidth and hardware costs plummeting they're all trying to outbid each other for new business, which is good for developers."
2014-04-06 19:10:24;What would be the Class Based View equivalent of this?;"This is very very rough because I am doing it all from memory, but here is a rough approximation of what you would need to do. To convert this to properly using Generic Class Based Views. If I took more time I am sure I could slim it down more, especially if I was writing tests. Hopefully this points you in the right direction. Be sure to look up docs on properly overriding these methods.

    class PermissionsMixin(object):
        def dispatch(self, request, *args, **kwargs):
            if not request.user.is_superuser or (request.user.groups.all() in Group.objexts.all())
                raise Http404

    class FormSubmission(PermissionsMixin, FormView)
        form_class = SubmitForm
        success_url = '/articles/submit/thank-you/'
        template_name = 'blog/submit.html'

        def form_valid(self, form, **kwargs):
            post = form.save(commit=False)
            post.author = request.user        
            if request.user.groups.filter(name=""Pro Talk"").exists():
                post.section = PostSection.objects.get(name=""Pro Talk"")
            else:
                post.section = PostSection.objects.get(name=""Blog"")
            post.enable_comments = True
            post.save()
            form.save_m2m() #This is what saves any new tags that a user enters
            return super(FormSubmission, self).form_valid(form, **kwargs)

You might even be able to do `post = form.instance` if you have a model based form.CBVs are not good for new users, or most users in fact.  Let's just rewrite it a bit, and note how it makes more sense than the CBV which adds a layer of indirection / magic.

    def ensure_editable_group(request):
        if request.user.is_superuser:
            return
        if not request.user.groups.all() in Group.objects.all():
            raise Http404

    def group_form(request):
        ensure_editable_group(request)
        form = SubmitForm(request.POST or None)     # Little trick, will use request.POST if it's there or 
                                                    # initialize it with no data if not.
        if request.method == 'POST':
            if form.is_valid():
                post = form.save(commit=False)
                post.author = request.user
                if request.user.groups.filter(name=""Pro Talk"").exists():
                    post.section = PostSection.objects.get(name=""Pro Talk"")
                else:
                    post.section = PostSection.objects.get(name=""Blog"")
                post.enable_comments = True
                post.save()
                form.save_m2m()
                return redirect('/articles/submit/thank-you/') # Redirect to the thank you page upon submission.
        return render(request,'blog/submit.html', {'form': form})"
2014-04-05 00:59:17;I want to allow registered users to upload info to my SQL database;"Going through the Django tutorial would be a good start. django-registration isn't supported any longer I don't believe, but easy to create your own registration flow. You realize Django comes with a user authentication system by default? Check out the docs: https://docs.djangoproject.com/en/1.6/topics/auth/I recommend django-allauth. This works with 1.6 out of the box and works very well.  I believe it does bypass some of the built in django.contrib.auth functionality in favor of its own.  This supports standard local user/password stuff as well as using social network logins.

Shortly after 1.5 came out I also modified django-registration to work and modified again to work with 1.6 (the change from 1.5 to 1.6 was just a matter of updating the db transaction management).  It's not hard, but pretty much has to be done on a per project basis if you're using custom user models, so it's not really worth the effort.check out this great django-registration sample app, it helped me a lot! https://github.com/robulouski/django-rotldrt"
2014-04-04 23:25:03;what is the recommended method to have users browse their own uploaded content?;"Here's something that I think will help: http://blog.xjtian.com/post/56301913352/hosting-media-on-amazon-s3-in-django

Disclaimer: it's my site. The gist of it is that you can use django-storages to move media files to S3 pretty painlessly.Might find this useful:
http://www.reddit.com/r/django/comments/1ykh52/inviteonly_photo_gallery_site/You might want to look at the excellent [boto](http://boto.readthedocs.org/en/latest/) package, which offers an interface to AWS services. You can use the S3 API to achieve upload/download/delete.

Specifically, if you are using boto, and want to use S3 as your default static files storage, you'd have to do this in your settings.py.

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'"
2014-04-04 18:10:41;Starting on django + svg-javascript project with low scripting experience. What are good practices, usual pitfalls and good reads?;"For testing, obey the goat.  I liked the book, and it's constantly updated for the newest Django and Python.

http://www.obeythetestinggoat.com/

IMO you should try and follow as much of PEP8 as you can. And potentially get a linter to do it for you.2 scoops of django, no doubt about it"
2014-04-14 21:19:44;Where is conditional logic supposed to go in Django;"Your first example sounds like it happens in your template, because it's getting displayed to the user. It's not business logic, it's display logic.

    {% if parking_spot.availabile %}
        <img src='green.png'>
    {% else %}
        <img src='red'>
    {% endif %}

Obviously, that depends on your template having the parking_spot object in its context, which is done in the view.

Your second example has a couple parts, but one of them is business logic, and one is display logic.

The business logic part happens in the model. I'd define some function on the model that did your time math to determine if the spot should be ticketed. Your view grabs your model, sticks it in a template's context, and presto! Now you're at the display logic bit in the template again.

    {% if parking_spot.needs_ticket %}
        something
    {% else %}
       something else
    {% endif %}


As someone said elsewhere, the template is where you'd show either green or red for availability.

Two problems, however:

 1. The fact that 1=available and 2=not available is going to making straightforward coding difficult. The fix is straightforward, however, just add the following to your model:  

        def parking_available(self):
            return self.availability_attribute == 1

 2. Due to red/green blindness in around 10% of the male population, if green/red are the only way you indicate availability around one in twenty of your users may not find your app useful. I would use *both* color *and* words to indicate availability.

For the logic layer to determine whether a space needs a ticket or not, that would go in the models file. All business logic goes in the models file, all display logic goes in the template.Yep it's display logic, you're talking about what colour to display for certain status.

   <div class=""{{ parking.is_available|yesno:'green,red'"">&nbsp;</div>

that puts the class green if available, or red if not.You can create property getters on your model and use them as regular properties. This is nothing to do with django but simply python


     def __availability(self):
          """""" your availability code. note the double underscore. 
               its nothing special but just to indicate the private nature of the field.
          """"""
          pass

    availability = property(__availability)

And in templates you can do
    
     {{object.availability}}
You should have two models, one for a parking space which is a FK relation to another which is a parking lot.

You can then add a method to your parking lot model which returns a 2-dimensional array which is a grid of parking spaces.

Pass this through your view to your template, within which you do two nested {% for %} loops that go through and print out your grid.

Not sure why you are using 1 or 2 rather than 1/0. Models have a binary type exactly for this kind of situation.

Phillip."
2014-04-14 20:54:43;Launching MonkeyLearn private alpha at PyCon 2014;"If you can make an association with Django, specifically, go for it. Otherwise, I'd delete this post as being ""off topic"" for this subreddit. "
2014-04-14 16:40:20;Django now has DEPs (based on PEPs);"That README could use some fleshing out. I assume proposals should be made via a pull request?~~[More info here](https://github.com/django/deps)~~

EDIT: I meant [this link](https://groups.google.com/forum/#!topic/django-developers/af92wVFgdoo)Does everything have to be on GitHub for some reason?"
2014-04-14 16:06:19;Where are the Linux distributions of Web frameworks?;"You can already do most of what he mentioned in Django. You don't need a ""new distribution"" of it.

> View Dispatch - With a plugable system, you can inject a RPC mechanism. Instead of dispatching to a function or class, it makes another request to a remote service to process the request and return a result.

Route the URL to a method that does a RPC. Return the result.

> Templates - The standard use-case of Django returns a reponse upon rendering a template. This should be extended to simply accept Python native objects.

You can do this by not using the out of the box shorcuts.render method and rolling your own method that does whatever the heck you want it to do. No need for the framework to add methods to do this when it undoubtedly will be unique to your application.

> Testing - Beyond the current unit testing methods, you’ll need ways to do integration tests across services.

So do them. Nothing stopping you.

> Non-blocking - A big challenge with a distributed system is the latency variance and failure modes. Therefore, all service calls need to be non-blocking.

You should check out other projects (Celery) that work with Django if you need non-blocking. Django does intend to be non-blocking framework. But I still don't see a need for a new distribution of Django when there are already other systems that integrate with Django that can accomplish this."
2014-04-14 10:15:53;Two apps accessing same database?;"Accessing a database from 2 (10,100,###) apps isnt a problem as long as your database implements transactions/locking so that app 1 isnt trying to enter data that app 2 is trying to modify while still being processed. If you used a standard database system like mysql/postgres/etc this is built - in. 

As for your scenario of wanting to have an analysis done on the data - is the analysis solely around new data or the entire dataset?  If the analysis is only around the new data you could look into leveraging a task/worker scenario using django-celery. A task/worker scenario would allow your website to continue serving its client while the analysis is being handled and if wanted you could create the client side with a timer that checks the status of the asynchronous tasks within django-celery to update the client visually when its complete. If its based on the entire database set then setting up a cronjob to execute the analysis would be just fine.

I may be misunderstanding the mechanism by which this works, but I believe you can eliminate your worries by setting ATOMIC_REQUESTS to True. Check the docs here: https://docs.djangoproject.com/en/dev/topics/db/transactions/#tying-transactions-to-http-requests"
2014-04-21 23:39:31;Security releases issued for Django 1.4.11, Django 1.5.6, Django 1.6.3 and Django 1.7;"Thanks for this, patched my 1.6 site with no issues. These releases address an unexpected code-execution issue, a caching issue which can expose CSRF tokens and a MySQL typecasting issue. While these issues present limited risk and may not affect all Django users, we encourage all users to evaluate their own risk and upgrade as soon as possible.

For more details, read on."
2014-04-21 21:08:36;Question About a PyCon 2014 Django Tutorial;"As the giver of said tutorial, feel free to msg me with any problems.Taking a quick look, you should be viewing your results at http://127.0.0.1:8000/d/<slug>. The <slug> at the end will be the slugified ""name"" on the Talk model. So if the talk name was ""Hello World"", your url to see that would be http://127.0.0.1:8000/d/hello-world/.

Your talk list template should also have a clickable link that takes you to the detail view. https://github.com/kennethlove/gswd-pycon/blob/master/talks/templates/talks/talklist_list.html#L14"
2014-04-21 18:07:46;How Django REST Framework Changed My Life;I'm really trying not to be cranky today, really I'm not. However the header of the web page design is so incredibly intrusive I can barely read the post.Just looked at this. We currently use a customised piston which works really well for us. I think I decided it wasn't worth the effort to change because very few of our APIs are actually about manipulating models and most of the benefits relate to that kind of api.I feel like django rest framework is almost complete. It might be me but the rest layer should be abstracted to mixins you attach to models and all will be right in the world. 
2014-04-21 16:51:35;Understanding gunicorn's async worker concurrency model;
2014-04-21 13:57:54;Custom Paginator - what do you think?;"Interesting, but it would be much better if you included the source of your objects in your code samples. Specifically, where do your imports come from?

"
2014-04-28 23:39:12;Django Bugfix releases issued;
2014-04-28 15:47:59;Python/Django Meetup in Lake Success, NY;"Went to one of your previous meetups:

http://www.reddit.com/r/django/comments/1onru0/pythondjango_meetup_in_lake_success_ny/

It was awesome. Anyone around NY who can make it won't be disappointed."
2014-04-28 13:50:55;Django backward relationship lookup;
2014-04-28 02:51:10;A new Django content management system;"That looks beautiful, thanks for postingWhat are the main differences compared to Mezzanine?If only it supported python 3...Just looked up database support:

> Wagtail is tested on SQLite, and should work on other Django-supported database backends, but we recommend PostgreSQL for production use.

I guess you can use Memcache instead of Redis as well... This was posted about a month ago. Because Mezzanine is not enough.

Because we don't have a Wordpress bullshit in Python world."
2014-04-27 15:52:32;An example of how to serve files using X-SENDFILE (GitHub repo incl. Vagrantfile);"Just as a thought experiment, wouldn't a cleaner method be to separate the files out on to a static dir and let nginx handle access (mabey using [nginx auth request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html ) )

This allows your precious uwsgi threads to attend to other tasks whilst the file is downloading, but you can keep your granular access rights.Thanks.  I'm more interested in the Vagrantfile, but I always appreciate those who share freely.  > to show them that there is a better way to serve files that need to be protected by Django's auth system

Out of interest, what technique/method were they advocating?

Don't get me wrong, I'm really fond of the X-Sendfile idea (despite, or maybe even *because* it's an epic abstraction layer violation) but one advantage of not using it is that it ties you somewhat to a certain architecture and file location.I prefer to use uWsgi and Nginx instead of Apache and mod-wsgi, turns out to be far more performant.

But anyway, I created this sometime last year: 

https://github.com/airtonix/django-puraibeto

 - Guardian: for granular permissions
 - surlex: nicer urlpatterns.
"
2014-05-05 21:01:01;ManyToMany or ForeignKey for my quiz app?;"https://github.com/jessykate/django-survey/blob/master/survey/models.py

     Works well, as long as you do not use python3
     Not developed in 4+ months

https://github.com/vandorjw/django-assessment/blob/master/assessment/models.py

     Looks promising, but doesn't seem to work at the moment.
     Last active yesterday

https://github.com/tomwalker/django_quiz/blob/master/quiz/models.py

     Works well, but may not be what you are looking for.
     Here is an example.

http://www.revisemrcp.com/


--------------------

# **ORDERING**

None of these have a ""determine the correct order"" type question.

How I would score the correctness is as follows: 

Put the Following in the correct order: 3 , 1, 4, 2, 5

Since 5 items have to be ordered, this question is worth 5 points.

Max score = 1, 2, 3, 4, 5

Their answer must start with ""1"", for them to receive 1 point.(points += 1)

if it does not, we do not increment points, but take a look at what the user put down.

if they put down 3, the answer after 3, should be ""4""

3, 4, 1, 2, 5 (receives a score of 2/5)

The following python code does what I described.

        correct = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        answer = [3, 4, 1, 2, 5, 6, 7, 8, 10, 11, 9, 12, 13]

        points = 0

        for i in range(0, len(correct)):
            if i == 0:
                if answer[i] == correct[i]:
                    points += 1
            else:
                for j in range(0, len(correct)):
                    # get the 'correct' possition of previous answer
                    if correct[j] == answer[i-1]:
                        # ensure j is not the last number
                        if not j == len(correct)-1: # -1 due to starting at 0
                            # if answer is correct with respect to previous
                            if answer[i] == correct[j+1]:
                                points += 1

        print(points) # print '7'


This is the correct score IMHO because:

- the sequence does not start with 3
- 4 comes after 3 (+1)
- 1 does not come after 4
- 2 comes after 1  (+1)
- 5 does not come after 2
- 6 after 5 (+1)
- 7 after 6 (+1)
- 8 after 7 (+1)
- 10 not after 8
- 11 after 10  (+1)
- 9 not after 11
- 12 not after 9
- 13 after 12  (+1)

7 / 13

Notice, no points are awarded for having the final number in the correct possition.


    class ChallengeQuestionOR(models.Model):
        question = models.ManyToManyField('ChallengeQuestion')
        option = models.CharField(max_length=500)
        sequence = models.SmallIntegerField()  #make this a charfield, delimit with commas

What were you planing to do with IntegerField?


----------------------------------

# **FILL in the BLANK**

How are you going to deal with spelling errors, or synonyms? 
This is going to be your MOST difficult question score-type.


----------------------------------

# **Multiple-Choice**

Easy - see the models/forms/views from github repos provided above.


----------------------------------

# **Multiple-Choice**

Boolean should work fine."
2014-05-05 20:25:37;Does changing a RegexValidator require a migration?;"I don't think a migration will be needed. But just to be sure, you can run South's automatic schema migration and see what happens. If it says ""nothing appears to have changed"" then you're clear. 

Edit: I'm adding the command for those not familiar with South:
python manage.py schemamigration yourapp --autoNope.No, the validators are in Python code, not the database. They are checked only when calling ModelForm.is_valid().

But this also means that if you change the validator to be more strict, you may have old data in the database that no longer validates. It could be useful to write a data migration that removes or fixes these now-invalid values."
2014-05-05 18:02:14;Setting Django test cookie on every page;"This is a little difficult to parse, but it sounds like you have a single login page and your client wants a login *form* on every page while the user is not logged in.

Furthermore, it sounds like a cookie is currently being set on the login page that is then checked once they have authenticated, and users who don't allow your site to set cookies get to see that error message.

I would first figure out why the AJAX-set cookie is only working 50% of the time, and then figure out a way to set the cookie on the onsubmit of the login form.I'm not really clear where this ""cookies are required"" message is coming from. It certainly isn't part of the default django auth system. It might be more sensible to ""fix"" this ""login cookie"" detection than to graft an unreliable AJAX band-aid on top of it.The cookie is set via set_test_cookie() and checked with test_test_cookie() .. and that is exactly the behavior you want, no problem here."
2014-05-05 17:25:09;Django Beginner - Suggested Local Dev-Environment;"virtualenv and manage.py runserver for local developmentI'd really recommend picking up Two Scoops. They go into some best practice's about it.I develop in a Vagrant environment. It works really well. What issues have you been having with it?

Django runs very well in an environment that is extremely similar to the traditional LAMP. Its easy to swap components here. My stack is Ubuntu Linux, Nginx Server, PostgreSQL database, and Python/Django for application code. 

The only real trick needed is to make sure you've forwarded the ports that you want to run the development server on. Should like something like this in your Vagrantfile.

    config.vm.forward_port 8000, 8000 # localhost through 8000
    config.vm.forward_port 5432, 5433 # database access through 5432
I don't have a lot of experience with django but I got my dev environment up and running with 
http://gettingstartedwithdjango.comAre you using pip? Between pip and manage.py you shouldn't need to worry about anything really.

I am not sure what Vagrant is, but I use Nginx, mongodb, and django via gunicorn on mountain lion. As far as spinning up dev environments quickly you really can not beat installing virtualenv and virtualenvwrapper with pip. Then once you install django, also with pip, starting a project and subsequent apps is incredibly easy. [It's all on the first page of writing your first app.](https://docs.djangoproject.com/en/dev/intro/tutorial01/) 

manage.py is your friend and will handle most things for you.How about vagrant and using pip to install Django? Never tried the combination myself, but that I think I am about to try. I will reply to this comment with my experience."
2014-05-04 23:30:54;What are some prominent Django shops that you know of?;"Reddit is built with Python, but not Django. Prominent Django shops are Lincoln Loop, Caktus, RevSys, etc. InstagramDisqus is written in Django afaik.[Mozilla](http://www.mozilla.org/) is a major user of Django.  Also the [RIPE-NCC](http://www.ripe.net/) uses it for both [RIPEStat](http://stat.ripe.net/) and [RIPEAtlas](http://atlas.ripe.net/).http://stackoverflow.com/questions/1906795/what-are-some-famous-websites-built-in-django

http://dream-force.com/post/60070885405/9-most-popular-websites-built-with-django

I had heard that reddit itself was done with Django, but I'm not sure if that's actually true. The minimal research I've done (read: The one site I went to) seems to say that they use web.py.A lot of the OpenStack hosting uses Django as its control panel (Horizon). I'm not sure which commercial deployments use it. I know Rackspace uses a custom control panel, but no idea what it's written in.Readability! http://www.readability.comFrom the django-oscar case study list:

*     Tata Group - http://www.landmarkonthenet.com
*     Carlsberg - Their global ""We Deliver More"" platform is powered by Oscar (but is a B2B site and not browsable by the public)
*     Chocolate Box - https://www.thechocolatebox.com.au
*     The UK Labour party - http://shop.labour.org.uk
*     Meridian Audio - http://www.meridian-audio.co.uk
*     Which Rightchoice - http://www.whichrightchoice.com
*     Freetix - http://www.freetix.com.au/

https://github.com/tangentlabs/django-oscar
[Pinterest](http://www.quora.com/Technology-Stacks-and-Platforms/What-is-the-technology-stack-behind-Pinterest-1)A large amount of PBS websites are built in Django. Source: I work at WGBH.Not really a 'prominent' Django shop but I own a company that uses Python/Django/PostgreSQL as the basis for all our applications. Our customers don't care about the technology, only the results. 

We've created some pretty large applications (think hundreds of users), almost all of them plain boring bussiness applications :-)https://bitbucket.orgChaturbate as well. Not safe for work, unless you work there.I know [Torchbox](http://www.torchbox.com/) uses a bunch of Django. They even open sourced a CMS, Wagtail."
2014-05-11 18:30:54;Djangobook - Is it still worth a reading?;"Too many changes to mention. Also, it's not a change of syntax that's the issue - it's a change in the APIs and best practices. 

Honestly though, what do you want the tutorial to do for you? If you have an idea of what you want to achieve, can't you use the official tutorial and API documentation, together with the large amount of blogs and discussion forums?No. It was a great resource at one time, but a lot has changed since it was written and it's no longer that relevant. I'd start with the [official Django tutorial](https://docs.djangoproject.com/en/1.6/intro/tutorial01/) and follow up by reading the Django docs as you need to learn things—the Django docs are really awesome and well-organized.NO. I would not hire anyone who had used that book as their primary learning resource. I struggle to understand why it is still on the internet. The changes are innumerable.I checked the book out 3 months ago.  
Here's the thing - a lot has changed after that. Sometimes you will try to do something as shown in the book and it will throw errors about missing / obsolete methods and stuff like that.  

However, that book still kicks ass. It is one the best ways to learn the *why* and the *how* of Web Frameworks. I totally fell in love with how the book lays down concepts before explaining how Django works - So, although the book is outdated, I suggest you still read it.Sadly no, it is extremely outdated. Same goes for ""Practical Django Projects"", terrible book.Tango with Django is also good!I would probably avoid it because it is outdated. [Here](http://www.reddit.com/r/django/comments/253dth/thinking_about_a_django_book_advice/chdn9jj) is where I vouched for it a few days ago on reddit and got chewed out by some people who probably know more about available Django resources than I do, and posts up some reasonable alternatives. You should better proceed with this one.
http://www.tangowithdjango.com/book/I had the same problem. I put together a list of resources that worked for me https://www.coursly.com/curricula/14/"
2014-05-11 00:15:18;Using Markdown With Django 1.7;"Can anyone comment on the security implications of using Markdown with Django? django.contrib.markup was removed due to security issues...

Can anyone comment on this, and does the method described in this article suffer from the same problem?Note: you can follow the same method (custom template filter) to also offer Creole or Restructured Text or whatever support you want."
2014-05-10 22:42:43;Limit choices to foreignkey in django rest framework;"In your serialiser class add a validate_owner method that checks the current user. That will stop people adding objects ""owned"" by other users. I think you hVe to get to the user by something like self.context['request'].user. I'm on my iPad right now so I can't check. 

Then use the other things you mentioned (either custom authorisation class or queryset filtering) to stop accessing others that already exist. I think that should cover everything?A custom permission that checks if the user is the owner of a group should solve this problem for you, right? I believe there's an example for it in the DRF tutorial."
2014-05-10 22:33:23;Djando rest framework serializer fields;"I've done the same thing and the only way I was able to do it without a lot of code was the same way you suggest - writing separate serializers and overriding get_serializer_class. 

I've come across no issues, the serializers just inherit from each other and override the fields = () in the Meta class. "
2014-05-10 20:19:29;Help me with troubleshooting my static files;"I'm guessing you're getting a 404 if you go to the file directly?

Are you in development (debug) mode? Then you might be missing the (development) URL patterns in your URLs file. The steps for that are [here](https://docs.djangoproject.com/en/1.6/howto/static-files/#serving-static-files-during-development) for Django 1.6.

For live sites (non-debug) you have to do other things (serve them not via Django / WSGI, but directly via your webserver). The documentation has a topic about that too.Check the chrome/ff inspector's network panel for the relevant files, they should be 200 or 304.

If they show 404, I suspect your static files folders arent set up properly.What is your `STATIC_URL` set to in `settings.py`? Would be useful to see if the link to the stylesheet is 404ing, as the others suggested.Could be a couple of things. Have you put the following in your **settings.py** (assuming you're using 1.6+ and have a BASE_DIR defined)?

    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
    )

Also, have you done the following in **base.html**?

    {% load staticfiles %}"
2014-05-19 09:15:32;No need to use get_context_data, use {{ view.some_method }};"My gut says this is a bad idea because of note #2. It isn't as flexible as you might need it to be. Which leads you into mixing and matching. Then someone new to the code base sees some stuff in get_context_data and some stuff not. They then spend an hour, or more, cursing your name trying to figure it out.

The other downside is if you use jinja then you can pass parameters into the calls. Now you are promoting excess business logic in your templates. I recently ran into some code where complex filters on a manager were being done in the template, because they can. I feel like this same type of thing could happen leading you to looking at another layer of code trying to figure out why certain data is appearing the way it is.

Will probably look into this a little bit more and see if there aren't some use cases for it.Certainly a compelling case – as it provides an intuitive interface for directly accessing particular business logic – but, in my professional opinion, I'd advise against it. Why?

## Conventions Exist for a Reason ##

`get_context_data` is a method used for *getting the data required by the context*. This forces you, the developer, to think intentionally about what is being sent to the context and gives a single point of entry to *all other developers* working on the same codebase *as it relates to debugging/modifying the context provided to a particular template/request/page* (as mentioned by /u/BuddyLindsey [here](http://www.reddit.com/r/django/comments/25xgc4/no_need_to_use_get_context_data_use_viewsome/chlt06p)).

As the 'Zen of Python' states, *""In the face of ambiguity, refuse the temptation to guess.""* & *""Explicit is better than implicit.""*...if you're already writing a method on your view that is used to provide data needed to properly render a template (i.e. the *context*), why not just include that data *within* `get_context_data`? How much extra work is that? 8 seconds tops. If it takes longer than 8 seconds you're probably doing CBVs wrong.

## Keep your DB access DRY ##

According the the [django docs](https://docs.djangoproject.com/en/dev/topics/db/queries/#caching-and-querysets), the data stored in QuerySets is cached thereby avoiding unnecessary database connections. In the example listed in the post you linked to, a new database connection is required EACH TIME `{{ view.books }}` is accessed. Evaluating the view's `books` method *within* get_context_data (and assigning it to a key in the context dictionary) means ALL template access to `'books'` will pull data from that single DB connection (initiated by code within `get_context_data`).

This is why Model manager methods like [`select_related`](https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related) and [`prefetch_related`](https://docs.djangoproject.com/en/dev/ref/models/querysets/#prefetch-related) exist: if you know you need to access any related objects on a particular instance, go ahead and pull them all at once so you minimize the amount of times you have to talk to your database.

All that said, this technique has the potential to be super-useful while doing exploratory development, I'd just advise against it otherwise for both the sake of performance *and* the sanity of the other developers you're working with.This might make me take another look CBV'sAt least based on the example given, I would argue that this is not the way it should be used. I try to prevent my templates from calling querysets in such a manner, and prefer to specifically pass them into the context. I feel like it prevents performance leaks and unexpected behavior.

I could be wrong as I've never used the 'view' context variable, but I would imagine it would be better suited for getting more static values, e.g. {{ view.parital_template_name }} or {{ view.user_can_foo }}[Source](https://github.com/django/django/blob/master/django/views/generic/base.py#L24)I'm not understanding this. What determines the automatically created view variable? Can you access any variable declared inside your view? 

Seems in that case the only downside being you might be able to access more info in the template then you want. Especially if you have someone else doing templates later on for a model/view system you designed. In addition to what was said in previous comments:
You might be able to use this method to get some static data (like the view.title in his example)
but once you need calculated data you will need to make a function for it. problem is each time you access this ""variable"" in your template the function will be called again"
2014-05-19 08:06:02;Django Trigger Happy;
2014-05-19 07:49:26;dj-config-url: Extending on the idea of dj-database-url;
2014-05-17 11:16:15;Will Django 1.7 be LTS ?;"Last I heard, 1.8 was (maybe) going to be the next LTS.Would be nice if it was. With all the new features and handy things that have been added, 1.4 is starting to feel 'old'. Still useful, but old.

I wonder when 1.7 will be released. Hopefully within the next couple of weeks..."
2014-05-15 19:00:59;How can I get the length of the object in form.management_form?;[deleted]Curiuos what this is for. Length as in... how many forms are being generated by the formset factory?
2014-05-26 19:07:08;Markdown: Speed and Denormalisation;
2014-05-26 19:00:43;Learning Django Advice?;"While I think you just start go with the official tutorial this site has curated tutorials worth examining: http://twoscoopspress.org/pages/django-tutorials.

Once you get the basics down, I highly recommend buying a copy of Two Scoops of Django. If only we had the same thing for Flask...

Since you're familiar with Java, any introductory Python book can get you started quickly.
For Django start with Djangoproject website tutorial.
Then Tango with Django website.
Then code your own project while reading:
- read the source code of Django sample website such as PythonDotOrg (Github).
- read the source code of Django apps (Github).
- Two scoop of Django book.
First off, you need to see a video that does it from scratch.  I recommend starting with Effective Django and *follow its video* (all you need is this video to get you started).  Setting things up with django is a big task if you've never done it, and this video shows how it's done.

Then, when you're done with the video, start on the django tutorial from the django site.  

EDIT: Gold?!  Wow.  Thanks stranger.[Tango with Django](http://tangowithdjango.com) was really helpful to me.Highly recommended ""Python Developer's Handbook"" of Andre Lessa. 
ISBN-13: 075-2063319949 
ISBN-10: 0672319942

IDE- PyCharmyou should use http://djangobook.com. it's the best book and written by the two leaders of Django project. Jacob-Kaplan Moss and Adria Holofaty

It's also free. :--)"
2014-05-26 18:15:51;Noob here Trying to use AWS Elastic Beanstalk to deploy my sample app, and noticed that AWS doesn't mention sqlite. Does this mean I have to configure my sample app to use MySql?;"I wouldn't recommend using sqlite for production because of it's locking level mechanism. If it's a small scale project use MySQL, personally I'd recommend using Postgres since it uses multiverse concurrency control.I highly recommend PostgreSQL.
You can use Amazon RDS to create a PostgreSQL instance.
On your Django server install psycopg2
`pip install psycopg2`

Edit your settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'db_name',                      
        'USER': 'db_user',
        'PASSWORD': 'db_user_password',
        'HOST': hostname_of_rds_server''
    }
}

caveate: I haven't personally used AWS RDS service with Django. I use PostgreSQL locally and in production. 
You can alternatively install it right on your web server. 
If using Ubuntu: apt-get install postgresql postgresql-contrib
If using something else, google it. 
"
2014-05-26 17:55:08;Is there a site like Laracasts for Django?;I have no experience with Laracasts, but you might want to check out [GoDjango](https://godjango.com/)
2014-05-25 05:30:35;After getting done with the website, what do you with the admin panel? Screenshots welcome.;"I've been using [Grappelli](http://grappelliproject.com/) for some things, and I like it a lot.I use Django Suit.As much as I like Django's admin interface, it's rarely been useful to me post production.There are a bunch of admin interfaces on [djangopackages](https://www.djangopackages.com/grids/g/admin-interface/)I like [django-admin-tools](https://bitbucket.org/izi/django-admin-tools/wiki/Home) Be wary of any admin skin that replaces html templates as it can conflict with other admin customizations and add-one.

It's more restrictive but I've had more luck with CSS-only skins (and a smattering of jQuery if I really need to change the DOM)"
2014-06-02 19:36:59;Am I using bcrypt correctly?;"To answer my own question, I think I am.

Looking at the [hasher implementation](https://github.com/django/django/blob/master/django/contrib/auth/hashers.py#L274), it looks like the spec on the Django website isn't totally followed. The part before the first $ specifies the algorithm, but beyond that it looks like the bcrypt hasher handles things differently.
"
2014-06-02 17:47:08;When to use a project-level views.py?;"I think you've got the right approach, putting your views into the project.


> However, I read somewhere else that having a project views.py file was bad practice.

Sometimes things are bad practice, and sometimes folks make a claim for no good reason.  If someone says it's bad practice, get the reasons.  Think about them.  Decide for yourself if those reasons are valid in the context of your project and what you're trying to accomplish.  Then design your project to suit your needs.

Then, maintain your project for a few years, or pick up the maintenance on an older project.  That's how you'll know if you made the right choice, or if didn't matter at all.I tend to go with project-level view files (though I actually name it main.py) for homepage/index/splash pages, since those often need to pull data from multiple apps and serve as a logical entry point to everything else.Unless your index view is going to be complex, I would just skip writing the views.py and directly include a TemplateView in your project-wide urls.py.

    urlpatterns = patterns('',
        url(r'^$', TemplateView.as_view(template_name='index.html'),name='index'),
        ...
    )In our case each application represents a unique sensor that has equivalent models as each other applications but a different name. The project level views contains the logic for all apps (with a custom model loading function) and each request to the views contains the name the application (sensor) to load/process. Seems odd but it works well for us.I personally just use a ""core"" app that i put more ""project level"" stuff, including the main index page.

I think it keeps things neater, don't like application-style code floating at higher level directories.I do it all the time. When I started new django site, it only has 'project' - something that I quite reluctant to call. These app vs project just confuse people for no good reason. More appropriate concept I think is 'importable' which applied to all things django need - project, apps, settings, urlconf and models. The only exception is apps due to hardcoded dependency on `models.py`.

Curious to know the reason why having a project views.py file was bad practice."
2014-06-02 17:14:39;I need a little help running a script on webfaction via cron;"Cron jobs run in their own shell environment, as a result you can't activate a virtual env on them. The solution is to always use absolute paths in your cron jobs to execute your virtual env's python. 

For example, to collect static resources with a cron job:
[schedule] path/to/venv/python path/to/project/manage.py collectstatic [options] I'd advise using [Celery](https://pypi.python.org/pypi/django-celery)"
2014-06-02 16:02:43;No-nonsense AngularJS html5Mode URL routing with Django;
2014-06-01 20:00:29;Any recent (1.6+) Django podcasts about?;"Yes, give the Django News Podcast a go: https://soundcloud.com/elena

Mostly covers what's been happening on the developers list, changes in upcoming releases and interviews with core developers. Very good signal to noise ratio.There was also the [Django Round-Up by Lincoln Loop](http://roundup.lincolnloop.com/), which was closed by the end of last year but covered many interesting topics, including some that are still current such as migrations."
2014-06-09 19:55:43;Clickable labels for django-taggit (django-taggit-labels);Nice. I see in your screenshots 'Behavioral Interventions'. Working on something autism related? (I ask because I am myself)
2014-06-09 19:23:59;How to integrate JavaScript with Python Web Frameworks;"This is a good talk from Pycon, we were trying with AngularJS and tastypie today & this talk greatly helped us, so I shared it here. :) 

Hope it helps.

[Here is the Link for the Talk Slides!](https://speakerdeck.com/nzpug/jen-zajac-integrating-javascript-with-python-web-frameworks)Well presented - solid content - ThanksJust out of curiosity, what's your opinion on bootstrapping JSON directly onto the template using the 'safe' filter? Then you don't have to search the dom for the data-attributes nor hit the server with another request. "
2014-06-07 21:00:12;Why would I ever use TemplateResponse instead of render?;"A TemplateResponse is like an HttpResponse, but rendering of the template is deferred until necessary. This is useful because the context_data passed to the template can be modified or updated outside of the original view. For instance, you could have a decorator that adds a variable without changing the original view. With views that return an HttpResponse, like render, this isn't possible because the template has already been parsed and rendered.Say you want to do some A-B testing with some changes to some of your pages. Using the deferred rendering you can write a middleware that changes the template used based on some logic. There goes your ""There should be one-- and preferably only one --obvious way to do it.""Are there any real examples of TemplateResponse being used effectively? Any projects/apps which actually use it?

I can see the potential - but some great example would be useful. The documentation doesn't really go through it in that much detail.
Views that return TemplateResponse is more reusable. You can call it from other views, change certain context or switch to use different template. One way we use it is when implementing common library that will be used through several projects. The library provide a view that handle redirect from 3rd party website - think payment processor such as paypal. Most of the time the page to display is pretty generic - thank you message, username etc. So the generic view will create a TemplateResponse instance with default context and template. It will then call a function (provided by the app using the library) passing the TemplateResponse instance as one of it argument. This allow library user to override the template and add extra context.

It also allow something like HMVC - http://en.wikipedia.org/wiki/Hierarchical_model%E2%80%93view%E2%80%93controlleryou can use whichever one you like. they fundamentally do the same thing. render is just a shortcut function that wraps returning a TemplateResponse with a bunch of default parameters. 

https://docs.djangoproject.com/en/1.5/topics/http/shortcuts/

you can override the default params in the args passed to render, or you can do it in the init args of TemplateResponse. its just a matter of taste. do it whichever way pleases you more.There's no reason to use TemplateResponse instead of render. As for displaying errors in a non-form setting, you will want to use the [messages framework](https://docs.djangoproject.com/en/dev/ref/contrib/messages/)"
2014-06-07 00:16:24;Need some help with my admin site ..;"I found the problem.
The permissions I was giving the user, were on a model that was not registered to the admin. I was not aware the the permissions will be available even though the model is not registered."
2014-06-06 20:11:35;Forms and FormSets in FormWizard;"Considering that it isn't marked as done, I would say they haven't worked on it. Your options:

1. Implement it yourself and submit a pull request to Django.
2. Hire someone like a core Django developer to work on the ticket."
2014-06-16 22:03:13;How to include {{ and }} in your Django templates;"{% verbatim %} works, too.
But your way should be better.

[docs](https://docs.djangoproject.com/en/dev/ref/templates/builtins/#verbatim)Or, just use the HTML entities:

    &#123;&#123; Some Text &#125;&#125;

Here's a link to the official docs for doing this: https://docs.djangoproject.com/en/dev/ref/templates/builtins/#templatetag"
2014-06-16 21:13:18;Django: The good parts (video);
2014-06-16 16:39:15;Freelancers, I suck at design. What do you guys do?;"Read about design. Learn about typography. Learn about the basic elements that make for a good design (color, white space, flow, etc.). Read, read, read. 

Find sites that currently employ these principles. Mimic them at first. Literally view their source code and see how they are doing things. Next, start adding your personal preferences/twist into the mix. Eventually, you will learn what your ""style"" is. 

If you want to learn how to design yourself, I'd refrain from using a framework, until you know how to customize it to look like your own.

Finally...design just may not be your thing. If, after doing these things, you find that you still don't get it, find a designer to work with. I do my own design first, via plain html/css/js, and render them via TemplateView. After that, I convert them to dynamic Django views, models, and templates.Just practice. That and look at sites you like and take inspiration. Whenever you're browsing the web take that as time to learn as well."
2014-06-16 16:10:25;What django attack vectors are possible if someone knows your secret_key?;"The secret key is your primary source of randomness for your Django project. It is used for cryptographic signing, such as generating password hashes, CSRF tokens, or session keys. If I had you key and wanted to exploit your site, you would be vulnerable to CSRF attacks, session hijacking, and possibly leaking your users' passwords if your database was compromised.

Edit: In fact, [Project Euler's](https://projecteuler.net/) database was recently compromised and they brought down the site as a results. The site has been up since October 2001 - nearly 13 years. I'd say that ruined more than their week. :(Gosh, let's have a think:

 * Remote code execution if you use the cookie session storage engine
 * Remote code execution if you use the cookie message storage engine (I think?)
 * Reset anyone's password via contrib.auth.token.
 * CSRF at will
 * Can comment on any instance of any type when using django.contrib.comments.
 * Bypass form validation when using FormPreview (I think?)
 
Not really checked, but you get the idea."
2014-06-16 11:44:45;Is it possible to see the superuser password in a django project;"They are in the database.

If you checked in the database as well (e.g. you are using sqlite and checked in db.sqlite), then your password's salted hash is on github, not the password itself. Together with the secret key in settings.py, someone determined enough can bruteforce your password, but it will take them quite a long time and most likely is not worth the trouble (you should still delete the repo, of course)."
2014-06-23 20:24:35;Friends don't let friends not use Django;"> Newbies should choose Django. It will keep you secure and it will teach you a lot.

I argue this point.  Django is a boilerplate system.  The only thing you'll learn is how to use Django.  Anything else is black boxed.Double negatives :/"
2014-06-23 17:58:03;Any interest for a Yeoman Django/Vagrant generator?;"One of the problems that I keep having with Django is that starting a brand new project takes a while if you want to reap the benefits of a virtual production server at hand, and factor in Vagrant. Deployment is never straightforward, either -- unless you take the time to make it straightforward, in which case it isn't straightforward anymore. This can be fine if you're getting paid for your time, wink wink nudge nudge, but not if you're starting a pet project or volunteering your work towards a good cause -- which was the case for me, namely a Web app to help with the proceedings of a country-wide linguistics club that I used to visit in high school (and my lazy ass hasn't even started actually building that one...)

Setting up and deploying Django can be much more time-consuming than, say, starting a new project in PHP, and I wanted to remedy that through automation. I love Python and Django, I've turned them into a job over the last couple of years and wanted to give something back to the brilliant community and ecosystem. I've also been brushing up on my JavaScript over the last few months and wanted to try my hand at building a tool like this."
2014-06-23 11:17:33;Install Django on Windows 8;"I think the official instructions are better:

https://docs.djangoproject.com/en/1.6/intro/install/Stop using distribute. It has been merged into setuptools - use setuptools instead."
2014-06-22 17:15:30;Getting path of uploaded file (Django 1.5.5);"How big are the uploaded files? It seems the default behaviour is to keep small uploads in memory:

https://docs.djangoproject.com/en/1.7/topics/http/file-uploads/#upload-handlers

"
2014-06-22 02:53:03;What are some good ways to deal with large amounts of image uploads in django?;"I think we'll need more information about why uploading and resizing is becoming an issue, as well as some more information about the client(s) doing the uploading. Do the clients have to be making web requests? Are clients usually uploading one file at a time? When does the resizing occur?[This app called OpenRoss](http://developers.lyst.com/data/images/2014/06/23/openross/) was just released.  I think it might do exactly what you want:

> The OpenRoss image proxy service provides a way of serving dynamically resized images from Amazon S3 in a way that is fast, efficient, and auto-scales with traffic.

It does it slightly different than your architecture: the raw images are saved to S3, but they are not resized until the size is requested by the web site.  Then, resizing happens dynamically - but it's proxied through CloudFront, so it only happens once per size.My old company did a lot of photo management. We used the cloud service Cloudinary to store, resize, and distribute images via CDN. It worked great for us, very easy and flexible. I just used the django-storage so module and stash all my photos on an s3 bucket. Simple, light weight, and my servers don't have to handle any storage.Large *number* of uploads or *large* uploads? Numbers would help!> However, the upload and resizing of these images is becoming a pain point in the app

What exactly do you mean by that? It's taking too long? Too much CPU usage?You just need to remember the following things on installation:

* apt-get install libjpeg-dev libpng12-dev (or their equivalents)
* pip install pillow to your virtualenv (not PIL).

These are the major pain points. But, once you've identified and dealt with them you can move on.

Use the following code:

    import StringIO
    from PIL import Image

    image_field = self.cleaned_data.get('image_field')
    image_file = StringIO.StringIO(image_field.read()) 
    image = Image.open(image_file)
    w, h = image.size

    image = image.resize((w/2, h/2), Image.ANTIALIAS)
 
    image_file = StringIO.StringIO()
    image.save(image_file, 'JPEG', quality=90)

    image_field.file = image_file

In general it is a REALLY bad idea to add dependencies (especially external) to your code unless absolutely necessary. So I wouldn't look for an external solution to this. How you''re doing it sounds fine.Is your image resizing code part of the same application as the rest of your stuff?  You could work on scaling that part of the app separately, like have 5 image resizing servers and 3 web frontends.  You're already partway there with Celery.I've had a good experience with https://transloadit.com for what you're describing. I've heard that Instagram can handle a few images :)  Maybe you can find a few useful nuggets of info in this overview of [Instagram architecture](http://highscalability.com/blog/2012/4/16/instagram-architecture-update-whats-new-with-instagram.html)"
2014-06-30 11:40:40;Compression of statics;There's Django Compressor: http://django-compressor.readthedocs.org/en/latest/In case you haven't seen it, here's a short video tutorial on django-pipeline: https://godjango.com/49-compile-and-compress-assets-with-django-pipeline/Please call me out on this if I'm wrong, but can't compressed JS just be unminified by an unminifier? Are the benefits to this basically just having variable names mismatched?
2014-06-30 07:15:45;What to use for APIs, django rest framework or tastie pie?;"Django rest framework is the current recommendation.  The tastypie author is moving on and is not really working that hard on it. 

http://www.toastdriven.com/blog/2014/may/23/state-tastypie/I will suggest Django Rest Framework, Nice and easy documentation.Django Rest Framework.

While I would say that you could get started faster with tastypie (filtering is easy!), its documentation is a bit lacking, often describing behaviour that changed in recent releases. Also the development is very slow at the moment and bugs are not fixed. As thundersnow mentions below, the author is moving on.

DRF feels a bit like learning django all over again, with its ViewSets and routers and everything. However the documentation is very useful and well structured so you can get into it quickly. Plus making the API browsable is a huge win while developing.+1 for DRF.

It took me 20-40% longer to wrap my head around, but once my slow brain ""got"" how they do things it felt more intuitive than Tastypie.

Tastypie is by no means bad, when I have to work with legacy tastypie stuff I am not filled with overwhelming dread, just a moderate sense of anti-preference.  Somewhere between ""I ordered curly fries and they gave me regular fries"" and ""your flight has been cancelled come back tomorrow""I used the django rest framework for two projects and it's pretty good.Django REST is excellent. The author attends Python meetups here and talked us through some of the reasoning and it's very very good.Make sure you know how to override your def get_queryset and use prefetch_related and select_related but DRF is my choice. I had problems using both, and ended up hand-coding our implementations of API to suit some weird URL naming stuff my boss insisted upon. "
2014-06-30 01:06:41;Could someone ELI5 the value of Celery with django?;"It lets you do extra stuff without having users wait.  

For example, let's say a user submits a comment on something on your website and you want to notify a bunch of people that are following that something about the new comment.  Finding out who to notify and actually sending all the emails might take a long time and you don't want the person submitting the comment to have to wait until all that is finished.  You want their comment to be submitted quickly, and to send all that other work off to celery to be handled separately ""off line"".  Do you ever want to run some sort of scheduled clean up or cache refreshing task? As django is generally client driven, that can be difficult... maybe you'd consider using cron jobs. With django and celery though, you can keep it all in app.

Are there things you'd like to let users do, but they will take a long time to execute? You could add code to run the task called from a view, and do a bunch of not very django-y tricks to let the user know that stuff is happening. With celery, you can spawn the back-end task, forward the user to a status page, and then provide status updates with a separate view method. 

I use celery to run scheduled tasks within the confines of my app, and any time the user performs an action that could take more than 1 second to complete. My code stays cleaner for having views be views and tasks being tasks. 

I usually extend the normal urls.py, views.py, models.py with utils.py, where I stick all my app specific business logic that runs quickly, and tasks.py, which holds everything that will be called by celery and operates asynchronously.

Hope that helps.In short: If your Django app has tasks that need to be performed in parallel (particularly if distributed across multiple hosts) or on a schedule, Celery is your bro.Save yourself some nerves and time and use uwsgi's spooler and/or mules."
2014-06-29 18:54:10;Setting up Django w/Varnish?;"1) set up django on however many endpoints you need
2) set up varnish, have it round-robin between django endpoints
3) take a look at django-varnish if you want varnish acl control and purging via the django admin

simple!Set it up without varnish first. Then you can follow any Varnish guide for setting up the caching. If your app is already setting meaningful Cache-Control headers and you're careful about creating cookies then there's not much to it: you set the app to serve out of another port like 8080 and have Varnish listen on 80 and make requests to the backend when needed.

I've run relatively popular sites on very small servers thanks to Varnish.what is varnish?"
2014-06-29 18:08:54;Example using multiple response formats?;"If I understand correctly, you want to look at the value of a GET argument in the view, but you are probably better off formatting your URLs with the format as a file extension - eg: http://server/data/4.xml and then make that an argument on the URL, something along these lines:

(r'data/(?P<pk>\d+).(?P<response_type>\w+)', cdxcomposites_detail),

Then update your view with the new argument:

def cdxcomposites_detail(request, pk, response_type):

You can then just look at the response_type variable in your view.Not sure if you wanted that exact URL structure but if you wanted to, you could modify HTTP headers to let DRF know what content type you want outputted.

Not sure what the header is."
2014-07-07 22:35:25;Django Tutorial help!;"In your base.html, do this:
_________
    {% load staticfiles %}
    <html>
    <head>
    <link rel=""stylesheet"" type=""text/css"" href=""{% static 'appname/css/sample.css' %}"" />
______________

If that doesn't work...

Give us the directory structure of your app, from the top down to the css files.

Also make sure you're restarting the server.Try adding a / so that the link tag looks something like this.
<link rel=""stylesheet"" type=""text/css"" href=""/static/css/sample.css"" />
Doing this will verify that you go to the root folder and then work up from there. I'm not sure if this will work but it's worth a shot.
    I just finished those lessons and uploaded the code for each video [here](https://github.com/DigitalMockingbird/MVP_Landing_Page). (each commit is the end of a video)`TATIC_URL = '/static/'` should be `STATIC_URL = '/static/'`

...Unless that was a typo."
2014-07-07 19:08:19;fields attribute in metaclass of modelform not working;"You need a comma after the last item in the list, even when there's only one list item.The problem is in your views. You're not using PersonForm because Django looks for the 'form_class' field not 'form_name'.

[https://docs.djangoproject.com/en/1.6/topics/class-based-views/generic-editing/#basic-forms](https://docs.djangoproject.com/en/1.6/topics/class-based-views/generic-editing/#basic-forms)"
2014-07-07 16:47:40;Recreating the “Building a Blog in Django” Screencast;"As a newcomer to the World of django / Python i loved this. 

Everything is well explained and the writen guide is a realy nice addition aswell. 

So thank You and keep these coming !Recreating it in Python 3 limits its usefulness IMHO. It's great that you have the option in Django, but for people that need to integrate other third-party modules it sounds like a problem. Or has everyone created Python 3 compatible versions of their modules now?

Edit: Hey guys, how about instead of just clicking the downvote button you also hit reply and explain why you disagree."
2014-07-07 16:00:00;Object / row-level permissions;django-guardian seems good for this.
2014-07-07 13:01:31;Basic questions about Django password management.;"> I've created user models

This may be your problem.... you should be making use of django.contrib.auth, which provides the user models w/ proper password storage.  If you created your own models, then you are reinventing the whell.

https://docs.djangoproject.com/en/dev/topics/auth/That's weird. Did you change your PASSWORD_HASHERS setting? I assume you've seen [the docs on how Django manages passwords](https://docs.djangoproject.com/en/1.6/topics/auth/passwords/#password-management-in-django)?Given that you've [set up your custom user models properly](https://docs.djangoproject.com/en/dev/topics/auth/customizing/#substituting-a-custom-user-model), this shouldn't be happening. How are you setting the password? You need to call [user.set_password\(raw_password)](https://docs.djangoproject.com/en/dev/ref/contrib/auth/#methods) to generate the hash. Setting user.password = raw_password won't generate the password hash and will just save the raw text to the DB. "
2014-07-14 19:57:36;Deferred Tasks and Scheduled Jobs with Celery 3.1, Django 1.7 and Redis;"Can celery be used for workflow-style stuff?

Basically ""Kick off these 10 jobs at 2 AM, and wait for all of them to finish before kicking off this next one.""Is there an easy way to set up multi project celery instances yet?"
2014-07-14 19:47:24;[tip] Easy responsive images: setting the srcset attribute with sorl-thumbnail;[deleted]You should just use the |resolution filter: http://sorl-thumbnail.readthedocs.org/en/latest/template.html#resolution
2014-07-14 17:24:35;Django's version of a [Web Method]?;"I'm not familiar with ASP.NET, but unless I'm missing something, isn't a 'web method' just a static method that returns a JSON string?

It seems to me that a regular Django app can do that in even fever lines, and at least just as lightweight, especially with JsonResponse() in 1.7.Baked in? I don't think so, but using mixins with class based views like the [AjaxResponseMixin](http://django-braces.readthedocs.org/en/latest/other.html#ajaxresponsemixin) from Django-Braces has worked well for me.the basic [Class-Based Views](https://docs.djangoproject.com/en/dev/topics/class-based-views/intro/) in django work very similarly to this. The view class automatically dispatches the HTTP request to one of its appropriately named methods: get, post, put, or delete. 

You still have to implement the method but if you just want a very simple REST API endpoint it doesn't take a whole more than just JSON encoding (with an appropriate representation) a queryset as the body of your response. WebMethods aren't really decorators. Nor does it use Rest as far as I remember."
2014-07-13 21:52:27;reusing a portion of django's code;Not sure about exactly which features came out when, but Django was released before flask or sqlalchemy. 
2014-07-13 19:49:03;How to go about dynamic querysets?;"    card_type_dict = Player.objects.filter(
        nation_id=nation.asset_id
    )

    if something == this:
        card_type_dict = card_type_dict.filter(something)
    elif something == this:
        card_type_dict = card_type_dict.exclude(something)
    etc.for for dynamic querysets i do a dict, for example:

data_dict = {}

if x:
data_dict['user__startswith'] = ""test""

etc.

QS.objects.filter(**data_dict)
use Q objects. Why can't you do what you've shown in your example?Other people have show that you already had the answer, but just to expand and clarify, whenever you perform an operation on a queryset like .filter() .exclude() .all() it makes a copy of the queryset and returns it.  When you attempt to access the values in the queryset, by indexing .filter[0] or iterating or converting to a list, it will then evaluate the queryset, and furthermore, cache the retrieve items so if you try to use the same queryset object twice, it won't hit the database twice.  Some operations copy, some do not, so for instance you can't do .count().filter() because .count() will return an integer.I'd probably lean towards using an actual search engine."
2014-07-21 18:01:50;Django Migrations - A Primer [with Video];"Is there like a spreadsheet or something with bugs that need squishing before an official 1.7 release? I'm just curious if there is some sort of official timeline.

EDIT: also good article. simple and straightforward. just the way I like it"
2014-07-21 17:38:46;Is there a way to print stylesheet in a template file.;"Maybe use an include? Put the css in a style tag in a separate html template:

    {% include ""foo/style.html"" %}

Or can you not create a base email template with the style tag in it and just extend that?Looks like there is a library for that!

[django-inlinecss](https://github.com/roverdotcom/django-inlinecss)

Inlines stylesheets, specifically for email. Actually it looks like it automatically inserts the styles into style tags for each element —— even cooler! I'm not sure how advanced it is in terms of CSS selectors, so it might not work for complicated selectors and since it's rendered once it won't work at all for responsive styling.

Not sure how mature it is, you could look at the code base for ideas.In your view for the email you could add a variable that contains the stylesheet as a string.

    with open('path/to/stylesheet/email.css', 'r') as f:
        my_stylesheet = f.read()

Then in your template output the variable.

    <style>{{ my_stylesheet }}</style>"
2014-07-21 16:26:20;I didn't even know this book was coming out. Figured it could use some love.;"I have a review copy. It's terrible. Don't buy. Don't give it any love.

Notes:

* The editing and proof-reading is terrible. No author does good work unless he or she has a good support team. Unfortunately for Samuel Dauzon, his publisher fell short on the job.
* The author, Samuel Dauzon, had nothing to do with the book title. I'm fully aware Packt can use this title legally, but it's still a **total dick move on Packt's part**.
* The paperback edition is a clear demonstration that having a publisher does not guarantee that the quality of the printing will be up to par.
* I feel very sorry for Samuel Dauzon. None of this is his fault. 
* This isn't the first time that Packt has screwed over a Django author, and I doubt it will be the last.I just got my copy of Two Scoops of Django yesterday and I'm already in love with it. Full of quality information that both new and experienced django developers will find valuable. 

In the same breath, it's also the only django book that I own, so I'm not sure how it compares with others. It's only like $30 on Amazon, so I think it's worth it. 

The book's layout is also WONDERFUL! A lot of technical books have good information, but it's too difficult to follow due to the poor formatting. This book definitely doesn't have that problem. 

TLDR; Two Scoops of Django - get itIs this book at all related to http://gettingstartedwithdjango.com/? That (unfortunately incomplete series) is one of the best set of tutorials out there, and I would snag this book in a heartbeat if it was the completed set.Packt is pretty much the dregs of the tech computer publishing world as far as I'm concerned.  Proof-reading / editing is non-existent; the emphasis seems to be on getting material out there NOW, and quality isn't a concern.  They never publish errata, and their Kindle versions are absolutely terrible when it comes to formatting code or other technical images, diagrams, etc.  O'Reilly can make it work, but Packt fails miserably time after time.  Occasionally they have books on subjects that I'm interested in that aren't completely ruined by the lack of editing so I've learned the hard way to buy their ebooks direct so I can get the PDF versions (less formatting issues).  In the past I went 'round and 'round with their customer support... rather than attempt to fix the problem i.e. fix the book and release an updated version, they just attempted to buy me off with a free copy of another book.

When O'Reilly joined with Packt I sent O'Reilly's customer support an email letting them know what kind of problem child they just tied themselves to.  One could only hope that O'Reilly's high level of professionallism will rub off on Packt, rather than the other way 'round."
2014-07-20 14:32:36;How to Deploy to Heroku not using pip, virtualenv...;"You don't actually have to change anything about the application or the application structure itself to start using a virtual environment. I don't know anything about your current app, but if it's like the python apps I'm imagining, your process would go something like this:

1. cd into the directory where you application lives. The top level directory.
2. `git clone https://github.com/pypa/virtualenv.git /tmp/virtualenv` This clones the code for setting up a virtualenv into your local /tmp directory.
3. `python /tmp/virtualenv/virtualenv.py ./ve` This runs the python executable to create a virtual environment, and tells it to create it in your application directory in a folder called `ve`.
4. `source ./ve/bin/activate` This will activate your virtual environment. You will now see a little ""(ve)"" in your command line to let you know you're in a virtual environment.
5. `pip install Django` << or maybe ""Django-1.8"" or something like that.
6. `pip install psycopg2` Installs the postgres drivers.
7. Use pip to install whatever other dependencies you need.
8. `pip freeze > requirements.txt` This is a magical command! After you're done installing all the things that are needed to run your application (like Django and PostrGRES), this command will take a look at all the things you've installed into this virtual environment, and make a single file that contains all the requirements, with their specific version numbers, so that anyone else who wants to install and run your application (like a colleague, or the Heroku service) knows exactly what to install.

Now just run your application like you normally would! Whenever you are inside the activated virtualenv, you'll be using all the installations / packages you set up here, rather than your ""system-level"" installations, so you can have one app running on Python3.4, and another running on Python2.7, and they won't fight about it.

Hope this helps!You will definitely need to migrate to Postgres/MySQL or a NoSQL database solution - I just learned the hard way last week that Heroku doesn't support ""file-based"" databases like SQLite, even if you tell your database driver to create them in memory. Everything is bad in this post to be honest. To be honest it's not that hard to convert a project over to a virtualenv with pip, you just need to know what your dependencies are and what version they're at.  Out of interest, how have you installed your dependencies so far?I could understand using Django 1.7, it has at least reached RC stages, but why on Earth are you using 1.8?"
2014-07-19 23:46:54;Recalling/displaying last session;I'd recommend you create a table to save this information. You'll want a model with a foreign key on user, a last used date time, and the search text. That will be easier and cleaner than hunting through the old sessions, which would not be particularly clean anyway due to multiple searches per session.
2014-07-28 18:32:29;Just got hired at a Django startup. Any tips?;"I really enjoyed the [Two Scoops of Django](http://www.amazon.com/Two-Scoops-Django-Best-Practices/dp/1481879707/ref=tmm_pap_title_0?tag=dealsrch-29&srch=1) book. It's very well written and covers some of the newbie things that are a little hard to google, like how to organize your project directory.

Why don't you try creating a blog or some other django project just for yourself and see how far you get?Lol here in Spain it's **hard** to find companies using Python and/or Django for us experienced programmers to join, and you get hired in a startup without prior experience of neither the language nor the framework... Pretty insane if you ask me.I'm in kind of the same situation, got picked up by an existing company doing Python & Django where i had no experience at all with programming, i knew front-end well just no backend.

What i did was look at a site i wanted to make and just started with that.

I went through the tutorial a few times then started plugging away.

https://github.com/DanGamble89

You can see the Onespacemedia project was my interview task and the FifaUTDB project is the site i am replicating and this is going from knowing no programming or backend knowledge at all about 2 months ago to how it is now.

I know it's nothing spectacular but the Onespacemedia repo is a fully working blog & the FifaUTDB repo is a pretty functional Fifa database site as well.

Can highly recommend Two Scoops 1.6 as well that definitely guided me through my early days. And just alot of googling, Stack Overflow & trial and error really.

Good luck dude!Write unit tests from the start, you'll thank yourself later. Look into Webtest for integration tests, look into factory-boy to write tests without hard fixtures.

Learn how to use the official django documentation, and don't be afraid to ask.

Something I've found very beneficial: work doesn't end when you leave the office. Experiment, read, look up stuff in your personal time. Try out third party libraries, set up your own projects that look interesting to you, doesn't matter if you're the only user, it's experience.

What more... don't be afraid to dive into Django's source. Parts may seem overwhelming (template tags, I'm looking at you), but you'll get to them eventually.

And a last one, go to local Python/Django meetups. You'll meet people who work with the same/similar tools, yet do completely different things. This helps to keep a broaden perspective of the tools you're working with, you make contacts that can be interesting in the future and you learn new stuff. Yay!Checkout Wagtail.io and the Django-CMS to learn how to create big, well maintained apps, with docs and stuff. Learn from the source"
2014-07-28 16:23:02;How to start a Django 1.7 project with pyCharm ?;"I use virtualenv and just install DJango 1.7 manually

For example:

    pip install https://www.djangoproject.com/download/1.7c2/tarball/

Then in requirements.txt:

    Django==1.7c2

Never had a problem with this approach through various betas.Hmm personally i'd just do go with virtualenv, and then add a git dependency in your requirements.txt to pull  django 1.7a2 directly from github. When django 1.7 gets pushed to PyPI, then switch that to a normal django==1.7.0 etc type requirement.

Example line in `requirements.txt`:

     -e git+https://github.com/django/django.git@1.7c2#egg=django

*note*: I haven't tested this, it probably needs tweaking. Also don't know how pycharm stores requirements.

clone the repo; check out the version you want; python setup.py develop; from them on you can checkout any version or pull in changes and your code will recognized the changes.Using command line execute: django-admin.py startproject ""Insert project name""

This will create it in the directory you are currently present in. Use pycharm to open up the entire folder and it will display all the project files. Easiest way imo.

Edit: Unless you dont have Django installed then what I said is useless. PM me with questions if needed."
2014-07-28 15:18:55;CSRF 403 error for only one user;"The default CSRF mechanism should not rely on referrer headers, but rather on cookies (it matches the CSRF token sent with POST data to one stored in a cookie). Could it be that the user has cookies disabled?

Other than that, it's hard to debug without more info."
2014-07-28 10:26:26;"description = _(""foo"") - what's the underbar all about";"    from django.utils.translation import ugettext_lazy as _

`_` as a function is usually used as a gettext shortcut, even in C applications.It's for translations[deleted]"
2014-07-27 22:27:18;Django - Advanced Search Filtering;"[django-haystack](https://github.com/toastdriven/django-haystack) with [faceting](http://django-haystack.readthedocs.org/en/latest/faceting.html) sounds like a good bet.

Otherwise you may check out [django-filter](https://github.com/alex/django-filter).All the answers (so far) are suffering from software engineering problem #1: giving the client (op) a solution but not asking for his requirements.

If you want a search form that has optional fields which help restrict the results, then show all fields in the form and filter one by one in the form or view.

Using eBay as an example, optional fields are manufacturer, price range, where the item is from, buy now/auction, etc.

    def filter(request):
        # ...
        results = Products.objects.valid()
        if 'manufacturer' in request.GET: # or POST
            results = results.filter(manufacturer__id = request.GET.get('manufacturer')
        if 'listing_type' in request.GET:
            results = results.filter(listing_type = request.GET.get('listing_type'))
        # etc

If you advanced keyword search, the other comments regarding elastic search and haystack will be the solution of choice.

Most likely you're after something with a bit of both, but feel free to provide more information when you decide a bit more in what you're after.[Haystack](http://haystacksearch.org/) + [Elasticsearch](http://www.elasticsearch.org/)I'm currently testing out django-haystack and whooshYou need a library which has faceting - like elasticsearch. Haystack has support for elasticsearch but remember if you want some custom queries or something that isn't in the docs then haystack will be the biggest pain in the ass for you. Be careful with it :) It's community seems to be dead.
We use Apache Solr at work and it's very fast."
2014-08-04 18:27:46;Fast, searchable Django documentation;"i would prefer [Zeal](http://zealdocs.org)I'd love it if this was responsive. Does anyone know of a responsive version of django docs? Sometimes I just want to browse and explore the API of software I use when I'm standing in line somewhere or waiting at the dentist's office.This would make a cool Android app. Devdocs.io that isThe search shortcut is not working for me.

`http://devdocs.io/#q=django somekeyword`

How do I make this work?Pretty neat stuff!Very cool. Any chance of including the docs for other versions of django? I find those to be invaluable.Very cool stuff, thanks for sharingWhat does this give me that using google wouldn't?"
2014-08-04 16:12:22;I plan to document my progress with Django. Here is my first post on virtualenvwrapper + optimal project layout + requirements.txt.;"You should probably check out something like [git](http://git-scm.com/) for your backup and sync purposes instead of using dropbox.

Anyway good luck on your journey.Handy option for project template is https://github.com/twoscoops/django-twoscoops-project"
2014-08-04 15:59:27;Weird behavior of Django ORM;I am trying hard to figure out the reason behind this problem and would appreciate any help.
2014-08-04 14:36:14;Capture exceptions in django management commands into Sentry by Raven;
2014-08-04 14:35:35;Export model data (with selected fields) to csv file;
2014-08-11 11:48:48;Syntax for how to add an inline to a field_set?;You're talking about in admin? Where's the patch you're referring to?
2014-08-11 09:59:46;Scrubbing mp3 player in iOS?;"In the end I needed to create an application on my web server with an .htaccess file, and set up the appropriate mime types to allow them to be handled correctly.iOS handles download and playback of audio differently to desktop browsers - it downloads chunks at a time to save RAM, so your HTTP headers need to be right.

Since your files work in the native player, it is probably an issue with your player software and how it interprets the information it gets from the HTML5 audio API.

One thing that is not involved in any of this is Django, so you might have more luck asking in a sub more specific to the problem."
2014-08-11 04:14:31;Django 1.6 or 1.7 for new projects?;"As a core developer, if it's a new project, I'd suggest 1.7. Migrations are a substantial change, and you'd be better using them from day one, and 1.7 RC 2 is very stable - most of the bugs we're fixing now are very edge cases and you're unlikely to hit them on fresh projects.I suggest 1.7. The final release is due out any day now, and the migrations stuff means you'll benefit from the upgrade right from the start of your project.How long do you expect your project to be in development? How ""mission critical"" is your project if there are bugs/workaround that need to be worked through? How adverse are you to risk? It's true that Django 1.7 is in a release candidate, but as history shows there can still be some game breaking issues crop up. 

If you're going to be in dev for a while, or you don't mind the risk of something changing last minute then I'd suggest going for 1.7 If you need to get into production and be solid from the start then I'd start with 1.6 and plan to upgrade.Personally I have been developing a couple of new apps for people in Django 1.7. These apps are not released yet but as soon as 1.7 is released it will be going live.

So should you use 1.7? If you application is going to be relatively simple (just a couple of database calls and a couple of pages). Yes, the basic functionality is going to be solid.
If you are developing something highly complex then maybe hold off for 1.7 until the first minor release is wild. But then you are going to need to migrate between versions.

At the end of the day its your decision we can only advise and raise possible issues.
I would suggest 1.7. The cost of migrating an existing codebase to a major version is too high to start with 1.6. 1.7 should be the way to go unless you've a very solid reason to not do so."
2014-08-10 11:54:30;Celery, gevent, eventlet?;"Just use [grequests](https://github.com/kennethreitz/grequests).

I don't see any need for a distributed message queue here.I think you're stepping into micro-optimization here. The biggest bottleneck is certainly the send/recv networking activity, and by making it concurrent so that you can do all those at once, you got rid of the most important bottleneck.

That's great, but you might have used something more powerful than you need for something this simple, and greenlet would probably be a lot easier and work just as well. However, with celery you have a framework to handle a lot more than what you're just doing, so it can scale more easily I'd say.

But you'd probably have achieved it a lot simpler by using gevent or just greenlet. As the number of calls greatly increases, you'd probably not a see a difference in performance between celery, gevent or greenlet. As for simplicity of code, I'd have used greenlet.

If you have serious doubts or just want to know for sure, there's always `timeit`.

    import gevent.pool
    pool = gevent.pool.Pool(4)
    results = pool.map(do_call, calls)Depends on where you intend to run it. Running celery and RabbitMQ made my cheap vps fall over due to memory constraints, so I moved to gevent which flies. I will shard my load and expand using multiple cheap vps, so it suits my architecture. However if I had a powerful dedicated server I would use celery as it would be easier to find other people to help maintain the code as it is more widely known.

Phillip.If you stick with celery, you probably should do

chord( [call_url.s(url)...],  call_back.s() )

Instead of doing a while true/sleep loop. My only suggestion is to benchmark. Benchmark the shit out of the thing you've created. Never assume. After the benchmark, you'll get all the help to solve the right problem.uwsgi"
2014-08-10 05:30:23;Django oauth2 google;I've used Google oauth2 authentication in a few Django projects using [python-social-auth](https://github.com/omab/python-social-auth), setup was quite straightforward.
2014-08-18 22:31:40;Excellent instructions for setting up Django on Amazon Web Services (AWS).;For those interested in repeatable setup, look into Vagrant and/or Docker.I like the CentOS based Amazon Linux AMIs, and I abandoned apache in favor of nginx a while ago, but this would've been super helpful when I was just starting out!
2014-08-17 18:04:22;[HELP] Displaying PDFs from a view;"> As you can see here (click on the little guy on the top right, then resume), the PDF automatically downloads.

Little guy? Can you post a link?

I don't quite understand what you want to do. Can you give us a link to some site that does the thing you are trying to do?You could try to embed your pdf file with the object tag so that is you simply return some html with:

    <object data=""{% static 'pdf/myfile.pdf %}"" type=""application/pdf"">

or your media url.You need to specify the content type header like you noted, but more importantly you need to write the PDF's bytes into the Response content. In your sample you are setting up headers but never sending any actual content.

Edit: Disregard. Missed that it is being handled by an x-accel-redirect header.Which browser are you using?"
2014-08-17 10:17:52;Need help understanding 'what' gets saved to an ImageField -- How can I make Django automatically download an Image and save it to a model?;"you need to know what kind of objects you are working with. For such exploration it helps to play around in a python interactive console. For example:

    >>>req = requests.get(url)
    >>>req
    <Response [200]>
    >>>type(req)
    <class 'requests.models.Response'>

this tells you that your 'req' variable contains an instance of a Response object. So it would make more sense to call it 'resp'. If you check the documentation of requests you will find that the actual response data is at resp.content. So in your example it should be:

    file_content = ContentFile(req.content)
    
> What 'kind' of file should file_content be?

As to Django documentation:
**Note that the content argument must be an instance of either File or of a subclass of File, such as ContentFile.**

https://docs.djangoproject.com/en/dev/ref/files/file/#additional-methods-on-files-attached-to-objects


[deleted]As a more general comment, you probably want to use the

    def save(self, *args, **kwargs):
        created = not self.pk

        if created:
            # [downloading stuff here]

        super(MyModel, self).save(*args, **kwargs)


.. pattern."
2014-08-16 16:33:12;Please help me display related data on my admin pages.;"You can create an inline admin model for DevelopmentProject specifying the relation you want it to follow with fk_name:

    class DevelopmentProjectInline(admin.TabularInline):
        model = DevelopmentProject
        fk_name = 'becomes'

then add this to FeatureAdmins inlines field:

    class FeatureAdmin(admin.ModelAdmin):
        model = Feature
        inlines = [DevelopmentProjectInline, ]"
2014-08-16 10:41:40;What are some PIP packages you tend to use with every new project you use?;"ipython and ipdb for a better shell and debuggerDjango-compressor to compress my static assets like css and javascript,  django-choices for a cleaner approach for the choices option in model fields. For forms (templating) I use formulation.

Django-extra-views is cool for extra CBV dealing with formsets.

For testing, factory-boy, I never use fixture because they are hard to update with schema migrations. 

Django-rest-framework for the api.I hope you are using virtualenvwrapper. It creates an isolated dev environment, so anything you install with pip, doesn't get installed to system wide site-packages.

I use virtualenvwrapper and have following lines added to my `postmkvirtualenv` script:

    pip install ipython
    pip install ipdb
    pip install django-extensions
    pip install django-debug-toolbar

I use these four libraries on all Django projects I work on.django-braces. django-restframework.Django.  Almost everything I do is web-based, lately. 

South, but that is of course being deprecated. 

Django-Rest-Framework. 

Requests, cause I'm a human. 

Usually shortuuid, just because it's habit, but I might switch over to hashids. 

Simplejson, though it's usually met by a dependency. 

uwsgi. * South, Debug Toolbar - obvious, really
* Fabric - surprised this hasn’t been mentioned. I use fabric for deployment and server setup
* Django REST Framework
* Django Extra Views - for class-based inlines
* Djanog Model Utils -  some nice mixins
* Crispy Forms and Django Class Based Auth Views (as I rarely use Django Admin, and build my own Bootstrap themed apps)
* Django Extensions - I often end up having to write import scripts and the script cmd is great. Also good for testing at cmd line as it loads modules
* 

I tend not to use ipdb as I use Pycharm IDE which allows you to connect a rmeote debugger, which is great.Django-extensions and django-debug-toolbar are very useful during development.

In django 1.7 migrations are included, so South is not needed in my current project.

[Django dynamic fixture](http://paulocheque.github.io/django-dynamic-fixture/)virtualenvwrapperHere is my list : 

(A) Virtualenv
(B) South (until 1.6)
(C) Pytz

And depending upon the project 

(D) Django-summernote (Bootstrap based WYSIWYG Editor)
(E) Django Rest Framework
(F) Django Debug Toolbar
(G) Django Compress / Django Storages 
(H) Django userarena
(I) Grappelli (For better looking Admin UI)
(J) Django FileBrowser

Pretty much all those mentioned in https://github.com/Keats/django-drf-template/tree/master/requirements  

Add South if the project is < 1.7django-configurationsipython

ipdb

flake8

Django

psycopg2

django-configurations

raven

WebTest

django-webtest

model-mommy

django-debug-toolbar

django-model-utils

django-redis-cache

hiredis

django-bootstrap3

django-vanilla-views

django-extensions

django-clear-cache

From https://github.com/wildfish/wildfish-django-starter/blob/master/%7B%7Bcookiecutter.project_name%7D%7D/requirements.txtI am the creator of envvars but its worth a shout as I use it in every project.

Envvar its a package which makes using and working environment variables so much easier.

https://github.com/mattseymour/python-envvarsmock"
2014-08-25 23:13:23;New django users registration app — feedback welcome;"Any reason why you would use this over django-allauth?Instead of 


var = settings.USERS_VERIFY_EMAIL


you should be doing something like


var = getattr(settings, ""USERS_VERIFY_EMAIL"", False)"
2014-08-25 20:21:51;Help doing input/output on one page;Look into django generic views and use FormView. It can quite easily do exactly what you want with no hacks or even IF statements to check for get and post. Later tonight if I have time I will create an example for you if you want.maybe i just needed to type it out but I got it, I fired an IF statement in home to check if it got there from POST or not, and now I can get rid of my add view
2014-08-25 17:48:17;Django and AJAX Form Submissions - say 'goodbye' to the page refresh;"Nice stuff. I am currently working on something very similar here: https://github.com/bitmazk/django-forms-ajaxifiedThis tutorial does not go that in depth. You can use JS/jQuery for long polling, but I recommend using something like this - https://github.com/tbarbugli/django_longpolling

I will show Angular in a future post, which you could use as well.

Hope that helps. Cheers!I can not wait to try this tutorial! Would I be able to use some of this code to update a generic List view automatically anytime a record in the list view changes by other users? I was going to raise all 3 points in the conclusion. Look forward to seeing the next one!

You going down the Angular/Django-REST-framework route next?"
2014-08-25 09:32:38;Is there anything like crispy forms for displaying models?;"http://django-tables2.readthedocs.org/en/latest/ Not sure I understand. I use class based views, forms.ModelForm and crispy. If you use the defautls, you can display a model with only a few lines of code.One solution that works for me is continuing to use crispy forms, but overriding a few things.

To start with the form, I created it and did the layout as you normally would. Because this form isn't meant to be used for displaying data, I disabled the form_tag. The next thing was creating a widget for the fields that just renders a <span> instead of an <input> tag. An important part of this is if you want to display the value of a ForeignKey, rather than its primary key. This django snippet helped me solve that problem: [Field value as plain text which can't be edited by user](https://djangosnippets.org/snippets/1746/).  
Then its just a matter of making the widget for every field in the form use your new one.

    for name, field in self.fields.items():
        if not isinstance(field.widget, SpanWidget):
            field.widget = SpanWidget()


Then in the DetailView, override get_object so that it returns the form instead of the object instance.

    def get_object(self, queryset=None):
        instance =  super().get_object(queryset)
        form = DetailForm(instance=instance)
        return form

Then render the object with crispy, and presto, done."
2014-08-24 23:57:27;PyCon APAC 2014: Mezzanine;"Hey Stephen thanks your work on Mezzanine! I built my site with it combined with some tutorials, and it's the best experience so far once you get it up running (shameless plug for site: [link to site](https://atkoh.pythonanywhere.com/))
"
2014-09-01 19:49:00;Getting Started with Django and PostgreSQL Full-Text Search;Surprised that [django-watson](https://github.com/etianen/django-watson) wasn't mentioned in that article.Also, [djorm-ext-pgfulltext](https://pypi.python.org/pypi/djorm-ext-pgfulltext/) can be used for a PostgreSQL FTS.
2014-09-01 14:44:26;Say I have a bunch of files and I want to unlock certain files to a user upon completion of an event. How Would I Do this?;"What you are describing is, in general terms, an ACL -- [Access Control List](https://en.wikipedia.org/wiki/Access_control_list). ACL's are like permission systems on steroids. Warning: they can get quite complex, depending on just what you are trying to accomplish. It is also the case that *retrofitting* any sort of an ACL to an existing system is a) complicated, b) likely to have all sorts of holes in it.

There are a number of Django ACL apps out there, but I have not had to deal with any of them because my sites have tended to have fairly simple permission structures (e.g. admin/not admin, subscriber/not subscriber).

The following is a simple, *incomplete* explanation.

Think of each thing (item or action) as requiring one or more *tokens*. A token can either be Boolean (yes/no), or have a value range. It might have a timeout value, or a maximum number of uses. YMMV. Your game logic decides when/how a player obtains a token.

As the person accomplishes certain things (kills a troll, is a 1-year member, whatever) they get associated with a *token* for doing that. So when they try to open the jewel box, they need a *can_open_jewel_box* token. These tokens are associated with the user using a ManyToMany relationship, because there are many players and many tokens. You probably want to ""flavor"" this association using the Django ORM's [""extra fields""](https://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships) on a M2M relation.

Where life can get complicated is when there are multiple requirements to gain a token, in which case you have to track a user's state as they move toward completing all of the required actions. 

As I said, this is a *very incomplete* description of a fairly deep subject. Read some of the docs, look at some of the apps other people have done, and then really *think* about what you are trying to accomplish.so, you obviously have permissions and ""unlocked"" items already set up, i assume, so you can tell if a user has completed a quest or unlocked an item.  if not, do that first.  

once this is done, look into x-accel-redirect if you are using nginx, or xsendfile if you are using apache.  basically you just tell the web service that whenever it gets a request for a ""protected"" file, it needs to verify with django whether to serve the file or not.  the setup takes a little playing around with, but it works well."
2014-09-01 08:10:28;How To Plan Django Multi Tenant Application;"I would suggest to not use a schema based multi-tenacy design. It is a good option for sites where customers are big companies and care about their data being stored safely. If that is not the case for you and you are trying to build a consumer product like wordpress or tumblr then you should just use the sites framework (https://docs.djangoproject.com/en/dev/ref/contrib/sites/) shipped by Django.

You can have ForeignKeys from your data tables to the Sites table and identify which rows belong to which sites this way.

As far as application access is concerned, you can use the permissions and groups framework (https://docs.djangoproject.com/en/dev/topics/auth/default/#topic-authorization) and probably something like gargoyle (https://github.com/disqus/gargoyle)


If you care about storing customer data separately, you could use something like https://github.com/bernardopires/django-tenant-schemas or some other application you like. I've personally had very good experience with django-tenant-schemas

The bottom line is that you don't need true multi-tenacy. You could just associate all the data with a sites table. That should be enough for most cases. Conditional applications can be handled using django's permissions feature.I have been working on django-tenant-schemas for months, and my advice is avoid Django *at all* for this type of application. SQLAlchemy with any other framework is a much better fit for this task.
I tried to do it with Flask, but I felt I have to reinvent the wheel all the time. I recently started using Pyramid for this architecture and found it wonderful. Everything is there!!

OR 

You could go with lonahex's suggestion: Every customer data in one database (or schema) referencing foreign keys for different sites, using sites framework.
Here you can see how disqus did it: https://speakerdeck.com/zeeg/scaling-the-worlds-largest-django-app-djangocon-2010 (unfortunately the video has been removed)"
2014-08-31 17:36:38;Django and AJAX Form Submissions - more practice;This is a decent tutorial, but I take issue with the creation of URL endpoints for each action. It would be more RESTful to use a single view whose behavior differs based upon the HTTP action (e.g. GET, PUT, POST, DELETE).
2014-08-31 11:45:53;Learn to build SaaS applications with Django;"The ""or try the free chapters"" link doesn't seem to go anywhere ?"
2014-09-08 23:23:41;What's the best way to implement single sign-on for multiple websites in your network?;My team is implementing this functionality with OAuth2/OpenID Connect. Our existing application (which has the user database) has been updated to act as an OAuth provider. The new application under development is an OAuth consumer and defers to the provider for authentication/authorization. Google uses a similar scheme for SSO.
2014-09-08 22:31:06;The missing extension to the Django “sites” framework, use it to store additional information for your Django-powered sites — feedback welcome.;"Why is the package called ""django-usersettings2"" when it has nothing to do with users?A big THANK YOU to all the folks who helped me, here on reddit. the newly released django 1.7 broke a lot of the tests. 

I've said this before, I'm still a newbie python/django dev, so I would welcome any feedback. I like the idea, I'm going to try it soon. 👍I've made similar things but not open sourced. This looks quite useful. Thanks!"
2014-09-08 20:52:23;So I was just asked to add support for multiple languages in a small website;"django-hvad is the best tool for this as far as I know.Django has support for translation built-in. Is there some requirement that is preventing you from using it?

https://docs.djangoproject.com/en/dev/topics/i18n/translation/

The project I'm currently working on is translated, and there are a few gotchas, but for the most part it's pretty straight forward."
2014-09-08 20:30:34;Generating Multiple Windows from Single Click;"Any particular reason you're trying to open a new window? Would a modal overlay not suffice?

There is a Django package out there for multi-step forms, but it sounds like you could probably use a Formset and handle it all on one page.

If you have to open a new window, check out https://developer.mozilla.org/en-US/docs/Web/API/Window.open

You'll probably want to trigger an event on the window object in the newly opened window that the parent window can subscribe and react to. "
2014-09-08 20:14:11;Django backend/frontend development separation;"If you're so devops, how come it would be so difficult for her to spin up your app on her local machine? ;)

Joking aside, yeah I'm sure it's possible but the contortions required will outweigh any benefits. If you *must* have a strict separation, just get her to throw HTML+CSS over a wall and you wire it up later - the middle ground here isn't productive at all.I dont understand the difficulty in setting up a development server for her.  You probably could have done that in less time that it took you to write your post.

If she's just doing front-end work, sublime text with the django-related plugins would be fine as wellThe only way to truly do that would be if you made your new hire make the site using a Javascript MV* framework which connects to your Django API.

Otherwise, I would say the best bet would be to setup Vagrant to provision the Django environment for the new hire. I have an example in my [Django Base Site](https://github.com/epicserve/django-base-site), if it helps.Even if you could give her a simple way without a full development environment, in the long run you'll probably pay for it in defects. ""Works on my environment"" happens when everyone is developing off of the same base VM, let alone an entirely different setup.

Not to mention, it's better for her if she learns to use the tools she'll need to advance in her career. Get her PyCharm, show her how to use it, get her comfortable with the django stack/development environment; even if she's only ever going to touch HTML files. You'll both be better off for it.Just let her start with static HTML/JS and use dummy data for now and then you can start letting her check in templates to your source control and show her how the templating language works.Run the full stack! I'm a huge fan of docker and [fig](http://fig.sh).

Once you set up fig any front end folk just need to install fig and run ""fig up"". At the most she might need to know the ""fig rm"" command to delete all the docker containers if something goes haywire. As a bonus any employees are guaranteed to be running exactly the same environment as you and perhaps even production."
2014-09-15 22:04:13;Django-rest: return non-primary key related field.;"    class CarSerializer(serializers.modelSerializer):                       
        manufacturer=serializers.SlugField(source=""name"")


Something like this would work[Check this out, it might help.](http://www.django-rest-framework.org/api-guide/relations)Replace
manufacturer = ManufacturerSerializer() 

With
Manufacturer = serialisers.charfield(source=""manufacturer.name"")

Hopefully you get the idea despite my phone capitalising things. 

Probably make the field read only too. You can do that by using source argument:

    class CarsSerializer(serializers.ModelSerializer):
         manufacturer = serializers.CharField(source=""manufacturer.name"")
"
2014-09-15 10:40:57;complete beginner to django: i want to create a calendar with multiuser support;"https://github.com/llazzaro/django-scheduler is nice, with ical export and views for day/weeks/month/years.Start with designing the model for Events. Create views to add events. Then try displaying the calendar view.

Every website will be different. Applying what you know is the best way to learn."
2014-09-15 10:17:51;Best practices for internationalization?;Django-modeltranslation is very good one. http://youtu.be/0j74jcxSunY
2014-09-15 08:06:53;Modeling a db : write once or read many times ?;"Clean, straightforward, logical and unduplicated entity relationships are worth more 100x more than some unconfirmed performance improvement.

I'm inferring that you have not written this code yet so you cannot seeing any performance bottleneck in production :)  Therefore, you should go with the normalised data model (ie. ""read each foreign key"") until you can convince yourself otherwise. 

There are also other potential solutions to consider such as using the cache system to store which image (rather than saving to the main model).This is an optimization question, so the right approach would be to - measure. While designing the project it is premature optimisation to worry about performance.

Try the straight forward option i.e. the first one. See if the performance is really a problem. There could be multiple ways of solving the multiple lookup performance - better SQL queries, server-side caches, memoization etc.

Once you select a solution, measure again. Repeat and rinse. In general, aim for a clean design that models your problem closely; optimisations can happen later.If you use select_related your model plus all FKs will be fetched in one SQL statement. Shouldn't be a performance issue at all."
2014-09-15 05:24:52;Implementing black-listed usernames in django project;"Assuming that you just plan on using a simple custom validator like the following, I'd personally say that it doesn't warrant a sepearate django app of it's own and I'd place it next to the signup form:

    from django.core.exceptions import ValidationError

    def validate_blacklist(value):
        blacklist = ['black', 'blacker', 'blackest']
        if value in blacklist:
            raise ValidationError('Please pick a different value')

If you need to use the same blacklist in multiple apps, then maybe store the list in the project settings file insteadAgree with /u/jnpkr . Creating a separate app would be an overkill especially if you own the 'accounts' app code. Simply modify the user signup validation code to lookup against the black list.

Whether creating a model for the blacklist is up to you. In general, if different instances of your web app has different blacklists, then you need models to store and edit the blacklist in the corresponding database. But if the blacklist is the same everywhere, then you should probably save the trouble and mention it in `settings.py` (probably as a `set`)."
2014-09-22 20:13:06;Best object level permissions lib;"Just here to throw out [django-guardian](https://github.com/lukaszb/django-guardian) as an option as well.  Has lots of support too, no experience using any of them though.rules or guardian, they both look really good.

For our case we have a lot of permission based on software logic (if the user is the assistant in this course it has x permissions) so we are going to user rules... but django guardian seems more supported as a permission framework."
2014-09-22 18:05:17;Introducing Edge - a Modern Django Project Template;"> It is 2014 and hardly anybody starts with a blank page (I mean, blank HTML and CSS) anymore. In fact, most people I know start with a minimal Bootstrap 3 template.

I will die with my blank page.Edge seems like limited version of cookiecutter-django (or one of it's many forks), with a prettier home page.

For example, you need to look more carefully at django-allauth. **You don't need to use social authentication with django-allauth**. In fact, you can limit it to reproducing what django-registration does, with the addition of a few extra security features.

The lack of django-debug-toolbar is a no-starter for this template."
2014-09-22 13:11:24;Django Rest Framework - an introduction;"Nice blog post.

I take it you'll at some point cover changing the DRF Views so they're class based rather than function based?

Or even using ViewSets?This is a fantastic blog post. Probably the best introduction to DRF that I have seen yet. Good job!"
2014-09-22 04:15:02;Auto fill model with current signed in user;"You can use the [initial] (https://docs.djangoproject.com/en/dev/ref/forms/api/#dynamic-initial-values) form kwarg to set an initial value for a form field.

Alternatively, for this particular problem you may want to consider simply removing the user field from the form, and assigning a user after POST.  Something like:

    if form.is_valid():
        stock = form.save(commit=False)
        stock.user = request.user
        stock.save()1. in your view, don't commit the form, and grab the object returned by `form.save`
2. set the user attribute on the object you received from `form.save`
3. save the object

roughly:

    if form.is_valid():
        obj = form.save(commit=False)
        obj.user = request.user # logged in user is available on a view func's `request` instance
        obj.save() # safe to save w/ user in tow

i've omitted handling anonymous users, as your view requires an authenticated user.Are you using ModelForms?

1. Determine logged in user in your view
2. Pass the user to your form constructor
3. Add the user to the model pre-save on the form
4. Exclude the user field from being rendered

I have a mixins for my Views and Forms. Something like this:

    class LoggedInUserFormMixin(object):
        def get_form_kwargs(self):
            kwargs = super(LoggedInUserFormMixin, self).get_form_kwargs()
            # Update the existing form kwargs dict with the request's user.
            kwargs.update({""user"": self.request.user})
            return kwargs

    class LoggedInUserViewMixin(object):
        def __init__(self, *args, **kwargs):
                self.user = kwargs.pop(""user"", None)  # Pop the user off the kwargs passed in
                super(LoggedInUserViewMixin, self).__init__(*args, **kwargs)

        def save(self, force_insert=False, force_update=False, commit=True):
                m = super(LoggedInUserViewMixin, self).save(commit=False)
                m.updated_by = self.user

                if commit:
                    m.save()
                return m
"
2014-09-22 00:14:54;What kind of projects would you NOT use Django for?;"Anything that needs significantly scalable realtime data updates. Chat applications, and the like. It's not that it can't be done with Django; just that there are much better tools for the job.I wouldn't use Django for an API-only application. I'd prefer to use a microframework that just deals with HTTP and pick and choose the libraries I use. Probably something in the Go, Node.js or JVM ecosystems for performance reasons.When I don't need a (complex) Database, but just a simple key value store type store to cache stuff I usually go with Flask.Anything where the client has to update content on their own. Django-admin and Mezzanine are both incredibly shitty compared to things like WordPress if you have to pass it off to someone.A blog that contain media files (pictures, videos, ...):
Spent weeks trying to find plugins/applications for django to make it easy uploading and embedding a picture (a thumbnail that links to the real picture) into a text box with no success. even using django derivatives cms like Mezzanine couldn't accomplish a simpe task like thatOh, such  great thread. 


Would django be the right platform for a Twitter like service? Similar transaction volume, content display, personalization, authentications and clients.  

If not, what would be a good choice?
"
2014-09-29 21:32:09;DRF + Django Allauth?;"Just last week I tried connecting Google, Facebook and Twitter. I only succeeded in adding Google+ (see [login-page](http://codecarbon.io/accounts/login/) ).

Twitter just doesn't seem to work. Whenever I try to sign in or connect an existing account I get ""Social Network Login Failure"". I think there might be a bug there because I've tried everything configuration I can think off. What have you tried so far? Maybe I can help.

I found the documentation of allauth a bit lacking so I improved it a bit. [Here is my version](https://github.com/RRMoelker/django-allauth/blob/master/docs/providers.rst) of the providers documentation. With this documentation Facebook and Google+ should work. But bare in mind that using Facebook requires you to go through a review process for your production site.I'd personally lean towards oauth2 if I were you.

https://github.com/caffeinehit/django-oauth2-provider

It's what I've used in my projects and it's rock solid.For our project I used requests-oauthlib for OAuth1 and OAuth2 authentication.  It was pretty straight forward.  I know it's not what you're asking, but it's a solution that works.

[requests-oauthlib](https://github.com/requests/requests-oauthlib)"
2014-09-29 21:24:18;A box office with Wagtail and Satchless;"Advice would depend on your requirements. You say it's a box office. Does that mean ticket sales? What sort of sales volumes would you need to cope with? How are you going to provide the tickets? Do you have special accounting requirements? Multiple currencies? How does your commission structure work? What payment providers are you planning to use? Interested to hear what horrified you about Oscar? My parent company is responsible for Oscar and so it is always good to hear peoples opinions. Especially negative ones.

PayPal can be a bit of a pain, might be worth looking at something like Stripe - helps avoid any need for complex PCI compliance things.

In terms of general advice. I would say there are only a few key areas you really need to focus on and they all really boil down to the customer experience. At the end of the day all people really care about is that it is easy to order stuff, and that the stuff arrives in good time. Everything after that is a bonus. So my advice would be to focus on the essentials. 

I enjoyed my experiences with Wagtail, dunno about Satchless though."
2014-09-29 15:52:50;Django Form on every page (search);"use a custom template tag, you probably want an inclusion tag rather than an assignment tag. I try to keep as much magic out of context processors as I can.

https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-tagsDon't over complicate things, you probably don't need a Django form for that."
2014-09-29 14:41:02;Django template tag 'cycle';"If you're using bootstrap, why even bother with creating that div inside the loop. Why not just do:

    <div class=""row"">
        {% for blah in blahs %}
            <div class=""col-md-3 product"">
                <!-- Product info -->
            </div>
        {% endfor %}
    </div>

If you have more than 12 columns in the row, bootstrap will automatically wrap the extra columns into a new row. Also, style wise, avoid putting full tags in your cycle. It'd be better to do (this won't solve your specific issue):

    {% cycle 'start' '' '' 'end' as row_cycle %}
    {% if row_cycle=='start' %}
        <div class=""row"">
    {% endif %}
    <!-- Content -->
    {% if row_cycle=='end' %}
        </div>
    {% endif %}

It's more markup, but when you add a class or extra markup in the future, it wont become a giant clusterfuck.Probably not the best way to do it.

Maybe check out the ""forloop"" variables available in the loop:

https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#for

So you can do stuff like this:

    {% if forloop.first %}<div class=""container"">{% endif %}

    {% if forloop.last %}</div>{% endif %}

    {% if forloop.counter0|divisibleby:4 %}<div class=""row"">{% endif %}Consider using the for loop tag and divisibleby filter. Loop over all items. If forloop.counter is divisible by 4, close your row and start a new one."
2014-09-29 13:39:28;Slow queries to AWS RDS MySQL Database;"You might want to try something like django-query-inspect (https://github.com/dobarkod/django-queryinspect).  Django rest framework will make a lot of additional calls if you have nested serializers, etc, that aren't always obvious.  If you find that this is the case, prefetch_related and select_related will really help get your query count down.This is just reality. If you run a database locally then the data has to travel between the RAM and CPU of the same computer. If the database is on RDS the data has to travel over a TCP/IP network. Even if that network is really fast, it will never be as fast as having the database on the same machine.

A lot of times you will have a very good database design with queries that execute very quickly in terms of CPU usage on the database machine. However, they will return so much data that it takes a very long time for that data to travel across the network from the database server to the application server. You will never notice these problems when working with a database locally, as it will seem to work instantly."
2014-10-06 22:49:35;Need help with Django turtorial!;"You already have the answer, but here's a little more info for you in case you're new to Python.

**Single underscore**

Functions and variables are generally named with *single* leading underscores in order to indicate, weakly, that they're ""private"" -- i.e., that they're not intended for use by any other code besides the class/module where they're contained.

**Double underscore**

Names beginning with a *double* underscore are actually mangled when your code is executed to provide greater privacy, although even then no privacy is guaranteed. You'll occasionally hear Python people say ""dunder"" instead of ""double underscore,"" because we're all lazy.

**Magic methods**

Finally, some double-underscore methods on classes are ""magic methods,"" which Python uses internally to do certain things. So, for example, the `__str__` method is called when you call `str()` on an object; the `__unicode__` method is called when you call `unicode()` on an object; etc. 

**More info**

- Here is a useful SO thread on single- and double-underscore names: http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python
- Magic methods are documented: https://docs.python.org/2/reference/datamodel.html#special-method-names
- A reasonably full discussion of magic methods is here: http://www.rafekettler.com/magicmethods.html. There's lots of advanced material here you don't need right now, so don't fret if it seems complex.

    __unicode__ not _unicode_

You also might need a 

    __str__ 

method too, idk about that though, its been a while.
Use two underscores:

    __unicode__

instead of:

    _unicode_"
2014-10-06 13:39:13;Session Confusion;"Projects always outgrow the original way you did something. Don't be wedded to what you started out with. You have a standard use case (""get the data back into the browser from the server"") which means any Django tutorial and the Django documentation will cover it.Django session data is stored on the server. It has no connection whatsoever to the data you are storing in your brower's Javascript session. You will need to rethink the way you are storing and communicating your data. Django session data allows you to save information which corresponds to a specific user between HTTP requests. Server session data expires after a certain amount of time, and the memory used by that data (or disk space, depending on how you have configured your session store) is freed.

Presuming you have successfully stored data from the user's local Javascript session to your Django database, you will need to write an Ajax GET to retrieve that data, and reload it. You may not have a reason to interact with Django sessions at all.You are right. Django has no idea what information you are storing in your browser. The only way that they communicate with each other is through GET and POST requests. (GET is faster; POST is more secure).
How does Django know which browser you are working from? Cookies. Cookies allow servers to identify each browser with a unique Session ID in Django's database. Cookies are communicated with every request."
2014-10-06 05:14:53;It is a Django tool that automatically configure the ModelAdmin classes of your application using some good patterns;
2014-10-06 05:03:38;saving data from sensors to access from website;"Checkout RRDtool. This is a special database to contain time-series values. It can build graph to average values, min\max, day/week graphics etc and has python binding. 
You have different options depending on the scale and amount of data. like @zagreblin sugested RRDtool is great for a small amount of sensor data. If you are collecting data from 100's or 1000's of sensors every 15 seconds aka 4 times a minute or 240 * 24 * Number of sensors it may soon get out of hand. If it is goign to remain small you could use Django models to store the data in postgres database. Your model (lets call it SensorReading) would contain fields like timestamp, sensor id and the readings. Then to read you could do a query as following:
last x minutes - SensorReading.objects.filter(timestamp__gt=datetime.datetime.now() - datetime.timedelta(minutes=x)

For graphs/ visualization look into matplotlib and D3.js D3.js would be awesome if you want to do real time graphs.
Now if you are going to have a lot of data i would suggest using Hbase/ Accumulo/ Mongo or couch or other distributed databases so you could scale to keep up with several GB's of sensor data.
Feel free to reach out to me if you have any questions.Three questions:

1. Do you need to keep all data forever or would there be a retention time after which you can delete old records?

2. If you need to keep the data forever, does it have to be as precise as per 15 seconds or could you aggregate old records and, for example, only save min, max, average and count per hour?

3. What are you planning to do with that data? Are you just displaying time series charts or do you also need to display pie charts or other content? It's a pity that you don't know SQL because the way you plan to query the data is going to be important when making a decision about which technology to use."
2014-10-05 04:56:23;Beginner deploying Python to Heroku;"[Getting started with django](http://gettingstartedwithdjango.com) is a decent way to get started with django (and heroku).

Django is one of the more complex frameworks to deploy. If you want something with less pieces try [flask](http://flask.pocoo.org), deploying flask is [relatively simple](https://devcenter.heroku.com/articles/getting-started-with-python).As others have said, looks like you might have missed [""Getting Started with Django on Heroku](https://devcenter.heroku.com/articles/getting-started-with-django)

As for recommended reading/advice - what follows is not ""you should read this before doing anything else"" but it's absolutely stuff I think is worth reading at some point:

If you're ever developing any kind of web app, particularly one that deploys to Heroku (but it's a _very_ general guide), [The Twelve-Factor App](http://12factor.net/) has some good advice.

There's also (I'm probably slightly biased because I wrote it) [django12factor](https://github.com/doismellburning/django12factor) which should help you with getting configuration from the environment in Django (particularly useful for Heroku, but again, not specific to there)

Really though, I suspect once you check out the Heroku guide to Django, you'll probably be fine - I'm a _big_ fan of Heroku for development/small apps. Good luck!
I just deployed an app to Heroku for the first time last week, now have a few going. To deploy you are basically just using the Heroku Toolbelt, setting up your account. You are using git from the Heroku toolbelt to coming and push, and it is that push that deploys the code. Then set dynos=1 and you are running. Sorry I cant be more specific I am on my phone. Use the Heroku documentation on getting started with Python/Django. If you get specific errors please post them and I'll try to help. Did you read the [Heroku Django docs](https://devcenter.heroku.com/articles/getting-started-with-django)?What are you trying to accomplish? Can you tell us more about the program you are trying to deploy to Heroku i.e. what it does, which libraries it uses?"
2014-10-13 22:50:54;creating a change-log for user actions;"Are you not going to have a view that handles the case when a user returns an item? That view should simply create an entry in a log table (which you need to define via a models.py).

I also don't see the problem here...[deleted]I would do something like this:

Create StaffMember, Device, BorrowedAsset models.

    # Something like the below, but this is just ugly psuedocode so don't    take it verbatim!

    class StaffMember(models.Model):
	    name = models.CharField(max=200)

    class Device(models.Model):
	    name = models.CharField(max=200)

    class BorrowedAsset(models.Model):
	    staff_member = models.ForeignKey(StaffMember)
	    device = models.ForeignKey(Device)
	    date_out = models.DateTimeField()
	    date_in = models.DateTimeField()


Then populate your database with StaffMembers and Devices.  In the view that handles giving away an asset you create a new BorrwedAsset assign the staff_member and device and then save it.

At that point: BorrowedAssets.objects.all() will contain your ""log"" and you can use that information as you see fit.
"
2014-10-13 22:46:43;What's the best way to serve a website in multiple languages?;"Django has internationalization (i18n) support built in. See https://docs.djangoproject.com/en/1.7/topics/i18n/.you should also check out django-hvad in order to have translateable models in your database:

https://github.com/kristianoellegaard/django-hvadIn my views.py I have this line ""request.session['lang'] = 'tr'"" as in the example. It gives me an error: ""request is not defined"". "
2014-10-13 16:04:04;Show HN: Create activity streams and newsfeeds with Django and GetStream.io;
2014-10-13 15:26:53;Django Rest Framework - class based views - Real Python;I just started using this and I love it. Coming from a Class based PHP framework (Laravel) this feels so much better than function based views.This is awesome. Thanks for posting!
2014-10-13 14:50:11;Conceptual question CBV/Forms;"Remember that you can add stuff to the context in CBVs as well. You can use DetailView and shove your named forms in the context by overriding get_context_data. Also remember that you can post your forms to different URLs via the 'action' attribute. So one way to go would be 3 views - one to setup the page and two to handle the forms.What i'd like to do is to create 2 separate views based on the the different states of get and post. I create one main view that links to these 2 subviews based on the   different states of get and post:

    class ArticleDetail(View):

        def get(self, request, *args, **kwargs):
            view = ArticleDisplay.as_view()
            return view(request, *args, **kwargs)

        def post(self, request, *args, **kwargs):
            view = CreateComment.as_view()
            return view(request, *args, **kwargs)"
2014-10-20 22:34:47;Question: Can I edit a related object using ModelFormSet?;"Since it's just one field, it should be pretty easy to just add Boolean field + checkbox select and update form.save to edit the related record. 

Otherwise you are talking about implementing something like the admin inline machinery, and that's overkill for one field. 

*Edit* further reading:
https://docs.djangoproject.com/en/dev/topics/forms/modelforms/#changing-the-form"
2014-10-20 09:26:18;What's the best practice to provide backwards-compatibility in a Django reusable app?;"Wow, that's *really* bad. Tuples can be compared lexicographically directly:

    if DJANGO_VERSION < (1, 6):
        from django.conf.urls.defaults import patterns, url
    else:    
        from django.conf.urls import patterns, url

The common pattern is just to try importing:

    try:
        from django.conf.urls import patterns, url
    except ImportError:    
        from django.conf.urls.defaults import patterns, url
Agree with /u/anossov, that's pretty ... un-Pythonic.

More and more, I've been taking the `compat.py` approach, like in [django-guardian](https://github.com/lukaszb/django-guardian/blob/devel/guardian/compat.py) .

The idea is to resolve all of the cross-version weirdness there using the:

    try:
        from foo import bar
    except ImportError:
        from foo import foo.bar

or

    try:
        from foo import bar
    except ImportError:
        def bar(foo):
            return blah

idioms and then importing from `compat.py` elsewhere in the package.Related, but definitely not answering OP's question, I found [`django-compat-lint`](https://github.com/ubernostrum/django-compat-lint) which tries ""going through files of code line by line, applying some rules that look for potential problems, and then report those problems."" Also, `django-lint-compat` is published by /u/ubernostrum, part of the Django [core team](https://docs.djangoproject.com/en/dev/internals/team/#core-team-list) and an early hand at LJWorld/Mediaphormedia.[django-compat](https://github.com/arteria/django-compat) is the initial version of a for- and backwards compatibility layer for Django 1.4.+ to 1.7.+ .
Consider django-compat as an experiment based on the discussion on this thread. Let's see where it goes.
Feedback and contribution are greatly appreciated!We are using this compat thing for a while now. Using this approach we have added compatibility to apps that works with Django 1.4, 1.7 and 1.8 in production.  
We released the for- and backwards compatibility layer for Django 1.4 to 1.8 in version 1.0.0. It's available on PyPI https://pypi.python.org/pypi/django-compat/ ."
2014-10-20 04:43:24;Fixing Django’s Admin Inlines;"You're saying that it's easy to manage m2m like this,  but the you show a plain foreign key example, you might want to correct that to many to one, it will confuse beginners. 

And does leaving the extra forms really trigger validation? I haven't had that experienceNot a bad writeup: short and informative. I coulda sworn I'd done this in Django 1.6, though. Is this only Django >= 1.7?"
2014-10-19 14:22:42;Some questions while creating a django app;You should consider using django rest framework (http://www.django-rest-framework.org/).  It will solve a lot of your current problems (renderer, authentication, urls), and make building an API much easier.I'm sorry it's a bit unrelated, but google Splitwise app. The ultimate debt handler. Are you sure that you want a `Payment` to allow for multiple recipients?  That sounds like a logistical headache in the future.
2014-10-19 13:14:13;Is the book Python Web Development with Django still relevant?;"Avoid anything older than 1.5/1.6

[Two Scoops of Django](http://twoscoopspress.org/) is good.

Hasn't been updated since 1.7 came out, but the only major user-facing change in 1.7 is migrations, so things like models/managers/class based views/etc (all things that have changed substantially or are new since 1.0) will all still be super relevant.Another good one is Tango with Django[http://www.tangowithdjango.com], although it also hasn't been updated for 1.7, but most of the content is still relevant and easy to follow.I've read 'Two Scoops of Django', 'Test Driven Development with Python' and 'Tango with Django'. Enjoyed it a lot!

A lot of information, a lot of fun. You can't go wrong with it."
2014-10-27 11:12:50;The Django Tutorial: Dated and Confusing?;"(Django core here)

It does need a rework, that's for sure, but bear in mind that the overall structure is designed for people coming from other web frameworks; it fails at being a from-zero introduction to web programming itself (even though quite a number of Django users start with it as their first framework).

This problem used to be somewhat supplemented by the Django book, though these days I'd argue that someone starting from scratch should be reading Two Scoops Of Django, which is a much more in-depth reference designed for the more beginner user. The site itself should perhaps reference that, but it's always a tricky line to walk about recommending third-party, for-profit resources (or even anything third party, South never got mentioned in the official docs)I personally struggled with the official tutorial, but when I tried out [Tango with Django](http://www.tangowithdjango.com/), everything seemed so much easier.We (the authors of Two Scoops of Django) have recognized for a long time that the official Django tutorial isn't enough. Which is why we put together our curated list of Django tutorials: http://twoscoopspress.com/pages/django-tutorialsI think it depends largely on your familiarity with MVCish concepts in general. It isn't going over anything too crazy in that regard, so I feel it's a pretty good introduction to Django's style of MVCishness. That said if one is trying to learn MVC itself or has only used one other MVCish framework (Python or otherwise) one might feel a bit lost/left behind.

I agree that introducing the admin is somewhat unnecessary and should be part of it's own tutorial. The only issue is that there's no other easy way for a beginner to put sample data into the application without building out the views.

I think the Django docs overall, while I've gotten used to them, need a lot of work. Any given page might be a harrowing mix of api reference, narrative and exposition--and the organization/navigation leaves much to be desired. It would also be nice if they gave you the option to choose your preferred version so that when google points you to 1.3's version of a page, it would automatically redirect you to your preferred version's.

Ideally the tutorial would start slow, introduce all of the basics up front and then branch out into ways to enhance the Polls project with some of Django's other batteries--focusing on introducing concepts and best practices.I think you're right and the tutorial isn't really for beginners who have never heard of MVC concepts. Maybe the docs need some sort of introduction or disclaimer like ""Hey you, Django is a complete MVC framework and if that is something you've never heard before you might want to do some reading or start with something less complex like Flask"".

As somebody who came directly from Symfony2 and .NET/Java MVCs I can say that the tutorial is quite helpful. I come back to it pretty often, but the section about Django's admin functionality always feels a little weird. On the one hand it's important and awesome enough to give it its own section but it's rarely the thing I'm looking for.**""Dated and Confused""** -- heheee... i see what you did there. I actually ran through the tutorial this weekend and thought it was really good.  I have a background in PHP and have done a lot of Codeigniter development so it was quite eye opening to see how much you can create with Django in such a small amount of code.

I think that some of the concepts would be really difficult to understand as a complete novice, like you said, models, migrations, shell commands etc might be pretty complex to someone with no background in programming at all, but I rattled through it all with what I felt was a decent level of understanding.

I think that things could be summarised better at the end of each tutorial, there are a lot of new commands and syntax, and I found myself having to go back and skim read through again when I then went on to start a project of my own.  I suppose that's the same with a lot of languages though, you have to refer to the docs a lot to start off with and then gradually you pick it up.Having to train a number of new hires in the past few years, I've also got the similar response. The official docs is confusing and they lost inside it. The doc I think is great for experienced people to reference things that they forgot but not for newbie to understand the concept behind it.

I made some attempt to start introducing django from different perspective - http://k4ml.github.io/posts/django-from-scratch.html I thought it was great.

*""Sure, a HUGE part of Django is the ORM/models...but do we really need to start talking about databases before introducing other parts of the framework?""*

I think so. The ORM is one of the biggest parts of django in my opinion. If you're not interacting with a DB, why are you even using a web framework? 

Page 1 & 2 might not belong on page 1 and 2, but surely users are smart enough to ignore things that he doesn't care about. (Migrations, for example) I don't see how you're going to get around needing to set up a DB though.

All this being said, the tutorial does not seem to be written with someone new to python in mind and I think this is a good thing. You ought to learn the language before trying to learn something as complicated as a framework. Similarly, you're expected to have some experience with databases. (I didn't, so I had to do some extra research. It isn't the django tutorials responsibility to teach me that.)The difference is largely caused by different target audience. With Flask you're not expected to use the ORM from the start. Or have a common project structure.

On the other hand, Django could have something like Flask's helloworld example but that wouldn't really be a tutorial would it? A beginner is likely to benefit more from explanations than just some code snippets.This thread has been linked to from elsewhere on reddit.


 - [/r/mistyfront] [The Django Tutorial: Dated and Confusing? (/r/django)](http://np.reddit.com/r/mistyfront/comments/2l4dxo/the_django_tutorial_dated_and_confusing_rdjango/)


*^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)*

The django tutorial has some good parts but over all is incredibly lacking.  They picked off a few things to let you know about, and that's it. have fun. 

My guess, it was written by programmers as an afterthought, something that had to be done, not something they thought was genuinely important and interesting.
Now seems like an opportune time to point to my new blog. It's far from perfect and is a work in progress but I'll be writing lots of django tutorials in the future.
http://www.codex-anguem.com/

here here for self promotion![deleted]"
2014-10-27 01:31:45;Re-election of the DSF Board: Call for candidates;
2014-10-26 19:35:46;App for private groups in django?;"You should have a closer look to https://github.com/bennylope/django-organizations. The app comes with 

* invitations 
* registration for new users
* group management
* user can be member of multiple groups

 


I'm not sure why anyone would make a generic app for this?
It's so simple to build, the exact thing you are asking for is even provided as a code example in the docs: https://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationshipsI've never found one but am wanting this for a site also. "
2014-10-26 18:19:45;Dynamic drop downs;Sounds like [ModelChoiceField](https://docs.djangoproject.com/en/dev/ref/forms/fields/#modelchoicefield) does exactly what you want.What you want is the default behaviour of a ModelForm (https://docs.djangoproject.com/en/dev/topics/forms/modelforms/#modelform)That's a pretty good description of how it's done. If you want to see a smaller description of how to inject values into a form, I wrote about it not long ago: http://pydanny.com/adding-django-form-instance-attributes.htmlI use http://silviomoreto.github.io/bootstrap-select/ for my form which has a lot of different options and then I just update the selections in the views.py when the page is requested.
2014-10-26 00:54:32;For all those newbies out here, an easy way to deploy your app;"Rather than suggest ""if Django tells you that you're missing other packages, install them through pip"" why not suggest that the user runs a ""pip freeze > requirements.txt"" in their local environment, and then a ""pip install -r requirements.txt"" after cloning the repo? This saves a LOT of steps.

Otherwise, thanks for the good info!Nice.  A couple of points:

* Your django static_root does not match up to the nginx static alias.
* Would be better to get gunicorn installed properly as a service, so it survives a server reboot - very useful when playing with local vagrant VPSs.  This however depends on the OS on how to achieve it.This is a good stack.  As would be a Docker setup as suggested by /u/superbestfriends, but honestly, to a newbie, I wouldn't spend my time here.  Use something like Gondor or Heroku, and let them handle the heavy lifting so you can focus on building your Django specific skills.  If you're trying to learn Django, learn Django and don't spend your time worrying about the stack when other people will do it for you.It seems like a good guide for people who have already done it before as a refresher. However, it misses a lot of things that a beginner would need. For instance, that virtualenv creation will fail because the regular user will not be able to change /opt without the sudo command. Once that is done, it doesn't show how to activate the virtualenv, only deactivate.

Also,

    create --owner user mydb

I'm assuming was supposed to be

    createdb --owner user mydbI liked this, but had a few issues:

* You create a virtualenv in a directory /opt/myproject/ which doesn't have an indication in the name that it is a virtualenv directory.

* Putting it here, instead of in /home/ for example, means that users will need to do 'sudo' or something similar, which is unnecessary. They will end up running the Django instance as root, which is really unnecessary.

* You end up with the project sources in /opt/myproject/myproject, which is confusing because of the duplication, and it means your sources are in the virtualenv directory, which is pretty strange!

Instead, I'd have gone for /home/user/myproject/env and /home/user/myproject/src or something like that.

Finally, it would be nice to suggest that once these steps have been understood, it would be better to use something like fabric to deploy things, rather than doing manual steps on the server. The fabfile.py in  https://github.com/sidmitra/Django-Starter-Kit might be a good startI'm not sure ""deploy"" is the right word in this instance, although the article nicely describes a good stack to run a django app with.

I'd go one step further to assist with actual deployments: use Docker! Your article explains the what, but not the how - and considering the meaning of the verb, I think this is the most important part.

The extra step: download docker(.io); create a Dockerfile outlining the installation of everything as described in the article; create your gunicorn & nginx configs as artefacts to sit alongside your Dockerfile; do your docker build . command, and push up to your docker registry.

On your target machine, it should be as simple as pulling the image for the version you're after, and running `docker run`. With this set up, the only host-specific configuration you have to manage is the webserver that runs on the host. It will need to reverse proxy to the port the container has been mapped to for whatever vhost you have setup.

You can of course do that the same way too - have your config in a docker data container which is mounted as a volume to the host. 

As the docker run command accepts a Host (-H) option, you can execute your deployment commands from your local machine and invoke them on the host. Tie this in with some CI suite like Jenkins and every time your code changes, you can have containers being deployed to yours hosts!Since when deploying Django project is a problem."
2014-11-03 20:14:28;Good app/package for user-facing post authoring?;"Did you look at Django packages site?: https://www.djangopackages.com/grids/g/wysiwyg/

There are apps for TinyMCE and for CKEditor too.Have a look at Froala Editor. I just started using it and it seems to be nice!"
2014-11-03 20:14:15;Permissions for password and secret key files?;"Not really specific to Django or Python, but you would likely want it to be as low as you can go, e.g. owned by the same user and group that your app process is running as and 600 for permissions.

To make it more specific you should make sure that you app is running as a user and group that no other apps use."
2014-11-03 20:10:01;[Question] How do I get a oneshot variable from a user?;"[deleted]Add an HTML form in the template

    <form action=""."" method=""GET"">
      Type shit here: <input type=""text"" name=""oneshot"" />
      <input type=""submit"" value=""then click me"">
    </form>

Then in the view

    if 'oneshot' in request.GET:
        do_stuff_with_while_maintaining_caution(request.GET['oneshot'])
    else
        # Return template with form

Be warned that there is zero protection or error checking above, use with caution.
"
2014-11-03 20:05:32;JSON Web Token Authentication with Django and AngularJS: Part Two;"Nice tutorial.

However, I am not really clear what the advantage is over cookie-based authentication? Anybody could enlighten me?
"
2014-11-03 19:50:37;Django Tutorial for invoicing app;"I would advise you to create a sample app on your own based on what you learned form the tutorial and take the problems as they come. Build up a basic model, play with the ORM in the django shell, etc.

I believe you will find it pretty easy if you have done the polls app.Try yourself first and ask a question what you get blocked :) It will give you context-rich understanding of answers.

Regards to 'automatically populated to another field', take a look at 'signal' feature of django which helps to hook before/after a record be saved.Thanks guys, I'll go with your suggestion, I hope to get pointers if I am stuck.I've begun working on a hypothetical BookStore app, and whilst trying to get the sum total of price*qty I keep getting object has no attribute error when trying to get the custom method for total in the list_view in Admin, here's the model file http://pastie.org/9699850 hope someone can correct me if I am doing it wrongly. "
2014-11-10 19:51:28;Question about django vs rails...;"django: I came for the admin. I stayed for the documentation.This question has been beaten like a dead horse all over the internet. I think what you'll come to find is that there is no key advantage of using one framework over the other - they are both great, especially for a developer's productivity... but the comparison between frameworks is only half of the story, imho.

If you consider the side effects of learning the implementation language, I'd argue Python is a better choice as I think you'll get more out of it overall. It's like you said yourself: it seems to be a stronger language, and others have clearly taken notice to that. While Ruby's community seems to be dominated primarily by Rails users, Python's community is larger and seems to be much more diverse. This point, I think, is reflected in Python's recent adoption in other fields such as scientific computing and artificial intelligence. Granted, while Python cannot do everything, it can probably do *most* things as well as or better than Ruby. :-)

If you just want to learn a web framework, then pick whichever one feels best to you and go for it. However, if you want to learn about the language's ecosystem as well as its flagship web framework, then do yourself a favor and choose Python.> Python seems like a stronger language than Ruby

do you need another reason?I chose Django (many years back) because of Python. I wouldn't say Python is a stronger language than Ruby, despite my predilections. I would say that it still has a more mature stable of non-web development related libraries than Ruby.

The last time I did any work on a Rails project - which was not very significant, so find a grain of salt - I remember seeing data in the database and empty model definitions. I asked someone else on the team what was going on and got the reply, ""Oh, Rails figured that out from the form post on such-and-such-a-page"". You can probably guess what happened to my [interest in Rails at that point](http://gifsec.com/wp-content/uploads/GIF/2014/06/run-away-gif.gif). Generally speaking the less magic the better - a critique thrown at Django itself sometimes.Most people seem to be trying to maintain a sort of neutrality, but I'll step in and say that I think Django is stronger.

I've never actually done a complete Rails project, which at first blush may seem to impugn my credibility, but hear  me out:  Before I had done either one, I found myself readily able to read Django projects but unable to read Rails.  Even now, with years of Django experience, I find Rails projects difficult to read.

I suspect you'll find this is fairly consistent across a wide spectrum of developer backgrounds, and it's precisely because of the feature you've outlined as a crucial difference: the magic.

In Django (and in most Python frameworks), there's relatively little magic.  The implementation of the settings singleton is the big, notable exception, but generally, if you are trying to discern the logic of a model method or a view, the material you need to read is right in front of you.

This is especially important on a team on a deadline, when you need to be able to give your colleague confidence that if she goes to get some sleep, you'll be able to completely understand the intention of the code she left for you.

The main redeeming factor of Rails, in my opinion, is Ruby's ""do"" block.  I find rspec tests particularly cognizable - and it's no surprise, since there's less magic here than in, for example, a typical controller.

It's telling that the Django tutorial doesn't even walk the user through writing a test until part 5 (and even this is only a recent addendum), and when it does, the only part that's perfectly readable at first glance is the docstring.

Ruby is beautiful; rspec has a lot of lessons for python in general and django in particular.

However, is most other ways that matter, django is superior.>They are almost completely even in my estimates but I do notice that there is more automagic stuff in rails.

The tradeoff of automagic is that they save time when they meet your needs, but aren't worth dabbling in if you need something slightly different.

There are frameworks around that will get you a feature-packed web 5.0 site in a minute, but there be dragons should you do anything beyond that. RoR thankfully is not a very extreme case.You are unlikely to get a satisfactory answer.  It is completely a subjective opinion.  Ultimately, there is very little that you can't accomplish on either system.  There are a few points in favor either framework, but for most people it comes down to their choice of language.I've used both, and generally I prefer django.

The automagic front-end stuff in rails is almost always a turn-off, unless you're working on a smaller project and/or heartily agree with all the decisions that rails makes for you. If you don't, it can be a pain to override and reinvent the wheel.I'm doing large scale projs with django for years now (fortune500) and never had a reason so switch. esp. debugging speed, documentation, 3rd party lib quality, carefullness of devs always convinced me after years with php and rails.

and yes, I stronlgy value the ""pythonic"" attitudeI prefer rails when the focus of the application is user managed content, and django when the focus is content being managed and created by admin(s). Other than that either one can do what the other can. Django has the nice built in admin interface, but that can be added easily in rails. Also i really enjoy django's built in authentication and authorization (very good custom roles)[deleted]"
2014-11-10 17:00:18;django-formsettesthelpers to generate formset data -what do you guys think?;Sorry you haven't gotten any response from /r/Django yet - this looks good, I'm not familiar with any other apps for testing formsets.
2014-11-10 16:13:37;Deserialize JSON with embedded array into ForeignKey models;I'm going to guess that the serializer cannot handle deserializing the relation in that direction.
2014-11-10 15:48:40;Adding Social Authentication to Django - Real Python;Nice post
2014-11-10 04:23:57;Translations with Django REST Framework?;"We only want to support english for error messages so we just force activate('en') in an overridden dispatch in our APIView base class.

It would be pretty easy to extend that so it would read an input variable from the request, either from the headers or the querystring.Ok, so, this should probably be added to the DRF docs, since their docs have virtually nothing on localization, but it seems that they use the Accept-Language header and make use of provided translations, as long as the localization middleware is enabled.

As soon as I added ""django.middleware.locale.LocaleMiddleware"" to my middleware classes and ""Accept-Language: es"" to my request header, the field is required message became: Este campo es obligatorio, which I'm assuming is the correct way to tell someone that a field is required in Spanish. "
2014-11-17 19:39:48;Rate Limiting with Nginx;Awesome, thanks
2014-11-17 16:51:37;Getting OutOfMemory on larger AWS instances;"Did you leave `DEBUG` on?re: ""Unrelated is there a way to filter against FK in list_filters in a similar way to raw_id_fields in ModelAdmin?""

You can subclass admin.SimpleListFilter and modify the queryset which is passed to list_filter as shown here:

https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter

If you are doing big queries, this may happen to you:

 http://stackoverflow.com/questions/4222176/why-is-iterating-through-a-large-django-queryset-consuming-massive-amounts-of-me


Best of luckCan you give us a dump of prod?
Edit: probably a bad idea. Maybe try a copy of prod database in dev setup, is possible."
2014-11-17 16:04:07;Trying to use messages but doesnt work;"Looking at the docs, it looks like for 1.6 and beyond you don't need the request for a messages in class based views.

class AuthorCreate(SuccessMessageMixin, CreateView):
    model = Author
    success_url = '/success/'
    success_message = ""%(name)s was created successfully""

one of the examples given.I like using the built in SuccessMessageMixin for my Updateviews.

Check exactly how [here](https://docs.djangoproject.com/en/1.6/ref/contrib/messages/).You cannot send call a method in that manner in your class declaration. As written, you are attempting to send the message when Django starts and loads the view class.

You should either be adding the message in a method that gets called during the view lifecycle or use [SuccessMessageMixin](https://docs.djangoproject.com/en/dev/ref/contrib/messages/#adding-messages-in-class-based-views)."
2014-11-17 11:36:45;Display Thumbnails in Django Admin with Sorl Thumbnail;I was just looking for something like this the other day. Thanks for the share.
2014-11-16 07:44:30;Getting 'table X has no column named Y' error when saving model, but the column IS there. ideas?;"flush doesn't delete the tables. It just basically truncates them. You will have to drop the table yourself then run syncdb again.If you're using Django 1.7 you can just use the new Migrations feature. It's a manage.py function: makemigrations <app_name> and then migrate <app_name>I believe flush only clears existing data from the tables. It doesn't alter table structure. 

As per the django docs https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-flush

""django-admin flush

Removes all data from the database, re-executes any post-synchronization handlers, and reinstalls any initial data fixtures.""

What you should do is create a schema migration and then migrate using South.`flush` deletes the *contents* of the database, but doesn't delete the *columns*. What version of Django are you using (guessing pre-migrations)?Use django-reset if you're not using migrations. Are you using django debug toolbar? If you are, try disabling that, then run your syncdb (but seriously, use migrations), then reenable."
2014-11-24 23:15:57;Does anyone have any technical advice for a django developer as a new hire for a drupal/PHP company?;"I made the opposite migration to you - started with Wordpress/Drupal, realisied everything that was wrong with PHP CMS's and went looking for alternatives.

There's very little good about Drupal and the truth is most developers abhor working with it.  The only thing I would say is that the command line tool Drush is actually great and on a day to day basis it will make you feel a lot less like killing yourself.  

Apart from that it's pretty much tedium, misery and pain.

This is my favourite [quote](https://news.ycombinator.com/item?id=5158837) about Drupal from Hacker News by 'unconed'

>  I have this vision of someone in the PHP community at some point randomly picking up the Gang of Four book and being like ""holy shit, check this out people...they had a solution to some similar problems 20 years ago...""

> It's more subtle than that, but there's indeed a great lesson to be learned: the architecture of an open source project affects and reflects both its code and politics. Many years ago, the following article was written and spread through the community: http://drupal.org/node/547518

> Though it has since been updated, the original premise remains intact: ""You can point to chunks of Drupal's code and identify pieces which act similar to OO-patterns. Therefor, Drupal is OO-like and there is no problem."" New Drupal developers have been reading this for years, and drank the kool-aid, including myself many years ago, before I left.

> But of course, OO isn't just about what the code does, but how the code can be re-used and re-factored, and this is where Drupal falls flat. It's always been architected as a waterfall of pieces that call each other directly. This was rationalized away with the trope that Drupal had a ""solid, well-written core"", meaning nobody should ever need or want to touch it. But what it really meant was that there was no room for innovation in essential parts of it.

> Drupal has always exploited the low bar in PHP land to position itself as more than it is. It is not better than WordPress, it is merely bigger and more meticulously annotated. This is the result of a review process that encourages people to participate, while only giving them superficial checklists to verify, rather than good software and product design practices. Creating and maintaining Drupal has become such a bureaucracy, that even ideas that should be dead on arrival can be ferried along, slowly being turned from ""unacceptable"" into ""good enough to steamroll over the remaining objections"". This creates a desire from many to see it go through regardless, to not have all that accumulated effort go to waste. As a result, big decisions come down to taste and politics, not technical merit derived from a consistent vision of what the end result should be.

> I can't count the number of times a committed core patch left behind an exasperated contributor, who'd lost all appetite to continue to work on it, even before their work had the official seal of approval. Code is abandoned as soon as it becomes relevant.

> Buytaert has always been aware of the limitations of Drupal's flat extension mechanism, always hesitant to add to it, but never seemed to want to modularize the module system itself to fix that. Of course, when the language you're developing in has the exact same problem, it is easy to rationalize this away as ""not a big deal"", even as the frog is slowly cooked to death one degree at a time. The frog is now dead, but rather than admit it, it lies open on the operating table, hooked up to a Frankenstein-like mechanism that makes its limbs twitch in a convincing fashion.

> Every year, his keynote would list a set of goals. Usually the same ones kept getting repeated, on account of them not being accomplished in a way that actually solved problems for end-users. A perfect illustration is WYSIWYG editing. For years, the only thing people could agree on was wanting to swap out the WYSIWYG editor component. Which may sound admirable. But WYSIWYG is not about dropping in a JS library to add formatting buttons to your textareas, in fact, that's the least important part. It's about creating a workflow for users where you can always edit content in the same place you're reading it, and to make that happen seamlessly and elegantly, regardless of whether it's text or media.

> Such goals cannot be accomplished in the Drupal community, even though several private companies have done it with Drupal over the years. Ironically, Drupal has a bottom-up process that results in a top-down architecture, which realizes a vision in the middle nobody actually needs directly. The WYSIWYG example is a perfect illustration: even as people say they're trying to reinvent the way editing in Drupal works, they're not willing or able to gut all the old stuff that keeps it clunky.

> While Drupal contributors maintain things are getting better, the same processes are still in place, and more importantly, the same attitudes. Here's a recent quote by Chx, prolific Drupal contributor, loved by many:

> ""Drupal always did things better. Always. [...] That's a fact and a hard fact. [...] I hope we can get back on track for D9, finally."" http://www.garfieldtech.com/blog/off-the-island-2013#comment...

> Based on the current pace of development, Drupal 9 will arrive somewhere in 2015, maybe later. They've been supposedly turning this ship around for 2 years now, which shows you the real problem: these core contributors aren't in it for the end-result, they're in it for the process. There are social, political and financial benefits to be gained from putting yourself in a position where everyone relies on you, especially if you value approval from others.

> The community that declared loudly that it wanted to make the middle men of the web obsolete, has created the perfect product for middle men to exploit for their benefit.

> Every open source project is a social and political experiment. People should pay more attention to that fact.""

All that said, you will no doubt be able to use Django in your new job, particularly for projects which don't fit well into a CMS type model.just run away, you will feel the pain again...I have a ton of drupal experience, I think the best thing I can tell you is the patterns for solving drupal problems:

1. Drupal API and hooks can be implemented in custom modules to override existing core functionality

2. Whenever you run into a problem google the issue or what you need appended with 'module'. So for example if you need a lightbox google 'lightbox module'

3. Read the module page and readme file when you decide on a module.

4. When comparing modules check the number of sites its being actively used on (bottom of page)

5. Use drush, it's a great tool

6. For responsive simple theme go zen, for more functionality and tools go omega4

7. Modules have issue pages where you can find helpful advice and patches to add functionality

8. Join drupal IRC channel, very large and active

9. Check http://drupal.stackexchange.com/ for problems.

Drupal can be enjoyable to create websites in but realize you are entering a realm of less code and more point and click (drupal theming). I'm finding more joy out of django as I spend more time coding.

Feel free to message me if you have any drupal questions.There isnt really much. Drupal is a great tool, but different to the ones you mentioned in s lot of ways.
Drupal 8 will be oop. But i guess all producyion enbiroments are drupal 7 ptocedural code.
Drupal is not a framework, its a content mgmt platform.
My advice is get to know theming and module building which basically folloews naming conventios and then make your way to more advanced stuff like the form api.
A lot of problems can be solved by simply installing a third party module. So expect to have to write fewer code and read more docs."
2014-11-24 22:28:54;GeoDjango Help.;www.stackoverflow.comAnd your models? 
2014-11-24 20:30:12;I created a repository for basic django models for common types of data. Have a look, contribute, critique!;"have a look at http://schema.org/ for inspiration
Why not make these work with both Python 2 and 3? It's actually pretty trivial to do. See https://docs.djangoproject.com/en/dev/topics/python3Person: rather than poorly paraphrase Russell's awesome talk on this topic and tsk tsk about the first/last name and gender anti-patterns, just go ahead and watch it, as it's super informative: https://www.youtube.com/watch?v=KHg6AoExYjs
Opened up a bunch of issues for you. Hope that helps!If you are using UUID from django_extensions for the base model why not use TimeStampedModel as well. That way you have create and modified field names that people are more familiar with.

Also why not have your address class be abstract that way you can use it as a base class in other places. Like ClientAddress, or HouseAddress, CustomerAddress. All could be valid and distinct addresses.

Same thing with your Person model as well."
2014-11-24 20:07:55;Robinhood is hiring backend engineers (Palo Alto, CA);"Your [r/androiddev post](http://www.reddit.com/r/androiddev/comments/2ncphe/robinhood_android_app/) does a great job of providing a little context. Was it a conscious choice to omit that here?

It sounds like you are on a mini hiring tear. How big is the team currently? And roughly how big are you hoping to grow right now? Breakdowns for mobile, backend and frontend would be helpful.

Can you also explain a little about what you've been doing since you announced nearly a year ago? How big is the beta program relative to the wait list?Market data, trading, accounting... MY GOD I AM SO EXCITED "
2014-11-24 18:00:24;Why I let Django handle favicon.ico;"It might seem like an insignificant performance hit, but you're taking away Python/Django threads to serve an icon.

Every page requested now eats up two Python/WSGI threads, threads that could be doing real work elsewhere in your application.  

While your front end web server likely has room to accommodate *1000s* more connections and sits idly twiddling its thumbs, some user is at a login page waiting while your app delivers favicon.ico to someone else.I'm not sure if the author really even answered the question as to why django handles this. The author claims 

> I’ve read much more than I wanted to about different browser handling of favicons. I still don’t completely understand it. There are a lot of gotchas. The main thing I’ve taken away is:

>Almost all browsers try /favicon.ico by default, so just make sure that points to your favicon and it Should Just Work

Seems like all that needs to be done is to have one file named favicon.ico and be done with it.

collectstatic, if configured correctly, allows you to pull in your favicon and serve it from the same place as the rest of your static files. Then just put an alias on your front end web server for favicon and you are set. 

>However with that, you’ve added another deployment requirement to your Django project, and another place where you need to duplicate elements of your static files location. Those aren’t huge problems, but since I can easily avoid them, I’ll gladly do so.

No more than configuring your web server to serve up css or js.

What a waste of a redirect and python's time.As we discussed elsewhere, the great takeaway for me here was how to generate static paths in the python files: staticfiles_storage.url('file')Great article! I'm embarrassed to say my site's favicon had fallen victim to changing static files storage but happy to say I implemented your solution almost exactly. It seems like it would appease the other commenters if you change

> You might instead handle favicons in front of Django, e.g. with something like the following snippet of nginx config:

to 

> You might *additionally* handle favicons in front of Django, e.g. with something like the following snippet of nginx config:"
2014-12-01 23:08:00;Hello, I am having lots of trouble getting my templates to work. Hopefully someone can lend a hand!;"I'm not sure how your projects directory structure is setup, but the TEMPLATE_DIRS variable in settings.py doesn't look correct. You are pointing to a file and not directory.

For my projects I use something like:

    os.path.join(BASE_DIR, 'templates')

Give that a shot and let me know how you get on. The absolute path seems to be wrong. Try 'rango/index.html' instead of '/rongo/.... '. If this doesn't work, post your settings.py as well.Concur on the template path being wrong.  I'd try, in the first instance to verify it works, using an absolute, hardcoded path to your local file - so something like /Users/Supreme_Leader/Django/templates - the / at the front is important, as that makes it an absolute path. 

Yes, that's an anti-patttern, but it will be helpful in the immediate short term for debugging and checking it will all link up when you get the paths right.  I found paths to be a real bugbear for a long time with Django, it's only recently I've cracked it. 

Slightly longer term, I suspect that if you look at the path created in BASE_DIR, that you're replicating some of it in the section where you're doing the join - so, e.g. 
BASE_DIR = ""some/stuff/here/path/""
TEMPLATE_DIRS = [os.path.join(BASE_DIR, ""here/path/supreme_leader"",)
 so what actually gets output is:
""some/stuff/here/path/here/path/supreme_leader""

In future if you're getting an error, the output from the django debug screen is the most useful, as this would confirm my diagnosis above! 

 (http://linux.about.com/cs/linux101/g/absolute_path.htm) 
"
2014-12-01 21:23:17;"I have two forms on one page; can I use ""is_valid()"" to differentiate them?";"The other option is to have each submit button point to unique urls to process the form. Or have an AJAX call to unique urls (however you are submitting the form)

But the way you are doing it seems fine. Just seems like it would get messy if you were adding more forms. Logic wise, if the forms are for separate things, then I would be tempted to split up the urls and have a unique view for each form. I'd take a look at the situation when there is an error on a form. You'll probably end up with errors on both forms (i.e. required data). I might also prefer something like `<button type=""submit"" value=""form1"">` so you can check the `request.POST` or putting a hidden input on each form.I second the option to use a separate view for each form. I'd also advocate not displaying two distinct forms on the same page. Such a user experience does not seem desirable.Form prefixes, baby:

https://docs.djangoproject.com/en/dev/ref/forms/api/#prefixes-for-formsAre the forms distinct in subject matter? Ie is it part of the UX that they have separate submit buttons? If not then you can wrap them in the same html form element. 
If they are distinct in terms of subject matter or the UX would be harmed by having them in one element then I think I'd use your method and have a seperate submit for each,

Whichever way, however, I'd be tempted to use a prefix to make sure the ID's don't clash. 
https://docs.djangoproject.com/en/dev/ref/forms/api/#prefixes-for-forms
"
2014-12-01 15:10:58;Deploying Django on Dokku;
2014-12-01 13:40:57;Django REST framework 3.0;"Is it christmas already?WOOHOO! Congrats on the fantastic work, /u/tomchristie!!Thank you Tom for all your hard work.

Thank you Django community for supporting Tom.I think this release has smoothed out most of the irks I had with DRF before as well as adding new features that I can't wait to use. I have been using tastypie on a medium sized project for about 2 years, but since the developer has stopped updates on it, I think it's time to migrate the project over to Django Rest Framework.

I feel like DRF is something that could be included in the core django codebase in the future. It really has become the goto solution for building APIs.

Nice work DRF team (or individual).Wow, thats one hell of a change log.

Reading through the whole thing, it's a lot of changes/fixes that will reduce the number of [WTFs per minute](http://www.osnews.com/story/19266/WTFs_m) I've run into when trying to learn the framework over the past month.Thank you for such a great contribution to the django community!Very exciting. DRF weak spot for me was always the nested resources and i'm looking forward checking out the simplified interface.Congrats to the developer. He communicated very well with the Kickstarter backers.

> Better support for API versioning

Any idea what the plan is here?"
2014-12-01 01:19:50;Django + jQuery: sending and receiving data. In need of some guidance.;"When your item is created, it should return the primary key, or whatever you define to be returned in the model (ie return self.id).  So if you have, for instance

add_item = Item(...)

add_item.save()

then you return the response object of that create

return HttpResponse(add_item)

I use this a bit differently, so this hasn't been tested, but within the response you should be able to get your primary key.
Make `AddItem` return the primary key (also rename `AddItem` to `add_item` as it's a function, following python naming conventions)

    def AddItem(request):
        ... 
        return pk


then in your view:

    def transaction(request, transaction=None):
        pk = AddItem(request)
        return JsonResponse({'pk': pk})


Note that you need to import the `JsonResponse`: `from django.http import JsonResponse`

Does all this make sense?
"
2014-12-08 21:59:39;2014 will soon be history and many out there will ...;"What's the advantage of doing this over, say: 
`&copy; website.tld {% now 'Y' %}`? (or `&copy; website.tld 2009 - {% now 'Y' %}`?Is there a reason that [the LICENSE file is empty](https://github.com/arteria/django-copyright/blob/e4a583a3803af110df2afad2e61f1c14bc1bc106/LICENSE.txt)?"
2014-12-08 20:42:10;Building Web Apps with Django and AngularJS updated for Django REST Framework 3.0! Now with screencasts!;"What are the settings in this VIM they use?

As I can see, there is a docstring part at the top. Can someone tell me that plugin?For the first 48 hours you will get 25% off the screencasts"
2014-12-08 17:29:40;Implementing e commerce w/ SEO friendly slugs.;
2014-12-08 16:00:59;Django: Under the Hood. Videos now up!;"[](/dashsquee-r) Awesome! 

I've been waiting for those.Great presentation, cleared a few things a bunch of books haven't!"
2014-12-08 00:52:34;How can I trace all code that is being executed? (x-post from /r/learnpython);"Sounds like Django debug toolbar may help you trace simply what is being called, etc. additionally, pdb may be helpful.import pdb; pdb.set_trace() and you can get more info here
https://docs.python.org/2/library/pdb.html

Basicly 
c - continue (untill next pdb, if there is one)
n - next (line, one at a time)
s - step intoWorth a shot: http://blog.ionelmc.ro/2013/06/05/python-debugging-tools/

Thought I suspect you have some configuration issue ... compare the settings."
2014-12-15 03:57:35;Where can I download free 'Snappy' looking base templates from?;I've used html5up.net before. He has some pretty good starter templates available for free. If you choose to you can also look into some of his paid templates as well.Not free, but for admin related needs, I think this is a great start: https://wrapbootstrap.com/theme/color-admin-admin-template-front-end-WB0N89JMK
2014-12-14 06:58:48;Django Interactive Database Test builder. Does it exist?;"I actually looked for something like this myself, but wasn't able to find anything... what I did find was another really useful app for interfacing with databases that is called Navicat: http://navicat.com/products/navicat-premium

A great test setup is going to Heroku, creating a free PostgreSQL test database, and logging in via Navicat. Using the app, you can actually create Database Schema models visually, and it might help you get a better idea of what the relationships will look like. I know this doesn't answer your question exactly, but doing what I mentioned above really helped me create a robust and complex DB Schema with little headache, so perhaps it can help you as well.

Note: This app is also useful down the road, since it will allow you to modify tables VERY easily!It's not interactive, but try Django-extension's `graph_models` command: http://django-extensions.readthedocs.org/en/latest/graph_models.html

You can see what it outputs with an [image search](https://www.google.com/search?q=django-extensions+graph_models&source=lnms&tbm=isch&sa=X&ei=4ZyNVPOnJs2UyATZvoDIDA&ved=0CAkQ_AUoAg&biw=1239&bih=1358)If you want to visualise the models and other Django scripts, there is http://mmcardle.github.io/django_builder/ (my own site)
It's currently in beta but might prove useful, there are assumptions made based on my own preferences on how I like to layout projects.There is no such thing as a 'django database.' There is Postgres, and sqlite, mysql, etc... There are a ton of tools to accomplish this, but pencil and paper are the best for my money.I don't know of any websites with GUI database schema builders, let alone one that's Django-specific. But if you have Mac OS X, this SQL Editor claims to have a django export plug-in: http://www.malcolmhardie.com/sqleditor/

PyCharm has some django database integration, but more for visualizing and querying your current database, not so much for initial schema design.If you're on a Mac and want to use MySQL, then Sequel Pro is a great free UI for your db.  For SQLite, SQLite Professional in the app store is a worthy investment and overall better than Sequel Pro.

e: I haven't used Navicat due to how expensive it is, but it also seems like a good investment."
2014-12-14 06:10:56;NoReverseMatch at /new/;"Hi,

I think that you don't have to put your url name in quotation with django 1.4.
You just have to write {% url host-new %}/u/zarglex is correct

Rather than writing like that though, use the forwards compatible method of `{% load url from future %}` as [documented here](https://docs.djangoproject.com/en/1.4/ref/templates/builtins/#url)."
2014-12-14 03:29:59;Tricky problem passing data from form to form.;"I struggled with the same problem when I started with Django. If you are dead set on having the forms on the same page (and therefore filtering BEFORE a submission is posted), you'll have to use Javascript. Depending on how fancy you want to get you could also use Ajax. 

Break it down into smaller steps. You want to:

1. Monitor a single-select input (main language) so you can act when a selection is made. 

2. Determine what selection is made. From this info, determine what you need to hide/filter/disable. 

3. Disable, hide, or otherwise filter out the appropriate values or elements. 

Django is an awesome framework. I love it to death. But it's a server-side framework, and that means it doesn't do much dynamic stuff on the front end. If you were submitting this form and then rendering a second one, passing the appropriate filtered data to form 2 would be trivial. But since we have to pass this info on the front end, away from the server, we need some Javascript help. You'll run into this more and more as you work with Django. Do yourself a favor and start picking up basic Javascript and jquery now. If this is on the same form page, you will need to do it with JavaScript. Alternatively, you might look at Django's wizard form framework.As /u/tsqd mentioned, you will need to achieve this with JavaScript. Alternatively, you could simply drop the filtering requirement.If you want to implement this exactly as stated in your question, there is no way around learning some basic js (as tsqd mentioned).

If you are a lazy person (and I certainly am), you might want to try to override the ""clean""-method of your form ([django docs](https://docs.djangoproject.com/en/dev/ref/forms/validation/#cleaning-and-validating-fields-that-depend-on-each-other)). While this wouldn't disable the ""main language"" in the ""further languages"" dropdown, you could validate that the main language is not in the ""further languages"". I'd recommend to do that in any case (even if javascript is already running)."
2014-12-14 01:08:27;Integrating Angular.js with django mezzanine;"You need to be a bit more specific about what you want to do.  Do you want angular as your front end, or just to provide a bit more functionality? Have you set up an API from your django app yet? Ideally you would want to integrate some RESTful functionality onto Mezzanine.  I believe there is an open github issue to look into doing this properly within the mezzanine package, but it's not difficult to just expose a few of the mezzanine models as read-only via Django REST Framework.  Hi,

There is some discussion about it

https://github.com/stephenmcd/mezzanine/issues/1042

best regards"
2014-12-22 14:01:38;Why djangoproject.com is down?;"[I concur](http://www.downforeveryoneorjustme.com/http://www.djangoproject.com).It is up for me.Down for me in... Nope nm, finally came up. Just verry slowww.

EDIT: Nevermind that. It *is* down for me.Go to [http://devdocs.io/django/](http://devdocs.io/django/)

Phillip.Down for me too at this moment."
2014-12-22 02:15:31;is this the right syntax for a css file??;If your CSS is also a static file, it's not going to be parsed by the template engine.Your CSS files being most likely static files I suggest you do that background rule in your HTML file which is actually parsed as a Django template (where you can use Django template tags). my index.html file works fine and can see images through static...
2014-12-22 02:15:22;flushing data and/or dropping tables;I wouldn't do this. You can't do it once in production so it's a waste of time. Just use migrations.What's the question? I Legit don't get it. 
2014-12-21 11:28:41;Best way to handle ratings?;"Does this really call for more than a foreign key to a Ratings object, with fields for user, score, and object being rated?

EDIT: Maybe an auto_now or auto_now_add datetime field too. Then you can show reviews by most recent.That problem is too simple to be maintained.If you really need something this complex [this fork](https://github.com/atheiste/django-ratings) still seems to be maintained."
2014-12-20 17:31:08;Creating shared id between rows;"Generate a UUID (`import uuid ; uuid.uuid4()`), assign it to both model instances, then save.Django 1.8 will have uuid support for primary keys. However you can use django-extensions which has a uuid field that's what I use"
2014-12-28 21:50:27;Banning users by IP?;"You don't do this at an app level - you do this on a server/router level.  Why have your app waste any processing time on this when it doesn't need to?You should keep in mind that there are many people out where who share the same IP ... so banning by IP might not be the best choice in general.I've used django-axes before to temporarily lock out a user after a few failed login attempts. By default it locks out per IP but can also be configured to lockout based on IP and user agent. 

https://pypi.python.org/pypi/django-axes/you can take a look at [django-tracking](https://bitbucket.org/codekoala/django-tracking/src/f365cd2d59ef9b8311ee9e15029e574c494ec333/tracking/middleware.py?at=default)You might want to look into CloudFlare. Even their free version will allow you to ban domains and IP addresses."
2014-12-28 17:32:27;to CMS or not to CMS?;"If you need CMS functionality, something like djangoCMS can be a good idea, but it adds another layer to your project.

I definitely use the built-in auth (with social auth plugins) and tend to look for existing packages before rolling my own.

Regarding app separation, it can be tricky, but I have a few ground rules. In your example, i'd separate users and addresses, if they have unrelated functions AND they've got a good deal of code associated with them. For smaller projects, I often make one app, but if it's a bigger project, I'll split things up. Apps are mostly a way to package up related code or re-usable code. Rarely do I find the apps I make to be reusable, so I don't worry too much about how they're split up.  That said, if I write some code that I could use in another project, I'll break it out into its own app.

Hope that helps.If you are looking at something that provides just the basic CMS functionality without getting in the way of your project, you might want to take a look at FeinCMS. It is not a full-blown CMS like DjangoCMS, but provides you with all the basic CMS functionality you need so you don't have to reinvent the wheel.

I have developed projects with DjangoCMS - even created a cart with it once. I would probably not do so again. It works, but it requires you to ""hook"" into it's page system in order to add app-specific functionality, which is not very Djangoesque."
2014-12-28 13:52:55;Terrible choices: MySQL;"Still a better choice than MongoDB in 99% of cases. It has already been said over and over... there are multiple ""MySQL gotchas"" on the net... this is boring subject... and... well... it's like kicking  a a dead horse... but still... you get my UPVOTE! Because MySQL bashing will never go out of style (and this analysis is django-centric, so it brings something new to the table). [Same submission](http://www.reddit.com/r/Python/comments/2qm448/terrible_choices_mysql_for_django/) in /r/Python but with more activity.

I thought reddit would warn me about it being a repost, sorry.Sounds like a better title would have been ""Terrible choices: MySQL Default Settings"".

But meh, it's gotten even more popular to bash MySQL now that it's owned by Oracle.> Storing invalid dates [...] 

> And no, ORMs won't save you from this pain by default.

That sounds like a problem with your ORM, not MySQL.

And I'm pretty sure strings that are too long are not truncated silently. A warning is generated. Warnings should be treated as a failure. I agree it's not an awesome design, but it's not accurate to say data is lost ""silently"""
2014-12-28 09:26:03;Is there a view that handles Multiple Models in a single Template;"You can stuff all your models in the `context` dictionary if you want.class based or function based? It's really quite easy.

    from django.views.generic import TemplateView

    class MultipleModelView(TemplateView):
        template_name = 'template.html'

        def get_context_data(self, **kwargs):
             context = super(MultipleModelView, self).get_context_data(**kwargs)
             context['modelone'] = ModelOne.objects.get(*query logic*)
             context['modeltwo'] = ModelTwo.objects.get(*query logic*)
             return contextAn inline form edition ? 

..  try somthing similar to it 
http://kevindias.com/writing/django-class-based-views-multiple-inline-formsets/"
2014-12-28 08:21:13;"request.POST.getlist('mylist') returns this: [u&#39;2,&#39;]";"I saw that problem once, but the other team was doing something like

    <input type=""hidden"" name=""list"" value=""{{ list }}"">

... which basically was creating a single field with a string representation of the list, while the correct way was
 
    {% for record in list %}
        <input type=""hidden"" name=""list"" value=""{{ record }}"">
    {% endfor %}

Dunno if that applies to your problem here..."
2015-01-05 21:30:01;Django fundamentals from Pluralsight - am I missing somthing?;
2015-01-05 21:11:13;API issues with PayPal;Your is not really a Django question. See [PayPal's Developer Resources](https://developer.paypal.com/webapps/developer/support).
2015-01-05 20:24:27;The Top Python/Django Projects and Articles of 2014;Robobrowser looks awesome. 
2015-01-05 14:13:05;Django API Tools – Run RESTful APIs Alongside Forms/Templates;"Sorry if I'm being ignorant...but what's preventing someone from using, say, DRF without giving up Forms/Templates? Is this really an issue?Any feedback would be much appreciated!If `APIModel` is a subclass of `models.Model` and the only thing it does is ""handles the dictification of instances"", why isn't it a mixin instead? Is it even necessary to have it as a base class or mixin at all? Could it be just a helper function that takes an argument, which is expected to be a django model instance?

I think it's convoluting the standard API of Django to expect users to inherit from your class instead of the normal base class (`models.Model`). For example, what if one has their own custom base class for all models in a project, in order to do some logging.

To take it even further, the same could be said about the `APIView` in respect to django's built in class based views. But that would be a stretch, since views are often so specific anyway that they often can not be shared in a useful way.

Also, how does ""the dictification"" compare to Django's own [model_to_dict](https://github.com/django/django/blob/1.7c3/django/forms/models.py#L114)?"
2015-01-05 04:17:09;Is there a way programmatically add new Models to django?;"I've implemented features similar to this one using a [JSONField in Postgresql](http://www.postgresql.org/docs/9.3/static/datatype-json.html). 

This way you can have your users define something like a key:value schema and store that in a normal database table. What's the use case? The model wont be interfaced by any code, right? So what is the point of the model? Is it just to allow people to enter structured data? Are they importing excel sheets of an undetermined column-set into the app? Can you write a list view to interface the excel sheets instead of trying to automatically add models? I think there are probably ways of doing this, like execfiling a media file or having an on save attribute make migrations and run them, but I think that is all pretty dangerous.

Are you trying to come up with a django startapp wrapper? I might look into generating the files via a wrapper script instead of allowing a user (assume you are referring to auth user) to execute some commands through a web interface to add models.I can sort of see where you are are coming from and my best advice would be DON'T, don't programmatically add new Model, you would be just entering a whole world of Pain.

If you want to arbitrarily add new fields on a model I would suggest instead looking at something like django hstore or using One2Many and storing the ""definition"" in a separate model. You would probably need to make a few compromises but trust me it will save you a lot of headaches.

If you really, really, want to create Model on the fly then you would need to use type(), learn Meta Programming (I would recommend reading the book Expert Python Programming) and understand how Django use the Meta class on its Model. You will probably also need to handle database schema migration by hand and forget some of the automatic niceties that come with Django.

edit, To add: Django is probably not the best framework for this kind of things, I you really want to do that, you should look at more flexible frameworks such as SqlAlchemy. But then again you would lose a lot of the nicety that Django offer, but if you stick to only custom views it would work.Usually its better to just do a key value pair instead of dynamically creating tables.  If it's a ton of data (millions of rows) than it might make sense.I don't think it's a good idea to do this.

I would encourage you to think of problems in terms of trying to allow people do do things, rather than programming technology to do things.

That is, instead of saying, ""How do I programmatically create Django models"" a question that might bear more fruit is something like, ""How would I allow users to create custom records with their own forms and fields?""

Because realistically, even if you *can* programmatically create models, it raises more questions — what do you want to do with these models when they're created?

Should they be accessible through standard list/detail/edit/delete views? Should the users be able to dictate the URL path for these records? Should corresponding admin code be generated so that these models would be accessible & editable under admin?

Would all models be created under a single app? How do you prevent one user from overwriting models created by another user? What happens to old records when fields are renamed or changed from one format to another (e.g. just dates to datetimes).

I agree with /u/metaphorm that a JSON field is your best option. If you want to make it a bit more formalized you could do something like this (this is very rough, I'm not coding it all out):

    class CustomTable(models.Model):
        name = models.CharField(…)
        verbose_name = models.CharField(…)
        slug = models.SlugField(…)

        def get_field(self, field_name):
            try:
                return self.fields.get(name=field_name)
            except ObjectDoesNotExist:
                raise CustomFieldDoesNotExist()

    FIELD_TYPES = (
        ('int', 'Integer'),
        …
        ('datetime', 'Date & Time'),
    )
    class CustomField(models.Model):
        customtable = models.ForeignKey(CustomTable, related_name='fields')
        name = models.CharField(…)
        verbose_name = models.CharField(…)
        required = models.BooleanField(default=False)
        default = models.JSONField(blank=True, null=True)
        type = models.CharField(choices=FIELD_TYPES)

    class CustomRecord(models.Model):
        slug = models.SlugField(…)
        customtable = models.ForeignKey(CustomTable)
        data = models.JSONField()
        created_by = models.ForeignKey(User)
        date_created = …
        date_modified = …
        date_deleted = …

        class Meta:
            unique_together = ('slug', 'customtable')

        def clean(self):
            for field in self.customtable.fields.all():
                if field.required and not self.data.get(field.name):
                    raise ValidationError(""%s field is required"" % field.name)

        def __setattr__(self, field_name, value):
            field = self.customtable.get_field(field_name)
            self.data[field_name] = format_for_field_type(value, field.type)

        def __getattr__(self, field_name):
            try:
                return self.data[field_name]
            except KeyError:
                field = self.customtable.get_field(field_name)
                if field.required:
                    raise CustomRecordMissingRequiredField()
                return field.default

You'd use this as a basis for creating an analog to the ModelForm which reads through the list of fields in a CustomTable and generates the form. You'd also create a set of list, detail, edit, etc. urls along the lines of:

    urlpatterns = patterns('customrecord.views',
        url(r'^(?P<table_slug>\w+)/$', 'list_records'),
        url(r'^(?P<table_slug>\w+)/(?P<record_slug>\w+)/$', 'view_record'),
        url(r'^(?P<table_slug>\w+)/(?P<record_slug>\w+)/edit/$', 'edit_record'),
        url(r'^(?P<table_slug>\w+)/(?P<record_slug>\w+)/delete/$', 'delete_record'),
    )

If searching, sorting, etc. by fields is an issue, you *might* want to consider storing this data using a key:value store that has more expressive tools for searching, filtering, and sorting based on data within JSON. There are a lot of great libraries for Django that interface with these tools.If you want something at runtime, you should use type():

    def create_model():
        class Meta:
            app_label = ""<your app name>""
        def to_string(self):
            return ""my runtime model""

        fields = {
            ""Meta"": Meta,
            ""__module__"": ""<your app name>"",
            ""__str__"": to_string,
            ""__unicode__"": to_string,
            ""field1"": models.CharField(max_length=100), # for example
            # other fields...
        }

        return type('<your model name>', (models.Model,), fields)

If you want a project wrapper/self-modifying code, maybe look at something like redbarron (https://redbaron.readthedocs.org/en/latest/)I have done this once before using meta classes, turned out to be an ugly approach.

If doing it again I would write some sort of model wrapper mixin that overrides db tables with some mapping.  Maybe?

Why do you want to do this..it is probably not a good idea.Look  at this [project](https://github.com/Zagrebelin/smyt_test). It take yaml file like [this](https://github.com/Zagrebelin/smyt_test/blob/master/models.yaml) and generate models in app/first application. It's normal django models: they can be managed via admin site, they support migrations etc.

Unfortunaly this project don't finished, so there are only model classes generations, without any views.I've been curious about this myself and haven't been able to find anything. Drupal's field api is a good example as far as functionality goes. If you mean writing your own custom model fields, take a look at [this chapter](https://docs.djangoproject.com/en/dev/howto/custom-model-fields/) from the official documentation."
2015-01-12 23:47:04;Class based views return object of type 'type' has no len();"We can't help you if we can't see your code.Haven't seen your code. But I can see something like this happening:

    class MyThing(object):
        def __len__(self):
            return 0

    # We are not creating a MyThing here, we are just setting x to the MyThing class.
    x = MyThing

    print(len(x))

    >>> TypeError: object of type 'type' has no len()

When what you really want is:

    # Create a MyThing instance: 
    # (the parenthesis, calling the constructor/initializer)
    x = MyThing()
    print(len(x))

    >>> 0
I used a custom 'MyThing' class to simulate a custom class-based view or some class you've created. The same thing would happen to a builtin that supports `len`:

    x = list
    print(len(x))
    
    >>> TypeError: object of type 'type' has no len()


Again, what you would want to do is this (creating a new list):

    x = list()
    print(len(x))
   
    >>> 0
"
2015-01-12 20:51:24;models dot Model spits chips when i user required true...;"Forms use ""required"", but models use ""null"" and ""blank"" kwargs"
2015-01-12 19:58:45;Calendar to add/show Google Calendar Events using Django;Why not just embed the Google Calendar on your site in an iframe?Do you have two way communication between your django app and google calendar? What happens when the calendar gets modified from the google calendar web interface. How will those changes be updated in your django app?[deleted]
2015-01-12 17:35:00;1.2 added BigIntegerField, but there is still no support for using bigint as auto increment primary key and foreignkey. Does anyone know of a recent hack for 1.7 to get this feature working?;"Ironically I ran into this issue a few days back when all of the sudden there were mysterious ""data formatting"" errors showing up in the logs and data stopped to be saved to the database. Some weird script used up all the 4-byte integer values and that led to some constraints failing while saving data. Took me about 4 hours to hunt that down.Qhttp://stackoverflow.com/questions/2672975/django-biginteger-auto-increment-field-as-primary-key

If it were me, I'd so this, which I believe to be 100% valid and perfectly acceptable. 

Any reason for not using something like this?So am I understanding that you have more than `2147483647` rows in one table? Out of curiousity what are you storing?"
2015-01-12 06:52:26;Chatting apps in your django project, write your own or dig up a bone?;"are you sure django is the right tool for this job?

Whenever it normally gets discussed the consensus appears to be use Tornado instead as it does async stuff better than django

I've not written a chat app, so this is only from what I've read on reddit and SOIt depends.It depends on how the chat app is supposed to be used.
There are loads of services that does the ""live chat"" on websites for support questions, but if you want a multi-user chat (like a chat room or such) then writing your own chat can be a fun project (I've written a few over the years). 

Last one I did took only 14 minutes to put together (then I spent some more time on it poking around with the design etc.). It's not particularly impressive looking but it does the job and it did handle a lot of traffic (~1500+ users on one day without problems, which of course is not the same as 1500 users at the same time).

If you want to write your own you can check out: 

*  http://swampdragon.net <-- easily do ""real time"" with Django 
*  https://github.com/jonashagstedt/swampdragon/tree/master/chat_example  <-- chat example

The example is a bit outdated but the things that matters there are the routers (https://github.com/jonashagstedt/swampdragon/blob/master/chat_example/chat_example/chat/routers.py) and the JS"
2015-01-19 17:12:52;How do I write method attributes in a model class to the database?;[deleted]
2015-01-19 14:24:49;Possible to add something into the middle of a for loop?;Use a counter (`forloop.counter`). This is right in the docs: https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#for
2015-01-19 11:51:30;How to Consume REST API Data with Django & Python Requests;[deleted]
2015-01-19 07:02:07;any library like Motor for asynchronous with Django?;"Gevent or eventlet.I've used Django with postgreSQL.  It's been a while, so this may be archaic at this point; but I used celery (djcelery) for asynchronous tasks.  It wraps rabbitmq.  It's super simple to use and well documented/supported.

I apologize in advance if this was not the question.Aymeric Augustin had a great talk about async Django. The short summary is that at this point, it basically doesn't work yet. https://www.youtube.com/watch?v=gS8bG2aJEHw 

Django with postgresql can be very fast and can handle a large number of requests. I'm not sure how you define ""efficiency"", so I can't speak to that concern.

Edit: To clarify ""it basically doesn't work yet"", it's not, nor likely never will be ready for production use."
2015-01-19 04:10:48;Celery vs. Huey vs. other?;"Author of huey here. Huey is extremely lightweight in terms of code / resources as well as set-up. Huey has all the features you'd expect:

* Delayed task execution via decorator
* Periodic / cron-like tasks
* Scheduling tasks to run at certain times or after certain intervals
* Automatically retrying tasks that fail
* Storing task results
* Multi-threaded workers

It works very well with Redis, and for prototyping you can use SQLite as well.rq will be much lighter. Celery will be there when you're ready for something more heavy duty.I've used rq for the same purpose on a simple Flask app, and it worked perfectly.celery is very well-suited to this. It can be ""light"" if you only use what you need. You won't incur additional expense for any of the other things that it can do that you aren't using.

The docs are excellent, the community is very active, and it's a very battle-tested setup. You won't hurt by going with celery.

I can't speak for the other alternatives listed, but celery is, at its core, pretty freaking simple to use: http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html#applicationAssuming your app is only running on a single server then, for your particular case, I would use django-rq.

As a bonus, the author of django-rq has another useful app relevant for you: https://github.com/ui/django-post_office.  (Although I confess I haven't yet used it in any projects, so can't really vouch for it.)

Also, since you mentioned ""lighter weight"" you might want to do some research on queue semantics and guarantees to help you pick one that meets project requirements.  One starting place would be https://www.rabbitmq.com/semantics.html (and sorry, it's late so can't search for a similar redis page). Lighter weight doesn't really matter if it's going to be a potential cause of breakage in your app.  For your case (sending emails asynchronously) I think redis should be fine. It's then your choice to decide whether celery+redis is heavier than django-rq+redis.
I recommend Celery, it's not particularly difficult to use.did you decide on anything by now?"
2015-01-26 22:06:02;[Beginner] Confusion about django-rest-framework mixins;"Hi. I think you need to read up a bit more on what Mixins are and how they work. Essentially, they provide re-usable code without the need for a super/parent class. Remember that Python performs multi-inheritance.

The purpose of the ListModelMixin is to mix it in with a concrete class e.g.

    class UserList(generics.ListAPIView, ListModelMixin):
        queryset = User.objects.all()

If you read the docs for GenericAPIView, you will see that this implements get_queryset(), filter_queryset() etc. ListAPIView is a subclass of GenericAPIView

Hope that helps"
2015-01-26 15:52:23;keep a local postgre or connect to the server?;"On projects with db specific features i use a local dev env. On simple projects i use sqlite locally. I dont think trashing your prod / stage is a good idea.   Something I overlooked when starting with PostgreSQL, due to seeing suggestions to use fixtures often enough to think they were the easiest way to transfer data around for testing, staging, etc, is that psql has a few commands for directly duplicating a db. Discovering this in the psql docs made it a lot easier to switch from local SQLite to local postgres db exactly as it was on production/staging. I don't know if this is the most recommended way to keep environments similar, but it sure is simple and doesn't include the occasional headache of fixture pruning. I vote keeping a local postgres, it's almost as easy as sqlite and gives you the warm and fuzzy feeling of environment continuity.It depends upon what data you need to be common between your dev and production environments.

For any data that must exist for the application itself to function, you should create a fixture of said data and import that fixture as part of your deployment process.

User accounts, for example, are generally not something you should be putting in fixtures. You should assume those will be created from scratch on your production environment.

Further, any data you need for testing should be put into its own fixture so that during builds or deployment you can test your project, and then blow away the test data as needed.

Any other ad-hoc data you have does not need to be part of your deployment anyway, so you can just ignore it. For example, things in your migrations tables should never be moved to production. Production deployments should run their own migrations and populate their own tables.I always use a local postgres cluster. That way, I can never accidently destroy any data in production.

To get realistic test data, I use production backups, which has the added advantage that your backups are effectively tested and can be restored!"
2015-01-26 15:22:39;django-sheets: Use Google Spreadsheets as a backend for your Django templates;"How bad is the latency?

Maybe I'm missing something but could you explain a set of circumstances where this would be something you'd want to do?  

My templates live on the same hard drive as my django environment, why would you put them elsewhere?
Do you have future plans to use google docs as the engine behind django models?Why would you want to do an external API call at the template level? This sounds like putting your logic at the wrong level.Sir, 

I like your style!

saved."
2015-01-26 11:14:08;serving django app using gunicorn & nginx gives 502 Bad Gateway error;"I remember that very often the issue is that nginx doesn't have access to the folder that contains your app. Make sure to chown and chmod it correctly and then restart nginx.Have you configured ALLOWED_HOSTS in your django settings?
https://docs.djangoproject.com/en/1.7/ref/settings/#allowed-hosts

This can't be empty if DEBUG is False.Post the output of 'tail -500' of your nginx and gunicorn and django logs.       from multiprocessing import cpu_count
    /etc/gunicorn.d/gunicorn.py:3: RuntimeWarning: 
    Parent module '/etc/gunicorn.d/gunicorn' not found while handling absolute import

Looks like this is what's going wrong.

Do you use a virtual environment? It doesn't look like you are activating a virtualenv in  `-etc-init-gunicorn.conf`Are you sure that the pythonpath param passed to gunicorn can be relative ? If it's anything like the PATH, it should be absolute.I'm having this exact same issue. Did you figure out what was wrong?"
2015-01-25 12:07:27;Django 1.7/8 github projects to get inspiration and use as reference?;Here's an example store we maintain: https://github.com/mirumee/saleor
2015-02-02 15:10:33;Oauth in Django?;"Django-allauth is the package you're looking for. can you be more detailed about the assignment and your technical requirements?

i'm looking at the [python api example](http://nationbuilder.com/python_api_example) and its pretty straightforward. once you've got the session object initialized there that's it. you're done. that session is logged in to nationbuilder and you can make api requests through it. this is a session on another web service, its not a django auth user login session. something analogous, but not the same. 
I'm a big fan of requests-oauthlib. It makes dealing with oauth a total cinch. Try django-social-auth"
2015-02-02 08:51:17;Thank you r/django for helping me build my first web app!;"Super cool! Looks great too (props for using Skeleton). One nitpick: try using 4 spaces instead of tabs (you can usually configure your editor to handle this automatically). Also, is there a reason for the URLs having `/home` prepended to them (I'm guessing this is a pythonanywhere thing)?

Have you read Two Scoops of Django (the latest 1.6 version)? There's some good info in there. Checked into your models, a few things;
Do not use `len(query)`. `Use query.count()`.
In python you can use `3 <= total_posts < 7`. Well done to be your first project. I would clean up your `views.py` a whole lot, there's alot of repeated code :-)Looks fantastic. I could see this site catching on.I deployed my first django app too this week.  Congrats!  Love the design.The site looks great man. How did you come up with the styling for it? I think the minimalist approach is quite nice for this type of site. I'm horrible at design and colors tho -_-I love your site! I'm a really new user to Django, I'm trying to learn it for a distributed applications class and it's hard trying to track down information on what everything is and how to use it.

So, how did you learn everything? I'm lurking this subreddit, but is there anything in particular that was very useful?How fun! I think I'd like to try Django. I've been stalking the subreddit and I like your page. Not exactly an error but you could reduce the number of checks in 'models.py' by reversing the order of checks.

    if total_posts > 100:
        rank = 'enlightened one'
    if total_posts > 65:
        rank = 'community leader'

And so on.. if you start from 0, you need to define an upper boundary as well so that is 2 checks to define each rank, which is kind of redundant. Moving on, you don't need to define rank. If a check returns true, simply return the string. At the end of all the if-statements, return 'young grasshoppa' since this will only return if none of the checks are entered. Again, neither of the suggestions I made are actually errors on your part. I am just saying how I would have wanted my code to look like if I wrote this. :)

In 'views.py', you could shorten the function 'get_user_rank' as follows:

    def get_user_rank(post_list):
        return 'young grasshoppa' if len(post_list) == 0 else post_list[0].user_rank()

Instead of your 5 lines inside the function, here is only one line with basically the same work done.

Love the site design. Well done. "
2015-02-02 06:47:17;Initial migrations didn't happen in the correct order?;"No, Django runs migrations in an order constrained only by the dependencies (past that, it's nondeterministic and shouldn't be relied).

I'm not sure if you're talking about Django 1.7/1.8 migrations here or South, they're different - I suspect the built-in ones, as sites has migrations, and you refer to the post-migrate signal rather than post-syncdb.

Post-migrate is indeed called only after migrate has finished running; I'd definitely suggest writing a data migration (generally I'd advise against using signals to trigger data creation; data migrations are far more predictable and discoverable for other maintainers)."
2015-02-02 06:20:32;How can I run the Mezzanine development server on a port other than 8000?;"It's a Django project, so you'll find that info in the Django documentation. To run on port 8001 use:

python manage.py runserver 8001
"
2015-02-02 02:26:45;template tags within tags;This isn't an answer to your question really, but do all of that in the view and pass the modified data/list/object in the context instead.  Leaving a bunch of logic in the template is harder to find and maintain.  Not an answer, but we recently switched to jinja2 at work, and you can write macros (functions), which can take arguments and even have default arguments. I was never a big complainer about the Django templating language, subscribing to the notion that the template language really shouldn't include much logic, but after switching to jinja, I can't imagine ever wanting to go back.    {% with 'foo' as foo %}
2015-02-09 20:41:09;Empty form values when moving single-page form to multi-page using Django Form Wizard;"When you say it is in the POST data - where exactly are you looking? It would probably help to see some code.

My inclination is to check if you've overridden the ""get_context_data"" function erroneously. I've also overridden ""get_form_initial"". I don't remember ever having such issues, though.

You're not using AJAX at all, are you [maybe left over code]?

Happy cake day! Maybe this is one of those ""is it plugged in?"" stupid questions, but, are you supplying the same form to each page of the wizard? If so, you'll have empty fields for any that you aren't rendering and filling out, and those will fail validation. You should have a new form that is only for one page/template each (only those fields). Split your old form into several, either create new forms, or subclass and override fields. Then you'll provide the form wizard the list of forms and templates like in the tutorial. "
2015-02-09 06:41:52;[SO] Django Rest Framework - How to nest several fields in a serializer ?;
2015-02-09 04:04:12;Use a decorator to manage saving Django model instances from model methods;Seems like an uphill battle, but I haven't ever maintained a large django codebase so I'm not sure if using the django TestCase everywhere and rolling back transactions ends up eating enough time and being otherwise intractable enough to warrant writing all of your code in this style. It seems like it would get impossible quickly with things like `ManyToManyField`s since you don't have an id. Can you parallelize your test runner? Can you switch engines while running in a test context? Can you profile other pieces of code to make them faster (django for example recommends switching the password hasher to md5 in the testing context). My current holdup is having to test javascript functionality with selenium which makes the test suite almost 3 minutes (including calls to an oauth provider) so before I go swapping out `django.test.TestCase` for `SimpleTestCase`.[deleted]
2015-02-08 21:34:00;Contact form and sending confirmation on page.;"There are plenty of ways to do this, you're correct that a redirect to another page is wasteful since you just want to change the text. You can do it in Javascript if you aren't already loading Jquery on the page but it's far easier with jQuery, your choice really.

You can use the html method in Jquery to change the text of whatever is in the div, or you could have a fun little animation that hides one div and then uses show on a hidden div beneath it.  You can experiment with what looks nicer, but your answer lies with javascript and Ajax.

You will need to use Ajax BTW to prevent the form button from redirecting on click when it posts the data.  It sounds scarier than it is, you can hook this all up with less than an hours worth of reading and toying around :)

Good luckdjango-ajax-forms?Will I'm a noob with django but you can pass variables to the template. So just hide the form div?You'll have to make the send button use ajax to send the form information. You can then add an event listener using Javascript/jQuery to the send button that will show the thank you div.  

You could redirect to a thank you page as well if you want to avoid Javascript.Use ajax. There are multiple extensions that supports this very well.

https://github.com/yceruto/django-ajax is my favorite, but I've also used https://github.com/jorgebastida/django-dajax . Good luck."
2015-02-08 19:46:43;django-registration and multiple user profiles;Don't use django-registration. It is no longer maintained. Use django-allauth instead.
2015-02-16 21:59:25;Django Baker - jumpstart an app by auto-generating views, admin, urls, forms, and templates;Sounds like RoR scaffolding. Never could get into it. If someone is looking for something that does this with REST APIs, [conduit](https://github.com/akoumjian/django-conduit) has an auto-API feature.Looks like a baby version of cookiecutter-django.I think this seems really useful, thanks for releasing it. I'll definitely have to use this next time I get a fun idea, save a good bit of time instead of having to re-reference docs :)How often are you starting new apps that this requires optimization?
2015-02-16 20:29:34;Django rest framework and resolving domain name with hyperlink serializers.;Unless you custom the fields in some way then the URLs in the outgoing representation will use the same hostname as the incoming request.
2015-02-16 16:38:00;Adding Real-Time Push to Django Applications;
2015-02-16 15:29:56;Use Django-wiki with existing user db;Just for the record, I fixed this by deleting my complete browser history - I still had some cookies from an earlier wiki I installed. 
2015-02-16 13:14:18;django-hijack 1.0.4 is out and comes with official (and tested!) Python3 support!;Any commentary on how this is being used in the real world currently? I can think of nefarious reasons...but am trying to find some more legitimate use cases. 
2015-02-23 16:02:52;django-backward, store previous history and action and redirect correctly you users after authentication;
2015-02-23 14:39:03;Question: How to access user data in a view from Django-allauth;I'm pretty sure that's going to be something you'll need to do via the Nationbuilder API, and not Allauth.
2015-02-23 12:39:11;Looking for a forum with a mailing list integration.;
2015-02-23 11:25:13;what does django offer that rails doesnt?;"For me it was primarily the choice of Python over Ruby. Ruby to me is just not my language. It looks odd and isn't as easy to pick up. That said I haven't spend much time with Ruby to say it conclusively.

I think it is more important to just pick something you like and hopefully popular (so you can transfer that skill to a job later). Everything has a drawback and positive. 

The one thing I am envious of RoR is that it has a nice API documentation. Digging through Django docs isn't as nice.Apart from the great documentation Django has a few features that really appeal to me:

* Database migrations by just updating the models
* Applications broken up into a reusable fashion like python modules
* Great admin interface that both helps with development and testing, but is suitable for production use.Two main things:

* Django as a system is more loosely coupled. This means that all of the subsystems that make it up are less reliant upon one another and can more easily be swapped out or modified when they aren't up to scratch. I don't know if it's true any more, but in the early days, if you wanted to do any half way complicated queries on the database, RoR's ORM was a huge impediment, whereas while django's couldn't handle every complicated SQL query (and still can't), it was easy enough to drop in SQL in the places where it couldn't with a minimum of fuss.

* Django relies less upon 'magic', especially after the 2009-2010 de-magification. See here for some idea of what that means: https://stackoverflow.com/questions/441717/whats-wrong-with-magic

Apart from those I would say the two frameworks are more or less equivalent. They both seem to have a similarly sized ecosystem. e.g. when you want a plugin that does, say, facebook integration or an admin panel they will both have one.

I lost a lot of respect for the Ruby/Rails community also, after the YAML security hole debacle. THIS shit was absolutely goddamn unforgivable:

http://www.kalzumeus.com/2013/01/31/what-the-rails-security-issue-means-for-your-startup/

That's not a normal security hole either. That's a ""we *forgot* that the *specification* of YAML defines a parser that allows you to run untrusted code by default"".I looked at Django, Rails, and others when I was looking for a framework. I settled on Django due to the documentation and the way it encouraged you to break stuff up into apps.

Other than that, I don't think one is necessarily better than the other. The best tool is whatever helps you do your job better.Python. :) Rails vs Django is more of a Python vs Ruby debate for me. 

Other than that, I've always felt that Django's ecosystem is much better than rails. Almost, everything is compatible with everything else. Rails apps/modules tend to monkey patch a lot of stuff which breaks 3rd party modules often. I hate that. If I choose a pagination library, it should not break my template library. That happened to me on rails.

I've also felt that Django people are much quieter about cool things they do while as Rails people often blow thing out of proportion. They market very well. Django community also tends to focus only of core technologies as far as the framework is concerned and let the community build around it. For example, asset pipeline still extremely primitive in django while as it kicks ass in rails.. but I like the django way. It exposes a very nice API that 3rd party apps can use to create custom asset pipelines.


Both are great but django communities philosophy fit my world much better than rails.No ones mentioned this yet but for me it's about the scientific community. For a decent amount of academic and commercial research work Python is becoming a more recent leader. Libraries like numpy, scipy, sklearn, graphlab, and dozens of others make it an obvious choice for any mathematically inclined or research oriented task. And when you need to turn your results loose on the web, Django gives a decent option for that. Ruby is certainly capable, but I might as well stick with the community that's been building for some time around Python.As others have said, it's mostly a Python/Ruby debate. 

I stuck with Django after bouncing back and forth between the two. As a current job seeker, I think Python is a more valuable skill than Ruby. Ruby = Rails, but Python is so much more. 

I'd say there's strengths and weaknesses to both frameworks though. I think a seasoned rails developer can do a lot of things very quickly due to all the ""magic"" in rails, and I think it sticks to the MVC paradigm better. But Django has excellent documentation and is easy to jump into, and it doesn't seem to be dying out like rails is.Beeing a, old-timer (yet almost retired) django user, I've been approached several time for Rails and Symfony projects, and tried (at first) to give it a serious try.

At first, there's the laguage. Python is so practical, as snippets or large projects, self-documenting, with test driven developpment in mind, that it feels much more natural. It's also portable, reasonably fast (yet I still write Cython to speed-up some apps, but that's for specific use-cases), and has a tremendously large codebase to build on. I'm talking about _reusable_ (i.e. documented and maintained) libs, modules and extensions.

Yet, my view might be biased by the fact I mostly work on network, GIS and accounting related projects. I often don't need a fully featured web framework for those but still, django is so practical and versatile I sometimes build CLI apps off it. Mostly thanks to PostGIS/GeoDjango in my case.

For accounting, I'm used to work with OpenERP codebase mixed with Django custom models, and it's been a time-saver everytime.

Now, I don't like the way Django evolved the past 2-3 years. It feels kind of bloated now, with so many contribs joining trunk, and newcomers tends to miss the best part of a reasonable framework model : modularity. Or, as it used to be, extensibility.

I guess it comes with age, most frameworks I've used over the last 20 years ended up with similar issues. But still, Django _is_ useable and a productive tool.Mentioned below it was about the de-magification, but specific example to give is routes: Rails you guess, Django implements strict.

As well, the cultures surrounding each language seem to inherit from the framework creators. DHH v. GvRRight now I have 3 apps that I did with django entirely because of the python libraries. The first two are based around python pptx and the last is based around xlsxwriter. I've been promoted twice because of my work over the past two years and I could not have done this with ruby on rails.Django community is much smaller than Rails'. Hard to find jobs in lot of countries (at least in Europe)"
2015-02-23 05:03:37;How to create this model? Only one entry for given date?;"There will be two versions in the same date, if there is a hotfix applied in the main branch for some bug fixes. Hence, it is better to use a unique set of Date and Version Number. 

[Django Model Meta Options](https://docs.djangoproject.com/en/1.7/ref/models/options/#unique-together)Use unique=True on the DateField?"
2015-03-02 17:45:22;UWSGI vs Phusion Passenger;"Use uWSGI.  It's fast, easy to use, convenient and offers tons of throughput.  I've never tried Passenger with Python code (cause it isn't listed as a supported language on their site), and while there were a handful of folks using it a few years ago (before uwsgi really hit its stride), I don't know of anybody that's still doing it today.  

uWSGI is the recommended choice for pretty much all scenarios I can imagine with Django/Python, especially if being used alongside gEvent. I use uwsgi/nginx and gunicorn/nginx for django apps on production servers. Both of them works good.Been using Gunicorn successfully myself."
2015-03-02 11:35:27;Test your Django web apps with Selenium;Selenium is a testing framework for web frontends. There's nothing Django specific about it or in the article.
2015-03-02 11:22:33;Beginner: How can I implement this star-rating app in my Django-project;"It sounds like you might be better off coding your own simple ratings app. This one hasn't been updated in over two years and is likely more complex than you need. If you really want to use something third party, look for a maintained fork or an alternative. 

[Django Packages](https://www.djangopackages.com/grids/g/voting/) is usually a good source for finding alternatives, though not sure there's a lot out there for rating systems.

I would also encourage you to look through the code for django-generic-ratings to get an idea of how it works. If you decide to build your own then use it for some ideas of how a rating system could work. Think about whether you're only going to rate the one object type (videos) or if you might want to rate other things. If only the one, you could might  be able to get by creating a rating field on that model and limit it to a choice of 1-5. 

If you think you'll rate other objects or want to do more complex ratings then you'll want to create a separate Rating model and use a Foreign Key field to connect a Rating to what is being rated. This would also be necessary if you have multiple people rating an object, since you need to tie a Rating to a User as well. 

*Where are the templates being generated from?* It looks like django-generic-ratings is using [templatetags](https://docs.djangoproject.com/en/1.7/howto/custom-template-tags/) for most things. 

"
2015-03-02 04:07:46;I having trouble with append() in this ajax post;"You should pass an html element to `.append()` because it operates on the DOM tree. So it appends a node or nodes under a certain node in the DOM tree.

You can do several things based on data you are returning from the server. If data is an html snippet that you want to show in `#div1_mail` then you can just do `$('#div1_mail').html(data)`.
If data is some json then again you might need to do something else entirely.* /r/jquery 
* /r/javascript 
* /r/learnjavascript 

Just because something is web related does not mean it belongs in /r/djangowell this is /r/django, not /r/jquery... 

but it would make sense to me to switch your functions to .html().append(data), but that might be entirely wrong."
2015-03-02 01:50:51;[Help] Upgrading to 1.7? First time doing a django update.;"Django has [fantastic notes](https://docs.djangoproject.com/en/1.7/releases/1.7/) for upgrading between versions, and it's usually painless. 1.7 is a special case because it introduces core migrations. 

If you're currently using South to handle your database migrations, then you probably want to move to using core migrations. Take a look at https://docs.djangoproject.com/en/1.7/topics/migrations/#upgrading-from-south. If you don't know if you're using South, try `python manage.py migrate --list` in your Django 1.6 project. If it lists anything, you're using South.

If you're not using South, then you're going from using no migrations, to using core migrations. Check out https://docs.djangoproject.com/en/1.7/topics/migrations/#adding-migrations-to-apps.

When you're ready to proceed, update your virtualenv's Django to 1.7. If you're not using virtualenv, `_PillzHere_` is right -- use it :) When your Django is upgraded, try out `python manage.py validate`. You'll probably get some errors. Use your mighty programmer powers, and the upgrade notes, to figure out what's broken and how to fix it. 

When `validate` is happy, follow whichever migration docs I mentioned above are appropriate (south->core or nothing->core). To be sure your production data survives, pull down a dump to your local database and try running your migrations against it.Judging by the way this post was written, I'm guessing you're not using `virtualenv`. If my guess is right, you should read up immediately on how to use `virtualenv` and then use it for your website's environment. Once you're using `virtualenv`, updating Django is as simple as `pip install --upgrade django`.I haven't used webfaction before, but what you probably want to do first is check if your apps actually run under 1.7 locally. As there code and API changes between versions things are known to break. Plus packages you may be using can be out of date and unsupported on newer versions of Django. Update those and their implementations as needed.This is covered in the [Real Python](https://realpython.com) course in great detail, if interested. 

(Note: I am the co-founder/author).

The biggest thing your should be aware of is [migrations](https://realpython.com/blog/python/django-migrations-a-primer/)."
2015-03-09 20:43:32;Django & Distributed Computing / Scaling?;yes, its a good idea to have your workers running on their own machine, provisioned with sufficient resources (memory, CPU power, etc.) to complete their tasks as quickly as possible. you don't want to bottleneck yourself with a CPU resource contention problem on your app servers. let the celery workers run independently of that.Which package are you using for the websockets part? (just curious).
2015-03-09 20:11:47;I want to build a reusable CMS application. This is, however, much bigger than anything I've built before. Come fact-check my ideas?;"It sounds like your experience with Wordpress is influencing your idea of how frameworks like Django with clearly defined separations between code and templates work. 

Isolating your front end from the backend and making them talk via an API is a common pattern, but a bit of JSON is not going to give you anything more than Django gives you already and will give you lots of new interesting problems that will negate any ideas you have about nice clean code and simple solutions.

I think you're also overlooking a lot of the things that make a CMS useful. Storing and retrieving the page content is a tiny part of what a CMS does.I, too, come from a PHP/WordPress background. I'm not going to discourage you...but you should at least try Wagtail, Django CMS, and Mezzanine before diving into your own CMS. ""Hearing"" they're all pretty bad is a poor excuse for not investigating.

FWIW...I find Wagtail to be an amazing breath of fresh air."
2015-03-09 16:31:47;Security releases and advisory issued Django 1.7.6 and Django 1.8b2 | Weblog;
2015-03-08 22:13:03;How do you guys handle paid accounts?;"You'd want to use groups. 

https://docs.djangoproject.com/en/dev/topics/auth/There are several ways you could do this, in varying degrees of complexity.  
A simple way would be to use user Groups. You could create a Group for each payment level (if there are more than one). When a user pays, you assign the appropriate Group to them (user.groups.add()).  

Then you add a decorator to your view methods that redirect the user if they are lacking the appropriate Group (payment level) to view the page. What I did....

I used Stripe to handle the payments, and created a Subscription model with a termination_date field, and is_active. Every day, a cron job fires up and checks if any active subscription are past termination and if so, then sets is_active to false.
Check out django-guardian for a good row based ACL plugin. Used a combination of webhooks (Stripe) and Groups.

Each subscription level was a different group and you could have different views for each one. You can also do inline differences in both the view and the template if need be.

Using Stripe's webhooks you can update your user if they don't pay and mark them as inactive. You may want to give them a grace period of a few days and remind them that they should update their credit card."
2015-03-08 19:59:00;Is Django what I need?;"Sounds like django will work well for this. You may want to look into django-rest-framework, if you haven't already. It'll make interfacing from the app easier.Django + django-rest-framework + django-celery will do this for you.

Django as the core and primarily for declaring your models

Django-rest-framework for allowing easy RESTful API interaction between the app and the django app

Celery for defining cronjob type tasks to be run periodically

All these components bundled up and running with Gunicorn, smells like success already So... yes. You can use a django REST framework to do this. BUT you'll have to handle situations where either the django app is down or (more likely) there is some form of connectivity problem or latency with the device.

It might make more sense to build your app around interacting with a 3rd party service and then letting that 3rd party service interact with your servers/database/etc.

Here are 3 services worth looking into:

https://aws.amazon.com/cognito/

https://developers.google.com/games/services/

https://www.parse.com/"
2015-03-16 21:27:20;Help with outputting errors in django forms;"I think your clean method should actually be called cleanPassword2.

A method called clean relates to the entire form and your not displaying {{form.errors}} anywhere. You're just displaying the field errors.

Renaming that method should make it a display a field error next to password2. So i have two different version of the html doc and have been trying to output errors, specifically the clean function defined in the models.py which checks if the entered passwords are the same. 
I've been working with these django docs to attempt to figure it out but nothing has worked so far https://docs.djangoproject.com/en/1.6/topics/forms/"
2015-03-16 20:27:15;Is your website kind of like a marriage that you are always working on?;Mine is a poor lost soul who was traumatized by abandonment and torn between cultures. I'm slowly weaning it off its feral PHP ways. Someday it will be fully capable of living in modern polite digital company. Unfortunately it has to do this while getting tens of thousands of hits daily...I just ignore any problems with it and hit the gym 
2015-03-16 15:34:17;Need MVP Landing page created with simple form that connects to OAUTH2 Google Analytics - $100;"[deleted]Not everyone here is a ""guy""."
2015-03-16 14:55:30;django-sequere, implement your own follow system and a timeline of events using multiple backends (db, redis, ...);This might actually be interesting.How are timelines stored in Redis?
2015-03-16 09:14:27;Why do I get a keyword argument 'label' error on this form?;"Check the documentation in the last few versions of Django the way model forms are laid out has been changed.

https://docs.djangoproject.com/en/1.7/topics/forms/modelforms/#overriding-the-default-fields

    from django.utils.translation import ugettext_lazy as _

    class AdvertisementForm(forms.ModelForm):
        class Meta:
            model = AdvertisementModel
                fields = (
                    'ad_question',
                    'ad_image1'
                )
                labels = {
                    'ad_question': _('ad_question'),
                    'ad_image1': _('ad_image1')
                }

That being said the labels will be the name of the field by default
[This should help](https://docs.djangoproject.com/en/1.7/ref/forms/widgets/#specifying-widgets).

You're using the Widget directly on the form.  The Widget is an attribute of the Field.

Here's the code from the docs, for the click-impaired:

from django import forms

    class CommentForm(forms.Form):
         name = forms.CharField()
         url = forms.URLField()
         comment = forms.CharField(widget=forms.Textarea)

"
2015-03-23 18:58:05;Basics of REST and django-tastypie;Could you redo this tutorial using DRF?
2015-03-23 17:44:49;Scraping with BeautifulSoup;"Unless you're scraping Asynchronously it's not a matter of BeautifulSoup scraping the data too fast.

Beautiful soup can be passed a number of different objects to do it's thing, you can pass it raw html or an open file object.  Chances are you're passing it the raw html from some http library (like requests).

What you need to verify is whether or not the http library that you're using to get the raw html is actually returning data.  Some websites will actively block headers from known scrapers so I imagine that's what you're seeing, but it's simple enough to debug ... read the html response into a variable then log out that output as well as the status code and make sure you're getting a valid response.  Chances are the request is just being blocked.

if the content is generated in js you can try casperjs/phantomjs, although I never used it with python/django only standalone but it's pretty much a programmable headless webkit client"
2015-03-23 14:39:52;Project Feedback;
2015-03-23 05:44:35;[Question] Type error: password using a form is not being captured;"When you use `.get` you shouldn't use square brackets `[]`, rather parentheses `()`. Change both of the `.get` lines to:

    username_input = request.POST.get('username')
    password_input = request.POST.get('password')

`.get()` is a method which requires you to pass a keyword as an argument. Read about it [in the official docs](https://docs.python.org/2/library/stdtypes.html#dict.get).That's because it's request.POST['username'].

When post you use request.POST[key]
When get you use request.GET.get(key)"
2015-03-23 02:36:07;Django and PJAX help;Can you be more specific?  The ReadMe in the repo seems to cover everything pretty well.  Use [jquery-pjax](https://github.com/defunkt/jquery-pjax) on the front-end to handle the requests and then decorate the views that you will be requesting with `@pjax_block` or set up the config variable `DJPJ_PJAX_URLS` if you want all URLs of a certain pattern to work.Maybe its just me...but I'm not seeing much advantage of using this package over plain pjax. In most cases, you should be fine using pjax by itself...
2015-03-30 18:45:29;Trouble figuring out good way to change order in a list;The 'refresh and it still does it thing' is why we say 'Always redirect after a post!' that way your current action is not still post. So, do it! Always redirect after post.
2015-03-30 02:54:56;What is the best way to create a system where users can share private objects;"you probably want a many to many through relationship, where the through model has (user_id, object_id, permission), and permission is some sort of indication if they are the owner, creator, editor, or just viewer (Not sure your exact business needs).

https://docs.djangoproject.com/en/1.7/topics/db/models/#extra-fields-on-many-to-many-relationships"
2015-03-30 00:17:13;Explain Django static file management to me (runserver vs deployment)?!;"Sounds like you've got it more or less right. When you run Django as a WSGI service, it won't serve the static files for you like it does in `runserver`. Standard web servers are better at that sort of thing. The documentation for these variables will likely cover this better than I could.This post is a bit long, but answers most of your questions: http://agiliq.com/blog/2013/03/serving-static-files-in-django/http://blog.doismellburning.co.uk/2012/06/25/django-and-static-files/ My favorite blog post on the subject, very comprehensive and easy to understand.Im learning as well, good questionIn every app you have a static dir. When in development mode (runserver) you're trying to access STATIC_URL (see in your urls.py), Django one by one search through all these static dirs to find requested file and serve it by django.views.static (should be enabled only when DEBUG = True). But this could be way too long on production, so we have manage.py collectstatic command, which collect all your static files in your STATIC_ROOT (it's file path on your computer).

So, yes you're basically right, except you can omit STATICFILES_DIRS at all, because 'static' dir in every app.I'm gonna sound like a dick I know, but how's that not enough? https://docs.djangoproject.com/en/1.7/howto/static-files/Yes, that is correct. One thing to keep in mind is that Django's static site is only meant to be used as a convenience during development; once you set `DEBUG = false` in `settings.py` your static site will be disabled. For serving static files during deployment, it is best to serve them directly through a reverse proxy like nginx. [Here's](http://stackoverflow.com/questions/2451739/django-serving-static-files-through-nginx) a good link explaining how to do that in case you're unfamiliar."
2015-03-29 15:31:02;Django app Github structure;"Just to verify, you only want to release a standalone Django App, and not an entire project?

We had this problem at my startup, so we actually made a template that anyone can use to spin up an open-source Django app that has ReadTheDocs, TravisCI testing, a setup.py that is ready for PyPI, and other things built in from the start. The README has instructions on how to spin it up. Hope this helps!

[Django App Template](https://github.com/ambitioninc/django-app-template)

Oh BTW - we haven't tested the template with a 1.7 app yet. Still in the works of migrating all of our apps to 1.7.It's mostly personal preference. Ideally, Github repos are identical copies of your actual project. In this way, you'll be able to simply do a `git pull` or `git push` and run your app immediately. Whatever you do, don't organize your app specifically for Github.

*Two Scoops of Django 1.6* has some good info of packaging reusable apps.Ideally, you want to put your project itself under revision control, and if you have developed any apps that can stand on their own, they should be put into their own separate repository as a standard setuptools-style package.

That way, you can include your app in a pip requirements.txt file, and refer to your app's repository.A Django ""project"" is, essentially, a settings file, root URL file, and WSGI file.

That's it. Really. Everything else can live separately.Had written a heroku specific django project layout template, mostly for myself, see if you find it useful in case you are planning to develop with heroku as platform...
https://github.com/abhimskywalker/heroku-django-template"
2015-03-29 15:13:55;Working with big data...;"First of all, if you are uploading CSV data in a browser, I assure you this is not [big data](http://en.wikipedia.org/wiki/Big_data). If you want to plot even 100k points though, I wouldn't place that burden on a client side library. Matplotlib is a good choice, but you might need to use celery or something if your computations are going to take a while to run.I recommend off-loading the computation to Celery or some other asynchronous task library, otherwise the client will be left with huge response times for the calculations to run.  Your view could have a form submit that handles uploading the CSV (or other format of your choice), then you could have Celery tasks spun off in the POST handler for calculating whatever statistics you want and making them available to the front-end by saving the result to a model in your DB.

A successful 200 or 201 status from that CSV POST upload could say something like ""your upload is being processed..."", and the front end will display this message until the plot data is ready (although there are [ways to continually monitor the status of a task in Celery](http://www.dangtrinh.com/2013/07/django-celery-display-progress-bar-of.html), so you could even have an upload progress bar on the front end if you were knifty enough with it).If the csv files are 1M+ rows, I'd suggest setting up a ftp server clients can drop files onto and then having workers processes the csv files into tables.  From there, use raw sql to do the analysis http://dedyukhin.com/index.php/abc-analysis-using-sql and return the results in json to be displayed by http://d3js.org/"
2015-04-06 23:33:56;Virtualenv on a Virtual Machine?;"Sometimes your operating system or other applications rely upon certain python versions or package versions. [Such as Yum on CentOS](https://github.com/h2oai/h2o/wiki/Installing-python-2.7-on-centos-6.3.-Follow-this-sequence-exactly-for-centos-machine-only).

By using virtualenv you can isolate your applications requirements from those packages or even python versions which may come pre-installed with your OS (or which may get updated when you install patches). If you ever want to run multiple applications within the same virtual machine, virtualenvs can still be helpful to isolate dependencies. 

Also, not that it would change things, but there is always a benefit in keeping your dev environment as close to production as possible. So if you're using virtualenv locally to run/test apps, you could keep the VMs the same as well.Some OS's like ubuntu use their own older Python and it gets a bit iffy if you want to use an alternate, more specific version. This is not a problem if you run a more metal linux but we use ubuntu for its wide support.

And I use virtualenv simply because I just don't want to worry about versions and package spaces and whatever.

Only downside is the hassle of setting it up (ansible of dooom)virtualenvs will be lighter weight. As I understand it, one box with multiple VM's will have to split a number of resources, memory, filesystems, etc. That will all take their toll on the server whereas they can be shared under virtualenvs. It probably really depends what you want to do with your multiple setups. It is mostly redundant in a VM. It's very redundant in a docker container."
2015-04-06 20:57:42;"Can I get an ELI5 answer to ""What benefits does Django Rest Framework"" have? Or why one should use a RESTful framework?";"Why should one use a RESTful framework? To make no assumptions about the client that will be consuming the data.

By default, Django is mostly for full-stack applications - a framework that responds to requests with HTML. Note the ""HTML"" part - returning HTML does not make sense if you want to use the same server for iOS let's say. You've then got to implement more functionality to be view-independent, and because of this you might have to double your logic or add yet another layer of abstraction.

If you use Django Rest Framework (or build one yourself!) you then return json instead of html and any client can then consume that json into whatever native view you want - so JavaScript can then turn json into HTML (all clientside) or iOS could take your json and build your App's view from it.

Someone should use a RESTful framework because it's the best solution to a problem they are trying to solve.

Generally speaking, if you're trying to get data into multiple types of applications, you're going to need to provide that data in a way that all of those applications can understand. If you're only going to display data in a web browser, then HTML may be the smartest way of going about things and you can safely ignore DRF (Django REST Framework), unless you want to use something like Ember or AngularJS.

If you want to create a mobile app that isn't using a WebView but is directly pulling data from your server, and have a website, and use the same data for both, then it's likely going to be easier to use DRF than it will be to code views in Django, especially since a lot of problems are solved in DRF in nice general ways (token based authentication, serializing data, and rules for authorization).In terms of the benefits of Django Rest Framework itself, it's exceptionally well written and documented, has very nice tools for API discovery (e.g. auto-generated interactive documentation for your API) and, for me at least, one of the main benefits was that using it taught me how REST APIs are actually supposed to work!You don't HAVE to use it, but it helps guide you to create a when creating an API for other devs to use your service which is consistent with other RESTful APIs

Less decisions by you means lead deviation from the pseudo standard REST APIDjango Rest Framework will really shine if you want your REST resources to match your models closely. Django Rest Framework will allow you to do that with very little code and in a Django style.  

There are a set of API views which are very similar to Django's class based generic views - except they will return a REST resource (usually a JSON representation of an object) rather than an HTML page. Serializers, which take your Django model and turn it into JSON are very similar in use to Django's model forms.  So if you know how to use one, you are 75% of the way toward being able to use the other. It keeps your code style consistent, and concise.  (Less code usually leads to less bugs in my opinion). 

Of course maybe your models don't match the output you want to create so precisely.  Or maybe you don't use class based views. In that case, some of the obvious benefits are gone, but there are still plenty of things you are going to need to write yourself, that are included in the Rest Framework. ""because we want the freedom to bolt-on any framework we like for the client's front-end""These kinds of frameworks are good for when you're first learning, but once you get a hold on how restful services work, you can leave the framework behind. These days if I want to build an API based backend, I'll just use regular views that return `JsonResponse`

Dn't listen to all the hype about how it'll make your API 'standard' or whatever. No matter what, your clients are going to have to do work in order to consume your API. There is no magic bullet that makes your API automatically usable with no effort.Basically, you should be using it because it's a standard every credible developer understands. You don't have to explain **HOW** it works, just provide an API call list and anyone can use it immediately.

Furthermore, It's the standard most commonly supported by clients. You don't need to write a custom client, because browsers, curl, etc, already support it.

Then consider the fact that you don't need to write a custom server. Apache, Nginx, do that for you and if you don't want the overhead, most standard libraries in pretty much every language has a module which does Representational State Transfer for you.By making your web app restful, I suppose you can control it by sending HTTP requests. This means that anything that can send HTTP requests can talk to your web app."
2015-04-06 19:52:39;Django can't import ckeditor in settings but can in shell?;
2015-04-06 18:23:35;Including views from other apps in a template;"You can't include more than one view per template. However, you can:

1. Take view logic, place it into functions or classes, then use that in your single view. This is pretty straight-forward, and the recommended approach.
2. Use multiple-inheritance with Class-Based Views to expose more logic in your view. This approach can be challenging.If there is a bit of something that is included on multiple pages, that's usually a sign to me that it should be a template tag of some kind. "
2015-04-06 12:25:44;If you were cloning reddit, how would you go on creating it?;"Ignoring the model for a moment^1 , let's examine how Reddit operates (in other words, let's describe the domain of the problem):

First, you have users, who can do some actions in the side. Django already has this, so you don't need to worry too much about it for now.

Second, users can create subreddits, which are ""groups"" about related stories (or, at least, that's what we expect). Subreddits have a name, an owner (for the sake of easiness, let's keep just one owner) and a bunch of moderators.

    class Subreddit(models.Model):
        name = models.CharField(max_length=30)
        owner = models.ForeignKey(get_user_model())		# I *think* it's get_user_model()
        moderators = models.ManyToManyField(get_user_model())

Then you have stories, which are URLs or texts posted to Subreddits. No matter which type of story you post, they have a title, people who upvotes and people who downvoted (and I'll skip the shortlink, but it could be kept here). Link stories have a single link and text stories have a textfield but no link.

    class Story(models.Model):
        title = models.CharField(max_length=100)
        subreddit = models.ForeignKey(Subreddit)
        # those two probably need some more thought
        upvorters = models.ManyToManyField(get_user_models())
        downvoters = models.ManyToManyField(get_user_models())

    class LinkStory(Story):
        link = models.URLField()

    class TextStory(Story):
        text = models.TextField()

... or something like that (I'm far from my Python machine, so I can't run the code right now).

And, after all that, my suggestion: When you write first, in plain English (or your native language) the *requirements* for your project, everything else comes naturally.

**[1]** Actually, it was your model that made me thought about all this, due the ""moderator"" being a part of the story.```git clone git@github.com:reddit/reddit.git```You would do well by checking out the python PRAW library. I learned quite a bit about reddit and how it might be designed by reading through that source code.Here's what I'd do.

Create each sub-reddit as it's own stand-alone Django application. Pop it into a LXC container and then clone that container each time a new sub-reddit is created."
2015-04-13 22:02:32;Using an AJAX call with Django and Twilio to send an SMS to a user's phone;"Django-nopassword interfaces with twilio, maybe they already have code for this kind of thing that you could borrowCan't you just perform this within the done callback?

$('#twilio-form-status').html('Thank you for your interest in our app');"
2015-04-13 20:50:43;Having a model for a date with not all fields required;"I would record the 3 separate parts in 3 different fields: Year, Month and Day, each as a SmallIntegerField, and mark whichever ones you want to be optional as ""null=True"".  This will give you the most flexibility over using the data, such being able to query all events that happen in January and NULL rows won't be returned.  If you make year required, then you can just query for all events of a given year, or year range.  Overall that would make your queries much simpler overall.  If you need to do date arithmetic on the events, such as display how long ago they were, then create a fourth field as a DateField with some sort of approximation for the dates.  In other words, if the month and day isn't known, then just set it as, ""January 1st, 2015"", and then you can always check in your code if the month and/or day fields are NULL so you know it's an approximation.As developers, we very rarely have dates with models. I'm sure there's a joke there somewhere...Keep the date field so you keep the advantages of validation and date logic/not having to convert for free, and have an accuracy field with choices (day/month/year)Shameless plug: here is my implementation, although it was written a while back and could probably stand some improvements/refactoring:
https://github.com/JordanReiter/django-flexibledatefield

It stores dates as integers in the format yyyymmdd. This makes it easier to do some in-database calculations (for example getting the date by subtracting two values and dividing by 10000).

It includes a custom object for storing the value as well as a model field and form field. The custom object performs a lot of the same functions as a datetime object."
2015-04-13 20:13:24;Using django to start process that takes a few minutes to complete.;"Tutorial?  I don't know of any.  But I think you have the design you're looking for.

1. Form Submit
2. Create new model instance.
2. Start an Asynchronous Celery job, passing the model instance (or PK) as a parameter.
3. Return user to page with PK and possible Javascript-y progress meter.
4. Job progresses, updates are sent to client via AJAX requests.
5. Job completes, updates the model instance.

FYI, I don't know what SSE's are.

Are you looking for Celery Tutorials? AJAX tutorials? It sounds like you're on the right track.  Maybe work backwards?  Get a Job working, then kick one off via a web request, monitor the model instance in a shell, then tie in an AJAX request.This is a fairly decent tutorial that walks you through Celery and Django.  It's for older Django (1.6 I think) but shouldn't matter too much. 

http://www.marinamele.com/2014/02/how-to-install-celery-on-django-and.html
This is a nice library for that use case: http://policystat.github.io/jobtastic/A lot of good answers already so I will just chime in with a trick I used for something similar. 

I put a status field in the model associated with the task. The celery job updated the field and the user was redirected to the results page, which refreshed on a js timer  until the status was complete. Quick dirty and effective. I did something just like this utilizing celery and memcache.

I kicked of a celery process that ran on a separate windows server doing file conversions that could take a long time(hour) depending on the file size.  I had the celery worker process update memcache on the linux machine and used jquery/django to read this and display the progress.

I'm not sure if this is what I followed exactly but it gave me the framework to write what I had.

[tutorial](http://www.laurentluce.com/posts/upload-to-django-with-progress-bar-using-ajax-and-jquery/)
As a rough idea ...
... Start process (celery) ... Store some process identifier in session cookie ... User goes away, makes coffee, browses around ... User comes back to pre-defined url ... Check session cookie for running task ... Show screen/message to indicate process.

Or the same but with a User login ... check all processes initiated by that user.I have used Celery for this type of thing, but its quite a bit of setup. I read that Huey was a more lightweight alternative when I asked a similar question. I have used Celery for this type of thing, but its quite a bit of setup. I read that Huey was a more lightweight alternative when I asked a similar question. "
2015-04-13 15:51:18;Problems with nested Modelserializers and lazy loading...;
2015-04-13 15:46:53;Help plz! I'm stuck with ManyToManyField;
2015-04-20 18:52:25;Books for django 1.8?;"Most changes for 1.8 are in areas that will not affect you, as a learner. So most content fro 1.6 and 1.7 will still be relevant. Only thing is in 1.7 migrations were brought in as native so use them instead fo south.Very happy that Danny and Audrey have seen the light, and will be offering eBooks again.pydanny is updating Two Scoops of Django for 1.8

See https://twitter.com/pydanny/status/586663664003911680Most likely 1.9 will be out or nearly out by the time books are published for 1.8.  I wouldn't worry too much about being a version behind.  Get what you can out of the book, and then read the documentation for the changes.  Two Scoops of Django for 1.8 will be released soon so I'd wait for that one. If you can't wait the last one (written for 1.6) is still very good and mostly applicable, you just have to modify some parts of your projects, but Django gives great instructions and information regarding backwards incompatible changes.Why do you need a book? If I'm not totally wrong the underlying architecture and concept of Django hasn't changed for ages. Just read the docs, or get them as PDF.You are way better off finding a book with good reviews even if its targeting an older version, there have been changes in the latest Django versions but nothing significant that would change what you are taught by said book that much.  Personally, i would prefer a book written by a capable author even if it was targeting e.g the 1.3 release than just finding 'some' book with only the attribute of being on the latest release.I think you've misspelled *docs*."
2015-04-20 14:18:55;To use angularjs or not for a note taking app;"I'm not sure you understand the terminology, AJAX is just a method of transport that is executed asynchronously whereas AngularJS is a complete framework for building webapps.

They are not mutually exclusive in any way (AngularJS uses AJAX calls in its $http service for instance). If you were to exclude AngularJS you would still need to use or write something that takes care of the actual application layer/UI updates and field-value bindings, essentially reinventing the wheel.

Let me ask you this instead: What do you mean when you say ""ajax"" and why do you feel AngularJS would not be a good choice from a maintenance (what does that entail in this case?) point of view and if you were to use manually written AJAX request for server communication what would you do for updating the DOM/HTML with the new information?I've been happily using Django & Angular, with some initial pain around authentication, CORS and drawing the right lines of separation. Here's my stack:

AngularJS and Bootstrap on top. There are lots of great choices out there. There are lots of critical articles about Angular, Bootstrap, jQuery; functional vs. declarative, etc. Choose what you're most comfortable. I chose Angular for the same reason I chose Django: Great user community and off the shelf modules. 

Django models + Django Rest Framework, which serves up data. (As suggested by most of the replies). 

Django serves my initial Login, Signup and Password reset pages. These are plain old HTML & Django Templates. I can redirect browsers which don't satisfy minimum requirements for Angular. (I believe it's safer this way too).

Once logged in, a user is served my JavaScript enabled index.html, which loads angular.js, other libraries (ui-router, ui-bootstrap, etc.) and my app.js, which is my root application JavaScript file. From this point on, it's a One Page Application experience that Angular excels at. 

Here's where it get's political. The app.js is served by Django and has *some* constants defined by Django template variables, {% url %} and {% static %}. Yikes! Mixing Django template variables and Angular JS notation is never advisable for maintainable, clean code. Nevertheless, I've done it all in one place and heavily commented (using a mix of JS comments and Django comments no less) for future maintainer to curse me. 

Extract:

    (function () {
        ""use strict"";
    
        angular.module(""myApp"", [])
            .constant(""urlConfig"", {
                // Partials & Images
                ABOUT_HTML:                  ""{% static 'app/partials/about.html' %}"",
                FEEDBACK_HTML:             ""{% static 'app/partials/feedback.html' %}"",
                BANNER_1_JPG:                ""{% static 'images/banner_1.jpg' %}"",
             })
            .run(function (userService) {
                // Load User Profile & Permissions from Django directly
                userService.user = {% autoescape off %}{{ USER_DATA }}{% endautoescape %}
            });
    })();

As my root index.html and app.js files are served by Django, it circumvents having to deal with CORS (Cross-origin resource sharing) headers, etc. All behind @login_required, to leverage Django's auth system. 

This is where the Django + Angular mashup shenanigans end. Everything else is pure REST calls, which are wrapped up in a Angular Factory. (Adding CSRFTokens to the HTTP calls). 

    (function () {
        'use strict';

        angular.module('myApp')
            .factory('dataFactory', ['$http', '$cookies', function ($http, $cookies) {

                $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
                $http.defaults.headers.common['X-CSRFToken'] = $cookies.csrftoken;

                var dataFactory = {};
                var baseURL = '/django_app/api/v1/';

                dataFactory.getAllData = function () {
                    return $http.get(baseURL + 'data/');
                };

                dataFactory.updateItem = function (id, data) {
                    return $http.put(baseURL + 'data/' + id, data);
                };
                    return dataFactory;

                }]);

    })();

I then injects urlConfig, userService and dataFactory into my Angular controllers. 

Your milage may vary. Good luck!
/u/loptr's comments are correct, in that I think you've got your terminology confused.  

That said, well written Angular is about as maintainable as well written Javascript.  For something as tightly scoped as a note-taking app, maintainability is probably not your biggest concern.  

Still though, angular is pretty easy to maintain, especially if you start with something structured like [angular seed](https://github.com/angular/angular-seed).  I just took a basic course on Angular and found its API repulsive. Dependency injection is such a mess."
2015-04-20 03:40:43;Need advice on how to handle image files for multiple purposes.;"Sorl Thumbnail for resizing, caching images. https://sorl-thumbnail.readthedocs.org/en/latest/

Django Any Image Field for displaying thumbs in admin https://github.com/edoburu/django-any-imagefield

As for CSS I'm guessing you need that in case the image needs different centering?If I were doing it, I would have them upload full-size images, then automatically resize them to the various dimensions that were necessary, and save the paths to the press-shot and web-shot in separate fields.  

You can super save() on that model, and have it resize there is the smaller sizes don't exist.  

So, something like this: 

    def makeThumb(f_in, size=(128, 128), pad=False):
        f_out = f_in # fix this, cause you don't want it to save over the same file, like I did.
        image = Image.open(f_in)
        image.thumbnail(size, Image.ANTIALIAS)
        image_size = image.size
        thumb = ImageOps.fit(image, size, Image.ANTIALIAS, (0.5, 0.5))
        thumb.save(f_out)
        return urlized_path_to(f_out)

    class Image(models.Model):
        fullsize = models.URLField(upload_to=blah)
        smallsize = models.URLField(upload_to=blah)
        type = models.CharField(# seed with a choice field, web or full)

        def save(self, *args, **kwargs):
            if not self.smallsize:
                self.smallsize = makeThumb(options)
            super(Image, self).save(*args, **kwargs)

As for the responsiveness, just let bootstrap and img-responsive deal with it, unless you're just looking for a programming exercise.  Hey as it happens I did a Django app that does exactly what you're describing. Its name is 'Django image tools', it's available on pypi so you can just plug it in and use it. 

If you're more interested in the coding as to learn, the app is open source and documented, if you have any questions about the code I am available to explain the process too! :) 

Edit:

Repo link: https://github.com/bonsaistudio/django-image-tools/

Documentation: http://django-image-tools.readthedocs.org/en/latest/Surprised no one has mentioned django-imagekit yet.  It's my ""go to"" for this. Hi there!

I'd recommend [easy-thumbnails]( http://easy-thumbnails.readthedocs.org/en/2.1/ ) as a good place to start.

I've used this with good results on lots of projects. It will auto generate  scaled images, crops etc on the fly to whatever sizes you need, and cache then for reuse. It's really customisable and supports retina versions too.

Good luck!"
2015-04-19 19:50:33;Locally functioning Django app - broken when uploaded to Digital Ocean droplet... Help? (10 hours in...);"For more realtime support, check out #django on the freenode irc network.

As you can see from the attempted URL resolver keyword arguments, your problem is that `vendor_item.slug` is blank / erroring. Are the first three vendors in this queryset all returning a slug?

    >>> [vendor.slug for vendor in Vendor.objects.annotate(Count('deal')).order_by('name')[:3]]

Are you sure your application is running with the same project settings as when you are using `./manage.py shell`?

Hrm, and are you sure your wsgi server is running in the same python environment?By the way, I'm not trying to freeload here. I am more than happy to pay for this help if it means I get the problem fixed.
http://www.reddit.com/r/forhire/comments/331vpm/hiring_remote_djangopython_dev_for_a/
Or free is nice, too. I actually prefer free, but sometimes time is most valuable.Is local and remote db the same. Are there slugs in both of them?Are you doing any db caching? I've had silly problems like this with cacheops. Or template caching?

If you have ipython, I would debug by inserting this after your `data['vendors'] = vendors` line in `views.py`

    import ipdb; ipdb.set_trace()

See if vendors has been assigned anything here.
How do you switch between dev and production settings like database url, DEBUG/TEMPLATE_DEBUG in settings.py? Could it by that your ./manage.py shell uses a sqlite database and your gunicorn production environments then uses the postgresql database?

What data do you see on the Django admin for your Vendor model running from gunicorn?

Can you post your gunicorn config?Double-check the Postgres database (with psql) and make sure there are columns set for every field in your model.  What's the full exception?"
2015-04-19 05:24:53;Question: DetailView & ListView Combination;"I don't understand your description at all...but you can pass an additional queryset to the `context` of your `DetailView`:

    class LandingPageView(DetailView):
        ...
        def get_context_data(self, **kwargs):
            context = super(LandingPageView, self).get_context_data(**kwargs)
            # Add 4 LandingPages to your context
            context['landingpage_list'] = LandingPage.objects.all()[:4]
            return context

The list will then be accessible in your template via the `landingpage_list` variable. 

I recommend [this site](http://ccbv.co.uk/projects/Django/1.7/django.views.generic.detail/DetailView/) when you're trying to tweak the functionality of GCBVs.You should definitely read the Django documentation about [Avoiding complex scenarios in generic views](https://docs.djangoproject.com/en/1.8/topics/class-based-views/mixins/#avoid-anything-more-complex) and then do it like [rnevius](/r/django/comments/333nyv/question_detailview_listview_combination/cqh9gr9) described."
2015-04-26 15:25:31;Django Rest Framework + AngularJS Design question;"Whilst it is good to treat the Django and Angular apps as two distinct apps, there is no reason that they cannot be hosted together and live in the same Django project. I orignally tried to keep my apps separate but then merged them as I decided to stick to Django's auth model i.e. login is served by Django. The reason I did this was because every time the page (url) was refreshed my DRF auth token expired.

My angular app is simply a Django package named 'webapp' that lives alongside the other Django packages (api, users etc.).

I don't have two versioned apps. Most backend/api changes also require a frontend change.

I haven't placed the Angular code in the static folder. I've configured the STATICFILES_DIR setting to pick up the js files in the webapp

e.g. in local dev

# Add frontend assets to static files
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'webapp',),
    os.path.join(BASE_DIR, 'webapp', 'src',),
)

and in production:

# Add frontend assets to static files
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'webapp', 'dist',),
)

In dev, I set up a management cmd to start the django server and also a grunt watch task, mainly borrowed from

http://lincolnloop.com/blog/simplifying-your-django-frontend-tasks-grunt/

BTW, cross domain can easily be solved with django-cors-headers, if you do keep them separate.

I ended up using dj-static to serve my Angular app from Gunicorn.

The trickiest part was getting my grunt tasks sorted as in dev my assets are served from an 'assets' folder and in prod the path becomes 'static'

Good luck

  See, Stackoverflow questions like [this](http://stackoverflow.com/questions/19566555/folder-structure-for-python-django-rest-framework-and-angularjs) make it seem like people *do* put their AJS apps right into the `STATIC` folder of the Django projects. That seems messy.I see already that /u/rukittenme was downvoted to hell for suggesting that you shouldn't host the same components on the app server, and he's right, though his reasoning is wrong. 

You **definitely** don't need Node for Angular, but regardless, you'll see a performance boost by hosting your static media directly from the webserver.  

My typical Nginx directive looks like this, inside the server {} block: 

    location /static/ {
        root /path/to/folder/just/under/static/;
        autoindex on;
    }

From the Django docs, serving static media from the Django staticfiles app is ""grossly inefficient and probably insecure, so it is unsuitable for production.""  They suggest serving it from Nginx, Apache, or some other caching webserver.  

That said, /u/howieweiner's suggestion that they can sit side by side is definitely correct -- you just don't want the Django app server to serve static media.  For reference, the common 'best practice' is to have a static file in your Django project root, so, if you have a django project at /home/yourusername/projectname/, then you should have a static folder at /home/yourusername/projectname/static/, and your Nginx directive should reference /home/yourusername/projectname/ to the /static/ alias.  

Check out djangularI finally got round to creating a boilerplate app for my Django Angular setup. Hope it helps

https://github.com/howieweiner/django-angular-boilerplateYeah you don't serve Angular from static.  Angular is going to run on a node server and django is going to run on gunicorn or whatever.  The front end and the back end are totally separate and should be version controlled as such."
2015-04-25 12:55:20;Tango with Django chapter 6 exercises: views and likes stay at 0 after running populate_rango.py;"You need to [save()](https://docs.djangoproject.com/en/1.8/ref/models/querysets/#get-or-create) the instances by using `c.save()`, after line 68.Why not using a Django Management Command? 

https://docs.djangoproject.com/en/1.8/howto/custom-management-commands/"
2015-04-24 14:09:09;Django app that communicates with existing REST API;"Django is a database-centric back-end framework, but you seem to imply your app will be mostly front-end centric, consuming data from an external database via a REST API. 

So I would suggest you skip Django for this project, and have an Angular (or other REST-consuming front-end framework) app talk to the REST API directly.I went through the same thing, and settled on using [Slumber](http://slumber.readthedocs.org/en/v0.6.0/).  This is just a lightweight wrapper around the [requests](http://docs.python-requests.org/en/latest/) library; you could use it directly instead.  In my case, I had to make a few changes to Slumber to get it to work in Python 3.> The CMS manages users, posts, etc through an existing REST API

Sounds like most of the backend already exists and your task is the largely the front-end code!

What's left for your back-end to do?"
2015-04-24 00:45:16;Multiple Django Projects, Apache Subdomain Virtual Hosts, wrong urls?! Help!;"After many many hours... lesson learned: When using multiple WSGIDaemonProcesses in distinct VirtualHosts, remember to correctly set WSGIProcessGroup to mirror the server name. 

Oye vey."
2015-04-23 21:28:26;Need some vim advice on switching to python3;"It looks like you're banned from Reddit (your user page is a 404 and your post automatically went into the spam queue). This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.

You may want to [contact the Reddit admins](http://www.reddit.com/message/compose?to=/r/reddit.com) about this.Try Neovim, which just for better Python 3 support.
Jedi-vim will use your $VIRTUAL_ENV.
I am using jedi-vim now directly for python files, instead of via YouCompleteMe.Check out [Python-mode](https://github.com/klen/python-mode).Have you tried `let g:jedi#force_py_version = 3`?[deleted]"
2015-05-04 13:54:25;Get ready for Wagtail, the best Django CMS yet;This looks pretty cool. Does anyone have an experienced take on this app and/or a comparison with similar ones? 
2015-05-04 01:34:21;newbie question about proper way to use Celery;"So, result 2 is likely the way you want to use it.  

For just running a factorial, it's kind of hard to illustrate a good example, but what's the end goal of running the factorial?  If it's to run the factorial out of band without occupying the current user session, you can poll the task for task.ready() periodically until it shows the result. When it shows the result, then do something, like notify the user. 

More traditionally though, if you're using this for a web framework, you want to do something afterwards.  You can either put that task in the task that you're doing, to be finished when the result is complete, or you can use an on_success handler (like a callback).  So, TLDR, lets say you're writing an RSS feed parser.  User signs up and uploads his OPML file.  You retrieve the OPML file, and begin parsing it to get all the news from the sources in the OPML file.  This could take a minute or ten.  You kick off a task with .delay() that does the importing, return a 201 to the user, and tell them that you're importing the files.  They'll get an email when it's finished importing, but they can keep refreshing the page and see results as they come in.  

Your tasks can be set up like this (or a variety of other ways, I like the handlers and abstract classes, personally): 

    def import_opml_file_and_email_user(opml_file):
        chain = import_opml_file.s(opml_file) | email_user.s()
        chain()

    @app.task()
    def import_opml_file(url):
        # do things
        return email_user(user_email)

    @app.task()
    def email_user(user_email):
        result = mail.send(""whatever"")
        return resultI removed most unnecessary code from the sample project leaving only the second method and modifying it a little bit. Full working example is available at [github.com/dj-jar/celeryexample2](https://github.com/dj-jar/celeryexample2). I pasted most important files below.

tasks.py

    
    from __future__ import absolute_import
    from celery import shared_task
    
    
    @shared_task
    def add_task(a, b):
        return a + b
    
    
    @shared_task
    def mul_task(a, b):
        return a * b
    
    
    @shared_task
    def fac_task(n):
        result = 1
        for i in range(1, n+1):
            result *= i
        return result
    

views.py

    
    from django.core.urlresolvers import reverse
    from django.http import HttpResponseRedirect
    from django.shortcuts import render
    from celery.result import AsyncResult
    from mathapp.tasks import add_task, mul_task, fac_task
    
    
    def add_delay(request, a, b):
        t = add_task.delay(int(a), int(b))
        return HttpResponseRedirect(reverse('m:task_result', args=[t.task_id]))
    
    
    def mul_delay(request, a, b):
        t = mul_task.delay(int(a), int(b))
        return HttpResponseRedirect(reverse('m:task_result', args=[t.task_id]))
    
    
    def fac_delay(request, n):
        t = fac_task.delay(int(n))
        return HttpResponseRedirect(reverse('m:task_result', args=[t.task_id]))
    
    
    # view queued task
    def task_result(request, task_id):
        res = AsyncResult(task_id)
        ctx = {
            'status': res.status,
            'result': res.result
        }
        return render(request, 'mathapp/task_result.html', ctx)
    


The aforementioned functions are accessible at the following addresses:

* http://127.0.0.1:8000/math/add/6/7/
* http://127.0.0.1:8000/math/mul/6/7/
* http://127.0.0.1:8000/math/fac/5/>Is the third method the appropriate way to use Celery?

I would probably do something like this, yes.

Most of my celery tasks involve updating the database to indicate completion if there's a result that the user needs to see at the end of it.celery is an asynchronous task queue manager. factorial can't be run asynchronously in any interesting way (just each process calculates its own factorial). your examples make it kinda hard to make good suggestions about how to use it.

what are you going to be using this for in real life? once we know your real problem its much easier to give real advice.celery isnt hard. "
2015-05-03 22:54:12;I'm new to Django, I have 2 questions related to models;"> I saw in a forum that creating a class that contained the identical elements from employees and groups (for example, names) and then make the other two inherit from that class, so that instead of being model.Model, it should be Assignees or something like that. Seemed like a good idea at first, but didn't worked.

I think this should work if you put a foreignkey to the base model inside the task model

> And obviously I tried with ForeignKey but that didn't worked because I needed two.

you can have two foreignkey in the task model with blank=True and null=True so they are not both mandatory

> Another question related to models, I want to be able to assign contact information to the employee and groups. This means that an employee can have multiple phones and multiple emails, each one labeled as work, home, etc. I tried creating a model for Contact info which includes the email, phone and type and using a foreign key relate it to the employee or group.

that is correct, you should just use an [inline](https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#inlinemodeladmin-objects)
so that they can be added/modified/deleted in the same page as the employee/groupIf you know that you'll always need to support just these 2 relations then why not add 2 foreign keys to the table? You could add some validation to make sure a task must have at least 1 of the 2 FKs == NULL.

You could write a little code to make the interface of tasks handle both cases for you like,


    class Task(models.Model):
        user = FK(User)
        group = FK(Group)

        @property
        def assignee(self):
            return self.user or self.group

       ...


This won't work with the ORM though. There you could use something like this (provided you want to fetch task for either a group or user)
     ...


    from django.db.models import Q

    Task.objects.filter(Q(user=my_user) | Q(group=my_group))


    ...

With `related_name` feature, you'll be able to fetch the tasks like this,


     class Task(models.Model):
         user = FK(User, related_name='tasks')
         group = FK(Group, related_name='tasks')


    my_user.tasks.all()
    # or
    my_group.tasks.all()
    
    
    ...
"
2015-05-03 18:19:17;Referencing multiple other models from a model;"> databases are usually a 1:1 key value relationship

nope, this is not true at all. and possibly where you're getting confused. relational databases are not like key:value datastores. SQL works on a fundamentally different principle than something like Mongo or Riak or anyother NoSQL style key:value store.

relational databases represent relationships between sets of objects. the most fundamental way to think of a relationship is in terms of number. ForeignKey represents a Many-to-One relationship between the objects. ManyToManyField represents (as you might expect) a Many-to-Many relationship between the objects. 

In your case it seems clear that you have a ManyToMany relation between Employees and Projects. This means that each Project can have multiple employees assigned to it, and that each Employee can be assigned to multiple projects. Django has a built in field type called ManyToManyField that should handle this for you pretty elegantly. 

https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_many/

A many to many will let you reference one other model. Your Employees could reference multiple Projects in an M2M attribute called ""projects"". You could then do the same for invoices, and estimates. The thing to note is that in the scenario I just described the Employees, Estimates and Invoices only have knowledge of each other through their respective projects. If they share projects then that's a cool coincidence, but to access a Project's Estimate through, say, an Employees instance you would need to first access the instance's ""project"" attribute/related manager and then access the Project's Estimate through it's reverse relation. Hope this helps. Good luckIt really depends if your estimates, invoices and employees need to belong to more than one project.

For estimates and invoices, I would assume they are unique to a project, so on those models you'd want a ForeignKey field to the Project model:

    class Project(models.Model):
        # fields for project model

    class Estimate(models.Model):
        project = models.ForeignKey(Project, related_name=estimates)

This is a 1 to many relationship - the estimates belong to one project, and a project can have many estimates. You can access estimates through the related_name property on the Project model: ``some_project_object.estimates`` will contain a list of Estimate objects.

For the employees you might want to have employees exist in many projects. For this you'd want a ManyToMany field:

    class Employee(models.Model):
        projects = models.ManyToManyField(Project, related_name=employees)

Now you can add the same employee to multiple projects. ``some_project_object.employees`` will contain a list of Employee objects, and ``some_employee_object.projects`` will contain a list of Project objects.There is 1:1 relationships and many to many relationships, the later in SQL it is usually implemented with a ""join"" table containing the ids of the 2 models : http://sqlrelationship.com/wp-content/uploads/2012/01/many-to-many.png


It is implemented this way in Django: https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_many/


Best of luckI think I understand. So using a many-to-many value will let you associate more than one model with the variable and Django will keep track of it all?Thanks for this guys. I think this is enough information for me to chew on and work with. **thumbs up**"
2015-05-02 23:58:14;Ready-to-use templates for an ERP-like django app?;You can use  open source admin dashboard templates like https://github.com/almasaeed2010/AdminLTE or purchase commercial admin templates from Themeforest.http://startbootstrap.com/template-overviews/sb-admin-2/
2015-05-11 23:11:27;"DB structure question: How can I get each ""Item"" instance to have a ""Price History""?";"Create a table with historical prices for all items. In this table, keep an additional field that specifies until when the price is valid.

    class HistoricalPrice(models.Model):
        item = models.ForeignKey(Item)
        price = models.DecimalField(max_digits=10, decimal_places=2)
        valid_from = models.DateTimeField()
        valid_to = models.DateTimeField()

Under this model definition, valid_from is the same as the ""Time (unix)"" column in your CSV. valid_to is equal to valid_from of the next row. The last row in the CSV, corresponding to the current price, has valid_to set to infinity. Whenever you get a new entry, you add a new row to the table as well as update the valid_from of the previously current row. With this data model, you can get the price of an item at a specific time t with the following query

    HistoricalPrice.objects.get(item=item, valid_from__lte=t, valid_to__gt=t).priceWhere does the item come into it?  I just see prices and times.  If you have a CSV per item, you would have a separate table with just one row per item, and give it a one to many relationship with the price history data, which would look like the data you posted plus an item_id column.

https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/

Are you looking for anything more than this?Just out of interest, is there a reason why the following would be a bad idea?

    Class Price(models.Model):
        date = models.DateTimeField(...)
        price = models.DecimalField(...)

    Class Item(models.Model):
        name = models.CharField(...)
        price = models.ForeignKey(Price)

Would I be right in thinking that getting the item price by getting the latest price would be more inefficient because it involves another model each time you want the item price?"
2015-05-11 21:53:57;Introducing Mezzanine's Core Development Team;[deleted]
2015-05-11 19:34:07;How to do DRF caching?;"[deleted]Hi there,
I'm not sure if this will do exactly what you want, but I think it will.

There is a 'cache_page' function that will cache all calls to a url for the given amount of time.
[here's the django docs on the function.](https://docs.djangoproject.com/en/1.8/topics/cache/#the-per-view-cache) There's a decorator for the view you could use (you put it over the 'dispatch' function of the view), but this is easier IMO.

    from django.conf.urls import patterns, url
    from django.views.decorators.cache import cache_page
    
    from .views import game
    
    urlpatterns = patterns('',
        url(
            regex = r'^foo/bar/$',
            view = cache_page(60 * 60)(game. GameListView.as_view()),
            name = 'baz'
        ),
    )"
2015-05-11 16:17:21;Django 1.7 - Multiple Databases close db.connection, still getting: 2006, 'MySQL server has gone away';
2015-05-11 16:00:15;.extra() vs .annotate();"As far as I know there's three levels to the ORM. Raw sql, extra, and python. They all eventually become sql but at different levels of abstraction.  
You're pretty much right in your assessment though. Use annotate when you can, drop to extra if you have to, raw sql if nothing works.  
Django 1.8 added sql functions at the python level and the ability to do expressions in annotate/aggregate. I updated most of my extra/raw to python.  
One thing to consider is that extra/raw can be faster or more efficient  as the ORM isn't perfect.the result of ``annotate`` can be used in further filter/exclude statements, something that is not possible with ``extra`` for instance.

So yes, try to use annotate before dropping into extra. I'm not sure about this, but I think I read that the Django devs would love to get rid of extra, because it's so in-between.There is no silver bullet.
Develop an ORM isn't a very simple job, and better than he is going to have some case not covered in Django (core) tried to make a not too intrusive form of SQL language access (via Python objects).
Many case you can do using .annotate(), for the cases that did not begin to be made, slow or uncomfortable to use the .annotate() you can leave for .extra() and set up the way you think best."
2015-05-18 21:35:30;Django tutorials? All suggestions welcome;"We maintain a list of high quality, current tutorials at http://twoscoopspress.com/pages/django-tutorialsWhat about [the tutorial](https://docs.djangoproject.com/en/1.8/intro/tutorial01/) that they provide right from the website? When I first started, I did this tutorial straight through and learned a tonne. From that tutorial I felt confident to start a smallish project, like a blog. https://realpython.com/ - Course 3 is focused mainly on Django.Not tutorial per se, but I wrote a small simple CRUD app, but I found it useful introduction to my team members:

Django CRUD (Create, Retrieve, Update, Delete)

https://rayed.com/wordpress/?p=1266

Based on pydanny and Miguel Araujo presentation:

http://www.slideshare.net/pydanny/advanced-django-forms-usage

Thanks pydanny :)I'll be releasing my first Django course on [Treehouse](http://teamtreehouse.com/hello) in about a month. That link will get you a free month, btw.Quora is a terrific resource these kinds of questions!

http://www.quora.com/What-is-the-fastest-way-to-learn-Django[deleted]"
2015-05-18 14:51:31;Django Development with Docker Compose and Machine;"What do you recommend for resetting security-related info (Postgres password, Django secret key etc)? I can imagine it would be tempting to just clone the repo and deploy, and everyone ending up with the same DB_PASS and SECRET_KEY in .env.

Is there a streamlined way to force a reset of all sensitive variables before deploying?Thank you for this. I've been looking for an example of a Dockerized setup without using runserver. It's scary how many people out there are just creating containers with single command ./manage.py runserver and deploying to produciton.I've been bashing my head against Vagrant+Ansible to set up a simple django project.

Is it possible that Docker is this much simpler? Or am I missing something?"
2015-05-18 13:18:40;UI and Forms - Best practice;Take a look AngularJS and Django Rest Framework. 
2015-05-18 13:05:16;FormWizard - Intermediate step;You can set up the initial data for step N + 1 in the get_form_initial() method, having it look up data based on what was submitted in step N.  get_form_initial() gets the current step passed in to it, making it easy check which step you're on and make decisions, then you can get the cleaned form data from step N using get_cleaned_data_for_step(), using that to get your template name and process the template as needed to go into step N+1's form.
2015-05-18 12:34:07;In order to deploy my local web project from local machine to VPS with git do I have to create a repo first?;"Yes! This will work!
Just create your repo on Github and push the changes to it from your local machine.
Then SSH into the VPS and clone that repo onto it. Then do all the needed deployment operations (like collect static files, make messages and whatnot) and lunch the server, using the correct settings file.

regarding the settings, I found a great pattern to be that explained in Two Scoops of Django. You can have a look at their proposed settings files structure from the [official book's repo](https://github.com/twoscoops/django-twoscoops-project/tree/develop/project_name/project_name/settings).You can push directly from you local git repo to a repo on your VPS without using GitHub. Github has decent instructions for adding an existing project using git [here](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/).

Since you're a total noob hopefully this will get you going. With your local project:-

    cd /path/to/your/project
    git init  (creates a new local repo)

Add all local files (Warning: This will add all files, you shouldn't add files with passwords, etc. I prefer adding files individually):-

    git add .   

Add files individually:-

    git add /path/to/file   /path/to/another/file

Check what is in your repo before commiting:-

    git status
    git commit -m ""initial commit""    (Commit your additions)

Next, create a github (or bitbucket) account and create a new repo. Copy the repo url (https) and tell your local repo about it:

    git remote add origin <your remote repo url>
    git push origin master  (upload your local repo to github)

Then on your VPS:

    git clone <your remote repo url>

If you make any more changes to files you can see what you've changed with:-

    git status

Add changed files with git add, commit and push:-

    git add file1 file2
    git commit -m ""Tweaked the flux capacitor driver to reduce speed to 87mph, will work 2 weeks ago""
    git push

To get the changes on your VPS:

    git pull




Bitbucket has free unlimited private repositorys."
2015-05-25 18:48:30;Help with school project;"Have you ever used Python before? Or Django? Honestly, I don't know how you're going to build an app of that size in just 4 days if you've never used Django. Spend the next two days going through [this](http://chimera.labs.oreilly.com/books/1234000000754/index.html) book AGGRESIVELY.

The moment you have a concept of how to write tests (late Tuesday/early Wednesday), boostrap a project (django-admin.py startproject) and a small app (python manage.py startapp) and write out all of your functional tests for selenium (~3hrs) that basically go step-by-step through the workflow your professor has described.

You could potentially have a very rudimentary setup and understanding by early Thursday if you are absolutely intense about it.

At this point, start adding unit tests and making them pass. An experienced Django developer could do this in a few hours but you are not that yet (and that's okay). Just bust your ass off all night trying to get the code cranked out (good experience for a development career) and if need be, show your prof/teacher where you're at and ask for an extension if needs be (again—good experience for a development career).

START with that book; feel free to PM me questions along the way.
"
2015-05-25 08:38:30;anyone try websockets + django for android backend?;"Django is simply not made for websockets. You should use another tool like Tornado or Node.js.

**UPDATE** Or this one: http://websocketd.com/#tutorial"
2015-05-25 06:55:26;Simple approach to manage pictures in a django based blog?;"For the simple case, I would add a model with an [ImageField](https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.ImageField), allowing you to upload images. This could be a standalone model, or something with a foreign key to your post model, or a ManyToMany to your post model.

These files are stored in your [MEDIA_ROOT](https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-MEDIA_ROOT), not STATIC_ROOT.

Then your markdown needs to reference the files, using the prefix you set in MEDIA_URLDoes django-markdown just create Template files? Then {% static 'path/to/img.jpg' %} should work After you get a hold on the ImageField, and face the next problems related to image size and various optimizations, I suggest to have a look at sorl-thumbnail package. It works wonderfully and is a no brainer to use. Saved me a ton of time during the past year.I find django-filer to work great for this. It can do image as well as non-image files. To access the image's URL, you just use `image.url` (assuming the field is named `image`). Django-filer works with easy-thumbnail to do easy cropping, scaling, etc. "
2015-05-25 05:04:11;Django class-based views example with pagination;"You state that Django caches every view by default, that's only true if you enable the cache middleware.

Furthermore, why don't you just implement the\_\_str\_\_ method and mark the model python2\_unicode\_compatible, instead of implementing both \_\_str\_\_ and \_\_unicode\_\_?Thanks for the article. The tutorials I'm using to learn all want me to incorporate Angular to write forms, but I'd rather not if I can get around it. (I don't really understand why I need Angular either (its a small project)). Thanks again"
2015-05-24 23:36:29;Squashing and optimizing migrations in Django;
2015-06-01 22:02:19;Registration for DjangoCon US is open!;Looks great. My company won't let me take off enough time to go, much less pay my way. Another reason to quit!Wasn't there some hubbub about DjangoCon last year?  Or maybe it was the year before...Sounds interesting. Wish it was closer though. Texas makes for a very long drive for this poor Canadian.what the hell is up with this banner. I really dislike that.
2015-06-01 19:03:32;64Bit Primary Key (BigInt) that auto increments like AutoField (aka BigAutoField).;"It's possible, but requires two things. A [subclass of models.AutoField](https://bitbucket.org/Manfre/django-mssql/src/4f66b7055c73b6fd3355cb2e55d5aff047f10c2b/sqlserver_ado/fields.py?at=master#cl-26) and adding the new internal type name (E.g. ""BigAutoField"") to DatabaseWrapper._data_types for the database backend that you're using.I did this on django 1.5 on both MySQL and Postgres. If nothing mayor changed I can look for the code and post it, it may help.My PR https://github.com/django/django/pull/4970Has anyone been able to do this for a string field? An AutoCharField? I've something working except Django does not set pk attribute from the database after insert or create."
2015-06-01 09:37:49;Noob question: what exactly for I have/need to use Django REST framework?;"You need it for example if you want to use a JS frontend framework like AngularJS or React. Those need to send AJAX requests to some backend API in oder to fetch the data that needs to be rendered. DRF makes creating APIs really simple and awesome, especially when it comes to authentication, permissions and throttling.If you are building an API, DRF takes care of a lot of ""boilerplate"" stuff for you (serialization for example) that you otherwise would inevitably end up wasting time implementing yourself. DRF is great. Easy to use, documents itself, lots of articles. The core docs aren't that good, but otherwise it's the best library for Django. They should merge it into core."
2015-05-31 19:12:05;Trigger sound effects from a web hook using Django and Celery;This project is awesome! I dont really have a use case but the idea is very cool! Thumbs up!
2015-05-31 18:15:14;Wrote this [unfinished] film streaming website 3 years ago;If you want contributions to help finish it, flesh out the README to include state of development and TODOs. Adding a Vagrantfile for the multimachine architecture wouldn't be a bad idea, either.
2015-06-08 19:03:15;Anyone here using Python 3 with Django?;"Both Heroku and Amazon Beanstalk support Python 3. They are also easy to get started.

I am using Python 3 with Django. Previously I used Ansible to automate my setup, but am looking to use Amazon Beanstalk now. I've started using Docker Compose for dev env, which works pretty well. There is no reason to use Python 2 at this point unless you have specific dependencies that aren't ported to Python 3 yet.Python 3.4 + Django 1.8. No problems whatsoever. I deploy to  a private server though, so no insight on any paas.
I would totally recommend moving on to Python 3.4. In fact, I find it annoying that so many users are stuck on 2.7.It's all I use at this point.Python 3 with Django 1.7.  In order to make it work on Heroku, I had to make a little text file, runtime.txt, in the root of the application.  The file contains one line, ""python-3.4.0""  When heroku builds the app and sees that file, it sets the environment to that version of the interpreter and I'm good to go.   [deleted]I use python 3 with Django at work. I think we generally do the server setup ourselves. I think it's been ready to use in production since Django 1.6 if all external dependencies have also been ready. I'm not sure if my company ever had a 1.5 site live.I use Linode VPS running Ubuntu 14.04. A VPS is my favorite way to roll for web hosting these days. Python 3 is so much better than 2 in so many small ways. I use Django 1.7 and Python3 in [DigitalOcean](http://digitalocean.com/). 
[Webfaction](http://webfaction.com/) also has support for python3.
The only problem i found with the update to python 3 is that a lot of packages has no support yet so you must look for other options.
Yes. For the kind of higher level work I do with Django, Python 3 makes unicode much easier. we've considered migrating https://www.djangopackages.com to Python 3, but that probably won't happen until after we upgrade from Django 1.7 to Django 1.8.Unless any of your dependencies don't support Python 3, which is a group getting pretty small at this point for a lot of use, there is no reason why you shouldn't use Python 3 for everything you do.

Also, from a higher level view, Python 2's end of life is in 2020. That means your software written in Python 2.x has a lifetime of only five years at this point.

Use Python 3 if you can.I've been using Python 3 with Django for a while now. For hosting I've used OpenShift, it provides Python 3 support without hacks.I haven't deployed a Django app on Python 3 yet (haven't been doing development for the last year), but I just did an entire course at Treehouse over Django 1.8 using Python 3. Also we've been testing django-braces against Python 3 for the last 2+ years. With very few exceptions, you'll be fine on Python 3.Python 3.4 and Django 1.8 on Dreamhost

Wasn't exactly ""easy"" but thanks to ssh access on their accounts it did work. I followed their wiki instructions for installing a custom Python installation,  used pip to grab latest django version, and then configured project to use passenger. Works fine, just don't overlook the mention of 'pkill python' in the docs; kept wondering why things weren't updating until I added that to the end of my deployment script.

They also have an easy install script but the version of Django it installs is old (1.4, I think) so I didn't bother trying it.I use dreamhost. Although they use Python 2.7 by default, I was able to download and install python 3 in a virtualenv.

I wrote a [blog post]( http://brobin.me/blog/2015/3/22/deploying-django-with-virtualenv-on-dreamhost) a while back to document the process.I'm using Django 1.7.x and Python 3. I'm using Digital Ocean, very good stuff.

You can also try PythonAnywhere: https://www.pythonanywhere.com/
There's a recent resource they implemented to facilitate the use of Virtualenvs.

Referral link for Digital Ocean: https://www.digitalocean.com/?refcode=9125da8d6399
You will get some credit using this link, and me too. :PI am. I'm con AWS though... So my own server. I think its a good a time as ever to jump to 3.[Webfaction](https://www.webfaction.com/?aid=2031) certainly supports Python3 with Django and has done it for years. Unlike Heroku, Beanstalk and the likes, they don't force you to run in containers or adopt specific formats, they just configure a basic Django+webserver setup and then give you an ssh console to get on with it. 

Python 3 is now mature for adoption at all levels and there is no reason to hold back.I'm migrating all of my company apps to 3.4, and Django 1.8. No issues at all, if you use the right OS. Debian 8 or Ubuntu Trusty.I'm using 3.3 and django 1.6 currently for my app I'm developing.  All the packages I'm using support Python 3 so it hasn't been an issue.  Currently on digitalocean using centos but moving to aws and Ubuntu at launch.  Moving to Ubuntu simply because most of the tutorials out there were for Ubuntu so as much as I love centos it took a little more digging to find the right config to get the whole stack up (django, nginx, gunicorn, etc).https://www.pythonanywhere.com/

Its really easy to set up with Django compared to some hosts.I would highly advise you to make the jump to Python 3. 
Learn to leverage virtual environments. 
If you are on a Unix based system, install Python 3 to /usr/local/bin/ or a similar location to keep from messing with any system paths.
Then, use pip3 (should come with your Python 3 install) to install virtualenv and virtualenvwrapper. 

You will not regret it.I use Python 3.4 and Django 1.8 on Pythonanywhere.com."
2015-06-08 14:55:50;404 No User matches the given query. [django-userena];"its probably line 39; there's no forward slash between <username> and the other ones.  I'd remove that line and see if things start working"
2015-06-08 10:53:48;Need help simplifying models;"For the different WorksiteActor subclasses, you will need to move the `worksite` field to the subclass, so that you can define a different `related_name` for each one of them.

An alternative is that you put the field onto WorkSite - for OneToOne fields you can choose where you put them. You will get different database schema - it depends on which queries you are likely to want to do. Actually, I would have guessed that a single Architect/Client etc. could be associated with multiple WorkSites, in which case you shouldn't have a worksite OneToOne on the Architect, but an `architect` FK on the WorkSite.

Tip: the related name of a 'many' relationship (ForeignKey or ManyToMany) should be a plural. e.g. `ClientAssistant.worksite` should have `related_name=""assistants""`. If you do this, you will end up with code like `worksite.assistants.all()` which is less confusing than `worksite.assistant.all()`

I was actually taking the problem the wrong way !

I've just heard about Generic relations for my checkboxes :) https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations"
2015-06-08 09:05:27;Searching for an american django developer to talk about django;"Hey I'd be happy to talk about it. I'm a novice with python and just started learning django, I'm not sure what your skill level is but if you think its a match I'd be happy to Skype or gchat. I personally can't do this (no time as a full-time worker with a full-time job, three year old, and an old house that needs constant attention) but as someone who has done this in the past, this can be very rewarding and I highly recommend that if people do have free time they consider doing this.

bykof, you might also offer an exchange, spending some time speaking German so that others can learn your language.[removed]"
2015-06-07 13:26:02;Problem with get_or_create and ManyToMany Field;"The parent object must exist first before you can add the objects for a ManyToMany field. So even with get_or_create, you have to add your venues after you have your object.I know this is a little off topic, but you shouldn't be using null=True on CharFields and TextFields. Just blank=True will suffice.

https://docs.djangoproject.com/en/1.8/ref/models/fields/#nullOn a sidenote, in upcoming Django versions it will no longer be possible to use lookups in get_or_create: https://github.com/django/django/pull/3793"
2015-06-15 15:02:26;How to find all project's urls which meet certain conditions?;"Try this:

    from django.core.urlresolvers import get_resolver
    resolver = get_resolver(None)
    resolver.resolve(""path-to-check"")

https://github.com/django/django/blob/master/django/core/urlresolvers.py#L149

resolver.resolve raises Resolver404 if the url does not exist in your urlpatterns. I just tried this in 'manage.py shell' after seeing your question, not sure if it will solve the problem. Lemme know how it goes."
2015-06-15 13:25:44;Django : How to implement a facebook like user updates, likes and comments.;"https://github.com/justquick/django-activity-stream is great for the feed/post functionality, i use this together with a simple generic comment app.>  Since, it is a very common scenario, is their some already build-in app for this which can get mapped to 'User' model?

perhaps. try browsing around here: https://www.djangopackages.com/grids/g/commenting/It is not trivial to implement something like this.  If you are new to web development you should pace yourself with this one because there is not a one-click solution to do this.As far as I know, this kind of stateless, real-time feature is best done with AJAX. You could try using a front end framework like Backbone.js, Angular.js, Ember.js etc to get it done. Using these would require using Django Rest Framework or Django Tastypie to send your server side data to the front end in JSON. Also, everything I mentioned takes a bit of time to learn so if you really want to implement those features, be prepared to put in some serious time. You'll come out of it with good skills and practice when done. 

Edit: grammartry swampdragon, its a django package for implementing real time stuff with websocketsYou'd have to use a javascript server and framework like React or Angular to do this. You could probably do it with a simple polling javascript, but it's a failure waiting to happen."
2015-06-15 11:15:00;Question on speeding up image intensive site;"Generating thumbnails is of course one possibility but you can also do it on the frontend side by reacting on scroll events. When an image is not yet in the visible area you just don't load it. There are JS libraries that can help you with that.I'm using sorl-thumbnail. Works well.

https://github.com/mariocesar/sorl-thumbnailHow large are the images in bytes? I wouldn't expect 30 900x900 sanely compressed JPGs to be a problem. I would probably avoid resizing and cropping them with Javascript though and use CSS rules instead (`background-size: cover` for the cropping). Flickering could be avoided with CSS as well.

As an optimization, or if you don't trust users to upload sane images, you could resize and crop the photos using something like [PIL/Pillow](https://pillow.readthedocs.org/) or [pgmagick](http://pythonhosted.org/pgmagick/). In that case, you may want to do the scaling in the upload request handler or in a background task as opposed to scaling them on the fly when users load the detail page, or at least cache the thumbnails once they have been generated, depending on how much CPU you have to spare.

A second option is to use a CDN that can generate thumbnails on the fly.You can use sorl to create thumbnails when images uploaded. For a better result, you can also use memcache to cache resultset.The other replies here are all good advice, but an aspect not touched on yet is how you are serving the image files.

You may want to look into serving the image files from something like S3 or CloudFiles. This may not be the main bottleneck, but can still be worth doing. Yes, of course use thumbnail versions. Generate them on the server side using Pillow when a new image is uploaded. That's easy to do. 

I'd do that anyway and would never serve a picture file as it was originally uploaded, without resizing it and then serve my resized version. Usually I have /raw /large and /small directories under /media for the different versions. "
2015-06-15 05:38:48;"Please point me in right direction: I want to draw a horizontal ""number line"" in the middle of the page. On this number line are boxes with content, each box located according to its value. I want to be able to scroll down the number line as well.";"This is not relevant to django, but what you're describing sounds like a timeline.
This stackoverflow thread has a good example that might be useful: http://stackoverflow.com/questions/21916615/horizontal-timeline-in-pure-cssThis doesn't have anything to do with Django, you're rather talking about frontend coding. I'm not sure if you'll get a lot of help here, try StackOverflow"
2015-06-14 18:09:14;Django 1.8 no makemigrations/migrate?;"try to reinstall django maybe it got corruptedAre you sure you're using the right version of python? I'm thinking you might have installed using pip for python 2 and then tried to run with python 3 and picked up a different django install. (or vice versa)Hello, are you running virtualenv?
That doen't look like Django 1.8. Run ""sudo pip install django==1.8.2""
Pay attention, it might show you a warning saying that you should delete a previous version by had (rm -rf) and then re-install it.
"
2015-06-22 20:46:34;What is the best way to do nested comments in django?;"Have a look at https://github.com/django-mptt/django-mptt/

A bit of googling should turn up some examples of using this for threaded comments.Pull all the comments out for one submission in a single DB query, then build a dictionary that maps parent comment IDs to lists of comments. You can then recursively move through those, and the lookup cost of a comment thread is O(1), given dictionary access time. I wrote about this a while back with some sample code as well: http://blog.jupo.org/2010/01/26/linear-traversal-of-adjacency-list-trees/

Mezzanine (a CMS built with Django) uses this approach for hierarchical navigation, and also threaded comments: https://github.com/stephenmcd/mezzanine

There's also a Reddit clone that uses Mezzanine's built-in commenting, rating and user accounts called Drum, you might find it interesting to read about: http://blog.jupo.org/2013/04/30/building-social-apps-with-mezzanine-drum/A couple of former coworkers of mine made [this library](https://github.com/raekkeri/treecomments), that has been used a couple of times in production environments. Looks like it hasn't been updated for a while though.If you are going to use templates recursively, you probably also want to cache the templates them selves. Otherwise django will read and compile your comment template for each comment. You should use the cached templates loader [as described here](https://docs.djangoproject.com/en/1.8/ref/templates/api/#django.template.loaders.cached.Loader)."
2015-06-22 19:25:23;How to troubleshoot script from within Django Shell?;"You can with iPython's autoreload extension: https://ipython.org/ipython-doc/dev/config/extensions/autoreload.html. If you're not using iPython, you should be because of all the benefits it has (tab completion, history, etc). `pip install ipython`. Django will use it for the shell if it's installed. You can't. It's the same as editing something when running on an external server service. You'll have to restart the 'service' of django shell. Sucks, but them's the bricks. You are running a script right? Why not just use 

    %load scriptname
    main()

 (assuming you have ipython installed and django is using it as your shell).deleted "
2015-06-21 23:49:42;Django Hackathon Starter;This has been posted here no less than 100000000 times.Fail: https://github.com/DrkSephy/django-hackathon-starter/blob/master/hackathon_starter/hackathon_starter/settings.py#L106-L157
2015-06-21 21:24:21;Offload everything to Celery?;"This is not a good idea. If your database query takes so long, you should work on optimizing that query. If you are doing searches on the database, you can probably use a search engine, probably one of the ones supported by Django Haystack.

Celery is for things the user doesn't need in the response.

The classic example is a simple contact form. Someone fills out the form. The view would normally look something like this.

    def contactform():
        # form processing here
        send_email(subject, body, from, to...)
        return response()

In this example the user is going to press submit on the form. Then they are not going to get a response and a ""success"" page until your web server is done actually sending an e-mail. That means their browser is waiting to load all that time. 

Assuming you don't care about telling the user if the e-mail failed to send, you can render that success page without actually sending the e-mail. The problem is you can't do this, even though it would be great. Simply because django, and just about every web framework, is designed to where the return from a function is the http response. Therefore, you can't have a view do anything after the response is sent. 

    def contactform():
        # form processing here
        return response()
        send_email(subject, body, from, to...)

And THAT is what celery is meant for. With celery you can do this.

    def contactform():
        # form processing here
        send_email.delay(subject, body, from, to...)
        return response()
        
Now the view doesn't actually send an e-mail. It just quickly contacts your RabbitMQ server to insert a job into the queue. That takes a very small amount of time. Then it returns the response to the user immediately with no waiting. The e-mail gets sent sometime later after the user may not even be on your site any more.

TL;DR: If you want to send something to the user, it should be in the response, and you need to process it in the view. Celery is for doing extra work that isn't required to render the response to the user.This is actually a little similar to the system I'm proposing for Django (http://www.aeracode.org/2015/6/17/beyond-request-response/), but you don't want to do it using Celery really as it's not designed for it; you're going to have to manually encode and decode requests and responses, your return channel is going to be slower than it should be, and other things.

If you're interested in the idea you can give my prototype code a shot - it uses Redis as the transport rather than Celery - but honestly, I'd wait and use a normal webserver until/if this becomes a stable third-party app or makes it into Django.Use gevent instead, and park nginx in front of python - it will help handle long requests.

Once you've done that you can start fixing your slow backend. Probably something with indexes, etc.You are basically trying to mimic non-blocking IO in a system that was not designed for it. Probably won't end well. Is there a reason you want to do this other than curiosity?This doesn't make any sense. Your query will take the same amount of time whether it's async or not, so the user will have to wait the same amount of time regardless. All you will achieve is adding complexity to your application and gaining literally nothing. Fix your backend. 5 seconds sound like a problem in your backend. If you start queuing tasks that take 5 seconds yet come every half a second you're going to quickly build up hours worth of waiting.celery is for asynchronous tasks. typically a web page response isn't really asynchronous. the user clicks something, and expects a result in a reasonable amount of time. with celery you can't guarantee reasonable amount of time. your queue might get backed up for reasons that are very opaque and hard to debug. you don't want your web app to basically turn into a brick (no user responses) when you have a backed up task queue. 

what you might be aiming for is some kind of non-blocking IO, so multiple requests can be responded to at the same time. I would use uwsgi or gevent for this. let celery do what its actually good at (background tasks, that a user isn't waiting on). generally you can run one uwsgi process per core on the machine hosting the server.Think of it this way:

Someone is going to send some partial query string to your backend, and there's some set of data you'll get back.  Maybe it's something like someone types:

Snoop

and you do something like:  Musician.objects.filter(name__icontains=search_text.lower())

and serialize the results to JSON and send it back. And depending on the size of your dataset, that can take quit some time.  So you're kind of on the right track with Celery except what would be a better solution is, precompute a bunch of possible queries and the results you'd get for those queries, then store those results in something fast like Redis or whatever, and then when someone's typing, just query that cache directly.  Then you have a set of scheduled celery tasks that will walk over your database semi regularly and recompute the precompute partial query results in your cache.

Of course it's more complex and involved than that, but that's roughly the idea."
2015-06-20 23:30:17;Django & PythonAnywhere Blog Post Spot Check;
2015-06-29 19:25:51;ManyToManyField add() with non-default database, using database routers and .save(using='newdb');"have you tried the `db_manager` method described here: https://docs.djangoproject.com/en/1.8/topics/db/multi-db/#using-managers-with-multiple-databases

that suggests that code that looks a bit like this should work

    an_A_model_instance.b_sets.db_manager('new').add(a_B_model_instance)

Huh, I'd expect this to be handled by the DB router by `db_for_write` and `allow_relation`. If it isn't, you might want to file a bug in Django, as this is not a cross database relation, the relation exists in the same database. Which makes me think... is the many to many table in the 'new' database?

Another thing that comes to mind... if you configured the database router correctly, you wouldn't need to use `using='new'`all the time, as the router handles that..."
2015-06-29 09:06:06;How do I teardown/rebuild Django?;"Delete the database and rerun the migrations. 

Is this using SQLite?if you're using Postgres on Heroku, then in psql DROP DATABASE databasename; 
CREATE DATABASE databasename WITH OWNER databaseownerfromsettings.py;

...will ditch the data - I'd also rerun the migrations, or delete them entirely and redo from syncdb, schemamigration app --auto and into migrate app.

Edit:  I should say - I've literally *just* done this yesterday, as I was rebuilding something to read in data and needed to lose the existing data. 


"
2015-06-28 15:35:10;"Where exactly is it mentioned explicitly that ""form"" is passed in the context of UpdateView?";"[deleted]http://ccbv.co.uk/  

Classy Class-Based Views.  
Detailed descriptions, with full methods and attributes, for each of Django's class-based generic views.

"
2015-06-28 13:53:55;Refresh Proxy Model verbose_name after save?;"Seems like you're trying to shoehorn something into the admin site that it wasn't made to handle.

The reason why it only updates when restarting the server is because the value of `verbose_name` is evaluated only once: when Django starts.

This is the same as when assigning the count to a variable, the count doesn't update the variable:

    open_tickets = Tickets.objects.filter(closed=False).count())  # let's say this evaluates to 2
    Tickets.objects.create(ticketDescription='foo')
    assert(open_tickets == 2)  # no AssertionError, the new open ticket did not update the variable.

I'm not entirely sure if it is possible, but you could try a post-save hook to update the `verbose_name` attribute of `TicketProxy`, but that doesn't sound like a good idea, and I'd advise against it.

Your best bet is probably to find a package that does something similar to what you want, or to do it yourself, by [overriding some of the Django templates](https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#overriding-admin-templates).

---

On a side note, it is convention to have model names be singular, not plural, i.e. `Ticket` not `Tickets`; and variable/attribute names should be snake_case, not camelCase, i.e. `ticket_description` not `ticketDescription`."
2015-06-28 08:21:45;social network made with django rest framework;"[Django-AllAuth](https://github.com/pennersr/django-allauth) might help you integrate existing social networks.

Are you trying to create a social network of your own? Like, competing directly with Facebook, Twitter, Google+, etc.?

Edit: s/cometing/competing/"
2015-07-06 22:24:31;[library] django-systemjs - integrate jspm/systemjs with Django;
2015-07-06 12:36:01;[Question] Debugging has become really hard. How do I see more info about the INTERNAL SERVER ERRORs?;"Don't you have `DEBUG=True` in your settings file?

That would show the traceback in the browser.install a lib called  debug_toolbar and it breaksdown few things for you ...   and you can get useful insights into where things have gone wrongUse loggers next time. Depending on your requirements you can use something like appsentry. Any exception sends the trace to their service. 

https://getsentry.com/welcome/

I use this service and it has saved me a lot of effort. It makes finding errors in things like Celery a lot easier and generally keeps you posted if you have anything really FUBAR.You could try `pdb`.


    import pdb
    pdb.set_trace()

Just paste that piece of code where you want to inspect things. With it you can do things like inspect variables. [Here are the relevant docs](https://docs.python.org/2/library/pdb.html)

This applies to all Python debugging btw."
2015-07-06 08:33:14;Display data in a table with sort and filter;"[django-tables2](https://django-tables2.readthedocs.org/en/latest/) support sorting, if you want filtering I think you need to add that yourself and change the queryset based on the GET/POST parameter

although it's more complicated lately I've used [angular ui.grid](http://ui-grid.info/) but there are also other alternatives like [jquery datatables](https://www.datatables.net/) that might be easier to use if you don't know angularI don't know much about djangosuit, but I second what Brandhor suggested--[django-tables2](https://django-tables2.readthedocs.org/en/latest/). 

As for filtering, I just accomplished exactly what you're looking for by combining [django-filter](https://django-filter.readthedocs.org/en/latest/) with django-tables2. Works great!

There are some StackOverflow answers discussing how to combine them too.I use this whenever I need to do what you are asking: https://www.datatables.net/"
2015-07-06 03:12:19;Advice on designing a multitenant Django system with remote database servers;"So, the remote DB connection is to the customer's DB instance? 

The suggested method is almost certainly the best approach.  

I once started down the path of the alternative (which is using alternative connections and then re-wiring every database call to make use of the appropriate handler), and it's a painful path.  

Just have a single settings file for each customer (note: they can be programmatically generated) and an appropriate nginx/apache file that specifies which settings file to read from (again, can be programmatically generated) and save yourself the headache of trying to be clever.  

If is understand correctly, you will have two Django apps talking to one database: that means that you need to keep your models in sync in both apps. If you only have a couple of basic models it might seem doable, but it can quickly get unwieldy.

You mention adding an API - I would suggest that you start with that and only use that. 

The client app can manage its own database and provide an API that the main app can connect to. You lose the nice easy ORM-ness of talking to the database directly, but the end result is much more maintainable, particularly if this system grows to dozens of clients.

Have a look at Django rest framework which will probably do 90% of what you need for an API automatically.

Another option, if the data is read-only on the main app side, is live replication of the database. MySQL handles this really well, but you'll want a reliable connection between the servers for it to work reliably. I am pretty confused at this architecture.

Why does each client get their own database?one wsgi and settings file for each domain sounds like the best and easiest choice[deleted]  
 ^^^^^^^^^^^^^^^^0.3607 
 > [What is this?](https://pastebin.com/64GuVi2F/87596)I would design an API for each customer, keeping them as similar as you can... THen the master uses *only* that API to talk to the clients. No database connection to the clients at all. If the master needs any data, it uses the API to get it.

If you do otherwise, you'll run into problems when things go bad.. Like 'which app wrote which data', etc. It'll make things more difficult to track down."
2015-07-05 23:55:15;[help] Deploying a django app to webfaction using bitbucket (git);"I use webfaction and I use bitbucket. Here's what I did. I used their one click installer to create a Django project. This gave me an Apache server setup configured for Django. This step also gave a Django installation. However I deleted that and installed my application's source code (git clone wherever you want) and dependencies (virtualenv and pip). I then modified the Apache configuration file to refer to my source code's wsgi.py file.

This is my command to upgrade running code on webfaction:
`ssh username@username.webfactional.com ""cd ~/mywebsite.git; git pull bitbucket master; touch myproject/wsgi.py;`Let's say you already have a django site running on Webfaction. To deploy using Git, you can set up a git project at Webfaction and then set up a repo that automatically checks out the code when you post to it.

1) You can follow these instructions to get a git application running on Webfaction:

https://docs.webfaction.com/software/git.html#installing-the-git-web-application
https://docs.webfaction.com/software/git.html#creating-a-new-repository

2) Then, from there, you can do the following: https://community.webfaction.com/questions/1246/using-git-with-applications/1781

3) Add the git project you set up in the first steps as a remote for your local git repo.

This would be disconnected from your Bitbucket workflow (you would have two separate remotes). It is probably possible, however, to set-up a post-commit hook at Bitbucket that automates this somehow?

**Edit**: Or you can do it the other way, posted by  /u/mssnlayam"
2015-07-13 22:52:17;"[Beginner] Does anyone else feel very limited by using ""magic"" features for things?";"The beauty of Django is you absolutely don't need to use any of the pieces you don't want to use.

You can very easily write a function based view (or class based view) that looks at post variables and then you write some code to handle them.

You don't have to use a ModelForm. You don't even have to use a Form at all. You can manually handle all of the input and validate it however you want (or don't!).

The strength of Django is the ability to use what you want and extend it as you see fit but also be able to drop back into a more ""low level"" any time you want.

    def savestuff(request):
        myname = request.POST.get('name')
        mymodel = MyModel()
        mymodel.name = myname
        mymodel.save()
        return HttpResponseRedirect('/success')  # or render to response, etcDjango tutorials are not intended for learning the basics of web dev, they are for learning Django.

Django exists to remove some of the tedious monotony from web development by providing standard ways to do things everyone does day-in, day-out.

As a beginner, forms being declared in code and then all the HTML and validation handled for you may seem limiting, but once you learn how it works, you'll see how useful it is and how much time you save. Also, look up the DRY principle - it will help explain why Django does the things it does. 

If you want to handle form input yourself and validate it manually, then update the database, you can absolutely do that in Django. Just build you HTML, post it to a view, grab your values from request.POST and save them in your database. a ModelForm is a specific type of form that is tied to a single model object, since you are doing something a bit different with the form data you can just use a plain Form https://docs.djangoproject.com/en/1.8/topics/forms/#the-view

the ""magic"" of django is really nice because you don't want to waste time reinventing the wheel but you are not really forced to use it either, for example for form rendering you can write the whole html yourself, you can use django's form.as_p, if you use bootstrap templates you can use something like crispy forms so you get a nice bootstrap form with just 1 line of code or you can make the magic yourself by writing a custom template tag, filter, or form function that render the form the way you want
i'd recommend using [flask](http://flask.pocoo.org/) for learning. it forces you to make decisions and gain an understanding of decisions that have been made by others... such as those embodied by the django defaults. 

nonetheless, i love django, and i use it as my first choice web framework for most things. but if you don't understand the bells and whistles or the justifications for them, start with flask. it's great, too.If you want to learn the underlying mechanics read the source code. The beauty of Django, and frameworks in general, for me is that I can focus on delivering the functionality my endusers need without having to start at the foundational level. I don't necessarily care about the request life cycle. I do care that my data is extracted from the request and stored in the database. Django lets me focus on what is important at the higher level.Sorry for late post, but I felt like adding my two cents about this line:

> Why would I want Django to render html elements for me? that seems ridiculous tbh...

A framework's job is to automate certain things, like rendering forms, so that you don't have to manually build them in your template, or handle every field in your view. This is supposed to help the back-end guy work with the front-end guy - you build a form that is ready, complete with all the fields you require, all the handling and data validation etc. You let the front-end guy know the form is in the context and he can access it, maybe give him a list of fieldnames, so that he can arrange the fields and put them in as many divs or uls as he likes. Without this in place, you would have to supply him the model, make him understand what kind of data each model field needs, and then handle EVERY field in your view like in HowlingDonkey's example - not to mention cleaning and validating would be a nightmare, so would things you might want to do with your model/form in the future.

As a back-end guy without anybody to write html/css for you, you really, really want Django to render HTML elements for you, especially when your form consists of 15 fields of various type. It is tedious work. There are downsides, like with everything, for example if you don't like the default way it renders a particular fieldtype (CheckboxSelectMultiple with bullets, wtf?), or when you need a little more customization to some of the fields, like putting a button next to one of them. But with forms defined in forms.py instead of the templates, the view code stays readable and pretty much all you ever need to tinker with is in one file, with proper indentation and field validation already in place (with easy ways to expand it). 

There's nothing I despise more than HTML+CSS - just inspect any webpage and try to quickly find what does what (even with highlights!), you'll understand why. I don't want to write any of that manually, just {% for field in form.visible_fields %}, bootstrap it and forget about it."
2015-07-13 21:12:23;Modify uploaded file;Since you want to just modify the file on the disk you can just trigger a function of post_save signal which would read file from disk and modify it accordingly. This will save the time during save.
2015-07-13 17:11:48;Happy 10th Birthday Django! | Weblog | Django;
2015-07-13 14:28:03;Technetium - The Bitbucket Data Aggregation Tool;
2015-07-13 10:46:15;NoReverseMatch at /polls/1/results/ in Django tutorial 1.8;"It seems like you are missing an argument in your URL call.  
Can you show us that call?I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/programming] [NoReverseMatch at /polls/1/results/ in Django tutorial 1.8 : django](https://np.reddit.com/r/programming/comments/3d44c1/noreversematch_at_polls1results_in_django/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))*

[](#bot)"
2015-07-20 14:37:36;We just open sourced tri.tables, a library for creating HTML tables with lots of common features!;Can anybody compare this to django-tables2?[deleted]
2015-07-20 02:50:31;Django Framework for Ecommerce/Social Network website;"Back when I was building an ecommerce site, I looked into Oscar and Mezzanine.  Both seemed too specific about their use cases to be useful for me.  If I recall correctly, they depended on the concept of a catalogue that needed to be maintained, whereas the stuff I was selling was effectively dynamic, so this requirement meant these modules would be working against me.

Django CMS is great... if you're building a content heavy site.  But if you're doing a social networking thing coupled with ecommerce, you may find the expectations of a CMS to get in your way.  I've never used it though, so you probably shouldn't take my word for it.

TL;DR: It sounds like you want something very specific, so it may be a good idea to avoid large modules with comparatively rigid use cases.You might want to check out http://shoop.io - it is based on Django 1.8 and is a very nice new ecommerce framework. The good thing about it is that it will not constrain you to some specific type of web shop - it will provide you the means to build a site with a powerful webshop integrated.I've worked with oscar and Django cms in the same project. I think you should build your project from scratch because what you want is more different from what both of them offer.

Plus I used Oscar and it is too big for what you usually need and you will eventually end up customizing alot.We are currently [building atop django-oscar at edX](https://github.com/edx/ecommerce). Similar to [Django's sites framework](https://docs.djangoproject.com/en/1.8/ref/contrib/sites/) you could extend the Product model with link to a Shop model that has an owner/User. This would allow you to control who can modify a product and where it is displayed.Learn Django."
2015-07-19 03:34:28;Why Django over PHP xor Ruby?;"Your question would be phrased if the 3 piece of software you'r asking about were in the same categorie. Django is framework, PHP and Ruby are Language. 
So it would be : 

* Why Python over PHP or Ruby.
 
Or

* Why Django Over Symfony or Ruby On Rails

It's a wide question. And ultimatly is a matter of taste.

I do have a strong preference, a mild indiference and a slight distaste for the 3 susmentioned technologie. But it might not apply to you.

All of this 3 technos are able to produce very nice piece of software. In the world of webdev. ( and that the trick )

Ask yourself what you wanna do with it. 

* Django is written in python, it's a language used in wide spectrum of field. From webdev to science labs. 
* Ruby on rails is a ruby framework... .ruby is a well regarded scripting language. You will find it in several sysadmim/devop tools.
* Symfony ... well, last time i did some PHP, Symfony did not exist. It was cakePHP and it was still messy. But i heard it got better.

Unlike another response says, PHP is both a language and a framework, so it is appropriate to compare to Django/Rails, as well as to Python/Ruby.

First, there is the language issue. **PHP-the-language** wasn't really designed at all, it just kind of grew from a set of scripts that were never meant to do anything big and complex, and [it shows](http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/). Once you get to know other languages, you become aware that PHP combines all the weak points of other dynamically typed languages, without any of the strengths (like metaprogramming and introspection techniques that are both powerful and elegant).

The authors of PHP such as Rasmus Lerdorf [continue to make extremely poor design decisions](http://lukeplant.me.uk/blog/posts/why-escape-on-input-is-a-bad-idea/). The additional things that are bolted on to the language don't really address its inadequacies.

To make this point another way: how many sensible, experienced programmers would choose PHP for a task if that task wasn't to do with making a web page? Contrast this to Python and Ruby which are both go-to languages for a large range of tasks, quite apart from their usefulness for web sites. Python usage, for instance, is absolutely huge in many branches of science. It is clear that PHP-the-language is an extremely poor contender.

Then, **PHP-the-web-framework** is just totally inadequate in every way. Almost every decision they made (URL routing, escaping in templates, input handling, database APIs) was wrong, and has led to a lot of [security issues](https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet#Framework_issues).

This means you need to use PHP plus an additional web framework. By this point, you have lost all the advantages of using PHP in the first place - the web framework will make things much slower, and all the simple techniques of just doing `<?php ?>` in an HTML file, and doing `$_GET` wherever you need to etc. are now recognised to be anti-patterns that you have to avoid.

So, why use PHP in the first place if you have to un-learn all the things it provides?

In addition Django and Rails have many other advantages, like an ecosystem of **high quality** libraries, tools, and developers.

PHP will certainly provide you with the advantages of:

* large numbers of developers available. Many developers who have experience, sense and take pride in their work will teach themselves new things, and will prefer to work with better tools, though, so finding **high quality** developers who are happy and continue to be motivated when working with PHP is going to be increasingly difficult.

* easy deployment - but every single thing that makes deployment easy, also makes it hard to do correctly and securely (see above).

Having done some years in PHP before using Django, it is difficult for me to see PHP as anything other than a legacy technology - sure, you may need to work in it, just as COBOL is still going strong, but I can't  see why you would choose it for any new project that you really cared about.The only reason to use PHP, in my opinion, is having tons of legacy code and no choice really.I have nothing to say other than this thread is really really good. Love the appreciation, support, knowledge, and lack of judgements.

I work with Django. I like it. The ability to look at the source code, and the large community / auxiliary support (thinking of books like 2 scoops of django) make it really nice and you feel that you are growing your knowledge each day rather than just repeating yourself.I used to script in Perl, later PHP, and now Python. I chose Python over Ruby because I liked the syntax and philosophy better (PEP020 especially). 

PHP is nice too quickly hack together smaller things, but I don't like it for larger projects, it looks just too messy and hard to read.

Django is great because it's very lightweight, yet has everything optionally included. Gives projects a predictable structure and makes it easier to read.My 5cent: 

* PHP is kind of messy

* Ruby on Rails is the killer app for ruby and the gem system is nice

* python and django: my favourites - its like giving a (web)-ui to every python script ever written. Well its basicly the same for ruby but I know python better.

Also nice screenname.Don't look for a ""killer"" feature.  Most frameworks do everything the other does.  Look for one that gives you the most prospects.  Look for the one you subjectively like more.  asking php people for advice on modern technology is like asking a 90 year old their advice on the internet.

Why shouldn't you use php? [Here's some reasons](http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/)

Why shouldn't you use rails? Well, this is more opinionated, but it's a poorly designed framework that doesn't lend itself to testing, has far too much magic, too much code generation, and doesn't scale well.

Why shouldn't you use Django? It's got it's own flaws, including scalability to an extent, it has a strong set of opinions just like python.

I'd choose Django over any of them because Python's awesome and the documentation is phenomenal.i'm far more experienced in PHP than python... not that i'm bad with python, just that most of our work stack is PHP based, and our [closed source] PHP framework is incomparably better than django.  it's to the point where i hate doing webdev in python because i'm rewriting libs to catch it up, or i'm building it out knowing i'm generating mountains of technical debt.  and django's frontend interactions are just bad.

if you're learning today, i'd say learn python+flask or node (JS), strongly leaning towards node.  ruby is already on its way out, so don't even bother if you don't already know it.  PHP has a huge install base, but most of your work will be on maintaining and adding features to shitpiles buried in incomprehensible amounts of technical debt.  sure, you will get that in python/node, but not nearly as much.

i'm CTO at a comscore 1k publisher, and if we were starting something from scratch, i wouldn't do it in PHP.  it'd more likely be done in node."
2015-07-18 22:34:00;Populating field options from a different field in Django;"If the category is described in the subcategory, just store the subcategory with the summary model, then put in a category method on the summary that pulls it from the subcategory.

For the form logic, you can either make a ajax pair of fields (you'll have to write some JavaScript) or have a subcategory dropdown grouped by categories. There is existing code for both, but I don't have links ATM.[deleted]"
2015-07-18 12:06:18;Django Token Based authentication problem in verifying the token at Django end;"Why don't you wanna use already made DRF TokenAuthentication?

http://www.django-rest-framework.org/api-guide/authentication/#tokenauthenticationIt looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.

You may want to [contact the Reddit admins](http://www.reddit.com/message/compose?to=/r/reddit.com) about this.

###_
^Remember ^that ^reddit ^uses ^""shadowbans"", ^in ^which ^you ^can ^still ^see ^your ^posts ^and ^profile, ^but ^other ^users ^can't. ^For ^more ^information, ^check ^out ^/r/shadowban."
2015-07-27 23:00:46;DjangoCon schedule;"What talk are you most eager to see?I hope a spot opens up, I'm on the waitlist :/I'm so stoked to see the [Building theatlantic.com homepage’s WYSIWYG admin with Django and Knockout](https://2015.djangocon.us/schedule/presentation/80/) talk! I'm working on an app to easily integrate Django and Knockout and I'm interested in their approach.  
I can't make it in person but I hope it's put online soon.Talks I plan to see:

* Confident web development with React
* Dubious Database Design
* Django Dreams
* Minimum Viable Security
* I never Meta model I didn't like: The Django 1.8 Meta Interface
* Django Authors Panel

I'm excited by the last one (Django Authors Panel), I'm going to get both my 1.6 and 1.8 version of 2scoops signed. :)"
2015-07-27 18:15:11;Django CRUD example / tutorial;"I wrote a post with sample source code, hope you find it useful:
https://rayed.com/wordpress/?p=1266What's wrong with Django's official tutorial?

CRUD just means that you're able to create, retrieve, update, and delete data. There's nothing magic about it and the official tutorial covers that.Oh man, [look no further](http://www.django-rest-framework.org/).  As far as I'm concerned, DRF should be the first app you ever add to django.  The tutorial is wonderful because it shows you all of the abstractions and moving parts you can tweak before it shows you how to make it ""just work""."
2015-07-27 13:07:10;Hitch test: new Django testing framework;Hacker news discussion: https://news.ycombinator.com/item?id=9954910[deleted]
2015-07-27 08:53:59;allauth problems extending SignupForm class;"Hey, based on your settings, I'm guessing you're using 3rd party authentication (social login) so you'll have to extend the SignupForm from the socialaccount module instead:

https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/forms.py

    from allauth.socialaccount.forms import SignupForm


If you're not using 3rd party authentication, you'll have to change your settings to:
   
    ACCOUNT_FORMS = {
        'signup': 'website.forms.CustomSignupForm',
    }"
2015-07-27 06:55:25;Why does saving a file give me the error 'file' object has no attribute '_committed' ?;"I don't think that's the proper way to do it, I usually do it with ContentFile

    from django.core.files.base import ContentFile
    x.image2.save(filename, ContentFile(bin_data))

but if you want to create the file on disk yourself I think you can use django.core.files.File

    from django.core.files import File
    with open('static_store/users/%s/{}.{}'.format(filename, data[0]) % foldername, 'wb') as file:
        file.write(bin_data)
        x.image2.save(filename, File(file))
A full traceback would be helpful. When you're asking for support and there is a traceback then don't make people ask for it.

Also, ...

    image1 = models.ImageField()
    image2 = models.ImageField()
    image3 = models.ImageField()
    image3 = models.ImageField()
    image4 = models.ImageField()
    image5 = models.ImageField()
    image6 = models.ImageField()
    image7 = models.ImageField()
    image8 = models.ImageField()

... how about normalizing your data model *properly*?"
2015-08-03 18:54:03;Anyone built a site that uses one of the Stripe apps out there for payments?;"dj-stripe is the project I started, and it is a hard fork of django-stripe-payments. While django-stripe-payments is a great project, it didn't quite do what I wanted. It's evolved a lot since then, and here are some features of which I'm very proud to have seen come into the project thanks to our amazing contributors:

* 100% test coverage. Because you want confidence in your payment system.
* Handles subscriptions or single unit purchases.
* Very easy installation.
* Built-in Django Rest Framework support. Still new, but it's there!
* djstripe namespace so you can have more than one payments related app.
* Responsive team to issues
* Low bus factor (I'm not the only person accepting pull requests)I use dj-stripe and it works well for me. It has a lot of code in it dedicated to subscriptions, but I don't use any of it.

I use it for a couple of single purchase membership products. It doesn't have any kind of product model, (they do ""Plans""), so you have to figure that out if you're doing one-time purchase products. I basically just have it add the user to a certain group when it successfully makes a purchase, and I also have it listen for refunds in the webhooks so it'll auto remove the user from the group if I issue a refund to them on stripe.com.

Wish it had some kind of coupon support out of the box, though.

For the cut of each transaction question... I do see there's an api for manual transfers, but they seem to only allow 1 bank account for each currency. So, I dunno. Maybe you can do something, but it might be easier to just lop off 5% from inside a bank account instead.From my experience, integrating stripe was fairly simple using the requests library and performing all the HTTP requests manually.

The only thing I found tricky was doing credit card validation within forms.py. When I was integrating stripe I found that the only way to really validate the credit card details was to run the card and consume the response. Unfortunately I didn't find a comfortable place to put that logic. Putting it in forms.py under clean() felt dirty because I was doing business logic  in the forms but putting it in views.py meant I had to do a lot of the form validation logic manually (redirect, show errors, etc. etc.). It was especially annoying because my form was part of a formwizard.Another vote for dj-stripe, I help with it when I can, definitely not as much as I thought I was going to be able to. I did do a couple of videos on using dj-stripe. https://godjango.com/search/?q=djstripe

I also use django-stripe-payments actively, and have been working on moving away from it to dj-stripe. Since it is on a site that isn't my full time job, and 'works' I haven't been able to dedicate much time migrating to dj-stripe. I have an idea of how to do it, but it isn't simple. A new site I am starting with a friend will start with dj-stripe.[deleted]Stripe has an official Python binding. This is what I used. It's fairly simple to use. It's very basic. It's essentially just an API wrapper around Stripe.

[stripe-python](https://github.com/stripe/stripe-python)We tried both and dj-stripe was the better option. It doesn't do coupons yet but it looks like they are working on it."
2015-08-03 17:33:29;I have a permanently-running script that collects data into an SQLite database. I want this data displayed in a Django app. How would you integrate the two?;"The answer is: it depends (surprise, surprise).


My recommendation is to keep your django database separate from the sqlite database to keep things nicely modular [[SoC]](https://en.wikipedia.org/wiki/Separation_of_concerns) . Ultimately you're going to have to decide if you want to use the Django ORM or write the SQL manually. 


**Django ORM (recommended)**

Advantages

* Syntactic sugar and convenience functions
* Integrates well into other parts of Django
* ""Easy"" integration with Django admin -- [[docs]](https://docs.djangoproject.com/en/1.8/topics/db/multi-db/#exposing-multiple-databases-in-django-s-admin-interface)
* Once you've done the setup should be a breeze to use

Cons

* You'll have to put effort in manually building the model based on existing tables
* Model will be need to be readjusted every time you change your sqlite db schema
* Some 'massaging' required to integrate (e.g. adding using='db' when saving models etc.)

**SQL**

This is probably the simplest (not necessarily easier depending on your comfort with sql) method. You could simply create a template view and do some sql querying to generate the context data:

Advantages

* Nicely self-contained
* Very ""simple"" conceptually

Cons

* Weak integration with rest of Django
* No advantages of ORM

e.g.
views.py
 
    import sqlite3
    from django.views.generic import TemplateView
    
    def get_data():
        conn = sqlite3.connect('example.db')
        c = conn.cursor()
        c.execute(""'SELECT * FROM table"")
        return c
    
    class MyView(TemplateView):
        template_name = ""hi.html""
        
        def get_context_data(**kwargs**):
            context = super(MyView, self).get_context_data(**kwargs)    
            cursor = connections['my_db_alias'].cursor()
            c.execute(""select * from table where 1=1;"")
            # This is not tested, just an example of what you can do with the data
            context[""my_rows""] = [x for x in c]
            return context"
2015-08-03 13:28:40;Heroku, Django, Nginx and PgBouncer;"I’ve been struggling all weekend to get our Heroku servers set up with Nginx and PgBouncer using Gunicorn, uWSGI and Waitress. 
I thought I'd write down what I did as my first tech blog post.Instead of PgBouncer, why wouldn't you just set [CONN_MAX_AGE](https://docs.djangoproject.com/en/1.8/ref/databases/#persistent-connections) higher?

Or am I not understanding what it does?Is this some new UI pattern I don't know? http://i.imgur.com/xGHldxr.png"
2015-08-03 07:02:30;For Django, is it recommended to go with 64-bit or 32-bit Python 3.x?;"it doesn't make a difference one way or another for django. however, you should pretty much always install the 64-bit version of Python. 

as far as memory usage goes, simply running in the 64 bit python interpreter isn't going to cause a significant increase in memory usage. the performance of your actual django code will dominate over any impact the difference between 32-bit python and 64-bit python will make.

finally, worrying about micro-optimizations of system memory usage is almost always irrelevant and a waste of time. unless you're trying to run a django web server off a raspbery pi or something similarly unusual, don't worry about this kind of stuff. your machine has enough memory. if it doesn't, buy more, because memory is cheap.I think the best way to know for sure is to try it yourself with your site.

Most applications are IO bound not CPU bound so if it is true that 32bit is using less RAM, it might be worth it to use that instead.64 bit indeed uses a bit more ram and doesn't have much profit for io heavy apps. But if you are using scientific as well as other cpu heavy libs (opencv, nltk etc.) it'd be a bit faster. Also if you are already on Linux or mac, default should be 64bit. For Windows, if you're having 32bit lib problems I feel bad for you son, I got 99 library problems, but a architecture problem ain't one. Compile shit out of that nasty library, man. "
2015-08-02 17:55:32;Scaling database with Django and HAProxy;"not a very good setup on the haproxy side. Just doing a tcp check won't tell you if the slave(s) are replicated. It needs to be one of two things

1) http check to each slave on another port other then 3306. The script on each connection makes sure at least replication is working and updated

2) a tcp check to a port other then 3306. Same as above where it checks to make sure slave is updated. 

Without those you could be reading from stale data. What exactly was the database issue? The article says it was the bottleneck but there are many factors and many solutions that don't require horizontal scaling. I'm not saying the motivation is wrong, just curious about what was bad and how bad was it, to justify this re-architecture."
2015-08-10 21:17:16;I updated my Django JSON-RPC library to be compatible with Django 1.8 and Python 3!;
2015-08-10 21:13:59;Best Django Forum and Blog apps?;"https://github.com/rafalp/misago and https://github.com/nitely/Spirit might interest you. 

Or you could just build your own. A forum isn't super difficult I don't think. I guess it would depend on your specific needs though. I built http://www.golfledger.com which is basically a forum. I could try to answer questions if you had any. I'm surprised no one has mentioned [Zinnia](http://django-blog-zinnia.com/) yet.check out :

https://www.djangopackages.com/grids/g/forums/

and

https://www.djangopackages.com/grids/g/blogs/I use DjangoBB on my site, and it's very solid.

I don't have a good blog app to recommend, sadly.Searched for good Django forum CMS for indie game website and came to conclusion that better if I write it down by myself. Too many details and problems from external apps that I need to change and fix.

Thanks all for the tips and ideas.  I'd thought about rolling my own with the blog too and have done so in the past. The forum seems a bit more daunting. It's not so much writing the code, but thinking through all the features and (no doubt) continually forgetting things, fix bugs, yadda yadda... Nice collection If you want to launch your own mobile app free of cost, these app builders can help you to make launch your own apphttp://www.createmyfreeapp....For a blog do you need more than a WYSIWYG editor in the admin panel?

EDIT: I know how to make a blogging app, I'm asking what features THIS person wants.Hi,
I would motivate you to evaluate django CMS for that. 
There is a [blog app](https://github.com/nephila/djangocms-blog) from a trusted source!
phpBB and Wordpress? ^^I'm ^^^sorry"
2015-08-10 20:06:32;Free Django Workshop for Women in Denver;Awesome! We just did one here in Portland in the middle of July and it was a great event. Can't wait to see the pics!
2015-08-10 19:32:12;creating file download links;
2015-08-10 14:56:56;Django-avatar lives! Django-avatar updated for Django 1.7 and 1.8;"Hey everyone. I have recently taken over as the maintainer for django-avatar. Here are the changes since the last update to django-avatar ~2 years ago:

* Django 1.7 and 1.8 support
* Added South and Django migrations
* Changed Gravatar link to use HTTPS by default
* Fixed a bug where the admin avatar list page would only show a user's primary avatar
* Updated render_primary view to accept usernames with @ signs in them
* Updated translations (added Dutch, Japanese, Polish, and Simple Chinese)"
2015-08-17 16:01:40;AMA now with Timmy O'Mahony - top 0.93% answerer in Stack Overflow;
2015-08-17 15:21:54;Django Dashboard Application;"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.

You may want to [contact the Reddit admins](http://www.reddit.com/message/compose?to=/r/reddit.com) about this.

###_
^Remember ^that ^reddit ^uses ^""shadowbans"", ^in ^which ^you ^can ^still ^see ^your ^posts ^and ^profile, ^but ^other ^users ^can't. ^For ^more ^information, ^check ^out ^/r/shadowban."
2015-08-17 10:03:52;Private community news site, how to make articles sharefriendly with open graph while having a log-in wall ?;"The ""clunky"" behavior you've described is precisely what most news organizations do:

* http://www.bostonglobe.com/ (only 5 free articles per month)
* https://pando.com/ (subscription required to read any article)
* http://www.wsj.com/ (subscription required for nearly all articles)
"
2015-08-17 00:10:32;Making use of Django models locally via. Python;"If the two programs need to remain separate, then perhaps creating a management command will do what you want. That's the Django standard approach for creating a script that is invoked on the command line opposed to from an HTTP request.

In fact, trying to think of the question behind the question: perhaps your other application could be built as a persistent management command. The it would natively have access to your whole Django app/models. We do this for a number of tasks in our stack. Hi Mackinstyle, you could check out [Celery](http://www.celeryproject.org/), a distributed task manager which has a support for django (
[see this link](http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html#using-celery-with-django) ). Perhaps you can use it to populate your database ?I'd usually make a management command for external command-line access but you still go through a text layer.

[Direct integration](http://stackoverflow.com/a/19476096/12870) into Python is fairly simple though. You just need to get your PYTHONPATH looking in the right place, specify your settings and then you can usually import whatever bits of Django you like.

The downside of this is you're loading up an entire Django stack and that'll likely hang around in memory for a while. A management command is a bit cleaner in that respect."
2015-08-16 23:18:36;Images not showing up when using PyLibMCCache;"I built the cache from one of newer stable releases, but the issue was occurring before this upgrade as well.

My cache statement is as follows: 

CACHES = {
    'default': {
        'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',
        'BINARY': True,
        'OPTIONS': {
            'no_block': True,
            'tcp_nodelay': True,
            'tcp_keepalive': True,
            'remove_failed': 4,
            'retry_timeout': 2,
            'dead_timeout': 10,
            '_poll_timeout': 2000
        }
    }
}

"
2015-08-24 22:58:33;Help with user-side cropping;Haven't looked into it too much yet myself but take a look at [Wagtail's approach to image cropping](https://wagtail.io/features/image-cropping/).I found django-image-cropping fulfilling my needs[deleted]
2015-08-24 16:43:46;Any recommendations for a SSL/TLS certificate?;"https://www.ssls.com/ - it's owned by NameCheap (a fairly large domain seller). Their PositiveSSL certs are $8.95 for 1 year, or $14.97 for 3 years (so $4.99 per year).

Alternatively you could use Cloudflare, which would also give you free SSL - although they're obviously a man in the middle, something which some people aren't keen on. One minor downside with this one is that their free offering is completely incompatible with any version of IE on Windows XP - as they only do ECDHE for key exchange.For simple personal projects I often just throw the whole thing behind CloudFlare, which offers free SSL, then I put it in Full mode (not Strict) and use a self-signed cert on my webserver. If I want a bit more security, I'll get one of the $2 PositiveSSL certs you can get when you buy a new domain from NameCheap. I usually add one to the cart whenever I buy a new domain, so I have a few available whenever I might need one. The CloudFlare certs work fine in newer browsers, they are SNI though for the free plan so you won't get support for really old browsers like IE on Windows XP or Android 2.2 browser.[deleted]If it's a personal project and you're not expecting the public, why not just use a self-signed certificate? One of the free 90 day trail certs should cover you until Lets Encrypt is up and running at this point. Both will be just domain verification too.Are you looking for a free cert? startssl.comIf you want a free SSL cert, I have pretty good experience with [WoSign](https://buy.wosign.com/free) who give you free multi-domain certs for up to 100 domains. The only downside is that the site itself can be pretty slow at times as they are in China.Forget all the crappy cheap/free certs - there's a much better way (if you understand a few subtle drawbacks):

https://www.cloudflare.com/ssl

1. No SSL on IE/XP
2. User will see Cloudflare not YourCorp if they examine the cert

Advantages - literally a few clicks to set up, free and hard to screw it up.

"
2015-08-24 16:08:27;Packt asked me to write a book;"Thanks for the feedback everyone. I contacted a django author about Packt and he said, ""I only like to say positive things about people, projects, or companies, therefore I have nothing to say about Packt.""

I told Packt I wasn't interested.It's a scam, come on.I wrote two books for them about the Raspberry Pi.  The first book was a lot of fun to write and the people were amazing.  The second book was better content wise, but I went through so many editors.  So much turnover, I had a hard time figuring out who I was working with at any given week.

That and they took 4 months to pay me my advance.  My royalty checks keep coming in though, and it doesn't hurt to have it on my CV.

For something as niche as the Raspberry Pi, it was fine.  For something with a large technical base like Django, it may be better to contact O'Reilly or No Starch Press.Yeah, you get next to nothing for your time. These guys email anyone with a given keyword on their resume to write books. They have hit me up multiple times about different books including on topics I know virtually nothing about.Packt read something on my blog and said they'd love me to write for them about the Raspberry Pi.

They had me sign all sorts of things and then asked me to submit an abstract and outline (which took more than a few hours) and then a week later told me they'd already decided that there wouldn't be a sufficient market for my outline and that they'd given the title to another author. Seeing this thread, I wonder if it was /u/SSilver2k2.

You can see why they do this to people. They get a lot of work done for free from passionate people who would just love to see their name on a book... Of which I'm guilty! The result for me, however, was completely deflating.I was approached to write an Arduino book for kids, there was a lot of constraints on their vision. I didn't feel the acquisition editor was good at communication so I'm opting to self publish through LeanPub.F*ck Packt. They're constantly spamming looking for free reviewers, their royalty rates are pathetic (which is saying something, given the book industry generally), and they apparently leave you on your own for marketing. You'd be better off self publishing. 

It took me multiple rounds of increasingly rude emails until they finally stopped bugging me. Don't buy their books, and don't write for them.Some of the Packt books I have read were poorly written and badly edited. I think now I know why. Thanks OP for sharing.

I don't remember exactly, one book was about Twitter Bootstrap and another was about Javascript "
2015-08-24 11:37:51;Improving performance of ajax with django for rating system;"You're always querying the positive and negative ratings, regardless of whether or not the user is making a positive or negative rating.

For example, if a user is rating positive all of these queries are run:

    thisUserPositiveRatings = summary.users_rated_positive.filter(
        id=request.user.id).count()
    thisUserNegativeRatings = summary.users_rated_negative.filter(
        id=request.user.id).count()
    summary.users_rated_positive.add(request.user)
    ratings_to_return = summary.users_rated_positive.count()

At the very least, `ratings_to_return` in that logical branch can be replaced with `thisUserPositiveRatings + 1`, reducing the number of queries by 1/3. Keep in mind that you also counted the negative ratings even though they aren't factored into the return value. `thisUserNegativeRatings` is never used in the case of a `rate_action='rate'` and `rate_type='positive'` request. If you remove that query in this logical branch you have now cut the number of queries in half.

It also appears like you are running SQL count statements to check a boolean value (based on this code):

    if rate_type == 'positive' and thisUserPositiveRatings == 1:
        summary.users_rated_positive.remove(request.user)
        ratings_to_return = summary.users_rated_positive.count()
    elif rate_type == 'negative' and thisUserNegativeRatings == 1:
        summary.users_rated_negative.remove(request.user)
        ratings_to_return = summary.users_rated_negative.count()
    else:
        return HttpResponse(""RATING ERROR: unkown rating type OR user hasen't rated this summary"")

If a person can only rate once there are more efficient ways to store this on a model
    
    [deleted]"
2015-08-24 11:30:03;Guide to using django-environ;"sorry for the bump.  I'm learning to use this library and in the docs it says that you need to do a .read_env() to read in a .env file with all the environmental variables you want to set. 

But I'm trying to use the excellent cookiecutter-django library and none of the settings.py files ever call .read_env().  see the files [here](https://github.com/pydanny/cookiecutter-django/tree/master/%7B%7Bcookiecutter.repo_name%7D%7D/config/settings)

For example, in production.py, they do AWS_ACCESS_KEY_ID = env('DJANGO_AWS_ACCESS_KEY_ID').  I understand that in deployment to something like heroku I'll need to set this config variable anyway, but for collectstatic, won't I need to set this variable on my dev machine?  I was thinking I'd want to set this variable in my .env file and load it into the settings.py files.  Is there something I'm missing about using django-environ?  thanks!!You need to make the before -> after changes.  They are just giving an example of what the required changes look like for a particular settings.py file."
2015-08-31 20:03:31;I shared this on /r/python too, but thought it might be of interest here – a talk I gave at a local meetup last week about creating WSGI middleware, but equal parts about cross-origin (CORS) stuff in javascript. Feedback is welcome.;
2015-08-31 17:38:09;Nginx deployment related question;"If you're talking about editing/reloading an Nginx config as part of your deployment, then I suspect that [upstream module](http://nginx.org/en/docs/http/ngx_http_upstream_module.html) might be useful for your case, especially with respect to long-running backend processes.

Just as a contrived/trivial example, you could start with this config, which sends all requests go to `uwsgi A`:

    upstream backends {
        server localhost:8333; # uwsgi A
        server localhost:8334 backup; # uwsgi B
    }

    server {
        location / {
            proxy_pass http://backends;
        }
    }

Then when it's time to deploy your update, you would start by deploying  your code to `uwsgi B` & reloading that instance of the app. Next, edit the nginx config to designate `uwsgi A` as the backup, and `uwsgi B` as the primary backend:

    upstream backends {
        server localhost:8333 backup; # uwsgi A
        server localhost:8334; # uwsgi B
    }

Reloading nginx will *not* disconnect those clients with long-running processes on uwsgi A - those will be allowed to finish, but their *future requests* will be subsequently routed to `uwsgi B`.

And so after reloading, you would wait for all clients on `uwsgi A` to complete their requests & be shifted to `uwsgi B`. And then just repeat that process to get clients back over to `uwsgi A` after you've deployed & reloaded to that instance.[deleted]google ""blue green deploy nginx"" will lead to lots of strategies for thisCheck this out before you do anything: https://uwsgi-docs.readthedocs.org/en/latest/articles/TheArtOfGracefulReloading.html

I think uwsgi can already do what you're asking without modification to nginx.You're looking for a graceful reload at the uWSGI level. Here's my solution guaranteed not to drop existing connections or new ones during the reload (as long as the new Python code will not crash, obviously): https://github.com/stefantalpalaru/uwsgi_reloadThe other suggestions on here are great. But if you want to try something more radical, try [dokku](http://progrium.viewdocs.io/dokku/).

Dokku is great for single-server deployments like these. You deploy your code via a `git push` similar to Heroku, but to a server that you're in control of.

To address your particular scenario, Dokku will always provision a new docker container every time you deploy your code. The previously running container that's currently serving your webapp will remain ""up"" for 60 seconds (by default) to keep long polling connections from disconnecting while new connections are directed to the new container.

Going this route will take a bit of effort though. Your app has to be architectured [12-factor style](http://12factor.net/) and, while not required, it's good to know how Docker works first before using an abstraction like dokku."
2015-08-31 16:39:48;Thought on static file deployment and whitenoise;"I think it's safe to say that _you would know_ if you needed to transition to a CDN. You will notice that your site takes seconds to load, even with a fast connection. Your VPS would run out of Memory/CPU. You will encounter a host of other problems before your static file server gives out.

To be honest, I don't have any definitive answers to your questions. I just know that you're fine for now if you want to use whitenoise or dj-static. Once you _feel_ like you want to scale to a CDN, a quick configuration swap on your Django app should be all that's needed."
2015-08-31 16:28:56;ImportError: cannot import name User;"You should be setting `AUTH_USER_MODEL` in your `settings` module. Then

    from django.conf import settings

    class MyModel(models.Model):
        user = models.ForeignKey(settings.AUTH_USER_MODEL)

If you need the actual class object, use `get_user_model()`:

    from django.contrib.auth import get_user_model

    def my_view(request):
        User = get_user_model()
        ...

See: https://docs.djangoproject.com/en/1.8/topics/auth/customizing/#substituting-a-custom-user-modelFound the error

    from user_profile.models import User
should be used instead of

    from django.contrib.auth.models import User"
2015-08-31 14:24:23;Logging events;"Just talking, I didn´t check, but...

When you launch the task, you get an id, you can see it when using Flower. So, can you make a table with just two columns, task_id and status...

I´m thinking that this is already implemented in flower, just save it in your db.

http://oi60.tinypic.com/fdsfw2.jpg

Get task ID: http://stackoverflow.com/questions/3302320/celery-get-task-id-for-current-task
Check status: http://stackoverflow.com/questions/9034091/how-to-check-task-status-in-celery"
2015-09-07 18:13:13;djangocon 2015 talk videos;"Keep an eye on http://www.pyvideo.org/. They'll have the videos up as they become available.They're making videos, I can see the cameras in both of conference rooms. I don't know where they're going to be hosted yet, I imagine the twitter account for djangocon will tell you though.Still no videos unfortunately - no doubt they've been busy running the thing! :)  Really keen to see some of the talks so I hope they go up soon.Sadly, http://www.pyvideo.org/category hasn't listed videos from any DjangoCons since 2012. 

It's unfortunate, because PyVideo is such an important service in the community...So far dangocon is pretty good. I'm watching the author panel now."
2015-09-07 00:17:52;Should I use Django With AngularJS?;"Do you realize that you're asking Django people whether to use Django?

Anyway, since you're building a web *site* and not a web *application* with several types of clients I'd recommend to drop Angular alltogether. You also don't need an API. Just implement the endpoints you need as they come. And for that Django is really good whereas for APIs I'd recommend something else, something that has been built with APIs in mind from the ground up.[deleted]You can easily use AngularJS without making your website a one page app. Then you get to tweak the SEO and only use AngularJS on the pages you want.

In your case I would only use it to enhance the user experience (with rest framework like /u/benzinonapoloni suggested), but I wouldn't build the whole site on it.

Technically you can use AngularJS for just one div in one page if you want. It's up to you.Dude. I am writing about exactly this subject right now. 

Only a couple posts up, but I'm writing an example social media app and explaining as I go. 

http://www.pandastack.com

I want your questions and requests!!! I'll write up whatever you need. I'm writing a book on web app development with this stack, and your inputs are so important!!!Real men use ReactJS. But ya, django is pretty nice.Use Angular with Django if you're going to build a webapp with a singular purpose, and if your needs are not served by serving the website statically.If you're looking to create a personal portfolio website there's no reason to really use django. But with that said .... I don't know what kind of portfolio features user accounts, support tickets.. (really? for a personal portfolio?), stores... 


If you really are looking to make a personal website all you'll need is angularJS.. and won't need Django at all. However, if you're looking for any of the other things you should probably focus on Django. I wouldn't even worry about integrating Angular just yet.Goog does pick up client side rendered pages, no problem. But I am not sure yet if our how much it adversely affects the ranking. Other SEs or social media bots may not.

I would suggest to build the site with server rendered html and only use angular for specific things, like logged in user interaction that is not seen by SEs anyway.How about using backbone for frontend with django? What are its pros/cons?"
2015-09-06 18:55:22;User Password Requirements and Error Displays;"Do you have a field called ""password_length"" in your form?

Django only calls ""clean_FIELDNAME"" methods for fields that exist in your form.

So if you want to check password1, you can call your method ""clean_password1""

Also worth noting, you don't need a custom validator for field length. You can do:

    password1 = fields.CharField(min_length=8, max_length=100)[Password validation](https://docs.djangoproject.com/en/dev/topics/auth/passwords/#module-django.contrib.auth.password_validation) will be in the next version. You can check the source for how they did it and re-implement it.You said that you are seeing an exception but the exception is not `ValidationError`. What's in the Traceback?

Also, how are you using this form in your view? Are you using a `FormView` and calling `form.valid`, `form_invalid`, etc? You should post more of your code, or a [gist] of it.(https://gist.github.com/)

Also, debuggers are your friend. Try to use [pdb](https://docs.python.org/2/library/pdb.html) to see if you're actually hitting this code"
2015-09-06 13:23:51;Uploading With Django and Amazon S3;"django-storages is no longer maintained. I would recommend switching to [django-storages-redux](https://pypi.python.org/pypi/django-storages-redux).I tried two times already to tie in Django and S3 but it seems to me that S3 is so god damn slow.

First time I tried to use it to store the static files on the S3. The upload was so slow and when uploading it would time out on 100kb files.

Second time I tried to use it to store user uploaded files. If I were to use it all of my users would run away from my site like crazy... 

Wish it worked though...so what's the advantage of this package vs using boto? This looks like you need to have the url where as boto lets you create buckets with just the name"
2015-09-05 19:44:14;Refactoring large Django forms;With large forms I split them up into a number of smaller forms and then use the [SessionWizardView](https://docs.djangoproject.com/en/1.7/ref/contrib/formtools/form-wizard/#creating-a-wizardview-subclass) to do the heavy lifting.Why are the fields added to the `__init__`? Is it because they get dynamic values based on the instance? Is it to override their widget? Is it to give them a special field validation?From the users perspective, what is dynamic?  Otherwise just cache the form or let us know why you want to change the layout (ie speed, etc)
2015-09-14 20:55:40;"Question about Foreign Key ""self"" attribute";"I've done something vaguely similar - it was a tournament system for Fifa.

Basically the team model has the fields you mention, but without the rival: owner, name. Then use a second model, e.g.:

    class Game(models.Model):
        home_team = models.ForeignKey(Team, related_name='home_games')
        away_team = models.ForeignKey(Team, related_name='away_games')


You can then easily generate the matches for both legs at once.For starters you should keep your model names singular. So name your model ""Team"" as its an object class for just that, a single team. Next you would not use a foreign key in this situation to relate rival teams. Try using many-to-many relationships. Read this part of the docs (https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_many/). Or what you can do is simply define a method inside your model like ""get_rival"" and have it return the location of that team's rival in the DB. That's what models are for basically. A place to do all of your logic. I disagree with the current commenters. The problem you have is the reverse relation, ie team A's rival is team B, but that doesn't imply that B's rival is A. You can use a one to one field, but that's also a bit iffy when the relation is to the model itself. I don't see any better solutions, though.How is the rivalry determined? Are the rivalries mutual (i.e., always pairs of rivals)? How often would rivalries change?There is /r/djangolearning ;)"
2015-09-14 10:55:31;Helpful bash aliases for Django;"I use virtualenvwrapper so just `workon project` and then I usually just hit

    ^Rruns

    ^Rmigrate

    ^Rmakem

    ^Rplus (I usually start up shell_plus)I recommend [autoenv](https://github.com/kennethreitz/autoenv) or [virtualfish](https://github.com/adambrenecki/virtualfish/) (with its built-in plugin) to handle virtual environment activation

The following would also simplify things and allow you to use a wider range of Django commands (including those created by other apps):

    alias dj='python manage.py'

I personally have the following in my `config.fish` file:

    # Django Aliases
    alias 'dj'='python manage.py'
    alias 'djr'='python manage.py runserver'
    alias 'djrp'='python manage.py runserver_plus'
    alias 'djs'='python manage.py shell'
    alias 'djsp'='python manage.py shell_plus'



alias run='python manage.py runserver'


alias syncdb='python manage.py syncdb'


alias dbshell='python manage.py dbshell'


alias pshell=""python manage.py shell""


alias migrate=""python manage.py migrate""


alias mm=""python manage.py makemigrations""

I activate the envs myself because I work in tabbed, named terminal windows which for my workflow always made virtualenv wrapper cumbersome and useless. It's a bit old now and could probably do with updating, but have you looked at https://github.com/jgorset/django-shortcutsWith history search mapped to page up and page down in inputrc, I find I don't need aliases. Because I'm jumping between different systems all the time I'm tending to use the philosophy ""if a problem can be solved by typing, it's not really a problem""."
2015-09-14 09:15:34;Configuring Django-Pipeline With SugarDough;
2015-09-14 08:14:52;this a python example, How can i do it inn Django ?;what exactly do you want to do? if you just need to log stuff you can use the python builtin logging module https://docs.djangoproject.com/en/1.8/topics/logging/Please use /r/djangolearning.
2015-09-14 04:54:39;A word of encouragement please..;"I talked to someone trying to learn Django the other day, and he said he tried a lot of tutorials, and got stuck with all of them. Then he tried the Django Girls tutorial and it clicked: http://tutorial.djangogirls.org/ . He's not the only guy to have recommended it.I found that getting the bigger picture og how everything works together quite helpful, see http://irisbeta.com/article/245366784/the-django-request-response-cycle/ for example. There are visual schemes that also explain thisTo be fair allauth is poorly documented and has some really bad code in it even if it does do a lot of what other packages don't. So don't feel bad for not understanding it.Can you be more specific about what you're not getting? Maybe this could help: https://www.reddit.com/r/django/comments/1t9tq0/do_you_think_the_django_tutorial_is_good_for_a/ce5xkzhSo, good luck and don't give up p!

Me too I'd need some encouragement sometimes. I'm only ±1 year self-taught experience with Django (and web dev), didn't build a complete app yet, and I often find that things I thought easy, or at least whose result is really common, are more difficult to do… like working with the session, and testing it (there may even still be a bug), passing parameters to templates and back to views (oh, some unicode problem, encode the query parameters yourself, etc),… if I missed something, that would show I have hard times grasping all the framework.

  Moreover, I quickly realized that Django wasn't enough for what I wanted. You know, I'd like a UI a bit interactive: you click that and it changes those values without a page reload. So I need to learn a javascript framework, put it alongside django, and that isn't obvious too. There are many many ways to do it. So I'm dreaming about a framework where you would use only one language for everything, client and server. It may be coming (Meteor framework, Clojure, Haskell ? using RapydScript ?) but isn't there yet, at least not in python.There's a lot of newer tutorials now  compared to when I started a couple years ago but it took me a while to get the ""ah ha"" moment. I'm still no expert but I can at least look at code now and tell you mostly what it does and work through things. Initially I tried jumping into Django and assumed I would learn Python on the way. Well that was basically impossible. I would learn some Python first if you don't know any and then move to Django. I also never got ""it"" when doing the official tutorial which I did about five times. I just jumped in and started working on a site I wanted to build and asked questions on the way and eventually about about nine months or so the order of things just seemed to make sense to me all of a sudden. 


Edit: might also have a look at this: https://hellowebapp.com/[removed]"
2015-09-21 20:34:11;choices lookup during import via ModelForms;"I explain it better on [stackoverflow](http://stackoverflow.com/questions/32719686/importing-denormalized-data-into-django-models-via-modelforms).Instead of `def clean()`, override the cleaning of the specific field:

    def clean_favoritecolor(

(or `clean_`*field_name*)

The field-specific clean functions get called before the form-wide one, and is probably a better fit for this case.

Glad you're using a form to validate your input. Smart."
2015-09-21 19:55:14;My Python Business model into django;"FWIW, you can make your layout work by using `code` (just indenting each line 4 characters) syntax:

    app
    |-- pkg1
    |----- module1.py
    |----- module2.py
    |-- pkg2
    |----- module1.py
    |----- module2.py

As to the question, `models.py` is simply a Django convention^1. Since it's just Python underneath, you can put your business model code anywhere you like (_unless_ it _is_ a Django model).

Any of the following would work:

* `app/pkg1/business.py`
* `app/pkg1/business_models.py`
* `app/business_logic/models.py`.

In this case, maybe it makes sense for your business model code to live in another package? If it stands on its own now, I'd be very tempted to do this.

^1  In versions before 1.7 (when the ""app refactor"" landed), the presence of a `models.py` module indicated to Django that the package that contained the module was a ""Django app"".[deleted]You can put your Django models in any files, but they have to get imported at some point by being part of an app listed in INSTALLED_APPS. So you can import in app/__init__.py. 

Secondly, you need to specify the db_table in the Meta class of the model: https://docs.djangoproject.com/en/1.8/ref/models/options/#db-table

I'm not entirely sure what you mean by ""Python Business model,"" but when I run into an excessively large `models.py`, made large by a lot of business logic/utility functions, I like to split it up and turn it into a package.

    app
    |-- __init__.py
    |-- models
    |---- __init__.py
    |---- pkg1
    |------ __init__.py
    |------ module1.py
    |------ module2.py
    |---- pkg2
    |------ __init__.py
    |------ module1.py
    |------ module2.py
    |---- base.py

wherein `base.py` can import from `pkg1` or `pkg2` and `models.__init__` does a wildcard import from `base.py` (`from base import *` or some such).

Don't be afraid to employ Python in your Django! Why would we choose a Python-based framework only to ignore the capabilities of Python?"
2015-09-21 15:33:37;How to improve Django security through App Isolation using Docker;[deleted]
2015-09-21 11:03:58;Djangocon US 2015 videos;A lot of presentations are missing, any idea why and when/if they'll be posted?
2015-09-21 00:54:47;Django Migrations basically never seem to work for me, and I'm not sure what I'm doing wrong;"This implies that your dev database and production database are not in the same general state. I would connect with some sort of table analyzer and look at your tables and field definitions, as well as your migration history table to see what's up.

Easiest way to get this back might be to wipe your migration history table on production. Then you delete the migration files and create new initial migrations. Then you fake running those in production.

If creating and running migrations after that continue to work in develop but not in production, you have something truly bizarre going on.You're using the same database engine in test and production, right?

I've literally never had a problem with my migrations, and I've done some seriously messed up stuff with them. ... though I've never really tried to go backwards through a migration.In your post, please edit and mention which Django version you are using and also if you are using any third party apps (especially if those apps throw migration related errors), or if you build all your models and migrations ""in-house"".Do you have custom fields, or function s referenced in limit_choices_to  or model manager that have use_in_migrations=true?If you're pre-launch, are you wiping out the migrations each time? This can cause those types of errors, but they wouldn't still be there once you go live since at that point you would add a new migration each time you change the db.You ran makemigrations and migrate on local. But did you run migrate:


    heroku run python migrate


on heroku after pushing to heroku?

Edit: What are the names of those relations not found?I have this issue a lot of the times too, seems like they're not as robust as they could be, especially when you throw different branches at itI think most likely cause is the inconsistent states of all your dev's and server's databases. If everyone is branching, prototyping and doing odd stuff their migrations will get messy. 

Every dev/database will have a different history of migrations and changes. If you also make the migrations that go into the main tree there it is very likely they don't fit with the test and prod databases.

If you haven't launched yet it might be best to restart your migrations from scratch. Delete all the migration files and start a fresh database. You can export any data you need to keep. 

I have no good solution for rapid prototyping, except maybe always reverting and cleaning migrations after prototyping sessions; maybe not even checking them in at all and only  generate the deployable ones against the main branch that is trailing prod.

Also migrations are not magical automatic solution; you have to consciously manage and use them.It does sound like you're doing something wrong but hard to know what without more details.

However - during phases of rapid prototyping - consider avoiding migrations entirely.

I tend to use django-scaffold or similar to rapidly populate my db with fake data.

I think have a script I run after any schema change to wipe and rebuild the db.

Two advantages:

1. You don't end up with 100s of migrations that slow you down

2. You always have up to date fake data at the push of a button. Great for testing and ease of development.Are you trying to load data into production using fixtures?

I had this data a few years ago with 1.6, so it may be different then your case, but I was running into problems with my foreign key relations because the Django fixtures because of the way the data was getting loaded in, it was not maintaining the foreign key relationships correctly.

The solution was to build a separate roll tool that migrated the data directly using database images.

edit: wordsHave you tried running --fake-initial?

http://django.readthedocs.org/en/latest/ref/django-admin.html#django-admin-option---fake-initial

This solves a lot of issues for me when migrations start acting weird.It sounds like you're not applying the migrations to the production database the same as you're applying them to the dev database - in particular, you mention ""wiping migrations"", which if you do you MUST fix the django_migration history table in every database you've deployed to whenever you do it (this is why there's a --squash option that semi-automates this).

Without more information I can't really help, but that's my suspicion - that the migrations you're shipping don't match the production database version.

(source: I wrote Django migrations and South)I'm about to give up on the whole migrations system, but that doesn't seem like an easy undertaking.

Here's a recent rage-inducing incident with migrations:

1. I added a column to a model in dev, then code that uses it

2. tried to run makemigrations/migrate on test but it wouldn't run because it saw code trying to use a column that doesn't exist in the database.

3. add the column manually (usually have to anyway), and now I get ""django.db.utils.ProgrammingError: column ""my_column"" of relation ""my_table"" already exists""

I really just want to bypass migrations and manually add my changes to the DB until this is worked out. Really irritating. 

EDIT: ""migrate --fake"" is what I was looking for. "
2015-09-28 20:17:22;Ready to use Structure for Django Tests + Examples;"Hey guys, 

I wrote this after trying a few different solutions to improve testing in an existing Django App.

It's mostly geared toward beginners, but I could use some constructive criticism from veterans too.

Thanks!

Edit: Updated link: [http://dezoito.github.io/2015/09/21/how-to-test-django-applications_pt1.html](http://dezoito.github.io/2015/09/21/how-to-test-django-applications_pt1.html)Thanks for writing this, this is fantastic!"
2015-09-28 20:10:33;What strategy do I use to only refresh one data item in my view?;"Javascript?What is the other program?

Sounds like you'll have to make an AJAX request if you only want to update one element on the screen without reloading the whole page. Check this page out for some examples.

http://www.tangowithdjango.com/book/chapters/ajax.htmlSo you need something to handle the client-side logic as browsers expect everything to involve a full-page refresh unless javascript tells them otherwise.

You've got various options without calling in the big guns (react, angular, ember etc - overkill for what you want)

1. Roll your own jQuery Ajax call to a Django view that returns either JSON or a HTML fragment

2. Look at Pjax: https://github.com/nigma/django-easy-pjax

3. Intercooler is very cool and quite lightweight. I'd almost go as far as calling it Pythonic ;-) http://intercoolerjs.org/"
2015-09-27 19:46:48;Widget suggestions for complex/large ManyToMany or ForeignKey fields;Django auto complete light is what I use it meant a page render in the admin went down from 60s to just a couple.[django_select2](https://github.com/applegrew/django-select2) or [django-ajax-selects](https://github.com/crucialfelix/django-ajax-selects)in the admin `raw_id_fields`, for front-end you'll be looking at autocomplete solutions and inline formsets (for the through model of a m2m)
2015-09-27 19:22:07;Best way to go about creating a form with a user specified number of fields?;"You could look at using inline formsets, with a parent form which has the common data (ie the data source, csrf token etc). You can give the user some ``extra`` fields so they have empty lines whenever they submit, or let users add them dynamically using javascript with [django-dynamic-formset](https://github.com/elo80ka/django-dynamic-formset).

If you want to validate the text box based on the value in the select box, rather than a custom field you'd probably be better just using a ``CharField`` - you can then do your validation and parsing in your form's ``clean()``, where you have access to both values.

You could also consider adding a ``data-type`` attribute to your select widget's options (example [here](http://stackoverflow.com/questions/6477856/how-to-add-attributes-to-option-tags-in-django)), then use javascript to change the charfield's input element when the selected option changes. You'd then get the advantage of any client-side input enhancements (ie HTML5 input types, date selector etc), with a working fallback if javascript fails.
"
2015-09-27 17:36:38;Checking permissions for multiple models dynamically;
2015-10-05 23:25:32;Django Scheduling;"https://github.com/llazzaro/django-scheduler

/thread.This isn't a specific solution, but I'd recommend taking a look at [iCalendar for Python](http://icalendar.readthedocs.org/en/latest/) which will let you work with iCal files. The file spec has some [builtins](http://www.kanzaki.com/docs/ical/vfreebusy.html) that might help with this, or at least point the way to a solution. Sorry, nothing else too specific.The scheduler seems like a pretty straight forward problem if you are using PostgreSQL. A professional has a schedule (365 days and 24 hours a day), which is just a array of  date-time ranges. Postgres has an array field and a date time range field which django supports in a contrib app since 1.8. You'll have to revise this array each time a professional accepts an appointment."
2015-10-05 23:21:48;Question about contexts and calling variables from templates;"You can also create a template tag that outputs the GA script without polluting the global context.There is a way to have global context variables.

    from django.template import RequestContext

    def global_context(request):
        '''
        This is the function to add context variables to all views
        '''
        return {
            'user_rooms': request.user.watchroom_set.all(),
            'votes': request.user.votes.all(),
            'search_form': SearchMovieForm(),
            }


    def front(request):
        context = {}

        context['rooms'] = WatchRoom.objects.all()

        return render(request, 'index.html', context,
            context_instance=RequestContext(request, processors=[global_context]))

The important line is at the end, you need to return

    context_instance=RequestContext(request, processors=[global_context])

as a part of which ever view you want to include the global context in. 

I know that isn't quite what you were looking for, but it should work for you.
Just create the global_context function and return a dictionary of whatever you need in each view.  They can be called just like a normal context variable.

Let me know if you have any other questions."
2015-10-05 18:40:52;Very simple Django AJAX file upload;"`$('#myform').get(0)` does not return the value of the file that was selected - it returns the file input itself.

`$('#myform').get(0).files` should give you the file(s) that were selected.

That should also take care of it showing up in FILES dict on the server side."
2015-10-05 17:06:14;Interest in a guide to developing and releasing standalone apps?;"/u/bennylope , I'd definitely be interested in such a thing. I'm staring down a looming Django 1.6 -> 1.7 -> 1.8 -> beyond conversion and am definitely interested in , in particular, backwards/forward compatibilty and migrations.

I'd be ecstatic to back this somewhere (like Kickstarter, self-published ebook, etc.) if that became a possibility.

Thanks!/u/bennylope , I'm interested in it. We created [this template](https://github.com/ambitioninc/django-app-template) at my startup for spinning up standalone django apps with continuous integration, readthedocs, and compatibility with different versions. Making reusable and publishable Django apps was always a bit of a hidden art, and it would be great if there was a guide for it. Let me know if you'd like any thoughts about the post before it comes outI would certainly read this. Especially if you cover turning an app already used in a larger project into a stand-alone app.I have a couple apps which are components of projects which I would like to make into standalone apps. I would love a tutorial. I would especially like to see some info on taking an existing app which part of an existing project, and how to properly make it standalone. I'd especially like to see some info on how to handle ""installing"" your own package locally and maintaining a dev and production copy when it's not something you can just pip install.Absolutely! Even though I stuck a chunk of what I know into [cookiecutter-djangopackage](https://github.com/pydanny/cookiecutter-djangopackage) I still get asked lots of questions. There is much tribal knowledge out there, and having that written down would be really nice. I could point those asking me questions at your reference. :)I'd say just go for it! Even if no one here in particular is interested, somewhere out there is looking for exactly what you're describing. +1 to ""yes definitely interested""

"
2015-10-05 12:22:20;Best Practice Web Scraping and Django;"I'd stick it in celery and make it a periodic task.You can create another HTTP endpoint in your Django application. Then you can use for example *requests* in your scraping worker to POST the results to the Django view that is then saving it to the database.

This way your code **and** your application are nicely decoupled and it is a no-brainer to move one of your components to another server to scale up for example. 

**EDIT** Come on, people, if you downvote this comment at least take the time to explain why. I'd like to refer to the [reddiquette](https://www.reddit.com/wiki/reddiquette):

> **Please don't**

> - Downvote an otherwise acceptable post because you don't personally like it.

I hardly think that I offended anyone, so what's wrong with what I said?"
2015-10-12 22:24:40;Looking to put together a sports club website - need package recommendations;"I'm not happy about the stale package issue either, and I maintain the site. I'm working on something to reduce the visibility of older systems.

In any case, your project looks like a good use case for something like Mezzannine or Wagtail."
2015-10-12 11:12:28;Full fledged REST API with Django OAuth Toolkit;super-interesting talk, awful speaker
2015-10-12 04:09:50;Got my first Django site up and running;"The website looks really cool! And if this really is your first project, man, the code is really neat. Class-based views, separated setting files, custom managers... I work with people who do Django projects on a daily basis and they wouldn't be able for the life of them to follow such good practices.

I guess you followed Two Scoops of Django, didn't you?Very nice! 

You should comment on you commented code or delete it. In a year and a half you will not remember why you needed it and why it was commented out in the first place.Looks good. Clean and simple.

I did notice that your GitHub isn't recognizing any of your commits as contributions. You may want to ensure that you are properly configuring your local git settings.

If you want your commits to show up on your timeline, your local email config should be set to the same email you used to sign up for GitHub.

https://help.github.com/articles/setting-your-email-in-git/It would be nice if there was a 'back button'. When I click on a recipe it should be easy to go back. 
Awesome website though, how long did it take you?Consider using a class mixin to require login to views instead of individually checking in each class based view

from django.contrib.auth.decorators import login_required

     class LoginRequiredMixin(object):
        @classmethod
        def as_view(cls, **initkwargs):
            view = super(LoginRequiredMixin, cls).as_view(**initkwargs)
            return login_required(view)

    class MyView(LoginRequiredMixin, ...):Looks pretty nice for a first site. Congrats!

I notice when I click on a recipe the picture is skewed depending on the size of my screen. It looks way better on a big screen, but I normally only use a half monitor for chrome. I recommend playing around with different sizes as you have no idea what your user is using.nice looking site! are you doing anything fancy for authentication or just django.admin?A few of the links give funny results. You should test your urls.

Ex:

    http://www.nommish.com/recipe/cuisine/asdf/
    http://www.nommish.com/recipe/cuisine/asdf/redirect/
    http://www.nommish.com/recipe/sources/asdf/redirect/
    http://www.nommish.com/search/

but then again, I'm not sure... Maybe 500 errors are what you want to return for some of these
Cool! Keep it up!!Wow, very impressive. Good work, someday soon I wanna have something as functional and useful as well.Nice site, well done!  Out of interest why do you add id as an autofield for each model? django adds this for you and it doesn't seem like you have customised the primary key, so looks unnecessary to add.
(Note your Recipe class using unicode vs the python 3 __str__ used in the others).Looks great. How did you build your collections? Custom app?Cool. . Nice Actually. .No Issues. . 
http://imgur.com/phYtnQg

Just my opinion, but I think this doesn't look good and doesn't really serve much of a purpose. I think the home page here should have your logo, in white, and maybe two sentences about the web site is for. But this button and some plain text looks really bad to me.

Also I don't understand the site's functionality by looking at the home page. What does 'adding' a recipe do?

Why the carousel on the front page at all? Like I said, a regular div with a logo and a blurb, and then when you log in you can make it disappear or replace it with a carousel of maybe some highlighted recipes or something.

http://imgur.com/enTMCnz

Also, the grey bars here being 'tiered' or whatever is bothering my eyes. It should probably be one solid grey line, and on mouseover, transition that item's bar to another color. But here you have two lines, and the bottom grey line never changes. I hope that makes sense. Something like this: http://imgur.com/s96B0nV

http://imgur.com/mLcr9km

I think the links to the right of the search bar should align to the center of the search icon. I could be just wrong, but I think that would look better.

I would also get rid of the ""this individual recipe is powered by yummly"" thing and put that in the footer with the recipe discovery bit. ""Recipes and recipe discovery powered by Yummly"", that way you don't have extra stuff cluttering up your recipes.It's not bad"
2015-10-11 21:34:36;Is it possible to add new models in Django 1.8 without migrations?;"Why not just use the new migrations framework? It's fantastic and really easy to use. Sure. If you don't create a migration for an app, Django will use the old syncdb for that app when you run manage.py migrate.

Edit - How is this down voted? It is 100% accurate and I use this functionality daily. If you do not create a migration for an app, the first thing the ""migrate"" command does is sync unmigrated apps. That is to say, it creates tables for models where they don't exist. From the Django 1.8 docs:

It’s worth noting that migrations are created and run on a per-app basis. In particular, it’s possible to have apps that do not use migrations (these are referred to as “unmigrated” apps) - these apps will instead mimic the legacy behavior of just adding new models."
2015-10-11 15:10:42;Django REST framework ViewSet when you don’t have a Model;"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.

You may want to [contact the Reddit admins](http://www.reddit.com/message/compose?to=/r/reddit.com) about this.

###_
^Remember ^that ^reddit ^uses ^""shadowbans"", ^in ^which ^you ^can ^still ^see ^your ^posts ^and ^profile, ^but ^other ^users ^can't. ^For ^more ^information, ^check ^out ^/r/shadowban."
2015-10-19 15:24:54;Dear Lazyreddit, I need some advice re:django/rabbitMq/emails;"1. From my experience with Celery, it doesn't have automatic emailing when tasks fail (similar to Django's error email). I'm sure you could wrap the run_worker method in a decorator to do that though

2. Yes, you do need to restart it, not only to load the new tasks, but to load all of the new code

3. No you don't need to restart the broker from my knowledge (although I used Redis as a broker). If your broker has persistence, you don't have to worry about losing scheduled / queued tasks

4. I've had success using https://github.com/mher/flower to monitor celery queues

5. From my experience, the tasks will not re-run, but I'm not certain of thatTo follow up from what /u/wesleyjkendall and /u/dAnjou said, which mostly nails it:

1. While Sentry is great, I'm not sure you need it unless you are going to use it for more than this one task. I would either wrap the task in a decorator that logs/alert on fail, or do some logging in the task function where appropriate. I've also found that it's good to log away both successes and failures somewhere if it is important that the action did happen. For some of my periodic tasks, I log tasks in the DB so I can see the stats of what happened when, and what didn't happen.I'm no Celery expert but I can tell you how Django-Q and most generic task queues do things:

1. If an email tasks fails, you can check it in the result database or use a hook to catch errors [example](http://django-q.readthedocs.org/en/latest/examples.html#reports). Usually you will have to set up this kind of handling yourself.
Remember that task queues are not specifically for emails, even though they use the term 'messages' a lot.

2. You will always have to restart any workers after a redeploy. It uses a copy of your Django environment as a base. So if it has changed, you want those changes in your workers too. This will be true of almost any package.

3. If you have queued a reference to a function and that function has somehow changed its arguments, than yes you will have problems. You should ideally stop your website from creating more tasks and then let the brokers bleed out any remaining tasks, before doing an upgrade that affects task functions.

4. Unfortunately most brokers are quite opaque when it comes to the actual content of the messages, but you'll be able to see the amount and possibly the type of messages queued up.Mostly it depends on the broker and available monitoring tools. For medium volume sites you can use the ORM db broker, which has a django admin page. Another great task package is [django-rq](https://github.com/ui/django-rq) which has better broker (redis) control via the admin pages. Mostly your messages will survive a server crash, but it depends on how you set up the broker and it's quite specific to each type.

5. It depends if you configured an at-least-once broker or an at-most-once broker. The first setup will keep the task around until it's been acknowledged the second will just fire and forget. Each has its pros and cons. A-l-o can sometimes end up looping a bunch of bad tasks which will eventually crash everything and there is the possibility of double execution.  Not so with a-m-o. However if your workers crash on an a-m-o that's it. Task lost. On the other hand, with some high traffic sites, a small percentage of lost tasks is preferable to a system wide crash.

It doesn't sound like you need to send a million emails. You could give [django-q](http://django-q.readthedocs.org/en/latest/) a spin and set it up with the ORM broker or try [django-rq](https://github.com/ui/django-rq)  with Redis . That will give you a little more control over what is happening in your workflow.


"
2015-10-19 08:54:12;Help wanted w/ Django section of framework comparison;"I don't understand many of the feature rows:

""Less or Sass"" - what does it mean to 'support' this? Surely a web framework is by nature agnostic on such matters?

""App/db console"" - you mean - like the shell? How could a framework NOT have this?

""Separate db's"" - if this means what I think it does then Django supports it. But the fact that Django has 1 star probably means that I don't understand what it means.

""Orthogonal Routing"" - dunno

""Unicode"" - surely a language feature rather than a framework feature?

""JSON"" - huh?

""Outgoing Email"" - again - how can this not be supported?Why is Ember.js on the table? It's a client side framework.As far as I can tell , you're not really comparing frameworks. Rather you're comparing Rails features to other frameworks.Why not lose the stars? They are a bit redundant.
"
2015-10-18 23:59:48;WIFI Connected Particle Board and Django?;"You're asking in /r/django whether Django is a good tool. What kind of answer do you think you'll get? That's like going to a Ford dealer asking whether a Ford is a good car ...

Now about your question: is it completely clear to you what you actually need? You're throwing around the term *cloud* but what functionalities does this include? And what's missing? I had a quick peek at Particle's docs and it seems you don't need a server-side application at all. You need to be able to **send** HTTP requests but Django is for **receiving** and processing HTTP requests.  
Sure you can write a web application using Django (or any other web framework for that matter) that's acting as a middle man in front of Particle's API, for example if you want to add authentication and authorization.

So what is it you want?Yes, absolutely. The Django REST Framework should work for this. Fair warning, though: The environment is a mofo to get up and running your first time. Be sure to brush up on your Unix skills and choose your stack wisely."
2015-10-18 22:45:03;What is the best way to troubleshoot in Django?;"Using [django-extensions' `runserver_plus`](http://django-extensions.readthedocs.org/en/latest/runserver_plus.html) gives you werkzeug's browser-based debugger. You can then put an `assert False` in a view or middleware and you'll see the debugger including an interactive Python shell when you load the page. The rest is up to your imagination.I have not used it myself, but there was a talk at the last Djangocon US on using the [django-debug-toolbar](https://github.com/django-debug-toolbar/django-debug-toolbar). It looked like a pretty helpful tool for debugging and inspecting things like template vars and database calls and such. I've found `pdb.set_trace()` to be very useful. It sets a breakpoint where its called, then you can find out whatever you'd like in that scope.**TL;DR:** 

1. Use the [`logging` module](https://docs.python.org/3/library/logging.html) in the standard library, and write unit tests with [py.test](http://pytest.org/latest/).

2. [Django Debug Toolbar](https://github.com/django-debug-toolbar/django-debug-toolbar) is _amazingly useful_; `runserver_plus` in [Django Extensions](https://github.com/django-extensions/django-extensions) has better error pages when things go wrong, and you can even drop into a shell right in your browser on any line in the stacktrace; [`ipdb`](https://pypi.python.org/pypi/ipdb) is much nicer to use than the built-in `pdb`.

-----

Get in the habit of logging anything of interest and assigning proper log levels throughout your programs. Including for deployment. Keep all the debug stuff at log level DEBUG, when you deploy set the app to log level INFO or whatever you want, and you don't have to worry about [accidentally deploying some variable dumps to production](http://www.finextra.com/news/fullstory.aspx?newsitemid=27937).

[Django makes use of the standard logging module](https://docs.djangoproject.com/en/1.8/topics/logging/) also and in the SETTINGS.py file you can create loggers and handlers for your app.

I can not stress enough how useful unit tests are. I am absolutely not a fan of the built-in standard library `unittest` module. Py.test is awesome, and [integrates _very easily_ with Django](https://github.com/pytest-dev/pytest-django). You may find that you love the test-driven development style where you write a test outlining the inputs you expect to give and the outputs you expect to receive, and then write your code until it passes your tests. Or you may prefer to write all your code, then try to write tests that break it. I do something in the middle. Either way, you will be amazed and what you can find with unit tests. 

The `logging` module is not Django specific, it is best practice, it is built in, and it is incredibly powerful. For stopping execution and walking through your code use `pdb` (or `ipdb`) as suggested by others; for tracking data flowing through your programs while they continue to execute normally in development _and_ production, use `logging`.

One thing to be wary of with including Werkzeug is that you must never enable DEBUG in production. I mean, you shouldn't anyway, but [it's a lot worse when you do it with Werkzeug installed](http://arstechnica.com/security/2015/10/patreon-was-warned-of-serious-website-flaw-5-days-before-it-was-hacked/).I find it really helpful to drop into a shell and play with it in whatever context I need it.

I'm pretty sure Django ships with a context aware shell, right? `python manage.py shell` or something like that.

I also find it helpful - in Flask, not sure if Django will do the same thing - to track the lifetime of an object by dropping a couple prints into my code and see what the local server spits out as I navigate. I actually had to do this today to figure out why a form was losing it's data.I use the following to troubleshoot:

manage.py shell: import the model you are working with from there and test your method, calls, logic in real time

Install [django-debug-toolbar](https://github.com/django-debug-toolbar/django-debug-toolbar): ""a configurable set of panels that display various debug information about the current request/response and when clicked, display more details about the panel's content."" Seriously can't live without this now, download the package and either add it to your python path or add it directly into the apps directory of your django project, in either case make sure to add it to your settings INSTALL_APPS.

[Django Tests](https://docs.djangoproject.com/en/1.8/topics/testing/overview/): Try and creating some of your own tests. Once you wrap your head around this concept you can see how scalable your application is. Great way to stress test and find bugs. 

Write your logic in a separate stand alone python file and run it to see what kind of results you get before adding that snippet back into your django code. Check out some built in methods for different objects such as .__dict__ which can give you a whole printout of an object. 

Hope these help, if you have any questions you can PM me.  

Edit : I am assuming that while developing you're running django with `./manage.py runserver` in a terminal.

Assuming you have IPython installed (you do, right ?) put this one-liner where you want to debug:

    from IPython import embed; embed()

This will drop you inside an ipython shell right where you put that line in the code, with all variables, imports, etc, so you can examine everything (and run some code to test).

Then, 'exit' will close the shell and django will go on (with the altered variables, if applicable).[help](https://docs.python.org/2/library/functions.html#help)

[dir](https://docs.python.org/2/library/functions.html#dir)

[pprint](https://docs.python.org/2/library/pprint.html) can be useful

Additionally, in case you weren't aware, `print` called on an object can be customized using `__str__()`/`__unicode__()` for Py 2 or `__bytes__`/`__str__` for Py 3. You might check into [this SO post](https://docs.python.org/2/library/pprint.html) on that subject.`pip install debug` 

and then in your code

    import debug

and you have pdb with ipython."
2015-10-18 15:36:36;How do you plan for a django project?;"spend extra long on data modeling. the biggest source of tech debt in all of the projects I've worked on long term has been poor choices in the data model made very early on in development. 

this is a great example of the aphorism ""measure twice, cut once"". take your time to think about your data and all of its relationships. seriously, spend days in just discussions on this before you write even a single line of code. this is the one part of the project where time spent up front where pay off tenfold down the line.Not just django projects, but I think about my data. If I need to hold some, what are they? If I need to process them, what are they, etc. 

For example if you have a blog site you think about ok I have a post in this blog. What do posts have. They have a title, a date, comments. 

From this I construct the models. 

Then I go about how best to represent such data (presentation). Then finally the how, the limitation and security (I.e. who can write articles, who can comment) 

Is this what you mean?I tend to think about behavior. What do my things *do*? What things can be done with them?

I'm writing a blog engine in an on-and-off fashion, so I'll use that as an example.

Users:

* Make posts
* Make comments
* Register
* Login

Posts don't do much, but they:

* Can be made
* Can be edited
* Can be scheduled

Comments:

* Notice that there's user mentions (like doing /u/kurashu89)

I don't really worry about the data they contain outside of that object so much. But I like thinking how users and posts or posts and comments or users and comments interact."
2015-10-26 18:04:44;Cloning model instance to populate a modelform, including one-to-many relationships;maybe have a look at django-modelcluster?
2015-10-26 10:38:36;Djangoproject.com experiencing unplanned downtime.;"It's back up https://twitter.com/djangoproject/status/658635503286251520[**@djangoproject**](https://twitter.com/djangoproject):
>[2015-10-26 06:25:02 UTC](https://twitter.com/djangoproject/status/658529753624920064)

>We're investigating an unplanned downtime of the Django website, including the documentation. Fallback docs: [*django.readthedocs.org*](http://django.readthedocs.org/en/1.8.x/)

----

[^[Mistake?]](/message/compose/?to=TweetPoster&subject=Error%20Report&message=/3q9j0b%0A%0APlease leave above link unaltered.)
[^[Suggestion]](/message/compose/?to=TweetPoster&subject=Suggestion)
[^[FAQ]](/r/TweetPoster/comments/13relk/)
[^[Code]](https://github.com/buttscicles/TweetPoster)
[^[Issues]](https://github.com/buttscicles/TweetPoster/issues)
"
2015-10-26 07:18:50;Why is Model.objects.values() not more advertised?;">Other people told me to use raw SQL in these cases, which would certainly solve the problem, but would kinda defeat the purpose of using an ORM.

Not at all. ORMs are there to save you from writing repetitive boilerplate for the 98% of very average queries. If the ORM doesn't handle one very specific query you need you're *supposed* to break out of it and write the SQL yourself.

One of the Django ORM's good qualities is that it makes that pretty straightforward. There's even a way on a select query to add custom SQL to an ORM generated query.It's not too hard to get it right with select_related and prefetch_related. I usually just open up django debug toolbar and see what queries are being made and optimize from there.Huh. I feel like it's pretty well documented actually. Unless I'm missing something.

Maybe if you supplied some sample code it would be clearer, but the `.values()` method doesn't do anything except sidestep the ORM and get the values just as they are. Which is useful if you are willing to access the values directly rather than using the ORM and aren't going to make use of any model methods.

It's [mentioned here in the Django docs](https://docs.djangoproject.com/en/1.8/ref/models/querysets/#django.db.models.query.QuerySet.values) and is particularly useful when doing annotations where you want to group based on certain fields.

Also:

> however, in some situations, e.g. when accessing several relationships over several models, it is hard - if not impossible - to get it right with select_related and prefetch_related.

If you can access the value via `.values()` then you can get it using `select_related` or `prefetch_related`. Maybe you just need to do a little more reading up on how these other methods work?> It lets me query with the django orm and fetch the data as dictionaries with foreignkeys as raw keys, not links to extra queries.

but this doesn't solve your problem _at all_ if you need to access data from the related object. if you need that data you have to make the query. using `values` doesn't get around that. it just makes it clumsier in that you have to manually do the followup query when you need the data, rather than having the convenience of accessing the data through an object property. 

if your problem is N+1 queries then your solution is select_related and prefetch_related. Take a look at `values` with `annotate` too for queries like ""group books by status""

    Book.objects.values(""status"").annotate(Count(""id""))I sort of figured you'd know about this. It also clarifies why you were reluctant to try my advice of sorting large data sets in memory using list comprehension. Makes sense now.> in O(1) queries

I don't think O(1) means what you think it means."
2015-10-26 06:39:00;Using {{variable}} in for loop;"`dicts` should be a list of dictionaries, not strings, if you want this to work.

    dict = [incomeyr1dict, incomeyr2dict, incomeyr3dict]

Otherwise your template code is trying to interact with a string as if it were a dictionary... but it's not. This you either get no output (because strings don't have an `items` property) or you get each letter of the string one at a time (because a string is also a list of characters).What do you mean by ""it is interpreting key.items literally instead of as dict1.items"" Your first code example (after the image link) looks just fine to me. From the code you pasted it seems like dicts is actually a list of strings and not a list of dicts:

dicts = ['incomeyr1dict', 'incomeyr2dict', incomeyr3dict']

Put the real dict objects in there and not just the variable names. So probably just remove the quotes:

dicts = [incomeyr1dict, incomeyr2dict, incomeyr3dict]

Your template code is fine and doing what it's supposed to.Please show more of your code and the error message. In this line:

    {% for key, value in {{ dictname }}.items %}

It's clear you're hoping  that {{ dictname }} will evaluate to the corresponding variable. Unfortunately, it does not work this way.

You're going to have to supply the template directly with the values, not with the names of the variables containing the value.Your list of dictionaries is a list of strings. When you loop over dicts.1 it's looping over each character. Remove the quotes in your dicts variable. "
2015-10-25 17:20:35;manage.py dumpdata and loaddata issues;"Are your models routed to a non-default database by your settings? `loaddata` won't load fixtures for those models unless you specify the `--database` option. See 	`--help`.Do you have objects with identical IDs already in the database?Yeah the error messages (or lack thereof) for loaddata and dumpdata are terrible. There is no warning if dumpdata produces invalid json, which means that loaddata will fail and you'll have no idea why.

I would look for things in the dumpdata output like <Object x012EDO98E at XXX>."
2015-11-02 18:36:58;Django[1.8] forms.ChoiceField();I think ModelChoiceField is what you need: https://docs.djangoproject.com/en/1.8/ref/forms/fields/#modelchoicefield
2015-11-02 15:46:01;How to provide page-wise access of a pdf file to a user with proper authentication/authorization?;"You can't. 

If they can view it they can save it. Even if you find a way to block their browser from allowing PDFs to be saved they can still print screen.

Why are you attempting to prevent them from saving it locally?"
2015-11-02 13:52:25;Using django with multiple databases, LDAP, and default django authentication -- cannot add django users.;
2015-11-02 13:30:46;Why do people use gunicorn?;"I use gunicorn because it is easier to setup. There was some post saying the two are fairly close in performance and that you should spend your time optimizing other parts of your stack before worrying about your web server.[Here's an old ServerFault post from a Gunicorn developer](http://serverfault.com/questions/331256/why-do-i-need-nginx-and-something-like-gunicorn) that toots the Gunicorn horn a bit. I've never actually used uwsgi - the first Django app I deployed was on a gunicorn/nginx setup and I never looked back.Place I used to work used gunicorn. Only answer I ever got was ""because unicorns are fast.""I'd honestly like to know why too. I use gunicorn mostly because the community seems to favor it. Also if anyone has some performance tweaking tips on AWS optimizations please share!nginx actually ""speaks"" WSGI (the protocol). Both gunicorn and uwsgi are application servers which speak this protocol.I switched a few years ago. at the time, uwsgi's emperor mode allowed faster code reloads, basically a few seconds. I'm not sure about gunicorn's reload time now. I use gunicorn (listening in secure ports) + nginx (listening in port 80) because Its was super easy and fast to deploy apps and it feels secure. I'm using uwsgi in emperor mode and is great. It's quick and easy to setup, if you figured out how everything works and runs fast and stable. 
Bonus. The uwsgi logs are funny :) I used it for my first deployment because the most comprehensive tutorial I was able to find suggested it."
2015-11-02 11:41:44;Nginx + gunicorn + Django @ webfaction;"I use this same setup. 

For my Django app, I created a custom app listening on a port. Simply use this port when starting Gunicorn.

For static files, I created a static app.

Hooked up my django app to my domain like example.com

Hooked up the static app to my domain at example.com/static

Since I'm using statcifiles Django app, in Django settings you set the STATIC_ROOT to whatever the path is for the static app. Probably something like this:

    /home/boxidea/webapps/example_static

Set your STATIC_URL to `/static/` then you can run `collectstatic` and it should work fine.

Database was very straightforward. Let me know if you have specific questions and I can help answer. Been using this stack for about 5 years now.Webfaction provides a frontend Nginx server for all users. So, you do not have to take the trouble of running Nginx. Create a ""Custom Application"" that listens on a port https://docs.webfaction.com/software/custom.html and simply run gunicorn to listen on that port. `gunicorn -p 0.0.0.0:PORT myproject.wsgi` should work. https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/gunicorn/

If you want to learn how to install Nginx as well, Google is your friend. I don't have any pointers to share.Look for the project webfaction-django-fabfile on github. It uses this stack and it even uses the wf api to create everything. Once you have it tweaked for your settings you can deploy very quickly with minimal effort. [What I think every time such a post comes up in one of the Python subreddits,](http://i.imgur.com/zH9bj23.jpg)"
2015-11-09 23:14:47;My first try to create a real proyect.;"The English could use some checking:

> What could I dinner?

> In Asskit

> Private policy

It's _very_ bootstrap.

You may prefer to turn off the aws link signing. I think it prevents 304s.

You front page scroll down just a drop on my screen. Not sure how it looks on other sizes, but scroll down and put content there or don't scroll down and keep it to one page fold.

settings link goes to homepage

https://www.askkit.net/accounts/signup/?next=/None/question/43jxEYgLPQZOpnel5aKBzyVXvAWJ29Nl

doesn't look like it will work

On the create page, two ""reply text"" fields as souldeux mentioned. Not sure what they're supposed to mean.

Footer looks bad when you have one column.

Use some <titles>

Favicon is broken. Use a favicon generator to get all the right sizes and references. In general, you'll at least want `/favicon.ico` since browsers don't play by the rules.

`<button id=""signupBtn"" class=""btn btn-primary""type=""submit"">Sign Up</button>`

is missing some space. Use an html validator.

I distrust `confirmation_key`. If it is csrf, it is csrf. If it is \_\_all\_\_, use `form.non_field_errors`Switch to DEBUG=False.[Never trust user input](https://www.askkit.net/anon/question/ZEkqNz7x3VXyMYerEdOBQn6LlRGJ54rK)Cool stuff! Slick and easy to use, and laid out well IMO. 

Two suggestions - that popup on the first visit is kind of jarring, and I wasn't sure what 'Reply Text' meant on the create a question page. There were two fields with that label and I thought they were required because of the asterisks, but the form seemed to go through even when I left them blank.Very good job for your first project. Seems to work well enough, though a tad slow for me."
2015-11-09 15:50:01;Need help with importing a data dump from heroku to a local Postgres;Why not do a raw database dump? Why bother with Django at all in this case?
2015-11-09 13:18:40;Best practise for writing admin;"There's lots of CMS apps already, so maybe just use one. Wagtail is pretty good. 

If you want to make your own, its the regular process. Define models (page, tags, etc), define views (crud, + permissions if needed), define templates. Use a cookiecutter project for a jump start, or django-builder which goes as far as giving you some template tests.

http://mmcardle.github.io/django_builder/#/models

Its better to leave the built in admin alone. Unless you're making trivial changes it will probably turn in to a struggle to get the desired functionality.Personally I find the admin too cumbersome and unwieldy to extend versus writing my entirety separate views for anything really custom. Too much compromise and battling uphill. "
2015-11-09 12:12:14;What do you wish existed?;"An easy to use, performant way to manage email templates in django. The main features I'd want to see are automatic css inlining and unused css removal. I've yet to come across a well supported library/famework that does both in a sane way. Our primary use case would be to use an email css framework like Ink in emails generated via django template  without having to include the whole ink css in every email, just the styles we need.


edit: I would be pretty down to contribute to something like this.Something like celery built in and easy to use/set up. I need a way to make it easy for people to deploy Django projects as easily as you would deploy WordPress. I want to make a project, then a user should only have to put the project in a folder, visit a setup URL, and the app should be running.Some sort of Websockets or JSON pubsub type thing for building realtime applications. e.g. Chat RoomWhat's the goal here? To find a project to hack on..? first class bindings for PostgreSQL's HStore and JSON extensions. We've got GeoDjango for the PostGIS geospatial extensions. Would love to see something like that for the key:val store oriented extensions. My suggestion is to consider helping tysonclugg make django-stables a real thing and build crowd funding funding into that, e.g. for new projects or features for existing projects.

 https://github.com/django-stables/django-stablesa yeomany way to generate a project. with a better settings layout, procfile, some good default packages like debug-toolbar, celery, redis, etc. it'd generate a vagrant file, so once i generate the project, i can just vagrant up and get to work.Aws SES package with python3 support.A really easy way to deploy a Stack Overflow app to heroku. Just configure and go"
2015-11-09 11:05:43;I wanna be the best in the world at Django.;"About the MVC confusion:
https://docs.djangoproject.com/en/1.8/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names

My suggestion is to learn by building your portfolio. Try to create copies of popular websites such as bash, twitter, ticket systems, coupon/discount sites, weather website. With django docs and stackoverflow help it definitely can be done. After few created clones read about TDD (Test-Driven Development), unittests - you might want to rebuild your first projects in a ""proper"" way of development process. At this point you should know your first projects sucked, but the rewritten ones are pretty decent ;-) 

In the end you may want to take a look into books like ""Two scoops of Django"", which is not a tutorial book, but describes good django practices. At this point you will understand most of the book.


Sorry if you had any troubles with understanding this post. My english sucks if I don't keep my sentences simple :PWhat should you do after the tutorial is make a copy of the tutorial's app with different concept/naming, try to understand what every line does. Do this multiple times until you don't need to look up the docs/tutorial again. This what I did when I started learning django/web development in the first time.In django the controllers are called views and the views are called templates.

Apps are listed in a tuple in settings, i.e. there is an order to them.  When you ask for a template by name, it goes through each `<app>/templates` in order and takes the first one with that name.  This is so you can override templates from third party apps with your own.  However it doesn't leave a very big namespace for templates so to stop them clashing all the time the recommendation is to put your templates in namespaced folders inside `<your_app>/templates`, that way any template shadowing you do will be explicit.> I'm kind getting that Django uses the Model/View/Controller paradigm, though I'm not sure what the controller is.

its a very well hidden controller. django labels its own variant on the MVC pattern ""Model, View, Template"", because the backend code that you write that is responsible for producing an HTTP response (traditionally a rendered HTML template, though these days increasingly a JSON data response) is not the controller at all. Its actually just a server-side view. 

That leaves 2 questions to answer to fully understand django's implementation of the pattern.

1. what is a server-side view, anyway?
2. where is the actual controller in django if its not the server-side view? 

A server-side view is code that runs on the server that is concerned primarily with presentation of data and UI elements to the user. Fetching data from the database and inserting it into an HTML template or encoding it as JSON representation of the data is exactly this. django calls these functions ""views"" because they are very tightly coupled with the template layer, and should be narrowly concerned with presenting data to the user, or in the case of methods like PUT, POST, and DELETE, should be narrowly concerned with validating user input and performing the expected action on the data. 

There are some who would describe django's server side views as just controllers by a different name. This is a valid interpretation. Other implementations of MVC have labeled the part that handles data operations ""controller"". However, that is not quite right. View layer code absolutely can deal with data operations because those full under the domain of user interaction, which is very much what view code is for.

What is the controller in django then? Its largely hidden and automagical. The controller in django is the combined stack of the WSGI app itself, django's excellent implementation of URL pattern based routing, and all of the middleware and pre-processing that django does to the request before you get to it in the view layer. 

The important things has been told, repeat the tutorial understanding what each line does and try to replicate other webpages, you see real world problems and how to solve it, stackoverflow for all elseAt my university they made a tutorial called 'Tango with Django'. It's very helpful and is how I learnt. "
2015-11-16 21:13:38;I'm struggling to understand how to subclass a 3rd party app's view;"Looks like the view you're using isnt a class. You can't do anything but copy/paste that view and make your changes

http://dpaste.com/3WRNRD6

That would be your basic class view representation of that function. I just did this quickly so it might a few errors. 
You can't subclass something that is not a class. From what you linked it appears that is a function based view, not a class based view. I would rewrite it as class base view instead.You subclass the view just like any other object in Python 

   from x.views import third_party_view

   class MyView(third_party_view):

      def overwritten_method(self,  params):

         # add your changes hereOut of curiosity, why do you need the username to be in the URL for `reverse('userena_signup_complete')`?

If you're logged in, `request.user` points to the currently logged in user. You could pull the username from that inside the view function for `userena_signup_complete`.


    def signup_complete(request):
        logging.log(""{0} has signed up!"".format(request.user.username))
        ...You could probably wrap it in a decorator that has the logic you need in it.Even if it was a class based view you'd probably need to copy paste big chunks to customize the behavior anyway. "
2015-11-16 03:49:02;Run your selenium tests against an external server;"I feel your struggle, and ... nice diagrams!

Links are kind of deprecated though. Each container on the same compose network is visible to others by its project and scale qualified name, e.g. django_db_1. It's no longer the environment variables party that links had going on.

Using sleep to resolve container dependencies seems about it for compose right now. A more dependable ready check could go in an entrypoint script."
2015-11-15 22:25:30;Django Migrations - A Primer (updated for django 1.8);
2015-11-15 21:52:39;VPS that plays nicely with Travis-Ci?;"I'd recommend keeping your deployments separate from your testing. Travis for testing, Fabric for deployments. Much easier to troubleshoot deployment issues this way, IMO. For a pet project I set up a small web app with Sinatra or Flask (don't actually recall which) that listens for Travis-CI webhooks. It parses the callbacks, which are signed, and determines what to do, e.g. build and redeploy services or whatever. It's pretty easy to set up and there are a lot of examples. 

This particular project is on a Frantech/BuyVM VPS and doesn't have any built-in deployment support that I know of. I'm actually doing a write-up on how I've set up deployments to DigitalOcean. If you're interested, I can send you a PM with the link when I post it :)

Edit: In this exact case, I'm deploying static files, but the gist of it should be the same. Hope that you still need it 2 months later!"
2015-11-15 18:42:39;Use form of one CreateView in template of DetailView;"Afaik the CreateView just uses a ModelForm internally anyway. The views also have something like a form_class.

For your second question, that's precisely what having your own ModelForm is for, just change the widget. Just keep in mind that a malicious user can modify that data."
2015-11-23 23:05:11;What's the best way to modify CSS?;"Where to begin? The end. Most sites use a CSS extension like SASS or LESS, both of which compile to CSS. Both extensions offer an enhancements over CSS, such as the ability to nest selectors or use mixins to reuse functionality.

That's where you want to end up. Before you immediately jump there, learn the basics. Take some time to understand the advantages and disadvantages of using a CDN. After that learn how you can add and override styles to customize your site. Here are a couple resources that can help:

* https://docs.djangoproject.com/en/1.8/intro/tutorial01/
* https://docs.djangoproject.com/en/1.8/howto/static-files/If the changes you want to make are very miniscule (a few very particular elements on a specific set of changes), you could create a new CSS file and load that after you load Bootstrap. Alternatively you could recompile Bootstrap with your customizations to their LESS/SASS source. In either case, the files you make file would live in your apps' static folders. This is fine for development.

Come deploy time, you would use `python manage.py collectstatic` to copy these files into a separate directory (configurable via `settings.STATIC_FILES_DIR`. You can then configure Apache/Nginx/etc. web server to serve these files, or even put them up on a CDN of your own."
2015-11-23 22:37:16;Comparing Q objects for unit test;"run the query and look for models in the resulting queryset that you expected to be there. 

I find [Factory Boy](https://factoryboy.readthedocs.org/en/latest/) to be a very convenient utility library for making model instances in test cases. cook up some models that match your query, and some other models that don't. run the query. assert that the matches are in the result and that the misses are not. Not the most elegant solution, but you could be something like:

    assertEquals(unicode(q), u""(AND: ('foo', 1))"")

Or...

    assertEquals(q.__dict__, {'connector': u'AND', 'negated': False, 'children': [('foo', 1)]})

Assuming `q` is the result of your utility function.A simple solution is to convert both Q objects to unicode and test them for equality. I wrote a blog post about this with example code: http://jamescooke.info/comparing-django-q-objects.html"
2015-11-22 10:05:32;Django display DAG (mind map) in canvas;"OK, this is just of the top of my head but you're going to need to first get the data as a structured tree (look into https://github.com/django-mptt/django-mptt to be able to do this without killing performance).

Once you have each tree, you can weight each node and work out the spacial distribution of each set (angle between branches should be proportional to their relative weight, also calculate node size using weight at this time). Concretely, working up from the leaves of your tree, you should (more or less):

 * Size each node based on it's own weight
 * Give it a spacing weight based on the cumulative weight of it and all its children. 
 * For each node that has children:
 *  * work out the spacing by establishing a total weight of cumulative weight (for link with parent) + the culmulative weight of each child. This value represents your full circle. 
 * * Establish angle 0 as being the link to your parent 
 * * Space the children round giving each child proportional space based on it's cumulative weight.

When you get to the root node, you should have everything mapped out.

Using this information, you can get the geometry of each rendered tree (you'll need this to render on the canvas later). Now you have to work out how to place them on the canvas. I'd use a fitting algorithm and optimize for minimal canvas area (this could probably get you on the right track: http://blog.vjeux.com/2014/image/image-layout-algorithms-html5devconf.html, what you have to look for is minimal wasted space). This should give you the placement and orientation of the trees.


Now you have the tree geometry and placement, you just have to render them.

Technology wise, you'll get the best results/work ratio doing most of the work in Javascript and rendering using SVG instead of canvas (like that you can use CSS3 to get free animations). Django rest framework would be your friend here, as would angularjs for the client side (https://github.com/blacklocus/angular-django-rest-resource will save you loads of time, PM me if you choose this route, since there are one or two gotchas to keep in mind + one patch to the library that can cost you time).

HTHWell, related to the answer, bigest problem is, that my data structure is not a tree, its Directed acyclic graph so I am not able to use tree structure, anyone?"
2015-11-22 05:57:17;UUIDField for Django Objects;"[EDIT] We use ""short"" UUIDs because they do not have dashes.

We use ShortUUIDField from django_extensions.db.fields.

https://django-extensions.readthedocs.org/en/latest/field_extensions.html?highlight=shortuuidfield

There are discussions out there regarding in-efficienies when UUIDs are used as indexes in some (most?) RDBMS. Our databases are small and it isn't an issue.

Generally the way you avoid giving away information from primary key values is by not using them in your URLs :)Well, as for the last question you asked, consider the case where you have a bunch of data in a database table and you want to add the data in that table to some other database table, let's say you're moving data into a staging environment from a dev environment, for example. An auto-incremented ID doesn't tell you much here. Similarly, you might wipe out a bunch of data and the IDs might start over. Is the new '1' the same as the old :1'? A UUID is kind of like a contract that says ""This thing referred to by this UUID will always be this actual one (unless we screwed something up).""

One example where this can be useful is in APIs that other people will use. A UUID allows you to not worry so much about where in the table this record lives and guarantee that someone can always get back to it, no matter how you move around and manipulate the data.

But if you don't have these problems, the complexity is probably not worth it.

As for your first question, I'm not sure I would use PKs as user-facing identifiers, but sometimes you can't help it I suppose. I'm not sure it would matter to me. I definitely wouldn't use UUIDs as a means for obfuscating user IDs.We use the normal integer id, but in urls we obfuscate with a simple 2 way algorithm like XORing with a preselected random hexadecimal number. This way the pks aren't obviously shown, but it's easy to get them.

Obviously someone can figure it out easily enough but that's not the point.

We have a couple of ""EncodedPk"" mixins for our models and views which does the conversion automatically.Some time ago I used this to ""obfuscate"" the AutoField ID. As your ""numbers"" in ALPHABET, you can chose any chars or numbers in any order. Its similar to what Reddit uses, I think. Then use the resulting ""number"" in your public URLs etc.

    # ALPHABET = string.ascii_uppercase + string.ascii_lowercase + string.digits
    ALPHABET = '1dmcFJT3h4DxfgyBSZn6t7a8zAVWXjkY92bNPQsGHo5KLvwipqrCMR'
    ALPHABET_REVERSE = dict((c, i) for (i, c) in enumerate(ALPHABET))
    BASE = len(ALPHABET)
    SIGN_CHARACTER = '-'

    def num_encode(n):
        if n is None:
            raise ValueError('Called num_encode() with None value.')
        if n < 0:
            return SIGN_CHARACTER + num_encode(-n)
        s = []
        while True:
            n, r = divmod(n, BASE)
            s.append(ALPHABET[r])
            if n == 0: break
        return ''.join(reversed(s))

    def num_decode(s):
        if s[0] == SIGN_CHARACTER:
            return -num_decode(s[1:])
        n = 0
        for c in s:
            n = n * BASE + ALPHABET_REVERSE[c]
        return n
"
2015-11-22 05:18:56;How do I generate random test data in the databse for tests?;"I use model_mommy to create random instances of models. It's very handy. You can look up the documentation about fixtures. Or if you write unit tests, you should use the Python library ""mixer"" to create test objects at the beginning of each test.Pytest-django plus factory boy is greatI've used both factory boy and model mommy and would recommend model mommy I use [django-autofixture](https://github.com/gregmuellegger/django-autofixture), which is similar to factory-boy: You create a fixture class for each model and use one of the predefined generators for different fields types, e.g: loremp ipsums, names, emails, job titles, urls, etc.
Then you use a management command to generate the needed model instances. I use django-autofixture, for when I have single models. Provides the `loadtestdata <app>.<Model>:number` management command. It's not the smartest app in the world, but does stuff."
2015-11-30 21:50:23;Accessing hidden prefetched fields in Django;"While interesting, wouldn't it be easier and more implicit to work directly with the queryset that was already prefetched? The issue the article points out is that they are doing a different db operation, which is why it bypasses the prefetched data.

    values = list(instance.related_set.all())
    value = values and values[0]"
2015-11-30 16:35:49;How to tame a frenzy of tasks with Celery (synchronous task queue);
2015-11-30 04:07:05;How would the Django community recommend I approach this problem? Generating PDF's that capture dynamic HTML content.;"I'd put the JSON in the request body since URLs are [limited in length](http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers)Don't use reportlab directly. Use xhtml2pdf which and you'll probably be able to reuse most of your current template html.

Just augment your existing view method or function and pass in the fact you want a PDF instead of HTML (a query param pdf=true, a modified url path or a CONTENT-TYPE header - doesn't really matter)

Everything is the same until the point where you render. At that step - if it's a PDF, you'll probably want to swap in a slightly modified template (to allow for PDF-specific features) although it will probably extend the same shared template.+ for xhtml2pdf. It works fins with Javascript. I've built pages that render purely using Angular and the PDF generation has worked perfectly.. and you get to use the print stylesheet too. Also easy to testAJAX that appends content to the DOM based on user input? Sending (potentially) large volumes of data back to the server as JSON in the URL? I thought we had a way of capturing user input and sending it the server, a HTML form. And it doesn't even require Javascript! ;)

I don't know your exact setup, but if a plain form is not enough I would still recommend POSTing the data and not sending it via the URL as URLs have different max lengths in different browsers. 

If you want the completed PDF to have a URI which a user can share etc then after your form POST has completed redirect to a permeant URI for the generated PDF. This could simply contain a PK or UUID for the PDF or the data required to regenerate the PDF if they're not cached on disk."
2015-11-30 03:38:43;Django 1.8 and Python - Filter for same column with multiple values using AND condition;"https://docs.djangoproject.com/en/1.8/topics/db/queries/#complex-lookups-with-q-objects

results = Person.objects.filter(
    Q(age=26, gender='m') | Q(age=30, gender='f')
)

I believe your middle join should be an or. Look into q objects for OR logic it is working fine. but i want to get the person with age=26 and age=30 (both should match so need to implement ""AND"") if i use ""|"" it is giving result if any one match.for ex: 
results = Person.objects.filter( Q(age=26, gender='m') & Q(age=30, gender='f') )

results = Person.objects.filter( Q(age=26, gender='m') and Q(age=30, gender='f') )


??
"
2015-11-29 19:20:30;How profitable is freelancing with Django?;"It depends on how you define ""freelancing,"" but whenever I see questions like this, I always wonder, why put yourself into a box? Why not just pitch/label yourself a software development freelancer, who just so happens to specialize in Django?

The most important question is, do you want to work exclusively with agencies (least headache), or do you want to work directly with clients in a consultant capacity (most lucrative)?

If it's the latter, I can promise you 95%+ of clients don't care about the stack, they just want an app that works.The Dinosaurs, did have very good survival ratio and success in earth, 70+ millions of years ago in Earth... but their life was cut in Earth in some thousands of years... impulsed by a catastrophe, yes, but mostly by excessive specialization, we have reptiles from the same age, here, now (crocodiles, turtles, etc), mammals began in Jurassic, and now are, with birds, the successors of dinosaur age.

Over-specialization is/will be dangerous in ""technological age"" (now). Maybe you can be a software developer freelancer, with Django specialization, but you will need to learn MORE things. Your final clients will don't care (mostly) if you use Django/Rails/Node JS/who-cares-next-tech-boom, but you we'll need more practical experience to continue to be a software developer freelancer.I'm a freelancer in Amsterdam, advertising myself as a Java/Python/Go developer with ~20 years of experience. 

The last two years, demand for Django has absolutely skyrocketed. When I started freelancing a few years ago, all interesting gigs were Java-based, but my last 5 projects have all been Django (plus other stuff, such as GeoDjango). 

So yes, specializing *your business* in Django might work out very well (although I can only speak for the Dutch market). As others have said, specialize *yourself* in at least one other trick to stay relevant. > However, I do know that the demand for Rails here in the US tends to be much higher

This is highly dependent on which geographic area you are in, and is simply not true of the US as a whole. Furthermore, there is plenty of demand for Python/Django work out there, including remote work.

> I'm self taught and don't really have any industry experience, so whatever I do, I'll be building from the ground up

Freelancing without any industry experience will make it extremely difficult to find good paying clients. Companies looking to hire contract Django devs will mostly want someone with demonstrated experience. I see this as being a far greater hurdle to overcome than deciding over Django/Rails.[deleted]Web framework is only part of web development. You have to learn bunch of other stuff like messages queues, databases, things like logstash, elastic-search, some front-end, deployment, automatization etc.Language/framework doesn't matter, just how much work you're willing to put into it. Since you do have python knowledge, than django is a good choice. (check out /r/django too)  
I'd start with getting a full production ready website up, your website or to host your portfolio, something. A blog isn't a bad idea.  
What's your dev background? How long have you been developing? Had a full time job before this? Do you think you can handle the business side of things, client management, estimation, etc.?  
What do you know besides python? Javascript, html, css, json, xml, and sql are some web techs you'll definitely need to know.I am a full time freelancer, typically working with small businesses that have small budgets.

I started out wanting to do Django development solely, because I find it enjoyable; but the cost to my clients ended up being an issue. Even with using plugins to launch a typical site, it took more time and more money.

We're talking server work, server maintenance, worrying about package version, updates, alterations, etc. Custom templates, design, blah blah blah.

At this point, two years in, I've been launching Drupal sites instead. As much as I dislike the system, as much as I am NOT a php developer... it's just quicker, and cheaper. I can suggest to my clients a $50 theme from any number of theme websites, a simple hosting account from any number of hosts, that typically offer a one click installation, and get things moving for a fraction of the costs of rolling a Django project out.

My problem, was that I didn't, and still don't, have a default Django CMS installation goto. Nor have I automated the installation process. If I did those things, I'd have an easier time selling that solution... mainly because small business clients don't care about the tools involved but I could do django for cheaper.

But still, with Drupal I can go in with very little planning. And often times small businesses don't want to plan... they don't know how, and they don't want to pay for it. Trust me, it's very frustrating but I am dealing with business owners who are not tech savvy, and they're trusting my experience and skills. But they're also very budget and time sensitive.

There are a couple points here... 

1. you can decide to focus on one path but be taken down another based on your market.

2. you should spend the time now building a base tech stack and figure out how to optimize it so your client gets value, and you get paid.

Further, plan further ahead than I did! I went from having a full time job one day, to deciding I'd be happier self employed. If I had taken the time to plan my business out I'd have put together a default tech stack along with automation so that I could get something up and running inside an hour (DB, server, etc)I don't know why you would want to freelance. Its very hard to be a salesman, and bookkeeper, and secretary, and make more than the $40+ an hour you'd make working for a company. I suppose it could be great if you find some large clients that are willing to trust you. Freelancing for me was making 2 grand for putting together websites for businesses. And that was the high end of what a lot of them was willing to pay. I much rather contract or a get a salary."
2015-12-07 23:11:37;What's your thing to reveal performance bottlenecks?;"[High Performance Django](https://highperformancedjango.com/) by Lincoln Loop provides a lot of useful techniques. I certainly recommend it for those new to the domain of finding bottlenecks. 

As a co-author, I'm quite biased, but I also recommend reading Chapter 24,  ""Finding and Reducing Bottlenecks"" in [Two Scoops of Django](https://www.twoscoopspress.com/products/two-scoops-of-django-1-8)devserver_profile decorator from https://github.com/dcramer/django-devserver[New Relic](http://newrelic.com/).  Their python stuff is amazing."
2015-12-07 19:02:56;Time Zones in Pytz & Django;You know an article about timezones is going to be good when it has diagrams of the earth rotating around the sun.Fantastic article, OP. Time Zones and Django! Two of my favorite things! Ok, Maybe that's a bit a stretch but seriously awesome article. It's nice to see something that goes this deep.
2015-12-07 17:36:37;Rusty with my django and have a 101 question;"Couldn't you override the save method in the model? I would override save, this is the perfect situation for it.Sounds like a job for the `post_save` signal.The trick is that you want to check to see if it was already published during the save process.

Doing this during form save allows you to detect if a) there is no previous instance/pk is None meaning it's a new object or b) if the is_published boolean was already checked on the previous instance or not.

Both of these mean that you can ensure that checking the box on a newly saved item as well as saving an item that already had the checkbox checked won't cause issues for you. 

You want to set the date when the checkbox is changed **to** checked, so you will want to put this sort of validation in place, and I think that's best served in the form.

Alternatively you could override the model `save()`, retrieve the old version from the DB, compare field values and adjust accordingly before completing the `save()` call.For a sec I thought you were mixing django with the Rust language. I was like oh I wonder what OP is doing "
2015-12-07 10:15:04;Django-allauth best way to ensure atomic signup;"If I understand your problem and your attempted solutions well enough, it sounds like wrapping just the two DB calls (*within* the `signup` function) in an atomic block would do exactly what you said, and it avoids using `ATOMIC_REQUESTS` globally.

You may want to read up on this section of the Django transactions documentation: [Controlling transactions explicitly](https://docs.djangoproject.com/en/1.9/topics/db/transactions/#controlling-transactions-explicitly)

But here's the short of the long of it:

Using `transaction.atomic` as a decorator:

    from django.db import transaction

    @transaction.atomic
    def signup(self, request, user):
        # save first and last name of user object
        # save additional profile data (which is connected via onetoonefield)

Using `transaction.atomic` in a [context manager](http://eigenhombre.com/2013/04/20/introduction-to-context-managers/):

    from django.db import transaction

    def signup(self, request, user):
        with transaction.atomic():
            # save first and last name of user object
            # save additional profile data (which is connected via onetoonefield)

A few side notes:

1. The fact that your `signup` function takes `self` as its first argument tells me that its a member of a class. While using decorators on Python functions inside classes can sometimes mess things up, the `transaction.atomic` function should work just fine as a decorator on a normal function view or in a class-based view.
2. Is there any reason you are using a separate user profile class/table? I would think it would be much easier to simply make a [custom user model](https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#specifying-a-custom-user-model). I generally assume that every time I request a user object I will also need the profile, so I use custom user models (with the profile information on the custom user model instead of separate) so the database doesn't have to do a `JOIN` every time to get the profile. Furthermore: this became possible in Django 1.5 or 1.6 (can't remember), so if you're using a Django earlier than that, you can't do that. But since it sounds like you're still setting up the system from scratch, you should definitely use Django 1.8 (which is an LTS release) or 1.9 if you can (if all of the apps you want to use have support for Django 1.9).

Hope this helps! :)"
2015-12-07 05:04:42;A reference of Wagtail CMS StreamField Icons;
2015-12-14 21:47:06;Model Help: Foreign Keys;Not exactly sure what your question is, but IP addresses could be a manytomany relationship. If two users share a computer they will have the same IP. If you do a m2m then you can't have the is_active field the way it is now. In your view you would just need to get all users with a particular IP that are active.
2015-12-14 16:57:41;Are you a hiring manager looking for Django developers? I'd like to interview you (see details).;"It would be nice if you could share the results here as well. In my case, I'm a programmer and I have been working with Django for a couple of years. Somehow there are parts of Django that I've never had to use deeply, like the Admin. It would be good to know what parts of Django usually have more weight when interviewing. I'll answer right here.  My current company www.rinse.com builds most of its software in Django, and while python and Django experience is a plus, it is definitely NOT a large factor in the hiring decision-making process.

In descending order, the hiring criteria look like:

1. Is the candidate sharp?  Will he or she be able to understand our technology and product, and be able to read code and documentation to effect quality improvements to our software?

2. Is the candidate reasonable?  Can we trust this person to make sane and clear changes to our software?  Will I (as a manager) have to spend considerable time steering the candidate away from unimportant or sisyphean projects?

3. Is the candidate knowledgeable?  Does the candidate have at least passing knowledge of how the 'full stack' works?  The candidate doesn't need to have complete knowledge of everything from browser internals to CIDR to WSGI to virtualization, but a passing understanding of how the internet works is important.

4. Can the candidate code?  Language doesn't matter so much.  The important thing is that the candidate can describe an algorithm clearly, and then type up executable code that matches the algorithm description in a timely manner.

Anyone who meets the above criteria can pick up a framework like django quickly, and will be easy to support and educate during code review in the meantime.I'm not a hiring manager, but i'm a software engineer in a Django shop  that is part of the interview process for candidates. Reach out to me if you are interested.Just an anecdote: I'm a Junior Software Engineer. I work in Django every day. I got hired with almost no Django experience (""I did the tutorial last month..""). I did have some Flask experience."
2015-12-14 06:23:39;Declaration sharing site built in Django - Feedback welcome;"The URLs and methods look like a REST API. Not sure if you've used Django REST Framework, but if you haven't, it could be a good idea (if you want to learn something different). Also, regarding that aspect, you could build a SPA with React or the framework you prefer - should be fairly easy due to the reduced views and the URL structure. Just some quick thoughts.So it's a Twitter clone?

Anyway, you posted this in /r/django, yet you don't provide any code to look at. What are we as Django people supposed to give feedback on? This could just as well be a crude PHP script."
2015-12-14 01:44:26;django-pipeline or django-compressor;"django-pipeline because explicit is better then implicit.

compressor always makes me over-use it and I end up serving so many differend bundles. I prefer to define them in settings and be aware of how big my bundles get or how fragmented they are.I prefer django-compressor because it doesn't require specifying files in settings. Alternatively, some in industry are moving toward using r.js, webpacks, CommonJS, etc. to manage front-end dependencies. It might be worth taking some time to research these alternatives to determine if they better meet your immediate and long-term needs.

We have an...interesting combination of django-compressor (DC) and r.js—DC handles CSS/SCSS, but defers to r.js for JS compilation—for a few projects at edX. It works, but it could be better.deleted Gulp/grunt/webpack/etc.

Use a watcher to compile (and minify/sourcemap) everything into 1 CSS and 1JS file.

Why? Because all of the best frontend stuff is nodejs.[deleted]Thanks for all the replies. "
2015-12-13 17:58:12;Can someone explain this like I'm 5?;"    favorite_palletes_ct = ContentType.objects.get(app_label=""gallery"", model=""post"")
    
    favorite_ids = Favorite.objects.filter(content_type_id=favorite_palletes_ct.id).values_list('object_id', flat=True)

.values_list: returns an array of model attributes, replaces your second block of code

----

    post_ids = Counter(favorite_ids).most_common()

note: I went through the [Counter](https://pymotw.com/2/collections/counter.html) module and it appears that your implementation will only remove duplicates and order by popularity, however you can also specify *n* top objects to select with:

    Counter(list_name).most_common(n)
    where: list_name is of type list, and n is of type int

----

    palettes_instance = Post.objects.in_bulk(post_ids)
    palettes = [palettes_instance[id] for id in post_ids if id in palettes_instance]

You're going to have to work on this one a bit further on your own, but here's a starting point:
    
According to [Django docs](https://docs.djangoproject.com/en/1.9/ref/models/querysets/#in-bulk), .in_bulk allows you to query a list of objects through a list of their ids.

When it comes to the last line, you're going to have to look into [""Python inline for-loops""](http://blog.teamtreehouse.com/python-single-line-loops).

    palettes = [palettes_instance[id] for id in post_ids if id in palettes_instance]

    # can be expanded to (so you can better understand it)

    palettes = []
    for id in post_ids:
        if id in palettes_instance:
            palettes.append(palettes_instance[id])

----

I can't exactly run all of these code blocks, so it may take just a bit of tweaking to get stuff to work. Hopefully this will give you a good starting point.

Edit: Code inaccuracy that bothered me.


Someone please correct me if I'm wrong, but here's my thinking:

`post_ids` represents a list of the most common post ids, sorted by commonality. 

When you call `in_bulk(post_ids)`, it returns a dictionary of objects, which effectively eliminates any sorting that's been done for you.

So the last line is looping through the `post_ids`, creating a list of post objects out of that `palettes_instance` dictionary. Since you're looping through the list of `post_ids`, which is sorted the way you wanted, the newly created `palettes` list will be sorted the same way. 

I can't really comment on the elegance of the code, though it does seem to be a bit redundant. I'm still pretty new to Django myself. 

I guess that's not quite an ELI5, but hopefully that breaks it down a little. Does that make sense? I won't do ELI5 exactly but here are clues to help you understand.

Google ['django orm in_bulk'](https://docs.djangoproject.com/en/1.9/ref/models/querysets/#in-bulk)

The in_bulk takes a list of ids and gets the records for those ids mapped in a dictionary. Note that dictionaries do not maintain order.

The clue for this code is in the [Counter and it's 'most_common' method](https://docs.python.org/2/library/collections.html#collections.Counter.most_common)

So the 'post_ids' list is in the desired order when it's looped over in the last line to turn the records into a list.

This is all rather convoluted but I guess that is due to the generic content_type.

Databases are very good at [sorting and aggregating](https://docs.djangoproject.com/en/1.9/topics/db/aggregation/)

Take note of the example '# The top 5 publishers, in order by number of books.' Note the publisher objects have a number_books attribute as an added bonus.

I've not worked with generic relations in years so I won't venture to even post an attempt but perhaps some more clues as to how to generate a guery that does everything in one statement: http://charlesleifer.com/blog/working-around-django-s-orm-to-do-interesting-things-with-gfks/"
2015-12-21 23:06:25;City Chat with Python, Django and Twilio IP Messaging;
2015-12-21 19:05:41;django.postgres.hstore vs djangonauts/django-hstore where is the difference?;"`django.contrib.postgres.hstore` didn't exist until Django 1.8.

Much like `south`, it typically takes a few versions of Django before native framework feature support and usage overshadow the original packages that inspire said features.

I don't know if the `djangonauts/django-hstore` package is still having features added, but the contributors are likely to see more benefit to their work by contributing it to `django.contrib`.  `django-hstore` will live on though, for legacy projects on Django versions that predate 1.8.  I'd expect that `django-hstore` will stop adding features in the next year or so if they haven't already, unless there is just some huge rift between their vision and what's going on in core.`django-hstore`'s most recent commit was 3 days ago, so it appears to still be active. The nice thing about a third party package is that it can move a lot faster than what is in `django.contrib`. So, new features and bug fixes will come out a lot faster (so will more bugs). On the other hand, whatever is in `django.contrib` will generally be more secure and stable. If you don't need something specific in `django-hstore`, go with what is in Django core. I can't be positive on this but I believe it should be possible to use both packages in the same project if down the road you had to have a specific feature that was released in `django-hstore`."
2015-12-21 14:06:55;Anyone looking to team up?;"I recommend giving more details about your skills and the skills you expect the other person to have. Also, what are your expectations about this collaboration?I'm open for collaboration. My site devolio.net is built with Django.[deleted]I just started learning Django, so I may not be a speedy contributor, but this is the best way to learn! I'd love the idea and participation where I can :)Are you only looking for side projects of your own design?  We get commercial projects coming through frequently that could use a hand from a contractor/freelancer.Always looking for people to help me build my django based cms.I have been using django for a year now and python for about 3 years. I built this site www.cannabisbolaget.se in Django. I'm studying AI in The netherlands at the moment and could be interested in some project :)I'm interested too ! I've been working for the last 2 years on a fitness application (first to scratch my own itch, later it became my hobby) and would love to hack on some new features with someone.

https://github.com/rolandgeider/wgerStill looking for other devs btw."
2015-12-21 11:11:58;Import or get_model()?;"Unless it's absolutely necessary I think you should opt for the former. It's just convention. 

What kind of import conflicts are you experiencing? Sometimes I have to use `get_model` to avoid import conflicts. In the `model.py`, for example. But even in that case I can make inline import (I just don't like this approach in general)

Answer is: you have to use standard python import, unless it's impossible to ""rethink"" your modules structure for avoiding conflicts.If you know what model you're importing and you can use literal, use the regular pythonic `import`. If you want to import a model from a string, go with `get_model()`.One massive benefit of using the regular python import is that your fancy IDE and linting tools actually work."
2015-12-21 00:31:36;check --deploy: Which are needed?;Do you have SSL setup for nginx? No? It's the `*_SECURE` settings.
2015-12-28 18:06:46;Silver - Django automated billing with an API;Thanks for sharing.  Is this what you use at Presslabs?
2015-12-28 15:41:02;10 most popular django libraries started in 2015;Are you sure those are _the_ most popular ones? Some of them seem unmantained.
2015-12-28 01:51:10;AWS RDS vs Docker Postgres;"I would treat EC2 instances as ephemeral, if not, you're going to have a bad time. For us our data is too important to stick on EC2 instances and too costly to pay for the DBA hours to re-implement in EC2 everything a service like AWS RDS offers. I would pay the extra purely based on that.AWS RDS is great for fire and forget DB deploys that can scale up if needed.

Releasing new applications to AWS (regular updates with no downtime) is easy:

- Run two servers behind a load balancer
- Take host 1 offline, update, add back into Alan
- Take host 2 offline, update, add back to LB
- Take host N offline etc.

With docker containers this is even easier as you can just spin up new ones and replace the ones on your LB.

Running your own in Docker has some weird issues - ECS for example needs some serious hackery to be able to set file handle limits etc. Whereas RDS is configured as patched for you.

Downside with RDS is infrastructure lock in, you end up working with how RDS does things, not how you want to.With Docker there is no easy way to update your application 'on the fly' without the possibility of dropping requests. That gave me pause at least for my initial AWS deploy as I expect a lot of updating during the alpha and beta phase of my deployment.Bit confused, how are you planning on running Postgres if you go the docker way? 

If you have several instances of your data that's gonna work bad, you can still use RDS for your database scalability and docker for your application. "
2015-12-27 12:27:08;How to use Postgres Bytea field?;"Django has a BinaryField: https://docs.djangoproject.com/en/1.9/ref/models/fields/#binaryfield

Which should map to bytea on PostgreSQL.

Before BinaryField was added in 1.6, I have also used something very similar to https://github.com/niwinz/djorm-ext-pgbytea/blob/master/djorm_pgbytea/bytea.py successfully in a project.I'd say either by making your own model field (advanced, maybe check out how it was done in django.contrib.postgres) or querying the database manually.It's not in the standard ORM you'll have to do it manually via psycopg2. That being said, storing large binary information in a RDBMS is almost always a bad idea and the wrong call. "
2015-12-27 08:03:30;Trying to go through the tutorial and can't even get past the first step...;"I'd recommend to install Linux. I'm a newbie as well and there were so many things I had to fight with in Windows. Since I got Linux in dual boot, it's so much easier. Type ""python"" then in the py prompt try and import django.

Also make sure your prompt version is correct...What is the output?

I suspect you need to add some things to your PATH, google it! :)Does the command actually return? Or, does it just get stuck there in an unresponsive state? Have you tried looking at the Windows task manager?
 
I have actually been having some random problem where I get a popup that says that Python has stopped responding after trying to run Django. But, it always seems to happen after messing around with the database structure (e.g. do a change, and then undo it). If I delete the database, and do a clean makemigrations, it always works.  I have not quite tracked down the sequence to make the problem happen.
 
But, it sounds like your problem is happening much earlier.Dealing with python in windows is a pain. I recommend you to switch to any linux distro or try PyCharm(for djago I think you need to pay) that makes quite easy to work with python(I have tryied it with pygame projects and fixed all my problems with paths and sh***) in windows.I had the same problem then found somewhere online if I disabled my comodo firewall I would be ok. Did that and it worked like a charm. "
2016-01-04 21:53:44;Why is using Django Forms best practice?;"> What is the benefit of using Django forms? 

you do intend to validate user input, right? django forms provide a convenient way to do this. 

how about making sure your html inputs have the right names and types in all of your templates? django forms provide a convenient way to do this too. 

> I am able to get away without it when using AJAX

of course you ""get away with it"", because django forms validates form encoded data not JSON encoded data. you literally can't use django forms to validate AJAX requests. you should still validate them though. you might have a homebrewed system for that already. personally I use [colander](http://docs.pylonsproject.org/projects/colander/en/latest/). 

Why is using Django models best practice? You could just run SQL yourself and store the result in a dict?

Seriously - Forms is a great abstraction for handling forms. If you don't use it, you'll end up reinventing most of it. Badly.Forms are great if you're using actual forms. If you're not, you'll want to look into a tool like Marshmallow for handling serializing and validating user data.Chapter 20: Security

> Never – under any circumstances – trust data from the browser.

http://www.djangobook.com/en/2.0/chapter20.html"
2016-01-04 18:04:19;Redis + Celery: Reactive Computing in Django for IoT applications;
2016-01-04 16:43:17;Top 5 open source Django packages in 2015;Wagtail would be great if it had a concept of components. Feincms and Django-cms both have the ability to populate a content area with any multitude of built in or custom components. This paradigm works very well for large sites. Defining the fields of an entire page only really works for simple sites I find.
2016-01-04 08:57:00;Anyone tested Djangae (Django on GAE)?;"I used it while working at Potato. Pretty much works as you expect, the ORM mods even give you back features that are not natively provided by Datastore. 

I would say it was pretty stable, I've certainly seen it used very successfully in production. "
2016-01-03 20:05:49;Saving data to the cache table?;"https://docs.djangoproject.com/en/1.9/topics/cache/#basic-usage check this page out.

It doesn't matter if you're writing to a database or other in memory cache, the api is the same.> From what I've read online it seems that some recommend using the built in django cache?

Read where?

> The one link I saw basically just said to use the cache

Which link?

> Seems easy enough

No, it doesn't. Seems overly complicated. Why don't you just add a field to the model?"
2016-01-11 20:05:33;Detecting a read-only database (PostgreSQL) connection;"Listen to the signals: https://docs.djangoproject.com/en/1.9/ref/signals/
It's not provided by Django, but Postgres instead: You can use `SELECT pg_is_in_recovery();` which would return `TRUE` if the db is in standby and `FALSE` if not.

Source: http://www.postgresql.org/docs/9.4/static/functions-admin.html#FUNCTIONS-RECOVERY-INFO-TABLEYou might find this useful: https://github.com/jbalogh/django-multidb-router"
2016-01-11 03:01:44;Safest way to save attachments on the server?;"You have a whole heap of big issues if someone has your SSH key. Even if you offload the files to a different server or even something like S3, you can't protect yourself against someone having access to the server. Encrypting the files won't do you much good either, because the server needs access to the encryption keys.

One solution would be public/private- key encryption, but the would only help you if the server never needs to read the uploaded files. Of cause if someone has access to the server, and the code that handles to upload, they could just disable the encryption or store an unencrypted version of the files as they get uploaded. 

Don't let people you don't trust into your server. It's not really that helpful, but you present a worst case scenario where all safeguard have already been circumvented.

Be sure to have a strong pass-phrase on your SSH keys it the best advise in the situation that you present. Than at least losing the SSH key isn't necessarily the end of the world.    If they have root on the server they have everything.

You can try to encrypt your documents so only you can see it or transfer them to a safer server you control.Not going to add anything, but its good to see people asking the right questions.

You've taken your first step into a larger world. -ObiWanThis isn't a question for /r/django, it's a problem that every server application has.

Keep your ports closed (e.g. set up a firewall) and protect your credentials (e.g. use a password manager and encrypt the hard drive of the machine you're accessing the server from).I agree with others that if you are coming from the assumption that someone is going to be able to SSH into your server, you are already in trouble. Someone gaining SSH access is going to be able to get most of your secure information quite easily.

If you want them to be absolutely safe, this should actually work, because it completely cuts off ssh access.

I'm sure there are alternatives to AWS for this but since I know AWS this is what you would do:

Move all users' files to S3, and set the storage to S3 so that all uploads go directly to S3 without going to your server 

Do all development and testing locally or on a dedicated test machine with no access to the real user files. 

Then you would create an ElasticBeantalk (EB) app for your Django app. Each time you make changes to the code, rather than accessing the server via SSH you deploy the app using EB.

Instead of keeping any passwords, usernames, etc. in the code or config files, they all get set as environmental variables. I like [django-environ](https://github.com/joke2k/django-environ) for this. There is a page within the EB website where you can set up separate environment variables for your production and test server.

If for some reason you need to store larger secure things, like certificates/keys, you store them in another S3 bucket.

When setting up your EB instances, you give them an IAM role. Basically, normally when you want to do anything in AWS you need the access key and the secret key. Using an IAM role allows you to make use of AWS services without needing to explicitly set the access or secret key. 

You grant your IAM role exclusive read/write access to the S3 bucket for the server. That way, it's not possible for anyone else to access these files. You need to make sure to set up ways for the files to be securely served by the Django application which is another matter.

Finally, turn off SSH access for your development instances. You don't need the access since all changes to code are happening on your development server (probably your local machine) anyway. 

Note that setting this up will be somewhat time consuming and is overkill unless you really are this concerned about keeping these files secure. But it *is* possible to set up a working production server with zero ssh access, and where it's not possible for users to gain access to your files.If someone has ssh access to your server (and assuming the user they have access to has sufficient rights) then it's pretty much game over.

I think going over server hardening is probably out of scope for /r/django but at an application level some things you should try are:

1. Store files on a separate server or CDN such as S3.
2. Ensure your static file server does not have the means to parse python/perl/php/etc so if a malicious upload makes it passed your form handler it cannot be executed on the server.
3. Serve all static files from a different domain/sub-domain. So if a malicious file is uploaded it can't access session cookies etc on your primary domain. 
4. Consider encrypting files before storing on disk. Use a separate encryption key per user. Have the key based upon the user's password so it is only stored in memory when a user authenticates. Keep in mind a lost/reset password would make files unrecoverable.
5. Use [signed urls](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html) or your CDNs equivalent."
2016-01-10 20:26:45;Deploying Postgresql South Migration in Production;It's my understanding that `ALTER TABLE` for PostgreSQL does not always lock the table. However, that knowledge is purely anecdotal. That being said, have you actually profiled the migration? How big is the table? It may be the case that the table is in fact locked, but for such a short time that your application is not affected.
2016-01-10 20:16:19;Django and Graphs, looking for advice on how to move forward.;"1. If you have no data, you have no sales. That's a zero.

2. [Aggregation](https://docs.djangoproject.com/es/1.9/topics/db/aggregation/) may be what you need."
2016-01-10 18:38:02;Rails vs Django: an in-depth technical comparison;"Interesting but outdated. The section on migrations, for example, predates Django's migrations. Pretty dated.  I would also not describe this as an ""in-depth technical"" comparison.  Looks more like a high-level API syntax comparison to me.Found it very interesting, as I have very little rails experience. Wouldn't call it technical as much as practical, but its points are useful."
2016-01-18 23:16:41;Need help with setting up celery for a notifier app. [x-post r/djangolearning];"It sounds like you should have a cron task, using celery-beat, that launches any scheduled scrapes (scrapes not scraps right?), this task does not do any of the scrapes!  Celery beat runs on it's own process, just like a celery worker (make sure you only have one of these total), and you can configure which tasks it launches and the intervals of launch from your django admin.  Within the cron-task, you'll query for which things need scraping and then dispatch those as individual tasks.  Lastly, I would recommend adding at least a datetime field like ""last_scrape_at"" to your model for hysteresis.  This will avoid duplicate work if your queue backs up (i.e. duplicate items in queue), allow for easy querying of which items need dispatch, and provide some rudimentary logging."
2016-01-18 19:41:40;How to post the value of a select tag to Django views;Your error is in the view. `request.method` is a string, but you compare it to a list. A string and a list are never equal, so you will never get to the block that prints the `<select>`'s value.
2016-01-18 16:50:33;Django development on the go (ipad or android);"Would it be possible to just ssh into another machine to do your work? Maybe run in a screen session so that disconnects don't really wreck you.

Speaking from experience with iOS there's probably nothing that can be done. iOS abstracts away the filesystem from you and you can't execute arbitrary code without rooting it.
Once you root it however you get bash and you can do whatever you want.Mosh might make it much easier to SSH into a machine when you have a spotty internet connection.

https://mosh.mit.edu/Keep a raspberrypi in your bag. Have it create a Wifi network you can connect to from your iPad. Then ssh into the Pi and you can edit & execute code. To power the Pi get a decent USB battery pack.Thinkpad x220 is the goto for me - available cheap with great specs.

I have a random cheap 9"" tablet that I use on holiday using my  phone as a hotspot + JuiceSSH + little bluetooth keyboard.For the price and usability, a netbook. You can find a cheap one and power doesnt matter, your writing text files. You can use an actual desktop IDE on it.On my iPad, I have [Textastic](http://www.textasticapp.com/) for editing and [Working Copy](http://workingcopyapp.com/) to clone repositories and add files (you connect both through iOS share system).

My plan was to use both when I had to send my only laptop for repairs, but I never got deep into using them. But I managed to write some blog posts with them.

The biggest problem I see is that you won't be able to run your code on the iPad -- you'd need to upload to somewhere else or edit, commit and *then* run tests/see the results.

You could try [Clound9](https://c9.io/), since they provide workspaces with installed packages (and Django is one of them), but you'll need to be always connected (not hard, if you make your phone run as a hotspot).

Trying to do the same on the phone, since it's an Android and you can root it and install whatever you want, should provide an easier environment, although with a smaller screen -- and I have no idea with this, although I had VIM (I think) on my old Xperia Tablet Z, but I never managed to pair it with the bluetooth keyboards available around and then Cyanogen never managed to run GoogleApps without breaking itself and I gave the thing away.You could get your dev env (or anything really) running on your phone (it is Linux after all), then ssh to that from your ipad to make use of the bigger screen. Use hotspot on your phone for the connection so fropouts aren't an issueI commute 2x45 min train. 
I use iPad 4 (not air) or surface pro 3.
Both would hook up to my phone as a hotspot. 

Overall best bet is understanding what you can do best and organizing what you'll work on. 

I make liberal use of evernote and instapaper to share pages/ideas across computers. 

If I have videos to learn from I try to do that on the train and more active work while I'm stable in a place for a long time. Pythonista is Python ide for iPad that works pretty well, don't know if you'd be able to run djangoGet a smaller laptop? I had very good run with my Macbook Air. Now using the surface pro 4 for a bit more memory.

What do you mean about no git though? Git is a distributed source control so you just check in locally without pushing and then push when you get to the office.

What's the point of having a laptop you can't use on the go?"
2016-01-18 16:18:39;A definitive guide for integrating an e-mail service with Django using Mailgun;"Is a good write up.

A question though, why not create a new EmailBackend that uses mailgun. You can create it to use celery tasks. Then you just use the existing mail functionality in django, and it is compatible with all django version and is easier for people to pick up and run with.Very nice. How about receiving emails?"
2016-01-18 16:13:45;Custom directory structure not working with django-extensions' admin_generator or makemigrations.;"Sorry, I tried to format this to make it look nicer. code formatting seems to disregard long lines wrapping properly and quote just seems to vomit it all into an unformulated paragraph. 

If you have any advice on how to best display a stack trace here, I'm all ears :)Never mind. 
https://github.com/django-extensions/django-extensions/issues/784
It's a django 1.9 / django-extensions issue? But it's happening with 1.9 and the current django-extensions. "
2016-01-25 20:08:53;modelform foreignkey object trouble?;"In your PrisCompanies model you need to define a \_\_str__ (or \_\_unicode__ for python 3) that returns the string you would like to display.

    def __str__(self):
        return self.company_name"
2016-01-25 15:06:51;django conditional forms;"Sounds like http://django-formtools.readthedocs.org/en/latest/wizard.html would be a great fit.

Formtools used to be part of Django, but was moved into a separate package starting with Django 1.8.[deleted]If you plan to do it all in Django and a frontend framework isn't how you want to go - it is perfectly fine to still do things with Django Forms like this - then [formtools](http://django-formtools.readthedocs.org/en/latest/wizard.html) is the way to go. 

With regards to possibly needing to go slightly further than formtools, you can generate dynamic forms at runtime. In Python you can generate a class using the `type` built-in.  [Here is a blog post](http://www.dougalmatthews.com/2009/Dec/16/nicer-dynamic-forms-in-django/) that covers the basics of generating forms with `type`.

A TL:DR of the blogpost: It works something like this, where the author is using a Question model to store the question and the possible answers for their Quiz:

    def quiz_form_factory(question):
        properties = {
            'question' : forms.IntegerField(widget=forms.HiddenInput, initial=question.id),
            'answers' : forms.ModelChoiceField(queryset=question.answers_set)
        }
        return type('QuizForm', (forms.Form,), properties)

Where type takes the name of the form, a tuple of classes to inherit from and a dictionary of attributes/methods to bind to the class. Arguably this can be a bit confusing but sometimes you need the flexibility and what the Forms API gives you with the validation logic, and quick templating more than makes up for this for some use cases. 

Creating one of our forms would work something like this:

    QuizForm = quiz_form_factory(question)
    quiz_form = QuizForm()
    quiz_form = QuizForm(request.POST)

I have used this method in the past. Care during implementation, rigorous testing and minimising any magic is the way to go if you do head down this route.


I've done exactly this using what, as others have noted, is now a separate package; formtools. Specifically using formtool's condition_dict argument. I've used it to build surveys with around 30+ conditions. It's laborious to setup and gets a bit hard to keep track of so I'd recommend defining your condition_dict alongside your forms and conditions in forms.py then importing those into urls.py.

http://django-formtools.readthedocs.org/en/latest/wizard.html#conditionally-view-skip-specific-stepsAgreed that the django ways are blech. Some options:

    class FooForm(Form):
        if something:
            field = IntegerField()

    class FooForm(Form):
        field = IntegerField
        def __init__(self):
            if something:
                del self.fields['field']

Super yucky! And that's just for hiding/showing, what if you need other complex logic for labels, help text, widget etc? And you can't really use djangos forms as an API because they are made to only be created in that class-style and that doesn't lend itself to programmatically creating forms.

This and much more ended with me so frustrated I wrote my own form library at work: https://github.com/trioptima/tri.form/It's called FormSet.To store the previous answers on subsequent pages, I suggest using a hidden form field where the value is a signed dictionary of their previous answers (using Django's signing utility functions).

You can make forms ""dynamic"" by constructing them at runtime - essentially by conditionally instant hating new form field objects and then adding them on to the form.fields property. This is often done in the form constructor. There's a detailed description of this pattern here: https://jacobian.org/writing/dynamic-form-generation/"
2016-01-25 10:28:39;What is the right way to attach multiple images to a post?;"Hey there, looks like you're new to modelling your data.

> I need to allow users to upload multiple images in one post.

You have described a many-to-one relationship, so yes this is easily created with having a model for images that has a foreign key that will link it to a specific post.

It's nice that you want to get this feature correct from the start, but scaling and future proofing is not what you want. If you make a suitable decision on how your data will be stored on the database, the details will fall into place later on.

Many of the characteristics you've described will depend on javascript in the browser, which personally I would avoid until you actually have the image uploading working. For now you will want to take the time to read through the Django docs on forms and formsets, which will/should (i might be wrong on this) allow you to upload many images at once.

https://docs.djangoproject.com/en/1.9/topics/forms/
https://docs.djangoproject.com/en/1.9/topics/forms/formsets/

All the bestI've used [django-multiupload](https://github.com/Chive/django-multiupload) to do this, it's quite straight forward to set up, and the end-user simply selects multiple files and submits a single form as usual.

On your end you just have to iterate over uploaded files and create model instances, as in the provided code sample.
I think the images connected to a postid with a key is probably one of the better ways. It's also quite scalable."
2016-01-25 05:22:17;Django Apps vs Projects, and more...;"I would go through Django's official tutorial if I were you. (Unlike other frameworks' 'official' tutorials, it's actually quite good.) You will get answers to many of these questions.You should check out Two Scoops of Django. They have a great starter project template and some great opinions on defining apps and projects.

Even with perfect reusable apps you need glue. You need a primary app. I've taken to having a structure similar to what they do in the two scoops starter project.

For me I have a ""core"" app in my project root and put apps into an ""apps"" folder in the project root. My core URLs file loads URLs from my apps.* app URLs and namespaces them. I love this last part because I can easily rework URLs if needed and can clearly see what handles what.

You might have something similar where your blog, portfolio and contact form are all apps and your core just stitches them together a bit.

This is one of those Django questions that will never yield clear answers. Everyone has a preference and the intent of the framework is pretty loose in this regard. I'm pretty new to Django too, and after doing some odd things I've arrived at this overly simplified view of things which I feel keeps me on the right path.
""Everything is an APP... nothing is a project except the container which we call a project which is where all your apps live and where all the files that apply to all APPs live (like CSS and base templates).""

I'm sure someday I'll know enough to deviate from that when its appropriate, but for folks who are new, I think that's a good simple way to think about it. deleted "
2016-01-24 05:18:11;Authorizing a user through Django's REST Framework.;"Haven't worked with jwt before, but used custom user models quite a bit, so hope this helps.

You basically want to extend the default user model in some way. Have a look here http://stackoverflow.com/questions/28748281/extending-user-profile-in-django-1-7

I personally prefer the onetoone approach. In your app, SignUp would simply have a OneToOneField to the default django User model. You could use the approach from the link above to initialize both on user signup, or you could create a custom view that handles everything. See [this](http://stackoverflow.com/questions/16857450/how-to-register-users-in-django-rest-framework) on how to make a view that can create users.

When you have created a user, you can use jwt to authenticate.
I assume that in your view you will the simply be able to access all the relevant data via self.request.user.signup or similar.To use a different model for your 'user', you need to set AUTH_USER_MODEL in your settings.

See the docs here (pointing to 1.9, adjust the link to your version): https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#substituting-a-custom-user-model
You want to use a custom user model. See https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#substituting-a-custom-user-model.

Your user model should be pretty simple. Unless you understand password hashing, stick with what's in Django. I would also call the model `User` since that what the data represents rather than `SignUp`, the action that creates the data.

    class User(AbstractUser):
      phone_number = models.CharField(max_length = 200)
      address = models.TextField(default=""Your Address here"")
      publish = models.BooleanField(default = True)
  
/u/polite_lobster has a good link regarding creating the endpoint. I would also encourage you to checkout the [DRF tutorial](http://www.django-rest-framework.org/tutorial/quickstart/) if you haven't already."
2016-02-01 21:39:42;If you have used DjangoRestFramework ModelSerializer and wished if there was `save_model_instance(instance)` method please support this patch;"What's the use case for this functionality? Aside from code duplication, why not override `create()` or `update()`? All data is coming from the fields. Why not modify the individual fields before saving?Has anyone fully engaged with Tom's objections here?:

> If anyone really wants this, then add this behavior to MyCustomSerializer that you then use that as your base class throughout the application. Adding overridable hooks like this ends up with us pushing towards more and more abstracted and obfuscated styles, and isn't to the benefit of the framework as a whole.

If you want this accepted then you need to make the case for it clearly and concisely. i.e. Explain what is wrong with the MyCustomSerializer solution Tom has proposed."
2016-02-01 19:29:41;Is there any way to make Django debug toolbar work with AJAX requests?;There's a Chrome extension that should help you out: [Django Debug Panel](https://github.com/recamshak/django-debug-panel). And there's a panel as well, but I haven't used it: [Request History](https://github.com/djsutho/django-debug-toolbar-request-history).Yes it's an additional extension. It's called Django Debug panel, if you install that and the chrome extension you can view everything debugtoolbar has, for ajax requests. I use it a lot and it's very useful.
2016-02-01 18:59:22;Context processor bug;"- Are you using a class-based view or simply a view function?
- What do you use to render the template? `django.shortcuts.render`? 
- What do you mean with ""the login page stops posting properly""? Do you see an error page or errors in the console?
- Is the root page accessible to anonymous users?
- Are you using Django's builtin login form and view?

I'll address some of your points:

- yeah, those context processors look correct.
- yep, you need to use `RequestContext` to have access to the user by default. The `django.shortcuts.render` use that type of context unless you say otherwise.

In general, your login page should of course not be decorated with `login_required`."
2016-02-01 18:10:49;Django REST Framework error at beginning of tutorial: 'No module named urls';"What's your directory structure look like?

Seems like you're calling a `snippets.urls` from `C:\Users\Jim Wombles\MDP\drftut\drftut\drftut\urls.py`

Is there a `snippets` > `urls` module presently accessible to the file `C:\Users\Jim Wombles\MDP\drftut\drftut\drftut\urls.py`?It looks like it might be a uppercase/lowercase error?

In the code file you labeled one a""Snippets/models.py""

However in the url configuration you posted it was labeled ""snippets.urls"" instead of ""Snippets.urls"".

Also, assuming that the regular/main urls file is `[higher up]/drftut/drftut/urls.py` does the other url file have the path `[higher up]/drftut/Snippets/urls.py` ?"
2016-02-01 17:39:35;Django releases issued: 1.9.2 (security) and 1.8.9 (bugfix) | Weblog;"I don't see mention of the admin, delete related objects counting bug.
"
2016-02-08 14:35:25;Announcing Django-Zappa - Serverless Django on AWS Lambda;"When Lambda adds accessing resources inside a VPC, Lambda usage is going to explode because of projects like this.How could this not have terrible execution overhead? The entire application has to load for each request.I've been eyeballing [serverless](http://serverless.com/) (earlier knows as JAWS) for a while, very cool to see there is a Django approach. 

I kinda miss some information about what this does behind the scenes to Lambda and API gateway. For example; how many Lambda functions and/or API endpoints does this create? You push only one zip, does that mean the whole django app is one single epic lambda function and API endpoint? How does that work with the Django URL routing?

Also do you think it would be difficult to add postgres support? Can we run C extensions (or whatever psychopg2 uses) in Lambda at all?

Final thing: have you spend a thought on how this relates to channels for Django? For example they work on a standard for JSON serialized WSGI, maybe you have overlap/connection? 

Anyway, good stuff. 

Now if only Lambda would get Python 3 support.Mobile site is unreadableVery interesting project. Well done. 

How do you serve static assets? do they pass through django? any chance that the project will integrate uploading assets to an S3 bucket?Would this work with the django-storages package for saving user uploaded images to s3? The whole serverless thing leaves me a little unsure of lambda's actual capabilities."
2016-02-07 20:29:37;Using templatetags in tables2;"I think you can define a property in the model, which truncates the model field. Then call the property instead of the field with tables2.

Or write your own sortable table. Works too, and is interesting (learned URL parameters that way). Try tri.table: https://github.com/TriOptima/tri.table

Custom rendering is in the first trivial example in the readme. Simple truncation: 

    cell__format=lambda value, **_=value[:10])I tried changing the queryset field before I passed it to the table.
It worked in the console but the field doesn't actually get changed in the table.
   
     from my_search.templatetags.mytags import int_to_date
     obs = AllChannels.objects
     for ob in obs:
          ob.datefield = int_to_date(ob.datefield)
          print ob.datefield # so I can see it in the console

     table = ResultsTable(obs)
     return render(request, 'search_results.html', {'table': table, 'query':q})

In the console the transformed date prints out correctly - 2/5/2016 etc, but in the table the field still prints out as an integer. 

I did not do any filtering after the transform either...

tables.py looks like this:

    class ResultsTable(tables.Table):
    class Meta:
        model = AllChannels
        attrs = {""class"": ""paleblue"", 'width':'200%'}
        fields = (""name"", ""channel"", ""datefield, ""text"")

     
Thanks if anyone sees where I'm going wrong.If anyone ever needs it, you can implement templatetags by using TemplateColumn in tables.py:


       
    from django.template.defaultfilters import stringfilter

    class ResultsTable(tables.Table):

	    post = tables.TemplateColumn('<a href=""{{record.url}}"" target=""blank"">{{record.post|truncatechars:150}}</a>')

	    class Meta:
		model = AllChannels
		fields = (""name"", ""channel"", ""dated"")

Gets me 4 fields, with ""post"" being added on the right as the last column, with a trailing three dots if truncated, in the form of a link.

Note ""post"" has to correspond to a field in your model or you'll get an error on sorting."
2016-02-07 19:27:22;Best App for front-end SQL data editing;"Can you map the existing database tables to Django models (use [managed=False](https://docs.djangoproject.com/en/1.9/ref/models/options/#managed)), and then just add them to the built-in admin site?

Or maybe consider buying https://editor.datatables.net/ for the Excel-like frontend, and add a few backend API calls for loading/saving data?"
2016-02-07 17:25:24;What's the best way to integrate Django with legacy info?;"I would handle this using a one-off script which uses the Python standard library csv module to read the file, then uses the Django ORM to add those records to the database.

I've actually done similar one-off imports to this in the past directly in the Django ""./manage.py shell"" interface, without even saving the script.django import export is a great app and you should definitely consider it. There might always be a need later to import/export data, so it can't hurn to hook it up already. It will take some extra work compared to just importing it via the shell and using stdlib csv module, but not that much."
2016-02-07 16:45:50;Form validation is driving me nuts.;"You can do multi-field validation in the 'clean' method. This method is executed after all the individual clean methods.

See the docs:
""The form subclass’s clean() method can perform validation that requires access to multiple form fields. This is where you might put in checks such as “if field A is supplied, field B must contain a valid email address”. This method can return a completely different dictionary if it wishes, which will be used as the cleaned_data.""

Source: https://docs.djangoproject.com/en/1.9/ref/forms/validation/"
2016-02-15 17:20:57;E-commerce thoughts with Django;"We have a [customized django-oscar project at edX](https://github.com/edx/ecommerce), and I have enjoyed developing it.

Oscar has support for product variants, multiple fulfillment partners, and templating. As for add-ons, depending on how you model your catalog, that's just a separate (but related) product.

I'm happy to answer questions about Oscar.For my money the two best frameworks are Oscar and Saleor. With the following qualifications:

  * Oscar for stores that don't have much in the way of expectations (no ""must work with X payment processor"", ""must allow at least 5 coupons at a time, but no more than 7"", etc)
  * Saleor for highly customized stores

That's not to say Oscar can't be highly customized but it becomes an exercise of the framework making things difficult at a certain point. Saleor feels much more like a flexible django app, while Oscar feels more like a store framework built in django.Paging /u/codeinthehole and /u/andrewingramI was looking after the same with mostly the same features. But for time and project budget I will end up with a PHP e-commerce product,  I cannot say PrestaShop, Magento, etc. are more robust because I didn't try the Python ones, but has more features and starting a project is more straightforward.
In the CMS's python world I see as Wagtail a huge winner in the middle/long term, but in the e-commerce world there are so much fragmentation for a 'little' community as python/django is comparing with PHP.
We will see what the future holds."
2016-02-15 17:14:20;A few questions about djangorestframework, angularjs and AJAX.;"Ajax is a catchall term for having JavaScript fetch/submit some data from another source while/after the page is loading.

It's commonly used,  so I have no idea what your friend is talking about.

As for using Angular with DRF, we do this at work and haven't run into any difficulties with it. We run it with Flask, .Net, NodeJS and Sinatra as well.

The biggest advantage is that you can render a base template with Django and then use Angular to make it dynamic through components/directives.

As for what it can handle, my team uses it for everything other than the login page -- which was just a static page anyways. Pop ups, form submits, etc.  i'm new myself and had the same question a few months back... someone pls correct me if i'm wrong

AJAX is more of a protocol that facilitates communication between the client and the server without there having to be a page refresh every single time something changes in the data. so in essence .. you still need AJAX with js backend.

AJAX and basic jQuery would be enough to handle small DOM updates like the ones you specified. Angular is for creating SPAs (something like Facebook or Gmail).

This tutorial was really helpful to learn basic AJAX with django
https://realpython.com/blog/python/django-and-ajax-form-submissions/

for DRF and Angular
https://thinkster.io/django-angularjs-tutorial
AJAX is an acronym for *""Asynchronous JavaScript and XML""*, your friend is maybe objecting to the *""and XML""* part of the name based on his comment? In that case the comment makes sense, if you run js on both server and frontend, using XML instead of json is really silly. 

However, most of the time people today use the term AJAX to refer to any kind of dynamic loading from the server, whether it's delivered in XML, JSON or plaintext.

Django + DRF should work just great as a backend for Angular based on everything I know, even though I haven't tried it myself because Angular is not my cup of tea.Ajax is just the collection of protocol to communicate between the server and client without loading a page. While as angularjs/reactjs/jquery all are the js framework/libraries to make your user Interface more interactive. Let say you are using jquery to make your webapp interactive(dropdown menu), and you need to request some data in a page without reloading, in this case you use the ajax protocol to load the data which will provided by jquery. that means jquery has implemented ajax in it to make a asynchronous call to load and push data.

Let say you don't want to use jquery you want to use reactjs to built your nice UI and you need to load data without reloading page. In that case reactjs also baked you a AJAX tech to load data. 

Let say you don't like Reactjs, you want to use Angularjs to make your Nice UI. and you need to load data without reloading a page. In this case you will use a AJAX features provided by angular.

In summary AJAX is a collection of technology to request and push data without reloading a page (Example is getting a facebook notification with relaoding a facebook page).

while Angular js /reactjs/jquery/backbonejs/emberjs/ all are used to design a astonishing UI for your user, and all they provide you a AJAX call to work with data so your user get nice experience 
I've been using django + angular since a few months now (without DRF atm, thinking about that). I find angular difficult to integrate with django, but once it's done, I find many things easier to reason about:

the advantages are, like said

- you can load new content without a page reload, you can make buttons appear and disappear depending on user input, you can use [angular-ui's](https://angular-ui.github.io/bootstrap/) widgets

some disadvantages

- you must handle the setup and config of javascript libraries: use brunch, gulp or something, load them in your app, experience some npm and bower shortcomings, etc
- angular and django both pre-process POST parameters so you have to tweak angular before each POST
- don't expect to re-use django models with angular. Or maybe, some help here https://django-angular.readthedocs.org/en/latest/integration.html but I find it much simpler to ditch django forms, write them in full html-angular, and connect to an api. With django, I wanted to build a form whose number of fields changes depending on a variable. That required non-trivial python code, and looking at django's doc. It's simple with an angular `ng-repeat`.
- angular is not easy to debug. You'll have to get used to cryptic messages."
2016-02-15 14:22:08;Django project starter Outline now on 1.9 and Python 3;"The more I looked for something like this, the more I realized I didn't want it. I use a project template (the one from torchbox) but I wanted to know why I was putting things into my application.

What I really want is a list of best-practice set up, a list of must-have or nearly-must-have apps, and well thought out explanation sof those things.Also, for what it's worth here, this is less of a ""everything you need to start a new web app!"" kind of bootstrapping, so much as it is getting the layout of a project correct. Namely:

  * Using setup.py for dependency installation, with a link to the setup.py file in the traditional requirements.txt file
  * Using django-configurations to enforce configuration via env variables
  * Adds a setup management command so that you can install the app via pip and don't need to git clone source code in production
  * Includes basic ansible scripts to bootstrap a server out of the box

The actual installed django apps and such should probably be removed, but are there as an artifact of how most of my projects start."
2016-02-13 20:11:28;Running python script from django web page;"I think it would help if you could describe what your ""Python script or function"" is and does. And whether clicking the image needs to perform this action without a page refresh (ie, it will need to use JavaScript) or not.

Django essentially is *only* ""Python scripts or functions"", so it's hard to know how to help without knowing exactly what you're trying to do :)You can create a view and define your script in this function. Then, you can use some sort of ajax call, to call the URL when clicking your image, which then executes your function asynchronously without reloading the page. I suggest using jquery ajax!I had the same need.

1. I refactored the code in the file so that it was callable as a class. The file would just call the class if I ran it from the command line.
2. Created a view that would call the class/function.
3. In the Template I make sure I set the parameters for the view as part of a button submission. 

Not using ajax. 
I used Tables2, which let me create a button for each row.

Works like a charm... but it hangs the page until it's complete. And some buttons are doing an amazon rds api call to refresh a database. This takes 20 minutes, so the page hangs 20 minutes. 

I also set some bookmarks to the view, which can save time if I don't need to go through the interface for anything. 

Two solutions I'm looking at to improve the responsiveness situation:

1. Ajax Call. Just send the call and throw away the reference. Use ajax to keep checking on the status. 
2. Change the function to add the task to a queue. Let the queue handle the 20min task. Use ajax or page load 
"
2016-02-13 18:18:12;How to deal with static files?;"> Now I want the users to have images but I want to use S3 for that.

Django treats media (uploads) separately from static files like html, css, js, and your own images. Take a look at [django-storages-redux](https://pypi.python.org/pypi/django-storages-redux) and follow along with the media portions of https://www.caktusgroup.com/blog/2014/11/10/Using-Amazon-S3-to-store-your-Django-sites-static-and-media-files/I would use regular old static files like how /u/rockyearth suggested.

I would have users upload directly to S3, checkout [django-s3direct](https://github.com/bradleyg/django-s3direct) it is awesome!Not a mess at all. Always serve JS/CSS from nginx since it works (don't change something that works).

However, for user files you should do the following:

* Use FileField or ImageFiels on models
* If DEBUG is True, make the settings.py serve local content
* If DEBUG is False, use the django s3 storage library Found this with a little poking about, looks potentially interesting. 

https://coderwall.com/p/rlguog/nginx-as-proxy-for-amazon-s3-public-private-filesYou should be using nginx only, to serve files from media_root and static_root. "
2016-02-22 16:23:39;Custom Database Constraints in Django;"I was just poking around the FB blog and I noticed this:

> It's a popular opinion at Fusionbox that strings that are meant to be seen by the user use double quotes, and that all other strings should use single quotes

Brilliant!

That is all."
2016-02-22 14:51:14;Handling models/migrations for large, read-only databases?;"Will **Meta.managed=False** solve your problem?

https://docs.djangoproject.com/en/1.9/ref/models/options/#managed"
2016-02-22 14:16:35;Pycharm and live editing with django;"Have not done this myself yet, but you should be able to setup gulp or grunt with livereload. PyCharm can run gulp or grunt tasks from the Tool menu, so you can run your watch command right in PyCharm.

Edit: [Here](https://lincolnloop.com/blog/integrating-front-end-tools-your-django-project/) is a blogpost with a linked example gulpfile"
2016-02-22 14:03:23;How to manage dynamic attributes in Django ? Is t the right framework for the job?;"JSONField - part django  since 1.9 (used with postgres) is perfect for this type of scenario.  

http://orokusaki.posthaven.com/djangos-new-jsonfield-is-awesomeApart from the technical solutions others have offered, I would advise that you further analyse the business requirements and see if the user genuinely does need to add any arbitrary key-value pair to an asset. 

Once you go schema-less, it introduces extra complexity that might not actually be required.  If you do have to head down the schema-less road then JSONField is the Django 'out of the box' solution that I would favour. Django-eav is good, but you need to use the forks.

Or use a JSONfield.One option would be a second ""Attribute"" mode with a field for ""type"" and ""value"". This Attribute would also have a ForeignKey to Asset, so that you could create any new attributes for one asset. 

I'm on mobile so pardon the lack of example. PM me with any questions. JSONField looks good indeed, and I'll have a look at Wagtail.

Thanks for all the answers!I'd echo the concerns of others about building a DB on top of a DB. In my experience, I've found that 'normal' users are really not good at doing database design, so when they have the ability to add attributes to objects, they either do a bad job, or they don't do it at all, and you end up having to do it for them. You then end up, as a developer, having to use some nasty tool to manage this (i.e. the GUI interface you created for them), instead of the good tools you would have used if you had created a custom table for them.

If you do need this, then you should consider JSONField.

If you are going to want good performance for filtering, or anything like joins on the custom fields, then also consider the possibility of actually creating for DB columns for the new fields. This is not something that Django supports well at the ORM level, so you'd either want to create it in such a way that Django can ignore it (extra columns that Django knows nothing about), which I imagine could get nasty, or use a SQL library that is a bit more powerful on this front. I expect that SQLAlchemy and [the Alembic API](http://alembic.readthedocs.org/en/latest/api/index.html) would be stronger for this.Maybe look into a proper CMS like wagtail that does this?>if any other framework / language is more adapted to my needs and I shouldn't waste my time trying to shoehorn this in Django.

No one has mentioned if django is really the best choice, and I haven't done anything non-trivial in any other framework so I can't really say. You will be able to do this in django. That said, this problem sounds like something node (and/or one of it's various frameworks) + mongodb might be a better suited to handle."
2016-02-22 13:35:25;Can anyone explain the Django Meta API?;"I've used the Meta API recently.

- 1: The docs page doesn't mention virtual fields?
- 2: is_relation means Foreign Keys, M2M, Generic FKs and 'reverse' relationships. A CharField for example is not a relation.
- 3: Concrete fields are fields that have a column
- 4: auto_created refers to reverse relationships, both M2M fields and Foreign Key fields (on the model) create auto_created fields on the other model, to give you the foo_set manager.
- 5: Not sure."
2016-02-29 23:17:31;Whats the best way to check state of 3rd-party website json file in real-time.;"If you only want the live value, then why store it in the DB? Just make is_live a property.

    is_live = property(get_live_status)How real time do you need it to be? You could just call user.get_live_status() to find out whenever you're displaying the user. You could also make the get_live_status() call update .is_live to cache it, though you'll probably want to be careful with side effects like that.

If you want to cache it beforehand to speed up the user display, you could have a cronjob or other background task that checks the live status of each user and saves it, then just reference user.is_live in the rest of the code.Putting side effects or blocking I/O in attribute access on your model is a terrible idea. Make it an explicit method, either on the model or elsewhere."
2016-02-29 19:48:11;Trying to poll the audience on email providers;"We use authsmtp and mandrill for all email. I don't think we've had to mess with MX records at all.

In general, I have preferred mandrill because I like not having to be responsible for the email templates and black magic that renders them with css. Product people can build mandrill templates and we just pick those up.I don't do any transactional so can't help there. I use google apps for domains for older domains that I got free on there. For everything else, I use postfix / dovecot / spamassassin. It's not as good as apps for domains at dealing with spam, but it's good enough. 

Have a look for sovereign on GitHub. That'll get you a lot of the way there. I use AWS for my whole stack, but you could just use SES for your transactional emails. I think you get something like 62,000 outbound and 1,000 inbound a month for free.

There's an app called django-ses that will link things up nicely for you.

I don't think you need any special subdomain, I'm not. You could use Route53 for DNS, and get the added benefit of easy DKIM setup.PEPIPOST : Pepipost is the speedy transactional email delivery service that provides reliable Inboxing in less than a second — all with a very disruptive pricing model. Only pay for unopened emails.

    -Website: https://www.pepipost.com/
    -Unlimited Plan for Mandrill Customers ( Use below invitation code)
    -Invitation code: MANDRILL-TO-PEPI
    -25,000 Emails free per month for lifetime
    -$1 for every 5,000 emails
    -Pay only for emails that are not opened by your customers.
    -Free dedicated IP
    -Reliable SMTP and HTTP APIs
    -Real-time measurable analytics
    -Powerful Triggerware rule engine
    -Highly optimized inbox delivery
    -Easy integration in the blink of an eye
    -24/7 Live Chat Support
    -How to Migrate From Mandrill to Pepipost : http://www.pepipost.com/index.php/2016/03/10/how-to-migrate-from-mandrill-to-pepipost/
    -Explainer Video: https://youtu.be/4tSEn6BUO3Q
    -Pepipost Review: https://www.g2crowd.com/products/pepipost/reviews"
2016-02-29 17:50:44;finished commenting thanks reddit!, and now on to notification. It almost works but not quite. if anyone can take a look at, super thank you!;
2016-02-29 13:34:40;Django image uploading formset;"You can use Ajax on each image field and assess whether it is invalid (too big, not an image, etc.).  If it's invalid you can just send an Ajax response and process it with JavaScript and inform the user to re upload.  That way you are not contingent on the form submit to assess the validity of images. 

"
2016-02-29 10:02:45;Need help understanding python-social-auth and django-oauth-toolkit.;I'd start out by just getting it to work in the Django app on its own and then add the Android Client request later. Unless users are never going to actually connect via the Django app, in which case I'd think twice about using python social auth itself. Python Social Auth is really for when you are intending to support 2 or more authentication and authorization methods (e.g. Facebook *and* Twitter). If you're not doing that, I'd just make use of the Facebook SDK in Python. Get the access token from within the client, send it to the backend, and then just use standard python oauth to get a permanent access token and store that in a model attached to the user. Then you just use that access token with the Facebook SDK.Dude I am trying to do a very similar thing. Did you figure it out?
2016-03-07 21:42:57;Trying to create collapsible content with recursively included templates - need help;"Why do you need the forloop counter? Can't you just use the primary key of the elements? Would this work?

    <div class=""panel panel-default"">
        <div class=""panel-heading"" role=""tab"">
            <h4 class=""panel-title"">
                <a role=""button"" data-toggle=""collapse{{network.id}}"" {% if parent %}data-parent=""#{{parent.id}}""{% endif %} href=""#collapse{{network.id}}"" aria-expanded=""false"" aria-controls=""collapse{{network.id}}"">
                    <p class=""text-left"">{{network}}</p>
                </a>
            </h4>
        </div>
        <div id=""collapse{{network.id}}"" class=""panel-collapse collapse in"" role=""tabpanel"" aria-labelledby=""heading{{network.id}}"">
            <div class=""list-group"">
            {%if network.children|length %}
                {%for ch in network.children %}
                    {% include ""ipmanager/includes/networktreetemplate.html"" with parent=network network=ch %}
                {%endfor%}
            {%endif%}
            </div>
        </div>
    </div>
"
2016-03-07 15:59:12;Collection of Ansible playbooks to quickly start your Django Application;
2016-03-07 15:00:26;Quick introduction to Django Channels;"Interesting blog post, though large chunks of it seem copy and pasted from my documentation - I take that as a compliment!

It does mention ""keepalive"", though, which has been removed now - I found a better solution that resulted in less duplicate code writing by developers. You can see the intro here: http://channels.readthedocs.org/en/latest/getting-started.html[deleted]Oh wow, how had I completely managed to avoid seeing this upcoming feature before..Great post as usual. It's one of the most interesting upcoming feature of django. Kudos for the detailed code snippets!A month ago I found Django-channels, and my deep dive into the world of chat protocols and async communication eventually lead me to Elixir, which has a channel implementation built on the rock solid Erlang VM.

Incidentally, it is not too difficult to proxy connections from Elixir to Django using the same methodology as Django Channels. You can have Elixir hold the channel connection open, and make requests back into Django via API endpoints then handle the replies.

PushPin (C++) does the same thing and is generic enough to work for any backend, but I prefer Elixir since you can eventually write your own handlers within it for quicker throughput since it doesn't hit Django anymore.

Additionally, Elixir *can* interop with Django-channels, if you write a connector to have it speak the channel-protocol instead of WSGI or HTTP. I didn't do so because I prefer all my cross-language services speak via HTTP, but it's certainly possible."
2016-03-07 13:31:40;Repository design pattern in Django;"Django's ORM is designed to work only with RDBMS backends (though it supports a nice selection of backend drivers of that type). So in that respect it fails at implementing this aspect of the Repository pattern

> Use a repository to separate the logic that retrieves the data and maps it to the entity model from the business logic that acts on the model. The business logic should be agnostic to the type of data that comprises the data source layer. For example, the data source layer can be a database, a SharePoint list, or a Web service.

source: https://msdn.microsoft.com/en-us/library/ff649690.aspx

I am not very familiar with design patterns for many other languages so I will take a stab at describing the design pattern we follow here.

For CVS we use gitlab. For django set up we have 5 similar sites based around django-cms and one site supporting them built on django-rest-framework. 

For the cms sites, we set up 5 repositories for each of the sites that are django projects. These projects contain settings information and   will contain any site specific applications that will not be used on any of the other sites. Then we have 10 or so django applications that are installed in the django projects. These each have their own repository and are set up to be installed from git into any of the 5 django projects. 

For rest framework, since all the applications that it uses are only used by itself, we just have them within the project repo."
2016-03-07 10:31:38;is it possible to control page's css through django-admin?;"Assuming you have a ""Category"" model in your database, sure. Just add a ""css"" ``TextField`` and add your custom CSS there, then just insert that into the template in the right place via ``{{ category.css|safe }}`` or similar. Not the most elegant solution, but would integrate fairly quickly and easily into what you already have."
2016-03-14 21:07:53;Django Discord Server;Why should I use discord rather than this subreddit or one of the mailing lists at https://docs.djangoproject.com/en/1.9/internals/mailing-lists/?[deleted][deleted]
2016-03-14 19:41:03;An exercise in pricing;"I develop full software systems using Django - currently for healthcare, but I used to be in marketing. I've done a CRM as well. As an outside consultant, I wouldn't touch this job for less than $35,000. 

You're in way over your head and your boss will never appreciate it. Don't even bring it up as a full package. If anything, start as a website and a file-transfer app. 

What you're proposing is a year-long 30-hour a week project for one professional programmer to do correctly. That CRM is a MUCH bigger project than you think it is. 

I've made this mistake before when I was working in marketing and built a CRM system with Django and a sales performance tracker. The system directly netted us $1mil in online revenues the first seven months and all I got was a $10,000/yr raise. Plus I was then saddled with maintaining and dealing with a ton of 'wouldn't it be great if the system did x?' questions from all upper management.

I'd target a price between 8000€ and 10000€ for this at the very least, because you take up a lot of responsibility by developing and supporting this system, even in a basic version.This is easily a $20k project for a professional. As a beginner you will probably spend a year full-time trying to build all of these components. The price you charge for this system should be based on one thing and one thing only. And then if you can build it for less than the magic number do it, otherwise walk away from the table.

The magic number I'm talking about is the value this system would have to the client. Doing this on a cost plus or time and material basis is amateur hour. If you're smart you'll find out what your company's make or break number is for capex projects, ie. IRR or payback period, etc. they have a metric somewhere that they use to manage those decisions. You'd be well advised to know what it is. The other thing here is that you bring in another, much more experienced django dev, just to speed things ago and to save your ass bc you'll face countless small decisions that you have no experience with.

TL;DR version. Sell the value, otherwise you'll price this way too low and hate yourself for it."
2016-03-14 19:00:03;Anyone using Django AllAuth with REST Framework?;I'm using https://github.com/omab/python-social-auth  with Django REST Framework and didn't have any problems. They have a nice and detail documentation, you should try it. https://github.com/Tivix/django-rest-auth
2016-03-14 18:37:11;Troubleshooting Question: Variable not showing up in Template;Just had a quick look. First, scripts would normally be in the html header and divs in the body. I don't know what browser you're using but that might be the cause. Other than that are you sure your function is actually returning a string? What happens if you hard code a message in the context dict? Last, did you snap this directly from your code? My experience is that half the time this type of problem is a typo somewhere rather as a logic error. If you check the terminal, is your POST request immediately followed by a GET request?I don't think there is enough information in this post to help you out. There needs to be more code for context. Although, I think /u/krisfields is on the right track. If the request is not actually a post request, the addSession function will not be called. We don't know if you're using POST anywhere in your code so it's tough to troubleshoot.
2016-03-14 17:04:24;How to CamelCase URL's in models;"That's not going to work...`URLField` doesn't take that kind of function. Instead, I recommend overriding the `save()` method of your model:

    def save(self, *args, **kwargs):
        if not self.id:
            # Newly created object, so set slug
            self.slug = urlify(self.title)

        return super(Post, self).save(*args, **kwargs)

I'm also not sure that `URLField` is even the right type of field for this use case (and you should consider using a `SlugField` or `CharField`), since the conversion from title->slug isn't actually returning a URI.

While permitted by standard, it's odd to have case-sensitive URLs when domain names are explicitly case-insensitive. Keep that in mind as you go forward. Your best solution might be to take the one being given to you.

You can't stick code like that in a model definition and have it be executed repeatedly. I'm honestly not 100% sure what that code will actually do. My best guess is that you're setting the verbose name of the slug field to the output of urlify(models.CharField()), but don't take my word for it.

This looks like a decent use case for a signal handler. [Docs on that are here](https://docs.djangoproject.com/en/1.9/topics/signals/). The idea is that you could change the value of slug to urlify(title) on save.conventionally, URLs aren't case sensitive. the domain part of the URL is actually specificied to be case insensitive. the path part of the URL (your ""my-post-title"") is unspecified whether or not it is case sensitive, so left to the specific server to implement on a case by case basis. 

Personally I prefer to just have the entire URL be case insensitive. less confusing (for me anyway) that way. can I ask why its important to you to have a specific letter case pattern for your URL?Writing on my phone, but I think you can:


    camel = """" 
    for word in title.split("" ""):
        camel += word.title()
    return camel
"
2016-03-21 19:24:29;ELI5: celery and rabbitmq;"Not sure why you need it either. Here is my explanation.

In django you have a request response process. A browser, or app makes a call to a url. Django takes that request and does stuff with it, eventually passing it to a view. Then you return a response.

The amount of 'stuff' that you do in that request response life cycle can limit the speed in which that response comes back adding slow load times. So you want to limit the amount of 'stuff' that you do.

To do that we introduce a way to run code on a different server outside of that request response life cycle allowing us to do what we need to do without slowing down load times.

However, this is only useful for tasks that can be separated.

A real word example is you upload a file to the server. This works normally in a request response lifecycle and is fine. However, you might want to do some opencv processing, or generate a whole bunch of thumbnails. This takes a lot of processing power and will cause that request response to be slow. 

So we write some code to do that processing for us some other time.

How celery and rabbitmq come into the mix is. On a server somewhere is a running celery process that is constantly asking a queue, like rabbitmq, if there is any work for it to do. If so it pulls the data off of the queue and begins working. The celery process does this until there are no more things in the queue. Once the celery process is done, it sits there waiting for new stuff.

That is the basics of how it works. Why is someone telling you that you need to use celery and rabbitmq?

Celery is fairly hardcore.

You might just need: https://github.com/defrex/django-after-response

Or failing that something like: https://github.com/Ixxy-Open-Source/django-cron

Or if that really isn't enough try a less complex yet fairly complete Celery alternative: https://huey.readthedocs.org/en/latest/

There's lots of things that let you avoid doing work in the request itself that don't require installing a message broker, a key-value store  and a large Python app.I never understood why there's not a way for Python to split off a task in a new new thread and still return the response without waiting?

Is it just that you're still tying up a worker and it won't be available to process other requests?Hi Aoi_valdez

I think you had your answer already, but I want to highlight something nobody said here. With Celery you can make multiple queues and give different priority.

Let's say you have a chat and a video processing features in your App. Of course you can't keep the user waiting while chatting, so put it in the high priority queue. Video processing may take a while, and it's heavy, so put it in the low priority one and when your server is free it will manage it, users will tolerate this.

If you need help to implement celery + rabbitmq from zero in a Linux Virtual Machine tell me and I'll help you.

Take careAnother alternative to celery is [DjangoQ](https://github.com/Koed00/django-q).[deleted]"
2016-03-21 17:16:24;Referencing models pk in a signal that is inside the same model?;My solution was to do this with post_save using instance.id instead of nesting it inside my model.
2016-03-21 08:09:40;"I was able to fix ""Permission matching query does not exist"" with python manage.py check_permission in local. But now that I'm in production mode, how do I solve this?(using django/Userena)";
2016-03-21 01:25:03;Anyone using MS SQL server with django in production?;"i have to maintain this thing and it is no fun.
Please don't  do it. 
Just use PostgreSQL or MySQL, why search for problems, when
there are none? :PThings will be up to speed soon, probably. A Microsoft team is working (aided by the Django-team) to fully implement MSSQL and Azure support for Django.
At least that was [the plan a while ago](https://groups.google.com/forum/#!msg/django-developers/FbBcUCzrSZo/).its been a few years, but a past project I worked on connected to an MS SQL server. we used [PyODBC](https://pypi.python.org/pypi/pyodbc) as the database driver backend for django. Seemed to work basically fine.I'm curious why you're looking into it. What would be the advantage over PostgreSQL that would outweigh the problems of using a (for django) unsupported DB?is your Django server Windows or Linux?  It's a PITA to get going either way but once you get it ignore what anyone else says it's stable.  MS SQL isn't a fly by night database."
2016-03-21 00:32:29;did I deploy it right?can someone please check if I did everything right? Everything works but I don't know why they work;"Hi Startfresh31

I'm not familiar with Elastic Beanstalk, I know what it is but I'm in Google's side in this (not for any special reason, I don't say it's better)

I read 4 points in your stackoverflow's post, please correct me if I'm wrong:

 * **Apache config:** Probably Amazon is already taking care of it for you, as Google does. I think they are not hosting a Linux Virtual Machine for you, but just your application. In any case, 10 min ago I replied a similar issue with a [step by step manual](https://www.reddit.com/r/django/comments/4b4arv/digital_ocean_and_python_3_with_django/d17tj16).

 * **Images in template:** You are using *src='{{category.get_image_url}}'* but I would do something like *src='{{ MEDIA_URL}}{{category.image}}'*  , but honestly speaking, both of them work and I can't say right now if yours is not correct and why.

 * **debug=False:** Remember that you need to restart the server to apply settings' changes. When you do it in your local machine (when you use *python manage.py runserver*) this is made automatically. From a Linux Server would be *sudo service apache2 restart*. I don't know how to do it from your platform.

 * **Permissions:** I don't know *django-userena*, but permissions are nothing but entries in a database. Can you check if they are saved? In previous versions of Django, if the table of a model already existed, adding new permissions to *class Meta* and later applying *python manage.py migrate* didn't help at all.


If this is your first project, maybe you should use a linux server instead of a specific solution like Amazon and Google. I would recommend you webfaction or digitalocean because they have a 1 click django project function, and they give you enough autonomy when you are learning.

Good luck"
2016-03-28 19:21:38;Django-Firebird Development Roadmap;
2016-03-28 19:12:12;django rest framework serializers with three-deep reverse relationship lookups;Are your model relationships set up with M2M or ForeignKeys?
2016-03-28 18:29:09;Stupid question, would Django allow me to easily port my game to make it available via browser?;"Simple answer: No.How does your game render currently? Do you use a windowing framework? A command line? Is there a graphics library in the mix?

The real question has to do more with rendering graphics in a browser rather than what Django can/can't do. no to put it simply django only render an html template with the content that you give him so unless your game is similar to a MUD django won't help you at all

if you need to get user input or animate some stuff the only way is to use javascript"
2016-03-28 18:25:26;Django Tutorial with Twitter app;I don't claim that the tutorial is the best one, I am still trying to make it better and any feedback is highly appreciated!
2016-03-27 15:56:46;Generating dynamic Python tests using metaclasses;"This is bad advice at best and potentially dangerous, for several reasons:

1. Tests should be explicit and reflect real world usage. This makes tests implicit and are simply present to boost line coverage.

2. Tests should be as self contained as possible. Instead, the tests are being generated in a metaclass.

3. Tests should use as little magic as possible. [If `mock.patch` is a code smell](http://mauveweb.co.uk/posts/2014/09/every-mock-patch-is-a-little-smell.html), this is a code stink bomb.

^^^^^^^^^^^.


    class MyTestsMeta(type):
        def __new__(cls, name, bases, attrs):
            for x in (
                'foo',
                'bar',
                'baz',
            ):
                attrs['test_%s' % x] = cls.gen(x)
    
            return super(MyTestsMeta, cls).__new__(cls, name, bases, attrs)
    
        @classmethod
        def gen(cls, x):
            # Return a testcase that tests ``x``.
            def fn(self):
                self.assertEqual(test(x), None)
            return fn
    
    class MyTests(TestCase):
        __metaclass__ = MyTestsMeta

Everything about this is implicit, unrealistic, uncontained magic. If I saw this in code review, imagine the biggest, reddest flag you can and I'd be raising one bigger than that. These tests exist purely to appease some arbitrary code coverage limit.

If you really find yourself in a situation where you need to test multiple inputs to the same method, I'd suggest first looking into py.test's [parametrize](https://pytest.org/latest/parametrize.html) and if you can't do that, or at least emulating it. 

If both of those are off the table, I'd much rather see the ""anti-pattern"":

    class MyTests(TestCase):
        def test_all(self):
            for x in (
                'foo',
                'bar',
                'baz',
                # etc.
            ):
                self.assertEqual(test(x), None)

Because at least then I know what's going into the tested method where the test is concerned, even if it'll abort on the first failure.Or you could use pytest's (which is superior to unittest anyway) [parametrize](https://pytest.org/latest/parametrize.html#pytest-mark-parametrize) feature and be doneI played around with abstracting this into a separate module, with a decorator for parameterizing individual test methods.

https://gist.github.com/simonw/6aaab51f84f163f3a675

Here's an example of what a test might look like using the decorator:

	class DoubleTests(unittest.TestCase):
	    __metaclass__ = ParameterizedTestsMeta

	    @parameterized(
	        (5, 10),
	        (6, 12),
	        (20, 40),
	    )
	    def test_double(self, (input, expected)):
	        self.assertEqual(expected, double(input))
This is neat. I've used the alternative method of appending new methods to the testcase in a loop using setattr (mentioned in the article) but I see the argument for he meta class approach being cleaner.

Presumably one could abstract away the meta class a tiny bit, as a new base TestCase class, to make the syntax a bit easier to remember."
2016-04-04 18:05:26;multiple objects in view template;"that also works but this is a shortcut using the view object. so that you do not need to override get_context_data. The `view` variable is a `View` instance that is added by the `ContextMixin`: https://docs.djangoproject.com/en/1.9/ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin

...and in the source: https://github.com/django/django/blob/16411b8400ad08f90c236bb2e18f65c655f903f8/django/views/generic/base.py#L16

AFAIK, there's no documentation-specific term for this besides ""default context mixin""."
2016-04-04 14:29:48;Django beginner , adding fields to models from queryset;"Try:

    post = Post.objects.get(pk=1)
    post.author = User.objects.create(name=""devil"")

If you want to create the user if they don't exist yet, or reuse them if they do exist, use get_or_create:

    post.author = User.objects.get_or_create(name=""devil"")[0]
You don't have a ""doubt"". You have a question. This is a common mistake in India. Tell your friends the correct English word!"
2016-04-04 12:45:38;Hey r/Django, I'm thinking of writing my Bachelor research on Python/Django. Any suggestions for a topic?;"Check out the new Channels project that allows Django to work more easily with websockets through ASGI. Talk about what that means for the future of python on the web.One challenge would be to figure out a way for dynamic content loading with a single-page app, where the initial page is delivered via Django, and subsequent pages are updated via Javascript front-end.[deleted]Upvoted dynamic stuff as well. 

How does Django transition from the response/request roots that made it great and popular without sacrificing the no-nonsense interface? How - and should - it become more in line with current app development (real time, sockets, microservice, API-driven, etc.).staticfiles workflow with proper asset managers like `gulp`/`grunt`It looks that django could be almost statically-typed except few hard things in the ORM.

You can investigate possibility to make django static-typed with [Mypy/PEP 484](http://mypy-lang.org/)/, and other static-type systems. And identify the places of code that can't be static-typed any any [existing type system](https://www.cis.upenn.edu/~bcpierce/tapl/).Thanks for the suggestions everyone, it's much appreciated! It's hard to get this research rolling, but I will definitely do some research into these suggestions to see which one will be best as my final research topic"
2016-04-04 12:28:34;Block by IP;"Personally I would prefer having the web server, or even the firewall block IPs I don't want my application to deal with. 

Depending on your reason for blocking IPs, I would stick with letting the web server or firewall do the blocking. What you could do, if you have the need for Django to be involved, is to store the table of blocked or whitelisted IPs in the Django database and regularly dump it to a file readable by the web server or firewall.

If you goal is to stop IPs that are causing high load on your application, you'll have much better performance if you don't let Django do the actual blocking. Also if it's a ""bad guy"" don't assume that they'll bother retaining the cookie.  django is not the right layer of the stack for this kind of thing. 
This might be helpful:

https://www.nginx.com/resources/admin-guide/restricting-access/
It really depends on what your goals are in blocking certain IPs. 

If the goal is to reduce undesired traffic, in a way this is worse if you're adding 300ms (or even a fraction of that to every single request). Most undesirable users *aren't* going to be setting their cookies, so just the presence of any kind of cookie is already an indicator that they're probably okay.

If your goal is security of some kind, or filtering out unwanted access, a whitelist is much better — in this case, require them to login. Then, each time they log in, you check their IP and see if it's one of the blocked ones — that way you're running the database check infrequently rather than on every request.

If your system requires access without login, I'd recommend a simple database lookup in the middleware.

It does mean a little bit of overhead, but if you code it correctly it should be minimal overhead:

    # models
    import socket

    def convert_ip_to_val(ip):
        return socket.inet_aton(ip)
    
    def convert_val_to_ip(val):
        return socket.inet_ntoa(val)
    
    class BlockedIPRangeManager(models.Manager):
        def ranges_for_ip(self, ip):
            ip_val = convert_ip_to_val(ip)
            return self.filter(
                start__lte=ip_val,
                end__gte=ip_val
            )

    class BlockedIPRange(models.Model):
        start = models.IntegerField(db_index=True)
        end = models.IntegerField(db_index=True)
        date_blocked = models.DateTimeField()
        ... etc ...

        objects = BlockedIPRangeManager()

        class Meta:
            unique_together = ('start', 'end')



    # middleware
    from django.http import HttpResponseForbidden

    def get_client_ip(request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

    class BlockedIPMiddleware(object):
        def process_request(request, *args, **kwargs):
            if BlockedIPRange.objects.ranges_for_ip(get_client_ip(request)):
                return HttpResponseForbidden()

So long as you keep the database in good shape the overhead for a request like this should be under 50 ms.The most performant way would be to drop the connection using [iptables](http://www.cyberciti.biz/faq/linux-iptables-drop/). You can also somewhat automate this using something like [Fail2Ban](http://www.fail2ban.org/wiki/index.php/Main_Page).

If you would like to redirect the user to a different page/etc then you can do this at the [web server level](http://serverfault.com/questions/380642/nginx-how-to-redirect-users-with-certain-ip-to-special-page) before it hits your Django application.

Managing the list of banned users in a table in Django will be the slowest method as you're adding the latency of your Django application as well as the database lookup. I would avoid this if at all possible.

If you want Django to be able to create bans I would still use Fail2Ban. [Here is a good article on integrating Django with Fail2Ban](http://tech.marksblogg.com/django-admin-logins.html)My 2c is that this approach is a-ok for an MVP. You might want to switch to something else later but that might be a symptom of premature optimization.

Other, more important note: if you're running Django with an app server (i.e., Gunicorn) behind a proxy (such as nginx)--which you probably are--you need to watch out with using `request.META['REMOTE_ADDR']`. When your web server sends the request to your app server, `REMOTE_ADDR` will actually be the address of your server itself (most likely 127.0.0.1). In order to get the actual IP, you'll need to pass it through using nginx's proxy settings.You might want to take a look at Caddy. It has IP/Country blocking built in
https://caddyserver.com/docs/ipfilter

The same can be done in NginxMy experience is that .htaccess refusals perform terribly when you reach thousands of addresses. Iirc all IPs are looped for every blockable request, i.e. if you have X blocked IPs then every request will loop over X IPs.

Bad guys normally don't follow the rules so they probably don't care a whole lot about your cookies.

If you absolutely must do it on application level then Cloudflare provides a client API with an IP ban action, 4.6 in the docs: https://www.cloudflare.com/docs/client-api.html Or simply use a key-value database and route users to blank views.

Out of curiosity, what do you have against virtual machines?I saw this implementation using DRF some time ago

http://www.django-rest-framework.org/api-guide/permissions/#examples> and [Get IP Intel](https://getipintel.net) (free but also great)

Way better than paying 3 grand for blocked. Some people say it's not even that good but the best way is to test your data sets with both systems. For latency issues, you can put all API queries as a background job or query it asynchronously. The user will be able to browse one or two pages before the API returns the result so you can block them at that point. It's a good trade off in my opinion."
2016-04-04 12:14:15;So I can't use the same method (pk, uuid, etc) for accessing different views from a template, or am I missing something?;"There's nothing preventing you from using the same keyword arguments for multiple views.

Post your URL routes?The view path as the first argument to the url template tag was deprecated in 1.8, you should look to move to named urls. I also agree that nothing prevents this."
2016-04-11 17:35:34;PyCharm not hitting Template breakpoints?;[removed]I was doing it today and it worked fine for me, what's your Django Runserver configuration?Check if your templates folder is marked as a source folderStupid question, but is it hitting any code breakpoints?Make sure you're not doing anything with caching that might be bypassing the template rendering.Are you perhaps using django-channels or a version of django above 1.9?This happens to me sometimes. Usually all I need to do to fix it is restart the debugger.
2016-04-11 14:24:40;How do I update my html table in jquery with new data?;"Firstly, unless your `client_info.name` is already wrapped in quotes, you're writing a literal into the javascript and that likely won't work well. Suggest:

    $client_name = ""{{client_info.name}}"";
    $('.name').html($client_name);

And if you're going to do rubbish like this rather than rendering on the server, use something mature. Datatables has [nice AJAX ways of rendering and paging tables](https://datatables.net/examples/data_sources/ajax.html). To tie that into Django, you can check `request.is_ajax()` from the same view and pump out JSON if True. Otherwise render a static version server-side.Do you want it to happen in real-ish time? Like without refreshing? Because then I would think you'll need a way to make an ajax calls every x seconds and update your table when there's a change. You could try rendering the client names server side with normal html. How much experience do you have with django? Generally, if you're going to use jquery to populate the page with data you would be using ajax calls to an api endpoint in your application. There is no reason to do this unless you want to be able to fetch and modify data without a page reload. The simplest way to do this is to use the django templating engine's built in for loop to loop through all objects passed into the context server side. "
2016-04-11 13:57:10;Trouble with hosting when using postgresql with django app;"did you configure your db settings properly? you have to use

    'USER': os.environ['OPENSHIFT_POSTGRESQL_DB_USERNAME'],
    'PASSWORD': os.environ['OPENSHIFT_POSTGRESQL_DB_PASSWORD'],
    'HOST': os.environ['OPENSHIFT_POSTGRESQL_DB_HOST'],
    'PORT': os.environ['OPENSHIFT_POSTGRESQL_DB_PORT'],[removed]"
2016-04-11 08:53:02;Proper way for view with heavy select and many (possible) inserts?;"Starting new Python threads manually from the web app server is usually a bad idea.

An architecture you should consider is:

* When the big request comes in, save it in the database.
* Schedule the processing in a background job queue.
* Redirect the user to a ""job status page"", passing some sort of job id. The page should auto-refresh every now and then.
* When the background job completes, it writes the result to the database or files, and marks itself as completed in the database. On next refresh, the status page shows the results or links to files.
* You can launch one job per user request, or for each match criteria, whichever seems more elegant in code I suppose.

Then you can create some number of worker processes for the background queue, which do the actual work.

For the background job queue, two popular options are celery (feature-rich but sometimes seen as complex to set up) and redis-queue (easier to install especially if you are already using redis for cache, and good enough for 95% of sites).

But note that in the end, both the web app and background workers both will still access your database, and if that's the bottleneck, the background queue architecture just provides a more responsive status UI rather than actual performance increase.

PostgreSQL has full regular expression search support, perhaps you can use that to speed up the queries themselves: http://www.postgresql.org/docs/9.4/static/functions-matching.html
Or even better, see if you can use text search indexes for some cases: http://www.postgresql.org/docs/9.4/static/textsearch.html"
2016-04-11 07:05:42;File locations (x-posted to /r/djangolearning);Read this https://docs.djangoproject.com/en/1.9/topics/templates/
2016-04-18 23:09:39;"""OperationalError at /admin/""";Be aware that if you're using sqlite on you production server, you're likely to have issues as soon as you have more than one visitor on your website. SQLite isn't meant to be deployed on servers, my advice is to switch to a production ready database as soon as possible and use this backend on all development environments (developing on sqlite and deploying on Postgres *will* cause some unexpected issues, sooner or later).Did you check the permissions of your sqlite database file? Is it writable?deleted 
2016-04-18 18:34:16;Django models objects JSON serialization;`./manage.py dumpdata` and `./manage.py loaddata` use this for fixtures.
2016-04-18 17:47:35;Django and Celery: File transfer;"Celery is the de-facto standard for defining async processes. It's a perfect solution for something like transferring files from one machine to another.

That said, Django 1.9 just released native websockets support with Channels. That might be a good solution too. Why not write to s3 in the original upload? 

Celery could move the file for you but it would have to be running on the same Web server which isn't ideal imo unless you know you will never need to scale up

"
2016-04-18 14:33:13;easier way to edit .po files?;"Google Translate Toolkit has the ability to edit .po files online.

https://translate.google.com/toolkit/

Poedit is pretty good downloadable software. And free. The paid version offers suggestions for translations as well.

https://poedit.net/download

The Django project itself uses Transifex but it's not free. Good for managing translation teams.

https://www.transifex.com

Try django rosettaWe've tried rosetta aswell as transifex. 
In the end we ended up using https://poeditor.com (I'm not affiliated in any way).
POEditor works perfectly! A bit pricy but works well and has en API so its easy to script your way out of dealing with synchronising translations, makemessages, compilemessages etc. 
I recommend it :) I'm also looking into this myself. Here are some sites I've found:

* https://www.transifex.com
* https://poeditor.com/
* https://www.oneskyapp.com/If it's just for you, there's a handy po mode for emacs: https://github.com/andialbrecht/emacs-config/blob/master/vendor/po-mode.el

`u` to go to the next untranslated entry, etc (see the menu)"
2016-04-18 07:56:06;DjangoCon Tutorials/Sprints?;"Hi there! I'm one of the DjangoCon organizers, so hopefully I can help. 

> Are tutorials worthwhile? 

I think so. I've taken several tutorials myself. Our Call for Proposals (including tutorial ideas) ends today, so we should have a program for you next month. You can see then if we have any tutorials that you feel would be beneficial to you. 

> Are sprints worthwhile? 

Again, I think so! Django is a really friendly community, and people will be sprinting on Django itself but also on other OS projects. We'll have mentors available to help if you need it. If nothing else, it's a fantastic way to get to know people. 

> How many people generally attend DjangoCon? 

Last year was ~350. This year we expect between 400-500 on the conference days. Attendance at tutorials varies, but they are much smaller sinc. About 1/4-1/2 of people attend the sprints. 

Hope this helps! Hey! I'm just planning to attend DjangoCon, so maybe my thoughts might be of use.

> Are tutorials worthwhile?

From 2007 to 2011, I attended every conference tutorial I could. At PyCon 2010 I taught my first tutorial. So in my own case, tutorials at major conferences like DjangoCon were definitely worth it.

> Are tutorials worthwhile?

The sprints are absolutely worth attending. Think of them as student labs. It's a way to immediately apply what you learned to any one of a variety of projects, even your own, with fellow attendees and experts right on hand. Going beyond the chance to hone your skills, they are a good place to network and bond with fellow coders. And yes, about 50% of the people my company ([Cartwheel Web](cartwheelweb.com)) hired were chosen after a conference sprint.

> Are tutorials ($$) worth more than sprints (free)?

Here's a summary of the difference between them:

* Tutorials imply instruction - instructors jamming knowledge into your head.
* Sprints are a chance to collaborate on code while sitting next to people with different skill sets, opinions, and preferences.

I advise attending both, it's worth the investment in time and money. If you can only choose one, think about where you personally learn better: Receiving notch instruction or coding collaboratively in a friendly environment. 

> How many people generally attend DjangoCon?

As /u/laceynwilliams/ said, hundreds of people. I love meeting people at DjangoCon, everyone you meet, beginner or advanced, knows something you don't. What's not to love? For what it's worth, I've co-submitted two DjangoCon US tutorials and am planning to attend the tutorials. 

"
2016-04-25 22:28:43;Books on app model formation;"What you are looking for is database schema design and/or database normalization.

Django models are just representing a database schema in Python syntax. Once you get a good idea for how to design your database as a normalized schema, representing it in Django model is the easy part.

Something like this book might be a good start:

http://amzn.com/1590597699"
2016-04-25 22:23:17;Django form POST problem;"Is the code hosted in a public repository? If so, provide a link so we can better assist.

If you're not already using it, try out [django debug toolbar](https://django-debug-toolbar.readthedocs.org/en/1.4/). I know you're able to see POST data within a normal request, just not certain if that same information is available when POSTing via AJAX.

Finally, how are you building your form(s)? Have you hand-built the forms within your templates or is Django building them for you? (i.e. `{{ form.as_p }}`, etc.)

You might want to check the **name** attribute within the input field you're having an issue with. Be sure **name** is actually being filled in and with a unique value.This is almost impossible to debug without code examples. 

Is the field a file/image field? If so, you have to deal with those special on your ajax post.My money is on you are forgetting to put the pre-generated field in the view.Is the parameter missing entirely, or present but empty? Are you sure the missing HTML field is included within the form element?My first guess is the field/element has the 'readonly' attribute on it. I would suggest that you inspect the element and see what attributes are on it."
2016-04-25 20:08:40;need help with using redis (Do i need to backup my data in Redis to more persistent sql db?);"I would suggest you read about [redis persistence](http://redis.io/topics/persistence). It will explain a lot about your options for persisting your dataset to disk. Redis can and is often used as a persistent data store. You just need to understand your data, understand how and when data can be lost, and understand if that's good enough for you.I usually use redis as a form of cache, or a pub-sub service. Persistence in that case isn't guaranteed, but it's not a big problem.Yes yes yes! Redis is not meant to be a persistent data store. You need to store it somewhere persistent - like a database.Sure you can keep your data in redis with a tollerable risk of data loss (comparable to Postgres).

But when you want to query it in arbitrary ways, you're going to wish you had a relational database backing it."
2016-04-25 19:40:17;Blog post about Flickr-Pony (Flickr Storage) - Feedback encouraged !;
2016-04-25 11:38:45;Managing non-authenticated users & sessions;"For the first option, you could even put all the user-specific data into Javascript localstorage, which would completely free your server from having to store data for anonymous users. Copying things over when the user finally registers would be annoying though.

But overall the second option seems much easier to build, and would provide a number of benefits:

* Registration is easy, just assign an email/password to the user object.
* You can keep the abandoned anonymous profiles around for as long as you want, for example to do analysis of most popular foods, sign-up metrics, etc.
* If someone builds a nice profile, and then loses access to it by clearing their browser cookies, and contacts you for help, then you can still potentially restore it for them if you can find it in the database.

Don't create an user when people first visit the site, only when they first try to save something.

I'm not aware of any django user registration package offering this out of the box, but would be interested as well if you find any."
2016-05-02 21:55:39;Looking for a 2FA app that can be used in production.;"I'd suggest using django-two-factor-auth as a loose guide on how to build on top of [django-otp](https://pypi.python.org/pypi/django-otp).

django-otp is the actual 2FA engine behind django-two-factor-auth. I recently used it to add 2FA to several apps and it's solid.We evaluated Duo and got it working without too much trouble:

https://github.com/duosecurity/duo_python/tree/master/demos/djangoDoesn't mean you can't use it. However it definitely let's you know what to expect, nothing (which is honestly what I expect from small projects anyways). If it does what you want and you can relatively understand the code then go for it. You'll just have to deal with issues that come up.

As far as other 2FA apps, doesn't seem to be much on Django packages :-(We use Authy. That was acquired by twillio. It works amazing and it has sms fallback. It might not have a free tier tho, but security is something worth putting money on. It was also super easy to implement "
2016-05-02 16:53:13;Step by Step Pinax: Building Cloudspotting, Part 1;
2016-05-02 10:33:33;Handling config data with django;"You tree is pretty static and small, so it seems legit just to have boolean fields in a single model. This could give you some performance boost (single sql query to read them all) and makes caching simple.

As an alternative you can think about to store the state in a JsonField.Costs and time to finish belong in code. Current state for player belongs in the DB"
2016-05-02 02:21:00;django-image-tools throwing an IOError. Not sure where to go from here.;I've never heard of this library and don't see anything obviously wrong with your code. Repo activity seems low, which is worrisome for support. Consider switching to a more popular library, such as [django-imagekit](https://github.com/matthewwithanm/django-imagekit).
2016-05-01 17:24:20;Open source django projects with good tests?;"I have a few things with lots of tests:

* CRUD app: https://github.com/grantmcconnaughey/feature-requests
* Templatetag library: https://github.com/grantmcconnaughey/django-lazy-tags
* Django models library: https://github.com/grantmcconnaughey/django-field-history[Wagtail](https://github.com/torchbox/wagtail/tree/master/wagtail/tests)Obey the goat http://www.obeythetestinggoat.com/[deleted]  
 ^^^^^^^^^^^^^^^^0.2371 
 > [What is this?](https://pastebin.com/64GuVi2F/71779)I don't know if we have good tests be we have 800 https://github.com/zestedesavoir/zds-sitedjango-oscarI'm actively developing [LibreShop](https://github.com/libretees/libreshop), and I'm using BDD, coverage, and pytest. Catch me on Freenode if you'd like to help of your have any questions! I'm contracode in the #libretees channel!Let's turn this around. Put up some of your own code for review, and request feedback. Looking at other's code may help; but, you'll benefit more from a review of your own code.
"
2016-05-09 20:05:09;Production server security best practices?;"You should read the security section in the official docs: https://docs.djangoproject.com/en/1.9/topics/security/

Also the deployment checklist: https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/I always like this:
https://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers

Somebody else has nicely wrapped it in an ansible playbook too:
https://practicalops.com/my-first-5-minutes-on-a-server-with-ansible.html

Edit: And configure firewall so something like UFW is as simple as it comes. Allow outgoing, block incoming, create exceptions to allow incoming sftp/ssh and httpGreat question!Block important defaults ports like sftp, mysql (or the one used by your DBMS), SSH, etc."
2016-05-09 16:35:27;Elasticsearch/Django;"Yes, I can second django-haystack here. I think, you will be okay with it. But, you should apply optimal approach for updating the search index on-fly.A project I'm working on using django-haystack to great effect. It's been working well since I joined the project though so I've not played around with it much but it works with ElasticSearch nicely. You don't really need elasticsearch for autocomplete. Postgres supports full text indexes. I think general that's all you need for autocomplete, rather than full search functionality.

That said, I use https://github.com/elastic/elasticsearch-dsl-py to talk to elasticsearch in my django project.

As far as your interface to clientside, just create an endpoint that you constantly ping with the user's current type, and returns the autocomplete list. Since this will be hit a lot, make sure to optimize this by

* Returning only a small list of results that the users would see
* Use indexes (tell me if you want to use postgres or elasticsearch and I'll tell you the best way to do this)
* Only select the columns you need to send back to the client (probably ID and display text)I wrote https://github.com/jaddison/django-simple-elasticsearch to help bridge the gap between Django and Elasticsearch. It may or may not apply to your situation, but I encourage you to check it out and provide feedback!

There is a semi major rewrite on the es2.0 branch which breaks some backwards compatibility, but does simplify things somewhat.As for autocomplete use the edge-ngram at index time - it worked a treat for me."
2016-05-09 10:21:01;Seperating apps;"This is the #1 question asked about Django and it absolutely does not matter. Go with your instincts, be prepared to learn if you were right or wrong.It is absolutly no problem to have a great number of apps. Just import views, models whatsovery like every other module.

     from company import models as company_models

Rule of thumb if you can't describe what an app should do in a few words. Split it up. It really helps for clearity

So apps:

* Users and Groups - this will hanlde Settings, Groups (and Login / Registration per Django Auth)
* Invoices
* Items
* Exports

API depends - could be directly in Invoices or Seperate

"
2016-05-09 03:13:19;Django URL Names should be Underscore Separated;"Underscores seemed like the django standard, I always use them. Hm, i'm in django since 0.96 and i supposed that ""-"" is more frequent.

And I never actually like it. People will think I'm a monster, but I use dots:

    reverse('author.detail')

Well they are technically identifiers, no?Google identifies underscores as joiners and dashes as word separators.  If you worry about SEO, you are forced to use dashes.

[google info on urls](https://support.google.com/webmasters/answer/76329?hl=en)I prefer the `'author-detail'` for endpoint names because it's visually distinct from the variable `author_detail`.

This echos Aymeric's point in the thread:

> using a different convention for different types of objects makes it easier to search or replace one type and not the others.

I think? it also tends to be more common, but I've no particular evidence to back that up."
2016-05-08 02:38:08;Django beginner - anything specific I should be ready for when deploying?;"You could always check out Heroku, a popular Platform-as-a-Service (PaaS). Basically you add them as a second remote for your Git repo, and when you push they configure and launch a server for you.

I'm wondering about your question: do you feel anxiety about the task of learning how to work with Linux, cloud-based hosts, and the web-stack required to run a website? Is it a problem to spend another month learning how to do it? If so, I encourage you to put the time in now. It it extremely fun and gratifying to learn to build web-scale technology. Remember that term; web-scale refers to the ability to build a product that can scale 10x, 100x, or 1000x. You can bumble through the basics in a few days; a month is a solid start to really understanding the process. If you are trying to get your start as a professional developer, then this is your chance to learn the fundamentals. 
Start to use a virtualenv now. Yesterday if you can. Get into the habit of maintaining a requirements.txt with which to install all your projects's dependencies. That is what'll make deploying easy.

SQLite3 is perfectly adequate for certain workloads. Honestly. People will try and push you at Postgres for everything but I have live sites with dozens of concurrent users running on SQLite3.

A *real* deployment requires a serious and ongoing amount of babysitting a Linux server. You *can* learn this on the job, especially if this is a hobby project that isn't handling high-risk personal data... Hosted services are limiting but if you're not going to pull your weight, they're not all bad.

And don't forget that this is software. It'll need updating regularly and there's no mechanism for automatically testing upgrades or doing them. If you have a requirements.txt in a virtualenv you can `pip install -Ur requirements.txt` but you'll want some sort of testing so you don't have to verify every feature manually. This is after-deployment scripting stuff, just don't neglect it.Read through this and you would be set for deployment. http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/

Get a free tier AWS (or Digital ocean) instance for trying it out. Digital ocean might be better as it requires much less setup compared to AWS.Get a TLD, a $5 VPS at DigitalOcean.com and learn how to set it all up on Ubuntu.  Get Django running on that (there's a lot of help available with Apache and wsgi), by connecting to it with your Windows host using SSH program like putty. 

PyCharm pro version (free trial) has awesome integration with remote Linux hosts.

If you're serious about hosting something like this, you'll need to get away from Windows for anything other than your connection to your remote host.My experience: deploying was a learning experience in itself.  It is nothing like deploying a simple php site. 

I suggest having settings.py and also local_settings.py, and use whatever trick you prefer to make that work for both testing and deployment.This django con talk on deployment will make you learn a lot about deployment pitfalls and best practices. I recommend to give it a shot https://youtu.be/SUczHTa7WmQIt's possible to run it like that but not recommended at all.

runserver is just a test server so you can host a website on your own computer during development. In production, you actual server is the ""runserver"". Same with SQLite, you usually want PostgreSQL or MySQL or maybe Mongo or some other NoSQL for your database.

All in all, you. We'd to know the basics of networking and Linux to set up a basic server. Luckily it isn't all hard to learn. Then there's also domain names, certificates, etc...

If you don't want to worry about the technical stuff, DigitalOcean (and probably a few other hosts) have ""one click apps"" with Django and some database like MySQL already installed so you can just transfer your files and you will be good to go."
2016-05-16 17:58:18;Holistic way to do translations, including static web content?;"There is internationalisation built into the core of django
https://docs.djangoproject.com/en/1.9/topics/i18n/

I've never had cause to touch it, so I have no idea how well it will fit your needs.I used getext libs and tools for a static site I generated with python, it worked remarkably well and gave lots of wins like fuzzy matching, translation status and the possibility to externalize translation work to translators who already knew the getext standard and had tools to work with it.

There are things that you should just not try to reinvent, really.

I want to bang my head on the wall when I see JS projects using XML files for translation.I've written a tool that compiles/translates .mo files to javascript or json and a little wrapper to expose a gettext like interface. It works mostly like what Django does, but is static, so you can serve the message catalogues from your CDN/static host. Not sure this is what you're looking for, but maybe give it a look: https://github.com/ojii/gettext.jsI don't know about Django in specific, but coming from PHP, typically a dictionary of phrases is built, like `localization['game']['game_over']['en'] = 'Game Over!'`.  Laravel's localization is simple and straight-forward: https://laravel.com/docs/4.2/localization"
2016-05-16 14:51:31;Having problems installing it.;"use regular cmd, you don't need powershell

also, try uninstall and reinstall python's exe and read carefully about path variables in the install wizardDon't use windows, dual boot Linux or use that new windows bash thing. Windows doesn't get along with any kind of programming except .NET"
2016-05-16 00:33:17;Template help: generating nav menu with two dicts of items;
2016-05-15 23:43:48;How To Implement A User Image?;"[django-avatar](https://github.com/grantmcconnaughey/django-avatar)1. Add an ImageField to your user model.
2. Update your form.

What's failing there? Also, consider using [Gravatar](https://en.gravatar.com/) as an alternative. WIthout seeing your code, it's hard to be more specific.  You might be better looking at Stack Overflow questions. I prefer to create a Profile model that hangs off the User model, a URL field for the image and use the [cloudinary API](http://cloudinary.com/documentation/django_integration) to store the images.

The view that the form POSTs to looks something like this:

    def profile(request, username):
        from django.core.exceptions import ObjectDoesNotExist
        import cloudinary.uploader as cup
        from core.models import Profile
    
        if request.method == 'POST':
        try:
            profile = Profile.objects.get(user=request.user)
        except(ObjectDoesNotExist):
            profile = Profile()
            profile.user = request.user
        profile_picture = request.FILES['profile_photo']
        uploaded_image = cup.upload(
            profile_picture,
            crop='limit',
            width=600,
            height=550,
            )
        profile.picture=uploaded_image[""secure_url""]


        profile.save()
        elif request.method == 'GET':
            try:
                profile = Profile.objects.get(user=request.user)
            except(ObjectDoesNotExist):
                return render(request, 'users/profile.html', {""user"": request.user, ""profile"": """"})
        else:
            pass #blind else for now
    return render(request, 'users/profile.html', {""user"": request.user, ""profile"": profile})"
2016-05-15 22:55:32;Live coding a simple django site;Having been working on the django docs tutorial, this was a nice representation of what a streamlined workflow I can expect to reach.  Very nice.  I'm still fairly new to programming in general.  Would you mind giving me an idea of how long it takes to get that quick with your emacs?  I'm trying to settle on a development workflow and learning a solid text editor/file explorer seems like a good place to start.
2016-05-23 21:57:23;"Is there a ""best"" webhost for running a Django site/app?";"You could try DigitalOcean, they have a click-and-build Django application running on Ubuntu 14.04. The lowest plan is $5 a month so pretty affordable.It could be still worth starting out on heroku since it's very easy to deploy.

My current approach is to deploy my Django app in a Docker container. Once you have your app set up there, you can run the docker container on just about any cheap VPS server (e.g. DigitalOcean).Definitely WebfactionI just want to chip in with Linode. I've had no problem so far, and you get total control for quite an affordable rate.Maybe just due to my background having full access to a server, but I like using AWS. You have so many options for deployment. Don't want to handle the server backend? Set up an app using Elastic Beanstalk. Want full control? Create an EC2 instance. I do both and I even sometimes ssh into the ElasticBeanstalk instances just to get a look under the hood.

I also sometimes make use of third party binaries from time to time and with either EC2 or ElasticBeanstalk you can pretty much install whatever you want.

Once you have the setup once, repeated deploys are a breeze. Plus if you are eventually looking for work, a *lot* of employers are looking for people with AWS experience.Hetzner because of cheap

Online net because of quality

Amazon because of scalability

Ovh because I have friends there

.

Do not use DO or its clones for serious businesses because of potential problems and just inadequate pricing. It may look good and cheap for kinda working server for $5 but as soon as you need something more — whoopsy, what other companies offers for $50 is $200 for you. Your business require more powerful hardware worth $200 monthly? DO will gladly sell it for as low as $700 monthly.

Srsly, DO and its clones is only good for either cheap $5 servers or renting processing units for few hours. Amazon is cheaper and have more power for sale but DO is kinda easier to set up. Hetzners vds is even cheaper but they do not give free credits.

Yup, this trick with DO: register account, creade vds with free credit and destroy in after few days. They will send you message of sorrow and 5-25 dollars of credit.I use constant.com

I have heard good things about OVH.

I thought about Dreamhost, but I can't get over their rating computers as ""top-grade intel CPU"" and not actually telling us before we rent it exactly what we'll get.

Softlayer is a great dedicated host, I'd pick them over Rackspace any day for price constraints. 

Rackspace is a great fully managed dedicated host. If you have near zero technical skills but want bare metal, they're the way to go.

As for VPS's, I can't say I've ever had a project small enough to fit on one, but if that's you... any of the other choices people have offered will be great.Some people already mentioned the heroku, but openshift from redhat is pretty neat.  http://openshift.com

If you are more DIY then you can try dokku or openshift origin.

Push-to-deploy FTW!
[$10/year VPS](https://lowendbox.com/blog/alpharacks-ddos-protected-linux-windows-vps-starting-9-99year-los-angeles-usa/)Probably Google cloud if this will become a large website. It is a bit cheaper than aws from what I can tell. They have most of the major features, sql, storage, and servers. Though storage is easier to set up on aws. They also have a more advanced docker setup for managing multiple servers and deploying apps.There is something called ""webfaction"". I had used it for a project. "
2016-05-23 20:28:35;Django 1.9 urls rules has changed. What's the difference here?;"(In case you don't know why this was the case...)

Your original urls.py would surely never have worked, even pre-1.9. `from accounts import views` imports `accounts/views.py` and stores it in `views`. You can't access it from `accounts` as nothing is stored in it. You were using the wrong identifier in your URL pattern.Is it also clear to you why your solution works and why it didn't work before?"
2016-05-23 16:42:24;Calculated field in model;"I guess you could add a method to user to get the location... Something like this maybe:

    class User(models.Model):

        zip_code = CharField()
        county = CharField()

        def area(self):
            return Area.objects.filter(zip_code=self.zip_code, county=self.county).first()

This is assuming you have a `zip_code` and `county` field and that you can look up an area based on that.

But the gist is that you could have a method for a user that looks up what area he/she is in."
2016-05-22 18:52:55;Deployed on heroku, but static files are working;"You need to set something up to serve your collected assets.  Whitenoise is great for this:

https://devcenter.heroku.com/articles/django-assets#whitenoiseHey, I created a [pull request](https://github.com/avinassh/nightreads/pull/3) on your github repo.

The problem was in the manage.py, it was using `settings.dev` even when it shouldn't be.

An if statement to make sure it always runs on production settings should fix the problem.I think you may be missing the whitenoise entry in `MIDDLEWARE_CLASSES`?

http://whitenoise.evans.io/en/stable/django.html#enable-whitenoise"
2016-05-21 15:12:09;Development and Deployment of Cookiecutter-Django via Docker;
2016-05-30 20:25:47;Code review and testing help;"Hey! I'm new to Django, just wanted to say I like your design :)
Also wanted to mention:
If you have hard-coded link in href (in templates):

     <a class=""mobilelinks"" href=""/portfolio"">Portfolio</a>

And in urls.py:

    url(r'^portfolio/$', views.portfolio, name='portfolio')
    
You can just refer your href as:

    <a class=""mobilelinks"" href=""{% url 'portfolio' %}"">Portfolio</a>

So that you don't have to change both urls.py and template if you wanted to change something :)
Correct me if I'm wrong :)
    * You forgot to add a LICENSE, it is important

* Continuous integration is overrated

* Static should not be in repo

> test the code inside my form.is_valid()

* Try passing a valid form first. But even firster, write some unit tests.

Coverage is sure good thing to have but it means very little without actual tests. You should actually test things. Like ""prepare some data, pass it to function, assert with expected results, reply with every possible set of data, reply for every function"". Just requesting everything with test client is not really testing anything but the test client itself. I can assure you that test client works fine.

This:

    self.assertEqual(response.status_code, 200)

is not a real test.

* BTW, the most overrated thing is PEP8. You should seriously decide if you really need this.

> PEP8 said:
> This document gives coding conventions for the Python code comprising the standard library **in the main Python distribution**

So as long as your applications are not meant for main Python distribution — there is no need to apply it.

> https://github.com/sl33t/portfolio/blob/master/home/views.py#L66

* This is just wrong. Go learn which http status is what: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
2016-05-30 18:39:28;Facebook chat bot using django tutorial;"I have created a Flask version

https://github.com/masnun/fb-botI was really hoping it was the joke bot doing the tutorial."
2016-05-30 11:32:25;Initial playground for django-river which is fakejira is published.;"django-river = workflow engine

Jira = issue tracker

This repo = the code of the first tutorial for django-river; building a very small Jira clone

I hope that makes things a bit more clear to the next few people seeing this. what?I like the idea of building a Jira clone in Python, I've been thinking about it for a while since I'm not huge on the other open source ones.

Is Django a good fit for that though? Issue management deals with a lot of configuration management and dynamic models which is outside of the scope of most django projects. I love Django more than any other framework but I'd be interested in other people's thoughts on this. I was thinking about maybe going with Flask and a JS framework."
2016-05-30 06:38:30;How to divide content by language?;"Look into i18n_patterns, add a language field to your model, and filter your QuerySets in your views with translation.get_language(). This works flawlessly for me.

Storing multiple languages in one object in a json field or somesuch sounds messy to me, you have to parse your entire content before being able to decide if you have to raise a 404 for example.

For cross-linking between different languages I also have some key field, but that's not absolutely required.I've seen this possibly helpful app mentioned here from time to time (but haven't used it myself): https://github.com/deschler/django-modeltranslation>> 1st - localhost/en/ 2nd - localhost/ru/

This is not the Django way. Django uses language cookie and accept_language http header.

BTW, its hard to understand what is your problem exacly.

Is it ""how to model the model"" or ""how do decide which language user wants to see""?This tutorial looks useful: 

http://www.marinamele.com/taskbuster-django-tutorial/internationalization-localization-languages-time-zones#inter-urls"
2016-05-29 21:41:20;Change from MS SQL Server to any other engine when using Django?;"First, I'll second /u/scottocom's suggestion to use Postgresql, it's superior on a number of fronts and plays very nicely with python and Django.

Second, if you're importing data into Django, I find it useful to make use of your already-created models and Django's powerful error-correcting facilities.  I recently did an application going from Access to Django, my import script basically worked like this:

- Import my Django models
- Create ModelForm for each model, specify any custom import behavior there.
- For each model, create a SQL query for the old DB that would pull out all the data in the format my models would require it.
- Pull all this in a big data structure that I could loop through.  
- Run it and go on a coffee break.

It's slower than just directly dumping from one DB to the other, but it makes some of the coding easier and more robust.I have no direct experience migrating from MsSql in Django.  But we have completed projects in Ms Sql,  Mysql and Postgres.  I would suggest Postgres is more like Sql server than Mysql/Mariadb so you might feel more at home using Postgres ;)  We moved from using MySql to Postgres a few years ago because Mysql would let you do stupid things like create a new field without a default when it was not null.  Django seems to work well with Postgres also.  Hope that helpsI would suggest PostgreSQL, not only because it's a better database system than MySQL/MariaDB, but also because of this project: [django.contrib.postgres](https://docs.djangoproject.com/en/1.9/ref/contrib/postgres/). There is no similar project for MySQL/MariaDB.1. set up new db

2. change django settings to point to new db

3. run migrate command to set up new db

4. dumpdata on old db (requires downtime)

5. loaddata on new db (requires downtime)

Depending on how your server situation is setup, you may need to adjust the plan to meet your specific needs.Well, first of all thank you all, /u/scottom, /u/whattodo-whattodo, /u/lykwydchykyn and /u/KronktheKronk, you have been very useful and now I'll know what to do and possible engines (it seems that Postgresql would be a good choice). Now what I'm still asking, is if someone knows exactly how would improve Postgresql or any of this engines the current one, in a technical sense? I mean, if someone has any information about request times or whatever, it would be welcome. Thank you again.Thank you everyone! You helped me a lot providing this information! Now is my turn to decide what I will use. If anyone is interested, [here](http://www.pg-versus-ms.com/) I found an article which I found pretty useful.Migrating from one database type to the other has a few parts. Firstly you recreate the schema in the new RDBMS. This includes tables, keys constraints, etc. Then, you migrate all of the data.


For these first two steps Ms SQL does a great job providing you the table structures in plain SQL, as well as insert statements to migrate the data. Unless you are using RDBMS specific data types you will be able to migrate without an issue. An example of a non issue is if you use the decimal data type to count currency it will transfer nicely to Maria DB. However if you use the money data type it may not.

 The one part that I am not sure of is the software which you have which currently interacts with and populates your Ms SQL database. It may or may not interact nicely with your new database type."
2016-06-06 23:36:57;What do I need to know before I start hacking away to deploy to aws if it's my first time deploying?;"Hmm...I personally wouldn't start with AWS if this is the first time you're doing this.  I find DigitalOcean much simpler.

That's a lot of services btw.  I started this Ansible Playbook on GitHub which may help you out: https://github.com/jcalazan/ansible-django-stack

It has roles for most of the services you mentioned, only Redis and Elasticsearch are missing.

Also check out this article: http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/It depends on whether you want to run all the services on a single EC2 instance or if you want to embrace the AWS eco system and use the different services, e.g. RDS for database, ElastiCache for Redis. If you are just looking for a quick solution for testing, the latter would probably be unnecessarily complex.

On a sidenote, why not simplify things a bit and use redis as broker for celery instead of rabbitmq?"
2016-06-06 19:55:21;Speed of Celery?;"Celery by itself doesn't speed up a task, however taking one script, and breaking it into multiple parts would increase the speed of the application. it sounds like they are running tasks in parallel. Also they could be confused about how tasks queues work, and if they are running the task manually they may ""think"" the script has finished, but in reality it just created a task which is still running Are you sure it is actually completing the job in 1/2 second or simply starting a queued task which will be completed asynchronously?
>Calculations for each parcel will be done on separate
    processes/threads as they can be done simulaneously.

With 8 cores, you can't get that kind of speed up just by running parts of the task in parallel.  You'd get 7x speed up at most. Do you have enough cores to justify this speed up by running things in parallel?  Did they implement some kind of caching? Are they using a more efficient algorithm or cython or something?I would like to recommend [celery docs](https://readthedocs.org/projects/celery/) for a thorough grounding in what Celery is and how it works.

I imagine you will end up with a web request-response that queues the task, a celery worker will then pick up the task from the queue and do the processing, then there will be some mechanism for you to receive the result.Diff the code on the two environments. Celery doesn't just happen on its own and it sounds like you aren't certain what is happening under the hood. Reading the code is the way to finding the answers. None of us here can really help in this case. Start with the request and walk it all the way through its life.  Certainly you'll find the answer. Then just do it for the other environment and that along with your diff should give all the answers.


Also, sounds like this task is perfect for an asynchronous job queue like celery. Though like others have stated, it alone doesn't speed the job/task up unless part of that queueing was splitting it into multiple sub tasks."
2016-06-06 17:02:31;Implementing tagging users with @ (e.g. @username) on posts?;"Facebook recently open sourced their library that they use for Rich Text Editing (including @) https://facebook.github.io/draft-js/

It's a pretty awesome library."
2016-06-06 15:29:37;"Saving space in db vs ""cleaner"" code?";"I would say you are worried about the wrong things. Having 2 tables with X row each versus 1 table with 2*x rows each will not have much of a difference in database size. The overhead of 2 tables vs 1 is tiny. You will still have the same amount of data, e.g. the all the answers and all the reviews.

The reasons to split them up vs keep them in one table should be made based on how they are used and how they are related to other objects. If reviews and answers are related to a single object (question, product, etc), do you want to just query all related results in one list or in 2? It could be done via a join or union, but do you want that? Will have have almost all the same functionality?

Also, a class/table called AnswerReview screams bad data modeling to me. If they are almost the same, find the common name and use it. Maybe you want to use inheritance and have a base class called Response. Also, I would recommend against a boolean like is_review. Instead, have a type field that is either answer or review, like with a choice field. It is more extendable.Storage is cheap dev time isn't. Optimize for dev time.Are answers boolean or multi choice?  If so the most space saving answer would be to store all answers in a single byte[] with bitmasks. If boolean you get 8 questions per byte. If multiple choice you get somewhat less depending how big you grow.

No one can make this decision for you. How many rows and how many columns will you have?  A single database is going to start getting slow at somewhere between 2GB and 20GB of data on very basic hardware, or maybe 10x that on expensive hardware. Then you have to look into sharding or such.

Generally ease of access and performance are conflicting goals. You need to know hardware specs and load to decide.. then usually you pick the most ease of access friendly goal you can while still meeting your performance goals.


If you are unsure - Code it to be as easy to use as possible. Then when you hit performance walls, rewrite the parts that are holding you back."
2016-06-06 10:54:17;How to remove rows with non unique fields in django by timestamp?;This is kind of a run-on sentence. Maybe a stripped down example model and the code you currently have would help?
2016-06-13 23:04:07;Django TDD with selenium - at random different tests where it fails;"Well, you found one of the problems with functional tests: They're a huge pain in the ass to maintain. 

I actually do as much as possible with unit tests. Even to the point that I'll render templates and check that they're good in the unit test.Welll well, I think I have it fixed.

It seems to be working. http://chromedriver.storage.googleapis.com/index.html <-- I had version 2.9 (?), which I assumed was the latest one. Turns out, version 2.22 is the latest. I'm baffled. "
2016-06-13 20:30:04;Are books written for Django 1.8 like Two Scoops and Mastering Django worth getting?;"2 scoops will definitely be worth your while (the other is probably good too but I've not personally read it). 1.8 to 1.9 differences will be minimal in the grand scheme of things so you'll gain a lot. Definitely. I realise it's probably not the case but most people *should* be using 1.8 anyway not 1.9 or dev. You'll quickly learn that unless you *really* need a new feature, keeping on top of non-LTS releases (upgrades and testing) is a real pain in the arse.

Either which way, consider skimming the [What's New section of the release notes](https://docs.djangoproject.com/en/1.9/releases/1.9/#what-s-new-in-django-1-9). Weigh up what you really need and whether or not that will fundamentally change how a major system will work (and would therefore be documented).

The change from South to Migrations is one such change that renders older books obsolete. IMO there's nothing like that in 1.9.Yup. Definitely a good read, and the author has a github repo of a django template project that implements a lot of the best practices discussed. I use it for all my projects now:

https://github.com/pydanny/cookiecutter-django"
2016-06-13 15:39:16;Need some tips to refactor my django project;"Put it in the view function. No need for a classSounds premature to me. You want to decouple but you currently only have a single use case.

Wait until you have an actual need to decouple. At that point it will be much clearer what the correct refactoring should be. If you do it now you're just adding complexity without a clear idea of where you're going."
2016-06-13 11:08:47;Django-Material first Beta Release.;"Hi there!

I would like to introduce first beta release of django-material. This is the first release that has complete standard django widgets support and whole django-admin functionality (except few rare used options)

I started this project more than 2 years ago in order to explore the ways to customize django forms rendering without each full form html rewriting. My primary goal was to speed up in-house business application development.

One of the main concept of the django-material library is the {% part %} tag. Part is like a {% block %}  but is bounded to a form field. Same as with block you can redefine the {% part %} in your template. 

For example, here is how the the usual login form could be rendered with icon prefix for username field and custom label for password field:

       {% form %}
             {% part form.username prefix %}
                 <i class=""material-icons prefix"">account_box</i>
             {% endpart %}
             {% part form.email 'password' %}
                  <label>My Custom Label</label>
             {% endpart %}   
       {%endform %}

Parts could be used to control the ways for widget rendering. Here is how CheckboxSelectMultiple options could be rendered in 3 columns:

      {% form %}
            {% part form.apnia_risks columns %}3{% endpart %}
       {%endform %}
       
To make syntax cleaner, the widget attributes are managed not by parts, but with special {% attr %} tag, that allows to append or override a value of tag attribute.

This is how the status field with RadioSelect widget could be rendered in one line:

    {% form %}
        {% attr form.status 'group' class append %}inline{% endattr %}
    {% endform %}


`material.frontend` solves another common problem - modular application design. It provides ready to use base template, and with help from AppConfig mixin, collects urls, global site menu and allows to check per-module permission. Things that allow immediately start to write application logic on a fresh project.

And the last part is the admin theme just in order to have common look and feel over frontend and admin.

The whole development story was a good illustration of 80/20 rule. Although the first demo forms were implemented pretty quickly, the full django build-in widgets support required a lot of time. But now the project at least have all features that i'd like to implement. Definitely the project has unrevealed bugs that need to be fixed and a lot of code and template cleanups required. That's the general plan till the first stable release.
I've only had a brief glance but it looks fantastic. Well done. The mobile support for the admin site is a great 'out of the box' feature and I can definitely see this being a big value add to new django projects which require a modern touch to the admin site. Good luck!Oh this looks nice. I have a project I've been meaning to chuck a fancy SAP frontend on and just haven't gotten around to it yet. I think I'll use this instead!It looks awesome!

Would this be an alternative to django crispy forms, except crispy doesn't affect the admin? Do you have plans of implementing RichText Editor support like Ck editor ? 
I wouldn't care if the Editor is not made with material.
What I look for is an admin backend with the possibility to create/edit objects with RichTextField.Nice.. i was doing it by hand before.. will look into this!Looks awesome! Will soon try in an ongoing project.Looks great! The credentials for the admin demo don't seem to be working though.[deleted]Looks awesome! I tried out the demo and also set it up in a project and it's very nice to work with. I've been trying to find something to replace Suit in the admin and this looks like a great candidate. I did notice a couple things things regarding saving model instances. Github issue [here](https://github.com/viewflow/django-material/issues/122)So, uh...[why?](https://imgur.com/FbXAVLn)"
2016-06-13 05:24:55;Web sockets in Drf with angular 2;"Also check out [django channels](https://channels.readthedocs.io/en/latest/).Check out https://django-websocket-redis.readthedocs.io/en/latest/

In the github repo there's an example chat server."
2016-06-20 21:29:05;How do: complicated db migration upgrade;"You need to make a migration by hand to do the data migration parts.  Make the new columns, migrate the old data to the new columns, all new Code references the new columns, then finally once you are 100% sure data is all migrated, you can delete it the old data in a future operation. I'll try to give a more detailed response once I'm off my phone/train.  

to be clear, do the data migration with runpythonI would do it this way, just to avoid having problems between adding/removing fields and having a data migration on the same migration file. 

Backup your db.

1.- Make a schema migration that adds the field in Model C.
2.- Then a manual data migration to move over the data from Model B to Model C.
3.- And finally a schema migration that deletes the field in Model B.

The three migrations on separate files, so you can manually select the migration you want to run, or just don't add the remove field migration until you're sure your data was successfully moved over to Model C."
2016-06-20 16:02:45;Best practices for extending a Django site;"> At the moment, I am considering the possibility of starting 2 applications (the public part and the logged on part) behind a server like nginx, and redirect requests to either of them, based on the URL.

I don't understand why this is necessary.

Django is set up to require authentication for certain views and allow public access for others. It's also set up so you can quickly and easily slide in third party apps such as django-cms.

You can install Django-CMS and having it running along-side your existing applications. It will only get called if the user goes to an URL that is not already handled by one of your built-in applications.

For simple pages, Django CMS will work fine. You're even able to use custom templates to pull in dynamic content, so for example if you want to pull in records to a page that is surrounded with CMS content, you can.When creating a Public site and a Backend application we usually create two apps/sites and put them on different domains.  Assuming the public site doesn't need authentication it seperates the two so they just share a database.  I figure this makes it harder for hackers to find the backend and the public front end doesn't need security. I've seen patterns like using nginx in front of django before. Even if you only use one django project, it's worth it because you can do useful things like caching all the unauthenticated requests.

I'm not familiar with the CMS side of things, but the nginx part doesn't seem like a bad idea."
2016-06-20 13:57:31;Allowing end users to add custom fields to models;"Seems like json field may work well for your use casehttps://github.com/wq/django-swappable-models

This would allow a user to extend and swap out the base model's.

Should note that this is buildin in django (contrib.auth app uses it) but it's mostly undocumented.

There are other apps using it and it's a great way to allow extension.I think your current approach is OK? Maybe you could reduce to one extra model, e.g. BookExt, which has a pk to your Book instance. This BookExt has field name and field value. And you can have many BookExts to one Book.

Json is a simple choice but feels a tad messy to me and (in my opinion) goes against the modelling."
2016-06-20 13:25:36;How to select children when querying parent?;"Remove "".values(....)"" and then just access the members on the event. It's been awhile since I code with Django (returning now), but...

Are you sure it doesn't make more sense to have your event having a theme and a location instead of the other way around? I mean, couldn't different events have the same theme or location as previous events?

This way, you'd have something like:

    class Event(models.Model):
        title = models.CharField()
        theme = models.ForeignKey(Theme)
        location = models.ForeignKey(Location)

and then you won't need to prefetch anything.

Surely, I'm missing something here, right?"
2016-06-19 11:14:54;Why is there no OneToMany relationship in Django models?;"So you mention you think it would be cleaner or more readable to have it on the Products and not eBay listings, and I can't disagree more.  The thing is, the way a db works, the actual field would NEED to be on the child table, so it might seem cleaner in the ORM - but then the ORM isn't representing reality.

Edit: To add, although the ORM can abstract some details and hide others, it be uncomfortable with fields on one model being represented on another model.  I think as the lifecycle if an application progressed this would get progressively more and more difficult to manage.So crux of the problem - I think reusing apps with shared models is bad.

An app should be totally self contained. All the views, models, forms, should only point to itself.

So your desire is good - write small reusable apps is good.  But if your models depend on each other between 2 apps, they clearly AREN'T self contained. So they should really be 1 app, with FKs.
With all due respect this is horrible logic.  I'm reading the blog post and this is exactly what an FK representation is for.  If for some reason you don't like it because the PK is in what you deem the ""wrong"" place that's just how the world works.

I'm seriously not understanding what they're getting at in the post you put up.  Let's think about this from a database perspective because let's be honest,  Relational DBs have been around much longer than django.

You have 2 tables:

    musician
        id
        name
        create_date

    band
        id
        name
        create_date

You then want to have a linking table to maintain the relationship between bands and musicians.

    musiciantobandlinks
        id
        musician_id
        band_id

Reason being a musician can have many bands and a band can have many musicians.

Now the solution they're getting at with musicians not being in bands are covered in this scenario.  you would simply run a query:

    select m.name from musician m where m.id not in (select distinct mbl.musician_id from musiciantobandlinks mbl)

The problem is not in the database design.  many to many is what is required and what works.  I'd suggest you revisit what you're trying to do.

FYI for a more in depth of database relationships check [here](http://www.databaseprimer.com/pages/table-relationships/).

edit - sunday morning not thinkings and although the example on the blog is better served with a Many to Many your solution is clearly a One to Many.  The link I provided [explains the logic](http://www.databaseprimer.com/pages/relationship_1tox/) simply change authors to products and ebaylistings to books.  It sounds to me that you can't have an ebaylisting without a product so that's what you need.

If you don't like how it displays that logic in a database I'm not sure what we're supposed to do.I believe what you need is a generic foreign key in the EbayListings app.

https://docs.djangoproject.com/en/1.9/ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericForeignKey

This will not break the re-usability of the app (i.e., you can have multiple type of models be added to listings), and allow you to have multiple listings for each app. Think of it like a tags manager app.I like the idea of a `OneToMany` field from a readability/clarity standpoint, but (as noted by others) the database doesn't function this way.

I don't think it's necessarily a problem that the model layer may abstract away what the database is doing, but it might cause difficulties in other parts of the ORM. For example, *where would this migration live*?

Say `ModelB` in `app2` has a `OneToMany` field pointing to `ModelA`in `app1`. The database changes would affect table `modela_app1` to add a foreign key relationship.

Should those migrations go in `app1`(since they affect the `ModelA` table) or should they go in `app2` (since the `OneToMany` field is on `ModelB`)?

I'm not entirely familiar with the implementation of the migrations and models layers so I'm not sure whether there are other consequences as well. By the way, I bet this has been discussed on the [django-developers](https://docs.djangoproject.com/en/dev/internals/mailing-lists/#django-developers) mailing list.

This is an interesting idea!There is a simple work around provided [here](https://github.com/adsworth/django-onetomany)Re-reading through all the suggestions so far and thinking back to my Database lectures from University. As a few people have said this model is not entirely favoured to loose coupling even from a django stand point. You are asking that two databases interact with each other in a way that is not entirely good practice even abstracting it with a oneToMany() type field. 

From what others have said and what ive done in production is to use table what we call a mapping table. Where in your case would be 1:1 between product and mapping table and 1:M between ebaylisting. All a user would need to do is create the mapping table themselves to properly setup relationships.  

You mention that this wouldnt work because you plan to have a table of Album or Shirt products, this still shouldnt be a problem because if you understand databases this should be implemented as a lookup table anyway in order to avoid duplication.

[Some](http://imgur.com/yjOofxs)thing like this might be the best way to decouple the two applications in a manner that you want. You could even go as far as providing the mapping table as a predefined so that a user just needs to inherit from it.Others have mentioned that the database will *need* to create the field on the child table, so I won't rehash that.

But one reason to avoid OneToMany when dealing with any DB, is that you're implicitly setting up a constraint where deleting model A can result in deletes in model B.

If this is so, wouldn't you want to know that your record can be deleted via something else? What if you have a whole lot of code that doesn't take this into account, because you never peeked into Product to see the OneToMany field?

With the Django setup, not only do you (a) get the real database format, you also (b) have a hint in your business logic that a record's existence and creation depends on another.
if you think about how the database would look like it gets quite clear.

option A: leave it as-is, the FK get placed in the related model and the only thing that changes would be where you place the ForeignKey field. i.e reverse the field declaration and the related_name - For me it makes more sense to have it in the model for the table where it would actually be in the database.

option B: Use a mapping table just as ManyToMany does, Its a lot less efficient then using a FK but atleast the relation is in the other table - but yeah, just use ManyToMany if thats your wanted behavior
"
2016-06-27 17:09:10;Yet another django channels example;"Channels seem fun. I still don't know how they are different, though. What are people likely to do with them?

Edit:

Ah, they seem to be... [well, channels](http://channels.readthedocs.io/en/latest/concepts.html). Content is pushed through them by the server and listeners (functions and classes, not users) receive the messages. There are no states from the channels so a client can come in and connect at any time to receive instruction or content.

Very cool. [Very web 2.0](https://www.youtube.com/watch?v=2sEPipctTxw&index=29&list=PL8CqgFMrermWLb4hygBPrb_ttsv2bV_T2)Channels in the next release of django might be a bit optimistic but I'm also looking forward to it (or similar) being included.So, any documentation for this?GreatI have never tried this out, but anyone can tell me if this changes anything with regards to Django's shared nothing architecture?"
2016-06-26 22:07:12;Would Django Allow Aspx Extensions;"Why not just 301 redirect old aspx pages to a new and improved url?You can have a view that takes all URLs that end in .aspx and redirect them to the URL without .aspx in it.

    url('^(?P<path>.*)\.aspx$', my_redirect_view)deleted Yeah, but if you're going to be redoing the site, I'd redirect the .aspx pages. For example, redirect /pagename.aspx to /pagename, and serve the HTML from the latter URL.Yes I would write some middle ware saying to 301 redirect any .aspx extension to the same url but with .aspx stripped. "
2016-06-26 19:58:08;How to: Two forms one view in django.;"This seems to massively overcomplicate things, and introduces tons of redundancy and duplication (QuestionFormView and AnswerFormView are almost the same but different, QuestionForm and AnswerForm are both referred to 3 times etc.)

A simple function handles this much more simply. Just follow the forms docs - https://docs.djangoproject.com/en/1.9/topics/forms/#the-view and add two forms. The only extra thing is to use a different submit button 'name' value to distinguish which button was pressed.

Also, you are not following best practices and doing a redirect after successful save.

Here is how I would do the same thing, with best practices applied:

https://gist.github.com/spookylukey/be03869f55276191a9bdb5bcac4a17bd

It's a little over half as much code. The secret? Only use CBVs for the very simplest cases, or inherit directly from TemplateView and forget everything else. You are just making life hard for yourself otherwise. http://lukeplant.me.uk/blog/posts/djangos-cbvs-were-a-mistake/Is there a link I'm missing?Much like one form, but you do everything in double. Are you using a Class Based View or a simple method ?

For a CBV, using a FormView is not necessarily the best method, as everything is done for a single form. Take a look at the [source code](https://github.com/django/django/blob/master/django/views/generic/edit.py) to have an idea on how to do your own."
2016-06-25 16:55:49;Top 10 Django Projects Started in 2016;I got number one? Cool! :DYes, this is in response to this question: https://www.reddit.com/r/django/comments/4pmx4p/top_10_new_django_apps_of_2016/
2016-06-24 13:41:17;Top 10 new django apps of 2016;[removed]Does django-channels count? Well, this wasn't launched in 2016, but it's about a year old - [Django Q](https://github.com/Koed00/django-q) would be a top app in my view.ok, here is one, nice addition to the django admin - https://github.com/byashimov/django-controlcenterCome on guys..where are the apps?
2016-07-04 17:21:46;A tutorial I made on using Ajax in a Django project.;"Django > 1.7 has a JsonResponse object fyi. https://docs.djangoproject.com/en/1.9/ref/request-response/#jsonresponse-objects   

Cleans up return statements nicely:  
>>> from django.http import JsonResponse  
>>> response = JsonResponse({'foo': 'bar'})  
>>> response.content  
b'{""foo"": ""bar""}'Please use `forms.Form` instead of `request.POST`. While we're at it,  let's mention [DjangoAngular](https://github.com/jrief/django-angular) and [swamp dragon](https://github.com/jonashagstedt/swampdragon).

Django angular is super easy to set up,  but doesn't integrate with models AFAIK. I've used it in production and it works a treat. 

Swamp dragon is much more involved,  but exposes an API that django can update via websockets (cf. HTTP requests e.g. post and get). Not used it but I'm itching to do so."
2016-07-04 14:32:05;Any Advice/Examples for dealing with interacting with Excel files in Django?;"Expand the scope of your questioning to interacting with Excel documents via *Python*. Your problem isn't Django-specific.My sincerest condolences for having to rig up something so preposterous. I was in a similar situation a while back. Unfortunately, my solution was to wait until my contract was up and find another job.

Probably hacky as hell, but I might try to coerce the files to CSV if possible and conjure up some regex for validation. But I've a hunch this will either be insufficient or another circle of hell to implement.

Best of luck, fellow pythonista.XLRD is the python library we use.  Works pretty well.I would recommend looking at the pandas library. It uses xlrd to read excel files and then you get to manipulate them using pandas. The method is called [read_excel](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_excel.html)()."
2016-07-04 02:57:05;How to set up settings and use git with deployed project?;"The general advice to keep secrets as environment variables seems to me to be slightly more complex than the alternative I've settled on. This is partly my lack of adeptness in all things Unix-ey but the following is without a doubt simpler and as far as I can work out has no read disadvantages over using the environment.

I have a 'settings' directory. It contains an __ init __.py but this file is excluded from Git.

Inside my __ init __.py I have the following:

1. An import for the 'real' settings for that install - i.e. from .development import *
2. All my 'secret' settings.
3. Any settings that are truly unique to JUST THIS DEPLOY. Usually ALLOWED_HOSTS, DATABASES and a couple of other things.

I actually generate the __ init __.py from a deploy script that knows what's supposed to go into it but even creating it by hand is fine. I don't even have to mess about setting DJANGO_SETTINGS_MODULE as the default of some_project.settings will always work.what i do is simple and it works.

I add 

    try:
        from .devSettings import *
    except Exception as e:
        print ""no dev settings found""

you can change it to local settings.

so, on your settings file you have all the generic stuff, then on the second file, you have local specific stuff, like local database, keys and stuff.

the code will import the local file variables and functions, so they should have the same name if you want to override the default settings file.You shouldn't be writing code on the server. You shouldn't store sensitive data(keys /passwords) in your settings files.

Now that that has been said, deployment is beyond the scope of git. All git is, is a way to track changes to your source code.

You could, however, use git to deploy your code, just pull the code on the server to update your site. But that won't be as easy when you start using other tools, like gunicorn and nginx, that your code depends on.

Docker is a decent way to deploy code, but then you need a server with docker setup and a private repository to save your images to.

I just moved from docker to using Packer to build images and terraform to deploy it and manage the servers.

I suggest researching how others package their sites/apps. It doesn't need to be Django specific.

**Edit:**  
By the way, 502 means nginx is can't forward requests to Django(gunicorn or what ever wsgi you use) for some reason.`export` works in the current shell only. Configure gunicorn (PS. uwsgi is better) to provide SECRET_KEY as an environment variable to your Django app."
2016-07-03 07:50:22;DjangoWeekly.com Weekly Newsletter Issue One is out;
2016-07-02 22:19:55;special notifications in django;"Check out django activity stream, might be nice for ya

https://github.com/justquick/django-activity-stream

It's basically /u/simvez answer as a moduleMaybe you could use GenericForeignKeys to associate your notifications with various objects.
Let's say a new FriendRequest or Invite occurs, you could have something along the lines of:

    friendrequest = FriendRequest()
    [.. add other fields..]
    friendrequest.save()

    notification = Notification ()
    notification.object = friendrequest #(or invite, or whatever)
    [..other fields..]
    notification.save()

Then, when you display your notification in your template, you'd just have to check: if the notification refers to a friendrequest, show this extra stuff. If it refers to a Trade invite, show this extra stuff, etc.

It might not be the ideal solution if your notification refers to many possible objects.  If that's the case, you could have another ""NotificationAssociation"" model in which you associate notifications with objects. That way, the same notification could be associated to other things.

Take care"
2016-07-11 23:01:14;Caching for Django on Ubuntu?;"You can also use redis instead of memcached, especially if you're already using it for something like celery.Read the docs at https://docs.djangoproject.com/en/1.9/topics/cache/. Memcached meets most needs.Do use memcache, but not if your keys are > 1MB. In that case use a database cache backend.

You can use a filesystem cache if you only have one server, but really why?You can use django for http cache but it is a waste of wsgi time. 

Better use nginx's caching features. Make sure you set the right Cache-Control headers in django. For a bit more power use varnish (local or networked) or your CDN (CloudFront etc).

For django cache backend I'd always go for redis over memcached as redis has a lot more features you can use later on. Most ORM caches like cacheops need redis, and so do for example django-channels, cellery, rq and other advanced apps. Memcached is fine for cache but a bit of a dead-end.

File cache backend is good if you need a quick simple boost without hassle but it won't go far. Also use https://pypi.python.org/pypi/diskcache/1.6.7 instead of the django file cache backend (see docs for reasons).Ya, I would look at where you are before you cache.

1) If you are being killed by static files, throw entire site in front of a CDN and you win without touching the server

2) If you are being killed by a few DB lookups, can you add index or do you actually need to cache DB results?

3) Template caching is an easy win. But maybe you need to change template engines?

Caches can cause problems (cache invalidation is hard, memory usage goes up), so just make sure you need them - then add the minimum set.
Memcached or file cache. The usual."
2016-07-11 22:00:36;Creating a template from Pandas Dataframe;"You have a dictionary object in your results. Try something like this:

{% for key, value in data %}
    <tr>
        <td> Key: {{ key }} </td> 
        <td> Value: {{ value }} </td>
    </tr>
{% endfor %}"
2016-07-11 19:57:01;Django Admin for Auth or Roll my own? Advice for project layout;"Start with django admin and be prepared to write your own, because you'll probably need to. But don't waste time on it up front!

Django auth is probably fine. 

Just start with throwing stuff in one app and refactor later. 

Generally you are worrying about success when you should be worrying about failure. Just start coding!* Start with your own User class that inherits a Django AbstractUser class - even if you don't add any fields at first. This will make things easier when you need custom stuff later.

* Use the Django admin for 'staff' or privileged users, and as far as you can. It will actually go a very long way with some experience, and providing your users are not expecting 100% polish. For admin-style pages, I rarely see an admin interface that outclasses the Django admin.

* For 'non-staff', you'll want to create custom views for entering/managing information.

* For a login page for people who won't have access to the admin, create a simple login page that uses the builtin User/auth system.

* Regarding the number of apps for your additional models - I would advise against trying to strive for 'purity', where every app is completely self contained. The reality is that you probably won't re-use these custom apps for other projects. So it's fine to have dependencies from one app to the other. Just split into manageable chunks, preferably according to logical groups.If you aren't using the built in stuff as much as possible (i.e. admin), then why DJango?  You can not use it, but seems silly. It is decent and gets you going.

So for the app things.. If you aren't gong to reuse your email and register ""app"" outside of your main app, meh.  My main program is all 1 app.  Sometimes it can not be worth the hassle to split an app up.

On the other hand, if you can cleanly split up an app - do it and you will have a cleaner codebase.as others have said, definitely start with django auth and admin. (This could include one of the auth extensions for openid, facebook, or twitter or whatever). If you don't have a lot of experience with auth and security, you'll probably waste a ton of time trying to roll your own. 

App layout seems to largely be up to whatever works for organizational purposes. In my first projects, I generally had one app which was probably as bad as you might imagine, though it was cleaned up a bit by using folders. So instead of views.py, I had a views folder then several view scripts. Django extensions and libraries generally seem to be implemented as apps. So I think a good rule of thumb to keep in mind when you come to the question of how many apps should my system have:

If you can explain what your app does in 1 sentence, keep it as one app. Multiple sentences, multiple apps. 

For example: if you have a website that users can login and watch uploaded videos = one app. 

If you have a website that users can login and watch videos. They can also post on the forum system. Users can also manage all their personal info and make statuses = 3 apps. Just use this as a GUIDELINE. your system can be 1 app if you really want. 

Keep in mind also that all apps are self contained. Meaning you can take your app folder, drop it into another project and it should work seamlessly (with minor settings.py tweak and a database migration) so if you have a user profile system, you might want to make that 1 app so on your next project you can just drag and drop it into the next project. "
2016-07-11 13:04:17;Create a Super Basic REST API with Django Tastypie;
2016-07-11 02:37:33;DRF add data to serializer;"Take a look at this Stack Overflow post.
http://stackoverflow.com/questions/17540830/composite-forms-using-django-rest-frameworkyou need to read this
http://www.django-rest-framework.org/api-guide/relations/#nested-relationships

about following True/False etc you can define multiple properties on foreign key object (user) and then include those properties in serializer ( add them to serializer fields, add them to serializer read_only_fields)also consider the fact, that you might be inclined to do smth like:

    users = UserSerializer(many=True)

but for the list serializer it will actually hit DB n-times. I prefer reload list() method of the viewset and collect all needed data there in one-two query and populate the response with them"
2016-07-18 23:39:45;Does anyone use django-bootstrap3?;"i like using bourbon.io ..very lightweightI use it. Seems fine. Wish it was a tad more extensible but works for my 1.0. can throw up an entire edit form of a 20 field model in 10 lines.> Also worried that it may be a little slow, like bootstrap is

Slow in what sense? Loading? Parsing CSS/JS? The JS itself?

Not disagreeing - genuinely curious.I prefer crispy forms for forms, then for any other thing (glyphicons, scripts, etc.) I code my own, it's lighter and saves you from forgetting how to do it ;)"
2016-07-18 19:01:22;Django security releases issued: 1.10 release candidate 1, 1.9.8, and 1.8.14;
2016-07-18 15:21:10;What is the easiest way to create a DateTimePicker for Django to use in a model?;"I think the easiest is to use the widget from django admin

http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-formLinking to my answer on SO - http://stackoverflow.com/a/35968816/1382297

Has no dependencies :)Would [django-bootstrap3-datetimepicker](https://github.com/nkunihiko/django-bootstrap3-datetimepicker) ([examples and option gallery](https://eonasdan.github.io/bootstrap-datetimepicker/)) work for you?"
2016-07-18 11:37:40;A simple password-less, email-only login system (with source code for Django);
2016-07-18 08:39:58;Create MS Word and Excel documents in Django;"Is looping supported? If yes, how'd I do that in a spreadsheet?

**UPDATE** Checked the code, didn't find any hints on how looping would work. Found some code smells though, the biggest one is manipulating XML with regular expressions and normal string manipulation. Are you sure all open document format versions have the exact same layout? And more likely, have you considered that such documents could be generated by something else than LO? After all, it's an *open* format, so the whole point is that third party software can generate it.

Another pet peeve I regularly have is when people write a framework plugin when they should have written a library that could be used by a framework plugin. You implemented a really nice and useful functionality but at this point it's totally useless for people who are not using Django while it would be so easy to support other frameworks (hint: even Django supports Jinja2 now)."
2016-07-25 17:19:57;Django Channels and Celery Example;"Missing from the article is a paragraph that explains what django channels and celery are, and why you might want to use them. From your first sentence it sounds like celery might provide some notifications to someone or something, but what is django channels?Thank you, really interesting article.

I was unable to have Celery working with Channels. Then, thanks to your example, I figured out I was missing asgi.py and a few settings (mostly Channels still running without Redis)."
2016-07-25 14:30:56;CBV vs. FBV: an eternal debate or a settled one?;"Use what's least complex in the given situation. That's all there is to it.I prefer CBVs because of the ability to use mixins.In a CBV, the `dispatch` method can be overridden if you have the exact same logic for POST and GET (or need to run logic common to both).  It basically determines the HTTP method and calls `get` or `post` accordingly.

I primarily used CBVs in my projects, though I found that using them effectively meant studying the generic classes to figure out (1) the most apt class to subclass and (2) the most effective methods to override.  I spent a lot of time reading Django's source code (which isn't necessarily a bad thing).Use CBVs with taste and restraint. Several people feel that the ones provided by Django aren't necessarily the greatest model to follow: http://django-vanilla-views.org/

Inheritance can easily get out of hand (see https://en.wikipedia.org/wiki/Composition_over_inheritance ) and lead to a form of spaghetti code as bad as anything . An IDE can help to some degree (if it has enough code intelligence to allow you to navigate the inheritance tree in both directions). But it's still a bad sign if you need a clever IDE to handle code complexity....

But you can write bad code using any paradigm. :-) FBVs can also lead to an unmaintainable mess - just a different type of mess.Just like /u/Mekhami said. For me, if i'm going to post or do any form work, i'll default to a CBV. If i'm simply returning some JSON or something super trivial, and there's no place for re-using code, i'll go with the FBV.I tend towards CBVs because I write APIs. It's much easier for me to reason about separate methods than a big if/elif. 

It's also convenient place to add permissions and view specific pre/post processors. Yes, there's decorators but as I've progressed as a developer, I've grown weary of them from a testing standpoint (if you haven't tried unraveling a chain of decorators to get to the underlying thing, it can be a nightmare). 

However, if an endpoint only handles one type of request, and doesn't need all the gunk a CBV hauls with it, then I'll use a function. Biggest reason for using CBV is it's really easy to code the cookie cutter functions. To use your example, this:

    def something(request):
      if request.method == 'GET':
        ...
      if request.method == 'POST':
        ...

Becomes just:
 
    class something(CreateView):
        model = some_model

That's it. So much faster.

Use CBV when that's easier, and FBV when *that's* easier. I use a mix of both, but mainly rely on CBVs. Also, as others have said, mixins are fantastic.I didn't like CBV for my particular app, I think because the views I wanted relative to my models didn't fit prettily inside a class in a way that satisfied the containerized methodology of classes (I forget the vocabulary word).

I think that if you have a set of views that does fit nicely in that sort of set up for your app then it makes it look much cleaner and easier to see than the if/else statement, which kind of tweaks my ""you're not supposed to use magic variables"" nerve.

All in all do whatever is best for youIf there were a clear ""always use one, never the other"", Django itself would be leading that charge.

But there isn't a clear ""always use one, never the other"". Both have advantages and disadvantages depending on the situation, and so both are supported and both should and will be seen in the wild.Took me a bit to get the hang of them, but definitely tend towards CBVs now.  The https://ccbv.co.uk/ site helps a lot. 

I like the reusability afforded by CBV.  Nice to be able to subclass when I just need to change some slight behavior between two views.  The ability to use mixins is nice too. well it depends on what you want to do, usually fbv are shorter to write but if for example you want to call other functions inside it you always have to pass your arguments like function(request.user, form.clean_data[""field""]) while in a cbv you can just call self.function() and then use self.request and self.form 

also class based generic views are quite useful since you don't have to reinvent the wheel each timeIt's entirely circumstantial.

I mostly use CBVs with mixins unless it doesn't make sense 

I prefer CBVs, I never really liked the old request method when I was starting out, I found it a bit clunkyCBV are better imo but they don't solve issues if you don;t use them right just like FBV. Nothing wrong with FBV, just think about testing. Ideally you want to test small chunks of code. So if you use CBV but if your function grows to have 10 functions in your class.. thats not easy easy to test if you dont use mixins (just like FBV with all the code inline). 

Personally i like CBV because it allows you to inject/test things easier but its easily mocked if you FBV correctly (which i find only comes from experience)."
2016-07-25 11:01:56;What do most of use for e-commerce?;"I've used Oscar, it's good, but can be a bit complex. Everything is designed to be overridden, so you can keep up to date.
I haven't used Saleor, but it doesn't have much documentation, and from what I can tell, you need to fork it to customise it, unlike Oscar, which makes it a bit simpler.[libreshop](https://github.com/libretees/libreshop) is a Django eCommerce solution developed by redditor /u/jcontra-libreteesWe use Oscar at edX.Saleor's maintainer reporting in for duty. Also one of the many authors of Oscar.I like [Cartridge](http://cartridge.jupo.org/), which ships with [Mezzanine](http://mezzanine.jupo.org/).  "
2016-07-25 06:34:15;Andrew Godwin speaking at PyBay conference on Django Channels and Distributed Systems on August 19-21;
2016-07-24 23:41:51;Why would my total server response time be much longer (over 20x) than my SQL queries?;"Where are you and where are your serversYou can use New Relic. A free account will show you enough to figure out where the bottleneck is.

Check out https://docs.newrelic.com/docs/agents/python-agent/getting-started/new-relic-pythonRun a profiler. I'd say take a minute to time your response, line by line. You can use a profiler for this, but I've never had a good experience setting it up, but either Pycharm (if available to you) or DDTB's line profiler are good places to start. A simpler way is to just put take a difference in time in different places in your 'problem' functions to see where the processing is being done. Unfortunately, that won't help much for timing templates, but I find that liberal use of caching helps a lot if complex template logic is the issue."
2016-08-01 23:23:21;Checking users in system based on clients mobile contact list;if anybody knows how to properly format code on reddit that would be helpful as well
2016-08-01 22:02:55;Stuck with Django and Angular;"I don't know of any good tutorials out there, but I've been using Django with Angular for the past year and a half or so and have found that [Django REST Framework](http://www.django-rest-framework.org/) is the way to go for making the API. Reading their docs and tutorial is very helpful so I would probably start there, and then google for answers after that if you find it insufficient. Since the API and Client are supposed to be decoupled, you can develop the api independently of the angular client and test the api with something like POSTMAN or Advanced Rest Client without even starting on the UI Development. Once you are ready to connect the two, make sure you have added CORS to the Django settings so the client will be able to talk to the Django server.

I've had the most success with [this Angular project generator](https://github.com/Swiip/generator-gulp-angular). It sets up the basic project structure and then you can easily spin the server up and run tests etc. Though I don't use it to generate any scaffolding further than the base project because I like to be able to know how to do all of that myself!

Are you having trouble getting set up for local development, or are you trying to figure out how they would work together in a production setting? Sorry if this was not detailed enough of an answer; I'd be willing to answer any questions you have as they come up! "
2016-08-01 18:59:18;Django 1.10 released;"Good news. I'm really excited about the full text search in PostgreSQL.Channels is not included in this release as it was originally planned. Looks like they're holding it off as external package until it's more mature.I'm a novice on Django, so what should I be excited about with this release? ... [with a broken testsuite](https://github.com/django/django/commit/24123c31362b5f3783d84d133c160e9fe16805fe) ;-) \*grin\* > The inspectdb command lets you choose what tables should be inspected by specifying their names as arguments.

Finally!!"
2016-08-01 18:32:11;Help with virtual environment;"Probably, you need to activate the virtual environment.  Do you remember what you named it, or where you put it?  Do you remember if you installed virtualenvwrapper?  If you did install virtualenvwrapper, you should just be able to 

    workon <name>

if not, then you'll have to source it manually

    . ~/path/to/<name>/bin/activate

If you can look through the tutorial again and see if they do either of the above, then re-running that step should fix you right up. you need to activate the virtual environment before running python manage.py runserver command.
> source <virtual env folder name>/bin/activateuse [pyenv](https://github.com/yyuu/pyenv) manage your python env. then install django by pip in a python env."
2016-08-01 16:16:24;Multiple domains for same project;"It's been a while (I now use gunicorn) but:

You need to point the domains to the IP of the server you want. other_site.com is the same difficulty as other.main_site.com, though for the latter main_site.com you can set a short TTL and make it quicker to add new subdomains for testing. Then you will need to create a <VirtualHost> container in httpd.conf for each site (then preferably move to /sites-available and sym linking to /sites-enabled).

In each VirtualHost add a WSGIScriptAlias line pointing to your .wsgi settings file for that site. In that .wsgi site change os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""myproject.settings"") to the settings file for that app.

For each app you can include the main settings file then just over-ride what you need to.

Phillip.If I got your problem right, you should be able to use a [reverse proxy](https://www.nginx.com/resources/admin-guide/reverse-proxy/), whether you use Nginx or Apache. If you need some different URLs based on the domain, you should check out [django-hosts](https://github.com/jazzband/django-hosts). I haven't used it extensively, but have you looked at the built in sites framework? If you are running linux, [this may help](https://docs.google.com/document/d/1UQKNLHMDH2wsEt5ygq2toS5rhGZCbqQTjkDVezsUEJw/edit?usp=sharing).

Unless you simply use django-hosts.First read [How Django processes a request](https://docs.djangoproject.com/es/1.9/topics/http/urls/#how-django-processes-a-request).

You can develop a middleware to configure a request.urlconf variable depending on your domain name.

I hope that could be useful for you (and you can understand my bad english)."
2016-08-08 20:59:04;"Extend Django Templates Smartly: Override ""base.html""";"Is this really news? [The docs](https://docs.djangoproject.com/en/1.9/ref/templates/builtins/#extends) explicitly state that `{% extends %}` accepts a variable (as do many other template tags):

> This tag can be used in two ways:
>
>   - `{% extends ""base.html"" %}` (with quotes) uses the literal value ""base.html"" as the name of the parent template to extend.
>
>   - `{% extends variable %}` uses the value of variable. If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a Template object, Django will use that object as the parent template.

Great tip! Going to modify my starter template to do this. Thanks! Maybe a little bit better, if you're using class-based views anyway:

    class BaseTemplateMixin(object):
        base_template = None
    
        def get_context_data(self, **kwargs):
            context = super(BaseTemplateMixin, self).get_context_data(**kwargs)
            if self.base_template:
                context['base_template'] = self.base_template
            return context

Then for every view that uses this:

    class MarketingView(BaseTemplateMixin, TemplateView):
        template_name = 'marketing_landing.html'
        base_template = 'base_marketing.html'

Saves you from having to set the base_template value in the context every time. Just inherit from BaseTemplateMixin if you plan on overriding the base template (or do it anyway; the mixin doesn't do anything if you don't set a custom `base_template`)."
2016-08-08 19:23:52;How can I generate docs/use the browsable API when I have a custom user model?;"A custom user model has no effect on the DRF/Swagger docs. We only use custom user models for most of our services at edX.

Can you share your code? It is clear that there are some configuration issues."
2016-08-08 15:24:05;django-hijack v 2.1.2 is out!;"* Django 1.10 compatibility
* Add template filter request|is_hijacked
* Improve error handling in notification template tag


Thanks for the update - one of our standard apps to install now. "
2016-08-08 14:59:23;My first Django App: App for the open tus protocol to powering resumable file uploads for your django projects.;"Just a heads up for anybody thinking of using this...

This:

            \          SORRY            /
             \                         /
              \    This page does     /
               ]   not exist yet.    [    ,'|
               ]                     [   /  |
               ]___               ___[ ,'   |
               ]  ]\             /[  [ |:   |
               ]  ] \           / [  [ |:   |
               ]  ]  ]         [  [  [ |:   |
               ]  ]  ]__     __[  [  [ |:   |
               ]  ]  ] ]\ _ /[ [  [  [ |:   |
               ]  ]  ] ] (#) [ [  [  [ :===='
               ]  ]  ]_].nHn.[_[  [  [
               ]  ]  ]  HHHHH. [  [  [
               ]  ] /   `HH(""N  \ [  [
               ]__]/     HHH  ""  \[__[
               ]         NNN         [
               ]         N/""         [
               ]         N H         [
              /          N            \
             /           q,            \
            /                           \

...is currently the entirety of the documentation.

That being said, this sounds awesome for anybody who needs to deal with users who upload large files.Are that all files uploaded or is missing something into github project? "
2016-08-08 11:12:28;Calender Functionality, Showing the event on everyday it occurs;"I'm sorry but I find your post confusing because of this sentence:

>i cant seem to get the events to repeat within the table on the days they are taking place for example. from 08/08/1016 to 10/08/2016 has 3 days the event occurs on but it does not show in them 3 days only the first day of the event

You want the event to to repeat on more than one day on the calendar?  Or within one day on the calendar?

If it's the former, your data isn't setup correctly, you'll have to correlate it better in your `view` method to streamline making a template.

This code `{% for day, occurrences, current in week %}` dictates that you're going to cycle through days of the week one-by-one, if `occurrences` is supposed to feed-forward to any other future dates, it just won't, since it only is set for the scope of this loop.

If that's not what you're saying, then I don't understand your question, because you wrote this:

> has 3 days the event occurs on but it does not show in them 3 days only the first day of the event

Which makes me believe it's correctly showing data all on one day.

For your consideration:  Perhaps you should run a loop in your view that processes all of the days of the month into a dictionary, checks the occurrences variable, if it's >1 then adds that ""event"" to that days dictionary.  Then the template you only have to display what's already in the dict, rather than trying to use the reduced logic that's available in templating.
Your event is completely restricted to the `<td>` that it's rendered inside, the only way to make it overflow the cell boundary is with the appropriate css.

I'm not sure what you're css is like, but this is what I would do (in your situation, not if doing this from scratch):

Make an event that spans multiple days a floating div that overlays across whatever width the required number of days is.
i.e. If one day cell is 100px, a two-day event is 200 px with the appropriate css to allow it to escape outside of the table cell.
You need to make this a dynamic class though, to adjust as the user adjusts the window dimensions, or a percentage based width should do the trick.

Also maybe consider getting rid of the table altogether, and use div's instead, with the appropriate css.

One last question for you:  What if the event spans the weekend and needs to jump below to the next line?  Did you put the logic in your dataset for that?  Again, something that would best be handled in the `view` and not in the template, IMO.

I understand you fully pall you see I'm from a php background and got this package and it was half done, I just wanted a decent calendar and I got this crud :( I'll take everything into account and try and re-master it Since you PM'd me and are still struggling I thought I'd address this here so everyone could see the full dialog.
This is just to illustrate the concept, I'm not dealing with your code or your models since I want to keep this concise.

In your view method for the calendar in `views.py`:

1. Pull the events from the calendar, I don't know how you have the data arranged.
2. Format the events with this kind of idea in mind:

Sample resulting `events` variable:

    events = {'skipdays': 5, 'data': [
    [{'event1': {'occurrences': 3,  ... any other data you need, colors, titles, etc}, 'event8': { ... }, 'event9': { .... }],
    [{'event2': {'occurrences': 1, ... any other data you need, colors, titles, etc}, 'event7': { ... }, 'event10': { .... }],
    [{'event3': {'occurrences': 1,  ... any other data you need, colors, titles, etc}, 'event6': { ... }, 'event11': { .... }],
    [{'event4': {'occurrences': 2,  ... any other data you need, colors, titles, etc}, 'event5': { ... }, 'event11': { .... }],
    ]}

`skipdays` is just something I threw in there to make rendering the calendar easier.
`occurrences` is the number of days to span the event, now you can take out all of the intelligence from the template.  That's all handled in the back-end, 
this will take more that I haven't included, but I'll let you figure that out.  Notice how `data` is a `list` of `dicts` such that every single day has *all of the information* it needs?
Each day must understand it's position, what it's working on, you cannot pass data forward in a for loop without making a lot of really ugly code, it's way better to pre-format the dataset so that each loop has all of the information it requires.
The key to this is also understanding where the week ends in your back-end.  If you have a 3-day event that starts on a saturday, the ""events"" variable would look something like this:

    events = {'skipdays': 0, 'data': [
        [{'event1': {'occurrences': 1,  ... any other data you need, colors, titles, etc}, 'event2': { ... }, 'event4': { .... }],
        [{'event1': {'occurrences': 2, ... any other data you need, colors, titles, etc}, 'event3': { ... }, 'event5': { .... }],
        ['event6': { ... }, 'event7': { .... }],
    ]}

You see how `event1` has an `occurrences: 1` for the first day, but shows up again on the next day (Sunday, beginning of the week in this example) with an `occurrences: 2`?  With our template code below you'll see why this is important.  The calendar template doesn't have any intelligence about events and how long they last, it's iterating through the loop and attaching the appropriate css data.


In your `template` (focusing only on row rendering):


    <tr>
    {% for day in events.skipdays %}
        <td class=""blankday"">&nbsp;</td>
    {% endfor %}
    {% for days_events in events.data %}
        <td>
        {% for event in days_events %}
            <div class=""cal-occurrence-{{ event.occurrences }}"">{% forloop.counter1 %}</div>
        {% endfor %}
        </td>
        {% if forloop.counter0|divisibleby:6 and not forloop.last %}</tr><tr>{% endif %}
        {% if forloop.last %}</tr>{% endfor %}
    {% endfor %}

`occurrences` basically means `overflow`, how many days should an event flow-over from where it is today?


Now in your `css` file you need to create the proper styles:
`cal-occurrence-[1 through 7]`
which will have overflow properties and width properties (such as percentage) that match whatever you have planned for your calendar width.

I hope that helps.

"
2016-08-15 23:52:25;What happened to my admin? AttributeError: 'WSGIRequest' object has no attribute 'user';"Is this with a live environment or the `runserver` command? It sounds familiar and from a quick Googling it looks like the issue is usually a configuration thing with middleware. Can you post the whole traceback?

Here's [one example of a configuration problem.](http://stackoverflow.com/questions/37949198/wsgirequest-object-has-no-attribute-user-django-admin) Here's [one that's due to ordering of middleware](http://stackoverflow.com/questions/26576192/wsgirequest-object-has-no-attribute-user). Here's [one where a required middleware is missing.](http://stackoverflow.com/questions/9579729/troubleshooting-wsgirequest-object-has-no-attribute-user)"
2016-08-15 19:32:19;Django 1.10 Validate all database connection in settigns.DATABASES. but ONLY in `migrate`;"I had a problem since I like to have a master DATABASES list and then only use the one I need for each environment.

If you anyone had a problem suddenly with running migrate, this is not written release notes."
2016-08-15 15:15:28;How to write a Django Detachable App ?;"It is probably a bad idea to risk data integrity issues for something that you *might* need in the future, but if you must you could just use a `(Positive)IntegerField` instead of a `ForeignKeyField`? There is nothing wrong with an app or model having dependencies. But I understand the desire to detach. 

You can always do it the old school way as mentioned above, by using integer fields. This kinda would, and kinda wouldn't add a lot more work. Aren't foreign keys just a positive integer field with constraints attached?

If you want the ability to detach from django, can't you just remove said constraints when you are ready to do so?Would generic relationships not be a better solution?: https://docs.djangoproject.com/en/1.10/ref/contrib/contenttypes/#generic-relations

Give us a specific example of the kind of app you want to be 'detachable' - there might be a better solution entirely.

Using 'pseudo-keys' (i.e. PositiveIntegerFields without db-level constraints) sounds like a horrible idea and I struggle to think of any real-world benefit that wouldn't be better solved some other way.Finally, used django autocomplete light's select2 and after overriding a function gave me the desired result :D"
2016-08-15 06:23:59;I just published my first book on Django!;"To give you guys more context, here is a list of the chapters and the things they cover:

1. A blog application that introduces the reader to basics of Django. Creating models, views, templates. Nothing fancy.
2. A Hacker News inspired link sharing site that shows the reader how to rank the submissions with a *very* basic ranking method. Introduces users to model concepts like self-referential (recursive) foreign keys, and queryset methods.
3. A Nagios inspired web application with an API to get updates on data-metrics from monitored nodes. Introduces advanced ORM concepts like `distinct()` queries.
4. A basic app that introduces readers to the Django admin app, and how to customise it.
5. Walks the users through creating a basic multi-lingual app using Django translation utilities. Also shows something different than most translation tutorials and tells the reader how to add translation capabilities to models and user generated content.
6. An advanced app that shows the user how to use Elasticsearch and integrate it with Django using the `elasticsearch_dsl` library.
7. This one feels like a bonus chapter. It shows the reader how Django forms work below the surface, and how to create dynamic forms.

I'm happy to answer any questions you might have, and would love feedback!It's a pretty decent one too. I've got a Safari Books Online subscription and it's one of the ones that I more frequently consult. I like the variety of projects you demonstrate, rather than doing just one more blog of to-do list for the entire book.Wow congratulations on publishing :) Do you write up anything about the process anywhere?Two low ratings on Amazon thoMy publisher has finally provided me with a link to the sample content for the book so you guys can take a look and get a small feel for how the book sounds like.

You can find it at [https://www.packtpub.com/books/content/quick-user-authentication-setup-django](https://www.packtpub.com/books/content/quick-user-authentication-setup-django)"
2016-08-15 04:01:14;Need a tutorial or example on users logging into website;"I would second [django-allauth](https://github.com/pennersr/django-allauth) because it has an incredibly comprehensive collection of adapters to a bunch of OAuth and OpenID providers.

There's also [python-social-auth](https://github.com/omab/python-social-auth).

The [authentication grid](https://djangopackages.org/grids/g/authentication/) on Django Packages has a great list of authentication apps for you.First you need to create a User Model in your Django project. The easiest way to do this is extending the existing user model, which is well documented. If you need a more complex user structure, look up ""custom user model"".

When you have this working, you need to install some sort of social media authentication. I prefer ""allauth"". This is also well documented(Google is your friend). Then you need to:

1. Edit your settings.py to install the right middleware. 

2. Create a Facebook app which you will link to your domain. 

3. Attach it to your user model. 

phone opHow To Achieve this Goal. Step-by-Step

Step 1:
Install Python Social Auth for your application. This will be used to allow social logins. eg.) facebook

https://github.com/omab/python-social-auth

This step requires a good bit amount of work. Grab your facebook credentials and read the documentation on how to setup api keys and credentials successfully in your settings.py or set them to your ENV.

Step 2:

Design your profile module. 

Step 3:

Create your login, Python Social Auth will help you render urls need to process the authorization from the outside source

This step is where you will have the most work. 

Step 4:

After login, grab the needed data and prepopulate your profile, attach a user object to the profile and save.

You will be able to handle checks to see if the user is logged in or not. Middleware objects might be an idea if you want any page to be able to be triggered by a social auth login, but not required.

Python-Social-Auth isn't complicated but can be a headache to start.

Best of luck to you.




"
2016-08-22 20:01:30;Ansible Playbook for common Django deployments;"Did you mean to keep your keys in those env_vars files?  If they're real keys, I'd issue new ones, pronto, and also get them out of the repository. 

https://github.com/jcalazan/ansible-django-stack/blob/master/env_vars/base.ymlWhy gunicorn instead of uwsgi?Any chance you can add a Redis role as a drop-in replacement for RabbitMQ?I just was about to star this and realized that I already did. Thanks.Nice job. It would be so good if there was an ""official"" playbook from the Django core developers themselves. Hosting Django is still by far the hardest part about Django."
2016-08-22 17:10:54;@TopDjangoNews is confused today;"Oh well...

Maybe we should ask Tarantino to call his next movie ""Ruby unrailed"" or ""PHP unchained"", just so it's a fair game!Add it to the list ""Automation gone wrong"" :)"
2016-08-22 16:08:09;[Tutorial] DRF Image Upload with AngularJS;
2016-08-22 12:21:43;Easy, simple content management for small parts of app for client;Sounds like a perfect opportunity to use [Django's built-in Admin](https://docs.djangoproject.com/en/dev/ref/contrib/admin/)I would look at wagtail (wagtail.io).  Its clean, and pretty simple.Sorry, not here all that often, but yeah, Wagtail is a 'whole site' kind of solution, though you could just put it under the /blog url, and have the rest of the site be plain django
2016-08-22 11:32:56;Using a ModelForm for ImageUpload: How to access the mobile Camera on click?;"You can use a ModelForm but you need to override the widget to add the accept attribute:

    class MyModelForm(ModelForm):
        class Meta:
            widgets = {
                'field_name': forms.FileInput(attrs={'accept': 'Image/*;capture-camera'})
            }"
2016-08-29 12:57:46;Finally stable release of Django JET - responsive and fresh admin interface;"I'd take a good look at that page again, there are a lot of spelling mistakes.How much does this break 3rd party admin extensions? I know Grappelli has issues in this area. (django-filebrowser was developed as part of Grappelli and requires a lot of effort to keep the non-Grappelli version in sync).

The problem is - an admin reskin that replaces the templates is essentially a fork and will often require forks of other admin extensions to maintain compatibility.

Another issue is that an admin reskin that replaces the templates is going to require a reasonable amount of effort to keep up with new Django versions. Any refactoring of contrib.admin templates will need to be reflected in this app.

Combine that with the fact that this requires a commercial licence for many of us and there might be some cause for concern about it's long term viability (assuming one cares about the admin ecosystem).

I don't want to throw FUD in the air. I might be overplaying the concerns about compatibility. I'm mainly interested to know if the developers or other users have considered the issue and are interesting in discussing the topic. I've always avoiding admin skins that replace templates and I do wonder if I'm exhibiting an excess of caution in this area.Um, why is the person's table populated...with seemingly real data?>Standar**t** Django controls are improved to make your work with the admin interface painless. Don't waste your time **for** excess navigation, admin interface should be conv**i**nient and efficient

Standard, with, convenient.

Should really say something like

>Improved Django controls for a painless admin interface. Don't waste your time with excess navigation, it should be convenient and efficient.> using AGPLv3 code in your programs make them AGPL too

You wot mate? Please no. Looks nice but I'll never use it.

I am super impressed by the AGPL license, but the demo looks to have a lot of space taken up by a very basic app.Note that this is not gratis. I really don't like libraries that wave around ""free"" and then ""oh by the way we picked license for you and it is some GPL"".Not criticizing the project, but since it defaults to AGPL it's unfortunately something I can't even look at the code for, since anything relevant to what I do (which involves commercial work) can't afford contact with AGPL'd code."
2016-08-29 09:18:40;How you have implemented Django's on delete cascade behaviour after overriding delete function ?;"I've done this on a per-case basis with a delete signal, wasn't very elegant. So I've been eyeballing this package, apparently it simulates cascading, maybe you can use it or get something from their methods: https://github.com/scoursen/django-softdelete Most of the times I've wanted both soft delete have been when I never access child objects except through the parent.

So typically an Order with OrderItems. I don't need the cascade because I'm unlikely to access OrderItems directly anywhere - filtering out deleted orders is sufficient.

Conversely - with a Book/Author model - deleting either means I don't want a cascade.

I'm curious about your specific situation?"
2016-08-29 02:38:51;Comparing Wagtail, Django CMS and Mezzanine;"Quick summary for those of us who can't stand sitting through videos?This speech felt rushed. I basically use Mezzanine because I was suffering from 'paralysis from analysis.' It would be nice to get this information in a concise edited video, rather than the lecture style.Should have also included FeinCMS. It's basically a better version of django-cms.I went with Wagtail for my personal site, and I'd probably use it if I designed a site professionally, too. I chose it because I really like the ""lego blocks"" approach that Wagtail offers. Also, it's the only one I used that didn't have bugs during my tutorial setup."
2016-08-29 01:40:01;Can't seem to figure out this query;"User.objects.filter(groupmembership{{underscore}}set__group={{your_group}})

Edit: actually let me pull out laptop 

Edit: tested, should work"
2016-08-29 01:35:00;NoReverseMatch Error after CreateView Submit 0 pattern(s) tried;"I had the same error when I was trying to redirect to a view with args and had to change the name of the view to '<appname>:<viewname>' in the redirect shortcut. That might also apply to the reverseSo you've only included the app, not the project that loads it so it's hard to know exactly what's happening but most likely you have namespaced the include of the app urls.

In your main project's urls.py you probably have something like:

    from django.conf.urls import include, url

    urlpatterns = [
        url(r'^rater/', include('insurancerater.urls', namespace='insurancerater')),
    ]

If so, to reverse it you need to do 

    reverse('insurancerater:account-detail', kwargs={'pk' : self.id})

Replacing ""insurancerater"" with whatever's inside the namespace='' bit in your actual code.

More info here:

https://docs.djangoproject.com/en/1.10/topics/http/urls/#reversing-namespaced-urls"
2016-09-05 18:46:24;django-polymorphic now supports django 1.10;
2016-09-05 18:44:02;Searching multiple tables?;"Django-polymorphism is cool and I've used.

Depending how similar the tables are consider abstract inheritance (and allow the non-shared fields to be nullable) or concrete inheritance. See https://docs.djangoproject.com/en/1.10/topics/db/models/#model-inheritance

Django-polymorphism is essentially concrete (or multi-table) inheritance. So there is some cost in terms of extra joins. 

Depending on your data other options include sticking the non-shared data in a Postgres JSONB field. It all depends on your application.[deleted]You probably want to look at [django-haystack](http://haystacksearch.org/) as you're sure to outgrow simple searches like this."
2016-09-05 10:47:13;Tags for inserting auto-generated website thumbnails (screenshots via ShrinkTheWeb API) into Django templates;Whilst it's not perfect, I do prefer this approach to — for example — a ``GET`` request lazily creating thumbnails. Something a little ugly about that...https://support.shrinktheweb.com/Knowledgebase/Article/View/118/14/django-shrinktheweb-template-tag - just found some additional documentation about these tags
2016-09-04 14:48:46;How to approach this:;"Learning Django will help for companies that use Django. Learning Django won't magically make you attractive to all employers, however. If you haven't already, checkout /r/cscareerquestions to get advice on finding a job in the industry.

P.S. I took a look at your linked Github repo, and I have no clue what I'm looking at when I view your code. Add some comments to each file explaining the goals of the scripts/notebooks. Also, you probably shouldn't post a pirated book to your Github repo. Finally, class assignments don't really provide a good understanding of your abilities. Give yourself a project, whether it be with Django or some other language/framework. Show that you have the ability to understand and solve a problem.>is django really the way to go

That totally depends on what you're trying to achieve. I've been using Django for the last 5 years or so and love it. If you want to learn Django, the best place to start is the official [tutorial](https://docs.djangoproject.com/en/1.10/intro/tutorial01/). Work your way through that, start to finish, and you'll come out with a fairly solid understanding of how to build Django projects. If employment is your sole aim then do a survey of vacancies in your area and get a feel for the skills in most demand.

However I suspect you aren't wholly motivated by 'getting a job as soon as possible' but are also swayed by your interests and preferences. Learn Django because it's a great technology. If you are a self-starter and quick at picking things up then it won't matter what you learn now as it will be building your general skills.

If geography is a problem, have you considered remote work? 

EDIT - I took a quick look at your github - it's a bit of a turn off to see a directory full of book exercises. Build stuff for yourself, your friends or anyone whether paid or not. You'll end up forking enough projects or creating open source components even if the stuff you build isn't itself open source.Isn't LincolnLoop in Chicago? Fairly famous Django shop...  But tried local meetup groups?"
2016-09-04 13:17:01;Django 1.10 Official Tutorial step-by-step solution;helpful thanks 
2016-09-12 20:12:19;Keeping website part in its own app;"If an app is going to be including directly in source control (eg: for an `awesome_quizzes` website/project, a `quizzes` app, and a `quizzes_list.html` template) I put it directly in the app folder itself, eg: `quizzes/templates/quizzes/quizzes_list.html`.

If I've installed an app through pip and I have it in my `requirements.txt` file, I override the app template in the project's template directory, eg: `awesome_quizzes/templates/accounts/profile.html`.

So the final project structure (ignoring some irrelevant files), looks like this:

    requirements.txt  # The project's requirements
    
    awesome_quizzes/  # The project's main directory
    
    awesome_quizzes/settings.py  # Project's settings file
    awesome_quizzes/urls.py  # Project's root URLConf
    awesome_quizzes/views.py  # Project's root views, like the homepage
    
    awesome_quizzes/templates/base.html  # The project's root base template
    
    # Directly modified; extends project's base.html template; template for the homepage
    awesome_quizzes/templates/home.html
    
    # Directly modified; overrides accounts/<template-name>.html
    # template, and very likely extends the project's base.html template
    awesome_quizzes/templates/accounts/profile.html
    
    quizzes/  # The app's main directory
    
    quizzes/urls.py  # URLConf for quizzes app
    quizzes/views.py  # Views for quizzes app
    
    quizzes/templates/quizzes/  # The namespaced template directory for the quizzes app
    
    # This extends the project's root base.html template, and all templates in the quizzes
    # app extend from this
    quizzes/templates/quizzes/base.html
    
    # Directly modified; extends quizzes/base.html
    quizzes/templates/quizzes/quizzes_list.html

and the `requirements.txt` file will include

    django-accounts==x.y.z

so I can install the `accounts` app with `pip install -r requirements.txt`.I prefer to keep the templates in a project-specific template dir unless I plan on making part of my project reusable. It simply makes for a flatter directory hierarchy.Unless you are specifically going to make a reusable app, don't worry about where you put stuff. I've spent the last 5 years trying to ""get it right"" and in the end am still annoyed that it never seems right. Django introduced an app concept on top of a perfectly good Python module system and it causes nothing but mild annoyance."
2016-09-12 20:08:12;Some Questions About Wagtail;"I haven't used wagtail before, but a found last 3 pretty easily on the http://docs.wagtail.io/ site.

3) [Tags](http://docs.wagtail.io/en/v1.6.2/reference/pages/model_recipes.html?highlight=tags#tagging)

4) [Contact forms](http://docs.wagtail.io/en/v1.6.2/reference/contrib/forms.html?highlight=contact%20form)

5) [Some seo fields](http://docs.wagtail.io/en/v1.6.2/reference/pages/model_reference.html?highlight=SEO#wagtail.wagtailcore.models.Page.seo_title)For an example of a WordPress-style blog in Wagtail, see the excellent 'puput' project: https://github.com/APSL/puput

For more support from the Wagtail community, try the Google Group at https://groups.google.com/forum/#!forum/wagtail or ask a question on Stack Overflow and tag it 'Wagtail': http://stackoverflow.com/questions/tagged/wagtail"
2016-09-12 11:13:44;Yet another image cropping library for Django with extra features and more flexibility;That screenshot looks amazing, well done! =DA demo site http://demos.ramast.me/imgcrop
2016-09-12 03:47:41;is there any django packages to make this image grid on the post?;"Django is a web framework that helps you deal with the request-response cycle. How the website (or data) is displayed when the request is returned to the client is (apart from templates) not Django's business. You can, however, style your data via CSS.

I recreated the styling you're after in [this jsfiddle](https://jsfiddle.net/1dnoyamr/).On the post? Django doesn't have anything to do with the way your data is styled.I would suggest using twitters bootstrap. Has nothing really to do with django just a responsive css framework with a good grid system that is what you need."
2016-09-12 01:50:35;Pretty URLs with GET requests;"You want to use what Django calls Named Groups: https://docs.djangoproject.com/en/1.10/topics/http/urls/#named-groups

`url(r'averages/(?P<country>\w{2})/(?P<city>\w+)/(?P<state>\w{2})/(?P<month>\d{2})/(?P<year>\d{2,4})/$', views.whatever)`

If you are using FBVs, the values will be in `**kwargs`.  If you are using CBVs, they will be in `self.kwargs`You can use redirects. That's how I handle my URLs with named groups.> it would fail because no requests would be made.

What?"
2016-09-19 21:56:26;Anyone upgrade to macOS Sierra yet? Any issues with your dev stack?;"I have a customized Python environment built using standard tools like [pyenv](https://github.com/yyuu/pyenv), [Homebrew](http://brew.sh), heavily-customized Vim and PyCharm. I have existing installations of Django 1.10, PostgreSQL 9.5, Redis and the full set of WebPack/Babel front-end tools. I did an in-place upgrade from El Capitan to Sierra DP6 and then onto the GM releases. Everything continued to work without modification.

> wondering if macOS ships with Python 3

It does not. But in general you should be using your own installation of Python 3 anyway, using pyenv, Homebrew, etc. rather than the system-provided Python interpreter.The upgrade shouldn't mess with an pre-installed software.  If it does, then it's just a matter of checking to make sure.  Either way, if you want to avoid this sort of issue in the future consider moving to a virtualized environment (virtual machines with virtualbox or containers with docker).  That way the only thing you have to worry about is whether or not VirtualBox/Docker is supported.I use PyChram + Vagrant / VMWare for my Python development. Zero issues.

I also use Homebrew versions of Python locally, and am running it off of XCode 8. Again, no issues.I've been on it since day one, everything stayed working unlike El Capitan. It's stable.Been running Sierra for a couple of days.  The only thing I had to do was change homebrew permissions on a folder (though I think this has been fixed in homebrew now). I updated yesterday and it didn't break anything for me. I use virtualenv, postgresql, python2.7, django 1.7.11 :*( for now, homebrew to install nginx and several other app dependencies."
2016-09-19 17:10:45;master app for all apps;"Your main page etc. is an app. It is the app in fact. Anything else is also an app. Your JS and CSS are static files. there is a generic view called ""IndexView"" to handle without efforts .

JS, CSS and images are **staticfiles**, you can consult the official documetation of django on how to handle staticfiles.For the javascript / css, usually shared base templates and other generic files live in /templates and /static which are listed in the TEMPLATE DIRS and are first in the paths that django will search (https://docs.djangoproject.com/en/1.10/ref/settings/#dirs)

You might have something like

`{% extends ""base.html"" %}` in your individual templates which will search

templates/base.html
app/templates/base.html
app2/templates/base.html
...

Because of the search path, it's very common to have the app static and template dirs look like

`app/templates/app/base.html`

so you can have a base template for an app that doesn't pollute the other apps.

As for the index, you just have to chose an app for it to go in. I often put it in a separate app called splash along with my logged out pages, but that implies a certain type of project that you're building. Put it in an app where it fits in. If it doesn't fit into any of the apps (different concerns, different logged in status, different base templates), make a new app."
2016-09-19 14:24:01;Django forms with sessions and/or formwizard or pagination help;"Is your user logged in at this stage? If so you should be able to access the user ID from the request in the second view to either prepopulate or hide the relevant input fields.

It sounds like the error could be that you're not actually accessing the same object between views (I.e. you create one and populate user in view 1 but don't pass the same object to view 2.)

The easiest way to do that is with a URL parameter to view 2 containing the PK. 

*Disclaimer - it sounds like there's probably a better way to achieve what you're after. Can you post code so we can take a look?Can you post the entire stack trace? It's possible this error could be coming from the first UserProfile form."
2016-09-19 11:56:02;Path for an InMemoryUploadedFile? - Not sure how to access this uploaded file;"I discovered the hard way that sending InMemoryUploadedFile to a celery task is a ""bad idea"" since it can get garbage collected away while the job sits in the task queue. Grrrr. Accordingly I save the uploaded file to a temp file as follows:

    import tempfile

    tempf, tempfn = tempfile.mkstemp()
    try:
        for chunk in infile.chunks():
            os.write(tempf, chunk)
    except:
        raise Exception(""Problem with the input file %s"" % infile.name)
    finally:
        os.close(tempf)

The tempfn is the filename that you need for your other function call.
"
2016-09-19 11:00:46;This helped me understand Class Based Views;"I use CBVs almost every day and every time I still use https://ccbv.co.uk  - great site. They really should integrate it into the official django docs.Here's a much more recent one by the same guy.
https://www.youtube.com/watch?v=BJiOERA49ZQ

"
2016-09-26 20:34:56;Logging user behavior and actions?;"There is an unofficial industry standard for this kind of data, which I've observed through using products including mixpanel, kissmetrics, segment and google analytics over the years: every action should be stored as a time stamp, -a user ID (or guest cookie value), an action name and zero or more ""properties"" which are key/value pairs.

For example, when a user views a listing (e.g. on airbnb) you might store:

User15566 listing.viewed 2016-09-15T13:45:42 {""listing_id"": 57854}

By far the easiest solution here is to use a third party. Having tried pretty much everything, my current favorite is Amplitude which also has a very generous free tier.

If you are determined to do this yourself, be aware that this is an unbounded dataset which can grow very quickly. If you aren't careful, it can quickly become the largest table in your database by miles. This can negatively affect performance abs backups, and due to the size of the data you may find that SQL isn't the best tool for querying it (once it gets large enough you'll probably want to use a map/reduce solution of some sort for queries).

You could use log files, which have worked well for this kind of thing since the beginning of the internet - and thanks to Amazon S3 even terrabytes of logs are affordable to store these days. Ananalyzing this data can be a fair amount of work though.

I've recently experimented with writing this data to logs but also mirroring it to elasticsearch, which is extremely well suited to analysis of large amounts of log-like data. That works pretty well, especially as you can use Kibana to analyze and visualize the data.

Generally though a dedicated tool like Amplitude will give you the most bang for your buck, so that's what I would recommend.Have you considered using third-party services such as Segment.com and Mixpanel.com?

These companies usually have a free tier which may be more than good enough if just starting out.  Integrations are usually pretty straighforward as well, like adding a javascript code to your base template.

(I personally use Mixpanel for my apps and quite happy with it and I'm still on the free tier)

Non Django solution, using a third party service: http://www.inspectlet.com/  

They have a free version.https://github.com/justquick/django-activity-stream
If you are looking to create ""activity streams"" which can be personal or public, check out GetStream (https://getstream.io/). I used them for previous project and was very happy. It has direct Django integration and an easy way to ""enrich"" events. 

By the way, this thread turned up some very interesting answers with different interpretations of your question. Very interesting!"
2016-09-26 20:08:30;Complex Django Form;"Are you using a [Formset](https://docs.djangoproject.com/en/1.10/topics/forms/modelforms/#model-formsets)?Your model should look something like this

    class Timesheet(models.Model):
        user = models.ForeignKey(User)
    
    class TimesheetLine(model.Model):
        timesheet = models.ForeignKey(Timesheet)
        unit = models.ForeignKey(Unit)
        charge_code = models.ForeignKey(ChargeCode)
        pay_type = models.ForeignKey(PayType)

You would then use a formset to capture the information. https://docs.djangoproject.com/en/1.10/topics/forms/formsets/
Hmm. Are you doing something like:

    TimesheetEntry:
        # ... Information about the week.
    
    TimesheetWorkEntry:
        timesheet = ForeignKey(TimesheetEntry)
        unit = ForeignKey(Unit)
        charge_code = ForeignKey(ChargeCode)
        pay_type = ForeignKey(PayType)

and one line per TimesheetWorkEntry? I'm not sure how you'd be running into the FK limit that way, though.> I quickly reached the maximum FKs that can associated within a single model in Django/Python/MySQL

WTF? Can you post your `models.py`?"
2016-09-26 17:42:36;What is the best DB to use with django?;"Just use postgresql and spend your time working on your app instead of these sorts of questions :) PostgreSQL is the official supported database for Django. They write for PostgreSQL and then make the other databases work. PostgreSQL is also the most mature open source supported database.

I work with PostgreSQL for my own projects and with MySQL at the company I work for. Some obscure MySQL problems have bitten me in the ass more than once.Postresql, but you need to answer your own homework questions... :-)I've considered 3 databases in my time: MySQL, Oracle, and PostgreSQL - in that order. MySQL has historically been easy to setup, but it hasn't had a lot of features that other DBMSes have, like schema changes in transactions. Postgres has an (undeserved) reputation for being difficult but better - it's just as easy to setup (in my experience) and totally better. And although I heard that Oracle's database is pretty awesome, it costs an arm and a leg and you have to deal with Oracle salespeople and Oracle pricing.

PostgreSQL 9.6 is supposed to be released this week, so if you haven't chosen a database yet, make sure you compare PostgreSQL 9.6 features to whatever. And keep in mind that a lot of features have been added to PostgreSQL since version 9.1.

PostgreSQL has:

* It's own `contrib` module that is installed with Django. MySQL has a module, but it's not mainlined.
* schema changes can be in transactions (and are when using Django's migrations) - this makes migrations much easier to properly implement (according to the author of South and Django's built-in migrations)
* ~~built-in full-text search capabilities, so you don't feel like you have to implement this yourself~~ MySQL does too, but performance is supposedly lacking.
* the PostGIS extension (database fields for location/map based data), which is THE standard for GeoDjango
* ~~JSON, including JSON querying capabilities (with JSONB)~~ [Edit:] MySQL 5.7 can now store and query JSON (previous versions could only store it)
* HStore, for simple key-value storage, so you don't have to use MongoDB
* Partial indices, so you can quickly implement `unique_together` constraints in your database instead of your application
* ~~Foreign data wrappers, so Postgres can interface with other data sources (including other PostgreSQL and MySQL databases, in-memory databases like Redis, and a few others)~~ [Edit:] MySQL now has these too.
* PostgreSQL is strongly typed, which sounds terrible, but MySQL will coalesce your data into a completely different type and emit only a warning, not an error, whereas Postgres will call you an idiot and reject it, forcing you to fix your application (eg: where the fix should come from). [Edit:] MySQL now has strict mode turned on by default, and there's a check for that baked into Django 1.10, so this is alleviated.
* Sequences (a single server whose entire job it is to atomically increment primary key IDs and return them to other servers, this doesn't have to be done on separate hardware or a separate process). This is how Oracle and PostgreSQL implement autoincrementing. This becomes an issue when you want to scale to multiple master replication.

MySQL kinda sucks:

* Some MySQL engines are not ACID-compliant, and the MySQL system tables were stored in a non-ACID-compliant manner by default until a few years ago. [Edit:] Granted, if you stick with InnoDB you should be fine.
* Some MySQL engines don't support foreign key constraints (edit: InnoDB does), but this can be worked around with triggers, although that creates race conditions
* MySQL's query optimizer sucks. Sure, individual engines can try to optimize, but this is a case where abstracting storage engines impacts query performance. (Edit: MariaDB's query optimizer fixed poor performance for subqueries).
* MySQL has no idea what a sequence is. MySQL's `auto_increment_increment` and `auto_increment_offset` variables approximate this, but if you add a master you have to adjust this on ALL of your servers at the SAME TIME (read: downtime).

And Oracle has its own issues:

* You have to deal with Oracle Corp. and Oracle salespeople

Here's a few pages (my sources) that go over more points to consider:

* https://wiki.postgresql.org/wiki/Things_to_find_out_about_when_moving_from_MySQL_to_PostgreSQL
* https://www.quora.com/What-are-pros-and-cons-of-PostgreSQL-and-MySQL
* https://www.wikivs.com/wiki/MySQL_vs_PostgreSQL
* http://dev.mysql.com/doc/refman/5.7/en/replication-options-master.html#sysvar_auto_increment_offset
* http://stackoverflow.com/questions/737275/comparison-of-full-text-search-engine-lucene-sphinx-postgresql-mysql

Edit: Updated some points and added SO source thanks to /u/adamchainz's reply. :)That's a very naive question.

The choice of DB has nothing to do with Django. Django is merely a MVC web application framework. Your data is a different part of the stack.

Choice of DB depends on the kind of data your application deals with mainly. Other architectural considerations here revolve around relational vs non-relational dbms, scalability, consistency, availability, fail-over strategies etc. 

If someone claims that Postgres or My-SQL perform well with Django, what they really mean is the the Django ORM support for these dbs are good.I've only ever used PostgreSQL in Django projects, never had a reason to switch really."
2016-09-26 15:58:45;Help needed with creating models for inventory app.;"https://docs.djangoproject.com/en/1.9/ref/models/options/#unique-togetherIt is not clear to me why you have the two models `Value` and `OptionValue`. Could you replace them with a single table?

    class EditionOption(models.Model):
        editon = models.ForeignKey(Edition)
        option = models.ForeignKey(Option)
        value = models.CharField(max_length=30, unique=True)

        class Meta:
            unique_together = (('option', 'edition'),) "
2016-09-26 11:25:59;Django Tutorial for Beginners;"Do not, I repeat, *do not* follow the advice of installing stuff using a privileged admin account.

Here's a very good Django tutorial in text form: https://tutorial.djangogirls.org/This is a horrible tutorial right from the start.  

- Recommending using `sudo` *for every command*
- Seems quite a bit ad-libbed

Additionally, what benefit does this bring to a beginner over the official tutorial?Always use virtualenv for installing libraries"
2016-10-03 23:21:57;Question about Django Channels / NGINX / uWSGI Configuration;"uwsgi is the problem. Instead, you need to run Daphne, which supports WebSockets. Daphne implements ASGI, a proposed asynchronous version of WSGI. I'm assuming you are using runserver locally, which supports WebSockets directly, so you only see the issue on AWS when you are running behind uwsgi.

http://channels.readthedocs.io/en/latest/deploying.html

https://github.com/django/daphnertfm!"
2016-10-03 13:25:36;Changing property to field to allow filtering;"Denormalization is perfectly sensible at times so long as it is not overused IMO. The key is to normalize first and make conscious decisions to denormalize. Which database are you using?

If you're using Postgres > 9.1, you can index on expressions. See [the manual](https://www.postgresql.org/docs/9.1/static/indexes-expressional.html) and [this overview](http://www.postgresonline.com/journal/archives/9-How-to-create-an-index-based-on-a-function.html) for more.

You might also want to use [partial indexes](http://use-the-index-luke.com/sql/where-clause/partial-and-filtered-indexes) - where you create an index only on rows that match a certain criteria.

Edit: Added Postgres stuff.a few hundred entries is not that much honestly. You are probably fine for the next year or so. And by then, migrate away from sqlite and your good to go for another year at least.

Don't overthink it until it is a problem. Premature optimalization is rarely a good thing. It is good you are being conscious about it. By the time it is a problem, you'll know your application that much better. Perhaps there is a better way, perhaps you don't need this anymore, perhaps you just write a custom sql query and your good to go. Don't worry about it ;)"
2016-10-03 12:24:37;django-rest-marshmallow: Marshmallow schemas for Django REST framework;Have not heard of marshmallow before but what is advantage of this over normal serialiser I'm using serpy (extremely fast) for non drf stuff and drf's own serializer for drf. But seeing this, a well written integration, I may give a shot to marshmallow for drf stuff. 
2016-10-03 05:37:59;Randomize each field within a model upon init/request?;"> each field within the Event model to be random

Don't follow what you mean."
2016-10-02 18:39:16;DRF + Angular - am I understanding this?;"How you define models and handle data inside Angular is a matter of preference.

For example, you may not store anything in the client, each time you open a link the data is fetched from DRF. That would be silly for a large app. Search for data architecture in Angular (and frontend programming in general). I'm doing the same thing (moving from 100% to django only handling the backend with DRF and angular 2 on the front end).

I'm basically re-creating all my models in typescript, but it seems necessary and clean, even though it may seem redundant at first. DRF is going to hand you a bunch of json and you really do want to instantiate a class with that data that knows how to handle it. Otherwise, it's going to get real confusing real fast if you're working on a big project.

I work with Recipe classes, with Ingredient classes inside and I've found it's really elegant to work with django and angular 2 in this way. I've even mimicked some of the django orm in my services like recipe = Recipe.service.get(id=1), which could return an instantiated class.

You shouldn't have to write a class for absolutely everything, just the important bits that I need to be ""smart"". I still pass some json data around for some models that I don't make classes for. I define the interfaces for them, though.Defining the models on both sides is a good way to go. An interface (the ""I"" in API, of course) is the point of contact between two separate systems, so it's good that both define what they expect that interface to look like. You're then free to make changes to the front and back ends and know that any breaking changes you make will be caught by those definitions. Model definitions are also a form of documentation!

If your Angular project lives in the same repo as Django I can see the duplicated definitions feeling more redundant. With separate front and backend projects it's a natural fit.

If you ever have a new Angular project to hook up to an existing DRF project, you can ask DRF to generate metadata in response to an OPTIONS request (http://www.django-rest-framework.org/api-guide/metadata/). With a bit of hacking you can use this information to generate model definitions which massively reduces the amount of bootstrapping you need to do."
2016-10-10 22:54:18;Best way to test Django Channels?;"I would suggest the django-channels irc channel. The guy who made it hangs out there for a large part of the day and there are a lot of solid people. Just keep in mind that your question is not likely to get answered right away because its still a small sub community.There are actually prewritten unittests in the Channels github repo that you can look over for session testing: https://github.com/django/channels/blob/master/channels/tests/test_sessions.pyhere are some relevant links:
- https://github.com/Krukov/channels-examples/blob/example-new-tests-utils/multichat/chat/tests.py
- https://github.com/django/channels/tree/master/testproject
"
2016-10-10 22:50:47;TestCase vs RequestFactory;"> The question is: when should I use either one? 

Typically just use the test client. That'll ensure that you're testing your project more completely, as the full request-response cycle is under test, including routing and middleware.

Use `RequestFactory` if you want to write unit tests that require a request instance, or if you have some good reason to want to test just the view itself.deletedI disagree with tomchristie - I started off using TestCase and now wish I had mostly used RequestFactory.  This site gives a good epxlanation why:

http://tech.novapost.fr/django-unit-test-your-views-en.html

RequestFactory will be much quicker, which is important when you have a lot of tests.  It is also only testing the part you want to test, which is a better unit test - you will more quickly know where the error is.  You should still have some tests with TestCase to test the full HTTP request.

Hope this helps.I'm relatively new to Django and did not know about the usages of RequestFactory in test cases. I'm running Python 3.5.2 and have just been using magic mocks for my view unit tests. Is there any significant benefit of using a RequestFactory vs Magic mocks? 
Well firstly you use TestCase everytime. TestCase is what you subclass to run tests in django, you can use RequestFactory inside of your subclassed TestCase:

    class MyTest(TestCase):
        def __init__(self):
            self.factory = RequestFactory()

What your question should be is what is difference between the Django test client and RequestFactory.

Putting it simply RequestFactory allows you to create an instance of a Request for a view to process. If a view does not have a request it cannot run properly. So you would use it like so:

    def test_my_code(self):
        request = self.factory.get('/some/url/here')
        response = my_view(request)
        ... place asserts here ...

This allows you to test just your view. There will be no sessions, no cookies, no middleware, no URL routing, just the view.

On the other hand if you use the test client everything has to work. You end up testing your view, and sessions, and middleware, and URL routing. The test Client acts just like a browser.

---

The tl;dr is that RequestFactory is for unittesting views, the Test Client is for integration testing the whole system. You should use both for their intended purpose.If you are using DRF you are probably better off using the provider APIClient. I use DRF a lot and i never had to use RequestFactory.

http://www.django-rest-framework.org/api-guide/testing/#apiclient "
2016-10-10 22:22:03;Django app that builds custom budgets for expat life in 600 cities;"This is your first web app?  How's the quality of life in Chicago? Cause I have a job to offer you.Looks great!

Tested your 404 (habit of mine) and it throws an 500....which is weird.

Also, I can't share search results with anyone? Be nice to have a link that I can paste to my partner or friend and they seen the same search results as me right away.pretty nice..
a bit off-topic question: how did you get listed on the producthunt?Is this just an elaborate ad for Canberra?

Sidenote: I agree with /u/dAnjou, you should post a little more about how you built it. What django made easy, what it made hard. Otherwise it just feels like you are advertising your project which isn't particularly relevant to /r/djangoGreat app, mate! I absolutely loved the design. Did you use any CSS frameworks?Looks like we maybe hugged it to death? I see al 502 on your main page. Great job. Where did you get your data about food pricing per city? Was it a manual job to enter in an average for each city, or do you have a data source? I am trying to get food pricing per city but have been struggling to find a reliable data source. Could you point me in the right direction?As /u/andybak said, filtering by weather/climate would be a great addition.

And while Oklahoma City fulfills many of my financial requirements, that city and the entire state sucks. I would like an ""interest"" metric, where cities are ranked relative to each other. Maybe use the clicks for each city as an ""interested"" signal to rank cities against each other?One thing that matters to some people, public transit coverage :-) AKA will I need to own a carThis is a really nice idea but I don't understand why you posted this in /r/django. You didn't provide the server side source code so there is nothing Django related to see. What are we supposed to give feedback on?"
2016-10-10 19:15:16;Validation Error : [u'ManagementForm data is missing or has been tampered with'];"Start by posting the entire view and entire traceback.I'm having the exact same problem and I have no idea why. I am dynamically altering my forms using javascript and I figured I just wasn't updating the management_form fields correctly but after removing Javascript altogether from my HTML I am still getting the same error.

I might have a bit of a different use case and could be doing this completely wrong since I am new to web programming and Django.

Here is my view:

    def purchase(request):
    return generic_form_view(request, ""inventory_tracking/add_purchases.html"",
                                          ""Successfully added purchases for %s."",
                                          PurchaseForm,
                                          [formset_factory(PurchaseForm.LiquorForm),
                                          formset_factory(PurchaseForm.NonLiquorForm)])

    def generic_form_view(request, template, success_message, ParentForm, FormSets):
    if request.method == 'POST':
        request_params = copy(request.POST)
        parent_form = ParentForm(request_params)
        formsets = list(map(lambda form_set: form_set(request_params), FormSets))
        # check whether it's valid:
        if parent_form.is_valid():
            # process the data in form.cleaned_data as required
            # ...
            # redirect to a new URL:
            for formset in formsets:
                if formset.is_valid():  # Fails here.


    <form action=""{% block form_action %}{% endblock %}"" method=""post"">

        {% csrf_token %}
        <div class=""row"">
            <div class=""row"">
                <div class="" well well-lg"">
                    <div class=""row"">
                    {{ parent_form.management_form }}
                    {% for field in parent_form %}
          ....... omitted for brevity
         
    <div class=""row"">
            {% for formset in formsets %}
                {{ formset.management_form }}
                <div class=""row"">
                    <div class=""well well-lg"">
                        {% for form in formset %}



I may be trying to over generify my solution. I am open to any suggestions and I have the code on bitbucket if anyone would like to take a look. 
"
2016-10-10 17:42:49;Using Django channels for real time task submitting and monitor;
2016-10-17 22:04:45;Why perform_create does not get called?;"A better way of doing this using the `CreateOnlyDefault` and `CurrentUserDefault`classes from the `serializers`module like so:

    from rest_framework import serializers

    class TestDateSerializer(serializers.ModelSerializer):

        class Meta:
            model = TestDate
            extra_kwargs = {
                'user': {
                    'default': serializers.CreateOnlyDefault(
                        serializers.CurrentUserDefault()
                    ),
                    # perhaps add 'read_only': True here too.
                }
            }

Haven't tested whether those extra_kwargs override anything. Otherwise you could use the ModelField and set the model_field to the field of the TestDate using the meta API: `TestDate()._meta.get_field('user')`Haven't looked closely at your code because I'm mobile and the formatting is screwy for me.

But I ran into this problem last week and upgrading to the latest version of DRF and Django fixed it for me. I'd double check that first thing!I believe your serializer needs to set the user field as read only"
2016-10-17 19:40:11;Opinions or options for model revision control on Django?;"I have 2 recommendations for you.

One is a library called [django-diffs](https://github.com/linuxlewis/django-diffs). It stores value changes of instances in a redis cache for a fixed time.

Another one, closer to your use case I think, is [django-simple-history](https://github.com/treyhunner/django-simple-history). It generates a separate model to track changes and allows you to ""revert"" a model to a previous state via the admin.Surprised nobody has mentioned django-reversion?Some answers from 5 months ago: https://www.reddit.com/r/django/comments/4fy5v0/keeping_a_change_history_in_postgres_django/

I personally haven't used (or needed) history in any of my projects, but if I did I would first look at https://github.com/swisscom/cleanerversion.  On the downside, it looks like it only supports Django 1.8. It does have experimental branch for Django 1.9.

Thanks! Django-diffs seems useful but perhaps not precisely what we need for this project. The other is a contender. "
2016-10-17 16:16:04;Is there anyway to extract an image from a RichTextField()?;"I'm guessing you're using https://pypi.python.org/pypi/django-richtextfield/ ?

As it's stored as HTML then I'd suggest using BeautifulSoup or similar:

    from bs4 import BeautifulSoup
    soup = BeautifulSoup(foo.rich_text, 'html.parser')
    for img in soup.find_all('img'):
        print(img.get('src'))You'll have to either [regex it](http://stackoverflow.com/a/1732454/250241) or use something like Beautiful Soup to parse it since most rich text models are just a text field under the hood. 

Which Django app are you using?"
2016-10-17 10:20:23;Dealing With Images;"Pixelmator used to be free but now it's a 30 day trial, it's like a light version of PS.

Take a look at https://affinity.serif.com/en-us/photo/ much cheaper and faster as photoshop :)When I need to resize or crop an image, I make the [GIMP](https://www.gimp.org/) to it.> Is there a simple guide

For every complex problem there is simple yet fundamentally wrong solution.    
If your problem is complex — solution have to be complex too. No exceptions.

> Tips for loading speed vs quality

This depends on factors like auditory and kind of images.    
For abstract graphics PNG may be better, for gradiental and photos where you do not need image to be loseless Jpeg may be useful.    
To see how's site working you can try chromium small screen mode with network throttling.    
It's very useful to check how's your site looks on 3"" phone with gprs. Because if it looks good and loads fast on such thing, then it will do at least good on anything else.

> I'm on OSX is there a simple tool

No, apple is only for complex tools and hipsters.

I do not know about OS support but there is free (as liberty of speech) tool Phatch which is python-powered GUI for batch image manipulation thingies. I doubt there is any device on earth that can't run modern python if you try hard enough, so I recommend giving it a try.

TL; DR: **Phatch**"
2016-10-16 18:03:32;Best way to store sensitive info?;"Make an example config file (project.conf.example), add that to your project. THen have the real config file (project.conf) added to your .gitignore.. Add instructions for copying the example to the real one, edit as needed. Environment variables with default values (see os.environ.get)environment variables.If you consider having automated deployment, you can choose Ansible and Ansible Vault as sensitive keys storage.

Then it could have emerged into environment variables, or production config could be created directly by Ansible from the template stored in the repository.

Ansible Vault: http://docs.ansible.com/ansible/playbooks_vault.html Lets you put your settings_secrets.py files into your repo rather than gitignoring them (which can be risky, and difficult to deploy).You can try Vault from hashicorp and envconsul for passing settings from env variables from a secure vault.On small projects, I create a local_settings.py file with the settings that change from one environment to the other, import it on the settings.py, and ignore it at version control (add a model, already set for localhost testing).

On big deployments, with change control, you'll want to go with the local customs. That is very likely environment variables.i use json to store my keys. 
In my settings.py I just load up a passwords.json...

    PASSWORDS = json.load(open(PASSWORD_FILEPATH))

and then I use it in another app with 

    from django.conf import settings
    
    password = settings.PASSWORDS.get('key')Why does everyone need these things? Surely not for their individual dev environments. You will need something for production and staging environments, but you don't need to share that."
2016-10-24 17:37:33;MongoEngine object returning empty queryset when collection has entries in mongo database;"Okay, I manage to find a solution.

The problem was because I had the attributes **allow_inheritance=True** when it should be **False**. 

You can understand it better by reading [this](http://stackoverflow.com/questions/13824569/mongoengine-types-and-cls-fields)

**SOLVED**"
2016-10-24 09:33:05;Django on Cloud9;I don't think it will be a suitable environment for actually hosting a site but it should be good enough to learn django and build your app and then just take the code and deploy it for real.Another option for testing (though maybe not in the long term?) Is Heroku. To start the server just push your git to the server. It's slick and there are great tutorials.The versions they use are old. I just tried setting it up yesterday, but I want to work in python 3. I ended up abandoning it because I couldn't figure out how to update python and django.I'd say if you want to learn Django you might as well learn how to set it up. It isn't hard at all and you'll need to learn it anyway at some point. The [Django tutorial](https://docs.djangoproject.com/en/1.10/intro/) is all you need and you can use Pycharm to make it even eaier.May I suggest following the Django Girls Tutorial. You will be using Heroku for the remote server and its easy to follow.
2016-10-24 08:59:46;Which Django methods do you commonly override?;".save() gets overridden on almost every model I define, if only because I like having all of my objects to have UUIDs.  Thinking about it now, I should probably just extend Model and then extend that, in the future. `get_context_data`, `get_queryset`, `form_valid`, `get_form_class`, `post`.

Just to get application logic into my GCBVs."
2016-10-24 05:50:03;Django Integration Tutorial;
2016-10-24 00:36:01;Django, Apache, Python3.5 and Amazon Linux 4.4 Deployment;"For Apache you need the mod_wsgi, and that's very straightforward. Just don't forget to download python3 version. Digital Ocean has a few tutorials for mod_wsgi. Btw most django developers don't like using apache or mod_wsgi because a reverse proxy setup (nginx-gunicorn/uwsgi) is easier to restart and manage. Yes Many simple articles/ Tutorials available: 
* [https://realpython.com/blog/python/deploying-a-django-app-and-postgresql-to-aws-elastic-beanstalk/]
(https://realpython.com/blog/python/deploying-a-django-app-and-postgresql-to-aws-elastic-beanstalk/)

Also this help fulll
fstoke.me/blog/?p=3708
And still doubt, please comment in this threadtry nginx instead of that apache.
"
2016-10-31 15:28:20;"Is there a better way to do this? ""Template"" models and instances.";Read up on abstract models. I think it will help you out here. It looks like good case for the model inheritance
2016-10-31 13:14:33;Django projects with open source code on github(websites and apps, not library);"All of the Django based CMS are standalone apps:
wagtail, django-cms, feincms, mezzanine

Taiga project management

* https://github.com/taigaio/taiga-back

There are several forum apps, e.g.:

* https://github.com/nitely/Spirit
* https://github.com/stephenmcd/drum

There are a few simple (simplistic?) helpdesk webapps, e.g.:

* https://github.com/ookami-kb/django-simple-helpdesk
* https://github.com/orges/itsy/

Mozilla Add Ons

* https://github.com/mozilla/addons-server

Mayan doc management system

* https://github.com/mayan-edms/mayan-edms/

Some more randomly:

* https://github.com/healthchecks/healthchecks
* https://github.com/adamalton/django-csp-reports

Django uses the term 'app' to mean something fairly similar to library. But I'm guessing you mean app as in 'Web App' not as in 'Django App'?* https://github.com/lamby/trydiffoscope
* https://github.com/lamby/buildinfo.debian.net

The mozilla.org site is a Django project called bedrock

https://github.com/mozilla/bedrockSentry is a cross-platform crash reporting tool

https://github.com/getsentry/sentryHere is a list with many real-world open-source django-projects: https://www.djangosites.org/with-source/
One of mine: https://github.com/rocket-league-replays/rocket-league-replaysWell maintained app: https://github.com/reviewboard/reviewboardhttps://github.com/pydanny/djangopackagesHi, here is my chat, I've made with Django for backend.
https://github.com/Venskiy/chatedX.org is powered by Django
https://github.com/edx/edx-platformAlso, obviously the Django Project's website is powered by Django.

https://github.com/django/djangoproject.comThe PyCon website is powered by Django.
https://github.com/PyCon/pyconThe Chicago Python user group has a Django website with source:
https://github.com/chicagopython/chipy.orgPet project of mine, a fitness app
https://github.com/wger-project/wger/may someone have the same list for flask?My website, [LibreTees](http://www.libretees.com) is powered by a work-in-progress e-commerce framework (and fully-functioning web app), [LibreShop](http://www.github.com/libretees/libreshop).This app called [Django Tennis Ladder](https://github.com/jzahedieh/django-tennis-ladder) was one the earlier projects that I learned a lot from"
2016-10-31 12:23:03;Problem with JWT token authentication / Django verification process;Found the problem. The issue wasn't the staff status, it was because the register account api was having issues with password hashing. 
2016-10-30 21:41:07;Hosting static HTML output with Django;"De-conflicting CSS is really hard. May not even be possible. Consider embedding the notebook html as an iframe within your page instead. That will allow you to have your own style on the container page, but jupyter stuff within. last week I got tired of editing html everytime I wanted to add a page with just some text, so I wrote a very small CMS https://github.com/allox/nanocms 
It is really small, so easy to modify.   It uses templates, so create some templates that extends your global template. 
Perhaps it s helpful for you. 
Feedback appreciated.
(ps. I dont know what Jupyter is, or what 'saving the notebook' means)"
2016-10-30 14:25:06;Trouble with defining webassets path and URL.;[deleted]
2016-11-07 18:30:08;What are the best free resource for learning Django?;"The tutorial you are using is incredibly suspect. Garbage. Anyone who conflates the Django Template Language with Jinja 2 shouldn't be writing a Django tutorial.

I suggest you follow another resource, either the official Django tutorial, the Django Girls tutorial, Tango with Django, Testing Goat, or what have you. Because that tutorial you pointed to has misleading junk within the first few lessons.[deleted]Thank you all. Check out the sidebar --->

Click on /r/djangolearning/

Then check out their sidebarcurrently going through [sentdex](https://pythonprogramming.net/django-web-development-with-python-intro/)'s tutorial. I briefly read up on two other highly regarded tutorials--Tango with Django and Obey the Testing Goat--before starting, and Sentdex's seemed to me the least convoluted in quickly getting up and running.  
Am about 5 lessons in right now and thoroughly enjoying it. I would recommend that you look at the three that I've mentioned as well and choose from there! "
2016-11-07 14:55:00;Performance testing for Django through tests;Cool, thanks!
2016-11-07 13:39:21;using Django as a complete empty shell?;"What is stopping you from using heroku environment variables?

Option 2 would also work too; you'd have the database URL as an environment variable in the heroku config and then store the other variables in the databaseMaybe using something like docker to automatically deploy the database to a container. "
2016-11-07 12:20:00;Any danger in updating the Django database directly? Any gotchas?;"Writing to the DB is usually fine, as others have already pointed out (though make sure you don't bypass critical Signals.) But I would highly suggest writing your scripts as either [custom management commands](https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/) or at least still using `django.setup()` to [initialize Django in your custom script](https://docs.djangoproject.com/en/1.10/topics/settings/#calling-django-setup-is-required-for-standalone-django-usage) and then using the ORM like normal, which will be nicer to develop and work more like normal.I had all of this typed out then got distracted and forgot to hit `save`, so other people have made similar comments but this comment kind of collects and itemizes them.

Edit: Linkified apps.

---------------------------------------

TL;DR: The ORM is there to make things much easier for you, but it is possible to modify your data outside the ORM without impacting Django's operation.

Things to consider:

1. Be extremely careful to not touch tables Django needs internally (especially `django_migrations`, but also for contrib apps like `django_contenttype`).
2. If Django is configured to use a database cache, you'll need to bust that cache after running your SQL so Django doesn't rely on stale (and invalid) data.
3. If your Django models create/update/delete related objects in the model's `save()` method, you'll need to make sure you follow the same logic.
4. If any signal handlers create/update/delete related objects, you'll need to follow the same logic.
5. If you have any [audit log](https://github.com/jjkester/django-auditlog) or any sort of database reversion control Django apps ([`django-reversion`](https://github.com/etianen/django-reversion), [`django-simple-history`](https://github.com/treyhunner/django-simple-history)), updating the database manually will bypass these functions. 
6. You will need to handle all data validation yourself, and failure to do so properly could manifest as a subtle bug in your Django app. Consider: you manually insert data that doesn't pass a Django validation (which we'll call `update #1`, if Django ever loads and then re-validates model data (`update #2`) it will error out, and you might make the reasonable (yet incorrect) assumption that it was the new data in `#2` that didn't validate, when really it was the data from `#1`. Troubleshooting this issue may be helped if you modify `ValidationError(""<this_string>"")` to remind future you about this possible cause.

You can do it, it's not terribly difficult, you just need to be a *lot* more careful when you touch the database outside of using the ORM. Just be aware that mistakes you make in your SQL may manifest themselves as bugs in your Django app.I should add that I'm only planning to update tables related to models that I've created, not any of Django's built-in tables. I guess my main concern is something getting out of sync due to bypassing the ORM. I will of course, take care to make sure I am inserting the right data types into the right columns. "
2016-11-07 04:35:50;Avoid Django's GenericForeignKey;"It is a power tool: useful capability but costly, dangerous and not always the best choice.Misleading title.

It shouldn't be avoided, it should be used with caution. Django doesn't claim that it's something you should be using all the time, it's simply an additional feature that you may use where appropriate.Pasted from my comment on original article:

There is considerable overlap with the use cases for apps like https://github.com/django-polymorphic/django-polymorphic (which is essentially sugar for MTA but sugar that does impact the conceptual model). I'm not sufficiently caffeinated enough right now to say anything intelligent about how it compares to the other approaches but thought it was worth a mention.Great article, especially outlining all the alternatives to GenericForeignKeys. I personally use multi-table inheritance, it's not perfect but it works. You still have to write a function on Owner to None check either the person or group fields to get the relevant model though.

    owner = Owner.objects.get(pk=<pk>)
    try:
        person = owner.person
    except Person.DoesNotExist:
        pass
    try:
        group = owner.group
    except Group.DoesNotExist:
        pass

I think there should be a mention that you cannot use `abstract =  True` in the meta of Owner. The table has to actually exist to be used as a ForeignKey in Task.I'm fairly certain alternative 4 doesn't work. It will create an Owner table and we can only ref that, not the subclassed models.Great points! I've kinda followed this and avoided gfk as much as possible, but it's nice to see that someone in the community has explicitly laid it out with great workarounds and solutions."
2016-11-14 23:43:12;Are there any pre-made templates for django-allauth?;[Cookiecutter Django](https://github.com/pydanny/cookiecutter-django) uses django-allauth.
2016-11-14 23:26:55;Time consuming migrations bug is fixed in 1.10.3;1.11 LTS should come with even larger speedup if we manage to get database operations and the auto-detector to rely solely on model states.
2016-11-14 14:09:51;Guys, I have made an A/B Testing app in django. Need critics for the app. Contributions are welcomed. Thank You.;"Haven't checked the code yet but I already have 2 issues.

One's really quick to fix, the code below *Now Create your own new Tests in the Database* in the README seems quite a bit broken.

The other one's about the usage and more fundamental. Creating an *Experiment* as an umbrella for the *Test* cases is definitely a good idea but I don't understand why you have to pass the template name to `request.ab.run`. It'd make more sense for me to pass an Experiment, then the Experiment knows which Tests are associated with it and the algorithm picks one of those.

**UPDATE** Had a look at the code and will add a little review, need to fire up my notebook though.

**ANOTHER UPDATE** Here's the code review. Don't take it personally but with a grain of salt, there is definitely personal style in it.

**utils/models.py**

* There are only mixins in this file, why not call it `mixins.py` and put it one folder up next to `models.py`? But you know, actually, you're using these mixins only once anyway. I wouldn't even extract this code, I'd put it back into the model class where you use it.
* I haven't fully figured out yet what `UrlMixin` is for but it seems weird that `get_absolute_url` returns the result of `get_url_path` because an absolute URL is definitely not the same as a URL path.

**models.py**

* `Experiment` is the only model that uses `UrlMixin` and `CreationModificationDateMixin`. So like I said before, I'd keep that code in the model class directly, not in mixins. It's not too much boilerplate and, as a potential contributor, I wouldn't have to start looking for these separate classes.
* I'd strongly suggest to make `Experiment.start` and `Experiment.end` a `DateTimeField`. There will be the need to let experiments end at noon or something!
* `Experiment.is_active` seems to be a direct result of `Experiment.start` and `Experiment.end`, and only that. I think it shouldn't be a model field but a computed property on the model class.
* `Test.hits` and `Test.conversions` can be `PositiveIntegerField` as well, right?

**abmain.py**

* Apparently this is the core/heart of your package. I have no idea what's going on! I'd strongly suggest to write a paragraph in the README about how it all works, especially if you're asking for contributors like the end of the README suggests ;)
* There are a couple of `print` statements, consider using `logging` instead.
* There are **a lot** of one-liner methods in the *AB* class. That makes it a little hard to follow the flow of the code and to understand how things work. Off the top of my head there are two options to make things a little easier: if you don't use a method anywhere outside a class, consider to either remove it completely and use the one-liner directly, or prefix the method with an underscore to indicate that this method is not used anywhere else, like `_my_internal_method`; in other languages these are called private methods.  
Also, some of the methods might rather belong in a model. Like `get_experiment_key`, which should probably be a property on `Experiment`.

**middleware.py**

* What do you need the thread local for? You don't seem to use `get_current_request` anywhere.
* `test_1, test_2 = exp.test_set.all()` ... ouch! You're nowhere restricting that `Experiment` can only have 2 `Tests`. That will definitely cause trouble.
* I'm also not sure whether I like this zero division but I don't really understand yet what *traffic* is (should be explained in the README like suggested earlier). 
* `get_status` looks like it can be removed if you make `Experiment.is_active` a computed property like I suggested earlier.You probably shouldn't loop through all Experiments in the middleware. At least filter on active, possibly use the caching framework?This looks really cool! I'll give it a shot!"
2016-11-14 02:55:43;Anyone using django-activity-stream?;"GenericForeignKeys everywhere. So you trade performance,  integrity and dependency for flexibility, tested functionality and lower up-front investment (because you pull this from pypi instead of building).

It it works for your scale then it is fine. If this is an important feature for a big high traffic site I'd evaluate benefits of a custom solution.I am using it in production. I love the flexibility in being able to pop anything you want into it. I mostly use it for analysis on a separate read only database. Haven't really noticed a performance hit at all, inserts are fairly cheap.We use it at work.  By the time the GFK problem becomes a scaling issue we'll engineer our way out of it :)  In reality if you're paginating responses properly you can get it down to 1 + n queries (n being the number if different GFK classes in your dataset) without a lot of fuss.

We built our own notification framework on top of it too since I wasn't happy with the solution that's available for it.I'm using it on a production site. Doesn't get a ton of traffic so hard to really tell how well it scales. No issues thus far though.    SELECT details.installer.name, COUNT(*)
    FROM
      TABLE_DATE_RANGE(
        [the-psf:pypi.downloads],
        TIMESTAMP(""20161001""),
        TIMESTAMP(""20161031"")
      )
    WHERE file.project='django-activity-stream'
    group by details.installer.name

`pip	6143`

At least it worth to try, a lot of people already using it.
"
2016-11-13 19:28:31;Can't get input boxes to show from Django form?;"You haven't created a form instance outside of the `if POST:...` check. 

 your `return render... 'estimate': form_class`is pointing to the Class, not creating an instance.  You need to have `'estimate': form_class()` for it to work. 

The logic at present is:

    if post: 
        create form()
        render that form 
    implicit else:
        create form class object 
   try and render that class
`

"
2016-11-21 22:02:54;How to annotate current Stock prices from Price history table;"Depending on your database you can likely optimize this by adding indexes to the date column of the Price table. Using `prefetch_related` is good - this should get you significant performance gains on its own. PostgreSQL is great for adding indexes concurrently like this so you can even add them with zero downtime on a production database in many use cases.

In SQL it doesn't get much faster than ordering by a column and taking the `.latest()` result. The only way I could see you using a faster query would be if you denormalized the latest Price foreign key in your Stock model, which it sounds like you don't want to do.

One last optimization you can make is to use `.only()` on the queryset so that you're only retrieving columns you absolutely need based on what you do with the queryset once it's fetched. Be careful though, if you try to fetch a field that you didn't include in your `.only()` it'll execute another query to get that column that the original queryset evaluation didn't select."
2016-11-21 21:08:47;Permission handling with SSO Auth Micro-service;"This depends, IMO, on how those permissions are determined/updated.  As an authentication provider, you're probably going to be asked to, at the very least, pass through a bunch of this permission data.  A lot of SSO solutions do this, or at the very least will offer group information which can translate into permissions on the receiver side.

If you have no control over the modification or assignment of the permissions, then it might be easier to externalize to another service since you'll have a dependency in place anyway and could be blocked if you have to wait around for them to fix some bug or outage.  At that point it's easier to let them do it.

If you do go with an external provider, make sure that they have some sane policies in place:

- breaking changes (eg, they generate a new API version and leave the old version active for a lengthy period so you can transition without a hot changeover)
- they have a guarantee on how long their service will be around (you probably don't want to be suddenly surprised with a 2 month deadline to basically recreate the service they've been performing for years)
- they have a high availability solution and uptime SLA
- emergency support is in place (none of this ""we have to wait for Jim to come in on Monday to do X"")

And, of course, if you _are_ that external provider, the above is what every service will want from you (though if you're already providing authentication then you hopefully already have it).  It's more work, but if you have no other external dependencies then you've got full control to build/fix/maintain as requirements come up.


If you would control this external service yourself and have no concerns about external dependencies, then maybe evaluate a couple of things:

- Duplication of code/effort (eg, you model the data on the permission service to manipulate and store the data, then model the data again on the authentication side so you can manipulate it before passing it on.  eg, SSO recipient 1 needs permission data in format A for some SAML assertion, recipient 2 needs format B)
- Duplication of infrastructure..  if you need some sort of task engine running for both services like Celery, are you going to put this on separate highly available infrastructure for each service?
- Do you see a need for permissions be requested independently of authentication in a large extent (eg, a couple of clients makes this less worthwhile than dozens).  
- Test complexity and promote to production (with an external service you may have no control as you won't be the only client..  changes may need to made on a different schedule..  but then, you aren't making hard breaks if you control this yourself, right?)  


I'm sure there are some other considerations, but I'm sleepy."
2016-11-21 20:00:07;Site with good django training?;"Honestly, I used these and think they're great.

https://www.youtube.com/watch?v=KsLHt3D_jsE&list=PLEsfXFp6DpzRcd-q4vR5qAgOZUuz8041S

I've done the coding for entrepreneurs , django girls tutorial, the official tutorial and treehouse and goDjango too.  

Django girls tutorial is very good it starts from absolute ground zero, so best if you know nothing. Coding for entrepreneurs was about the right balance for me at the time, know a very little bit but not much - that will get you doing an app quickly.

Treehouse was originally a bit thin on the ground but is now excellent if you are learning I would say you absolutely must cover this at some point you will learn loads. 
 
GoDjango is more like a video reference set - It won't give you a coherent flow of what to do next like CforE or treehouse but great at specific things that often aren't covered elsewhere. 
The official tutorial is very good too, but the others are superb so would recommend them first.  The official [Django tutorial](https://docs.djangoproject.com/en/1.10/intro/tutorial01/) is fantastic. And it's free. Django Girls is free and a good starting place.Go see Buddy over at [GoDjango](https://godjango.com/).I really like Tango with Django. They've just updated their book for the newest version of  Django I think we have pretty good stuff on https://teamtreehouse.com"
2016-11-21 18:59:09;Where have my file uploads gone?;"The file storage backend should be different too, django doesn't know about AWS or how to upload files there on it's own.Having this same exact problem.First thing to check, are the environment variables set correctly in your production environment?Do you configure an S3 storage backend like [django-s3-storage](https://github.com/etianen/django-s3-storage)? If not then django is still using default storage and your files are on your instance. Make sure you configure for both STATIC and MEDIA.I agree with the other comments.  Unless you've configured a storage backend, Django doesn't know to use it- have a look at how the Django Cookie Cutter project lays out its storage options for a fairly good way to set it up. 
"
2016-11-21 15:24:07;Help with making a data request and graphing app;"Same answer as I gave t'other day, really.   Your approach sounds sensible though. 

https://www.reddit.com/r/django/comments/5d3v8a/graphingcharting_data_in_django/
"
2016-11-28 19:59:58;Hi guys New to Django could someone guide me to a tutorial of how i would put the bellow code into a template Thanks;"As the tax calculation only relies on information available on the incident object, you can create a property on the class to calculate it:

    class Incident(models.Model):
        ...
        @property
        def tax(self):
            return (((self.time * self.consultantname.rate) + (self.travel + self.consultantname.tvlrate))*14)/100

You can then access this property in your template:

    {{ object.tax }}

Depending on your model definition, you will probably want to check that the various properties of the Incident model are set before doing the calculation."
2016-11-28 10:49:43;arteria GmbH open-sources djangocms-inline-comment;Nice! I will probably never use this but love that you and your team are giving back to the community. Kudos sir!
2016-11-28 01:43:11;When to use ModelViewSets over Mixins/Decorators in DRF;"I prefer class-based views, so I always use a `ViewSet` or `APIView`.I only use decorators for APIs with single tasks, like send an email, search across multiple entities etc - in a context where the idea of ""Resource"" does not make proper sense to me. 

When I am dealing with a ""Resource"" say, a Model, I always use the class based views, more preferably the ModelViewSet. I prefer class based views, but I only use what I need. 

The view set gives you everything, but if I only need a get and post, then I'll only use those mixins or implement just those methods."
2016-11-28 01:25:43;Project Architecture: Django Rest Framework with Angular2;"Treat this as two related, but separate, projects. Later, you might even consider hosting the code in separate repositories. See various guides/tutorials for each framework, and structure you files accordingly.Keep your backend code in a separate repository, same goes for frontend code.
Then you can easily deploy them.

Git repositories are cheap like classes in OOP, use them as much as you can.What can help is to think of your project as multiple atomic apps. Treat each app as a standalone project with its own repository. You can then create a parent-project and manage your apps as git sub-modules. I create each app as a standalone disttools module installed in src mode so that I can develop the app and still use pip to manage its installation."
2016-11-28 01:15:42;Apache2 & mod_wsgi vs. Nginx & gunicorn?;"Having tried both, (I don't have any numbers on me, unfortunately)
I believe nginx+gunicorn was definitely a faster mix. It had lower latencies and a lower memory footprint.
 I'm the opposite, I've only ever used Nginx & Gunicorn. I'm interested to see the comparisons. [deleted]For me the easiest was gunicorn with [whitenoise](https://github.com/evansd/whitenoise): no system config, stays in venvs.I use nginx and gunicorn with my django project. I have nginx running on http2, https and i get an A+ security rating. There are a few guides around. I'll update with a link later."
2016-12-05 02:54:49;Django Host that makes it easy to setup and deploy?;"Whenever I want to deploy a site quickly (e.g., for demo purposes), I'll just develop it locally and deploy it on [heroku](https://www.heroku.com) on my free account. I mostly use rails but they do offer [python/django support](https://devcenter.heroku.com/articles/deploying-python). I'm not sure though how they measure up on django's [deployment checklist](https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/), but it's very easy to try and find out whether it works for you or not.

What I like is that they deal with all the infrastructure and I only have to focus on the app itself. What I don't like is their prices. When we are satisfied with the project, I move the code elsewhere to [linode](http://www.linode.com) or [DigitalOcean](http://www.digitalocean.com).

As u/NoLemurs said, taking the time to set up a deployment automation system if well worth it and would save you hundreds of hours and headaches in the long run.

Good luck.Webfaction has been providing this for many years and I use them personally for dozens of sites.

Additionally I've heard people say good things about PythonAnywhere. Divio look to be doing interesting things in this area too but I haven't tried either.

DigitalOcean, Amazon etc offer prebuilt Django images but once deployed you're on your own so the simplicity there is somewhat of an illusion.

The specific things you mentioned above about settings are tricky. You can find a good project template and use them - but it will probably also come with lots of opinionated baggage that you may or may not need. It all depends where you are on the learning curve and what kind of sites you're trying to produce. I was lucky enough to learn Django when things were simpler. I've formed opinions and built workflows more gradually. Starting now feels like being thrown in the deep end! I haven't actually used it much personally, but [pythonanywhere](https://www.pythonanywhere.com/) seems to aim to do more or less that. The Django Girls tutorial uses it, and my experience teaching other people to use it was overall positive.
Since hosting Django apps is literally one of their main purposes, all the standard tasks have got to be fairly easy, and if you run into trouble, their forums will probably have really on point information.

Of course, if you're going to be doing more than a handful of sites, taking a few days to set up some sort of deployment automation system (`salt` or `ansible`) really is the way to go, since that way you can use pretty much any old VPS and you have total control and portability. But if you're just looking to get something up and running quickly, python anywhere might be worth checking out.I've found EBS on AWS easy for more sophisticated production setups.The combination of deploying using [Docker](https://realpython.com/blog/python/django-development-with-docker-compose-and-machine/) and [Digital Ocean](https://www.digitalocean.com/products/one-click-apps/docker/) makes it quite easyany system would do. 
I use a VPS and nginx, uWsgi and have a few settings already configured 
from my Project Template at the start of any project.
It takes about 2 minutes to deploy, so whatever some cloud service comes up with, it wont be much faster/easier. 

"
2016-12-04 10:40:41;Watch - A monitoring tool running on Django and Celery;"did you forget to watch your own server? problems with dns; your site is not reachable. I'd like to have a look at your monitoring tool."
2016-12-04 08:05:58;Bootstrap theme not displaying correctly in Django blog;In my experience, it's not good to have anything above your load static. That would be my first guess.
2016-12-04 03:09:11;ImageField always calling update_dimension_fields;
2016-12-03 19:24:47;Anyone use Django 1.10's Postgres full text search features? Wondering how this approach compares to Haystack.;"I use Trigramsimilarity in a project which matches OCR data to existing db entries. It seems pretty decent performance wise comparison against about 6k entries is perfectly reasonable.Coincidentally this is what I was implementing today. Findings so far:

- SearchVector can only take a field name, not a string. This means that if you want to, say, make encrypted text searchable, you first need to save it in the database as plaintext and then re-encrypt or delete it afterwards.

- SearchVector doesn't work on arrays of strings.

- SearchVectors can only be aggregated in Python, not in ORM queries. So e.g. if you're storing an email thread made up of several messages, you can't have a SearchVector field for each message body and then aggregate those to search the thread. (You could do something like using the highest ranked message as the search value for each thread, but I wasn't thrilled with that solution.)

So I think there are definitely some gotchas and room for improvement. But overall I got something solid implemented in ~2.5 days, rather than needing to spend a month learning ElasticSearch or whatever. Obviously if our site is successful then we're migrate to ElasticSearch or Algolia, but this seems like a pretty good first pass.Haystack + Whoosh are sufficient for many use cases and doesn't involve external dependencies.Damn, good to know this exists. I once tried haystack and couldn't get past the setup. I'll have to give this a try.Don't take this for factual hindsight, but here's what I experienced so far (15+y of side-projects).

TL/DR; : Don't plan to scale with Django*, but stick to building with it then optimizing modules by rebuilding some outside of the initial framework.

I'm a network guy (from the trench to the router, hence using GIS and IP related libs), used to code myself but now managing a DevOps team, and I'm relying on their actual feedback while only contributing to PM and specs/conception.

Django is awesome when it come to prototyping apps and functionalities in our network-production or business specific apps. I mean, with so many tools and libs available from day 1, you can build most prototypes within a single week, which perfectly fits agile method's proposals as how to bootstrap a functionnality-driven project. 

But the ORM and standard posgre's abstraction are considered as bottlenecks by most of my teammates when it comes to the 4th to 6th weeks of working on a frameworked codebase. It's just fu**ing too slow when the actual / functional data isn't fitted to a relationnal structure, not prone to indexing-optimizations within models, or needs lookahead / caching to avoid explicit prefetching.

What most modules tend to evolve to are monolithich micro-apps with connections to the most fitted backend data storage engine, with little to no framework implied. 

My role as a team leader tends to specify minimal API requirements between modules. These (most of them, at least) modules ain't built over Django, but on minimalistic, mostly event-driven, micro-framworks, or no framework at all, that still can interact with the prototype's structure through standardized messaging (MQ of any sort, we're not decided yet) or APIs (mostly REST-like, some socketed/simplified-approaches).

So here's the trend : whenever you need to scale larger than what the framewrok's abstraction layers will let you do, you have to use functionality-specific libraries to implement the bare-minimal data-engine to plug to your App's ecosystem with pragmatic API's.

This could allow you to scale way larger than what a ""greenwalled"" ecosystem such as Django will let you (though it's expending fast to viable inegrated options for most use-cases), and actually would let you maintain an exit door to anything you'd ever find ""restrictive"" about the framework.

15+ years working in Python-based environments tought me one single principle : prototype with existing tools, optimize with underlying magic (let it be Cython or externalized apps plugged through API). You'd then spare 80% of your time not re-writing glue code, and focus on the 20% of your team's time optimizing libraries or native (compiled) code that would otherwise eat up to 80% ressources during processing.

* You CAN scale with Django, for most web-publishing uses-cases. It's just that we've used this marvelous framework for so many alternate use-cases that it's somehow confronted to unintended consequences, and won't scale as well with optimized functionnal structures that it would with basic content-publishing (no judgement here, just a mere complexity-driven comparaison). Whenever you're doing inovative stuff, you'd rather learn how to build modular systems with APIs, let it be with Django or any other powerfull toolkit (well, none matches with Django's power as of today, bit let's give them time to mature).

"
2016-12-12 23:29:57;Where should programmer learn Django?;"The best tutorial to learn Django is the [official tutorial](https://docs.djangoproject.com/en/1.10/intro/tutorial01/).[I'm a big fan of the Django Girls tutorial.](https://tutorial.djangogirls.org/en/index.html)Hands down, it's the Django girls tutorial.The path I followed and the one I recommend to others as well, is: 

1. Firstly to do some reading up on Python (probably Python3 unless you have a valid reason to stick to 2), there are plenty of good tutorials online - Lynda.com, https://www.codecademy.com/learn/python etc. 
Don't worry about depth right now, just concentrate on the basics, how Python code 'looks', why indentations are important, what a function is, what classes are etc.

2. The Django Girls Tutorial.  It's available in several languages and really is the bees knees for creating your first working Django app.  If you follow the tutorial you'll create a full featured blogging app / website and deploy it for free on pythonanywhere.com
This step is really what got me most comfortable with Django, by the time I had deployed the blog I was pretty certain that Django would be my future go-to for creating full-featured python web apps!

3. Once you're comfortable with the basics, jump into the Django documentation to learn about all the bits that django girls missed.

4.  Get the ""2 Scoops of Django"" book.  Its the be-all and end-all of Django best practises, and you'll find a lot of people all over the net who recommend it. It's a bit too in depth for beginners, that why I recommend it as the last step.Two Scoops of Django is a great book.Mozilla Developer Network have a new Django tutorial that might be useful 

https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django
http://www.obeythetestinggoat.com/
This one may be a little less popular, as it's a pay service.  But https://www.codingforentrepreneurs.com/ ramped me up pretty quickly.

The guy who runs it explains thing pretty clearly.
(not affiliated with them at all, aside from subscriber)."
2016-12-12 15:49:32;Building a Custom User Model: A few questions as to best practices;"I wouldn't bother building your own custom user model, if it's for production use.  If it's for learning, go for it, but otherwise, use [Django All-Auth](https://github.com/pennersr/django-allauth) and set `ACCOUNT_AUTHENTICATION_METHOD=email` and `ACCOUNT_USERNAME_REQUIRED=False`. 

You really don't need to write a custom user model for this. You just need to create a custom backend. There are libraries out there which implement just this feature.Check out [django-authtools](https://github.com/fusionbox/django-authtools). It does pretty much exactly what you want.To add to what others have said, it rarely makes sense to use a custom user model. Most of the time this is done in order to associate additional information to a user. However, a far better method is to use a [OneToOne relation](https://docs.djangoproject.com/en/dev/topics/auth/customizing/#extending-the-existing-user-model), and add an InlineModelAdmin to your User admin config. This is actually far less work than registering a custom model.

As others have said, if all you need is custom authentication, then it is very easy to do this by extending the existing auth system, or even implementing your own authentication backend, since the authentication system in Django is pluggable. Here is an [example](http://stackoverflow.com/questions/37332190/django-login-with-email) of exactly what you are trying to do.Check out [django-username-email](https://github.com/tmm/django-username-email)You and I are doing almost the exact same thing =)

For my custom base user I included `from django.contrib.auth.models import PermissionsMixin`.

My reason for doing it is that employees and customers need to have access to different parts of the app, but both models share a lot of attributes so keeping it DRY makes sense to me.

If anyone has any suggestions I am definitely open to them."
2016-12-12 13:57:11;Lightweight file chooser;"For security reasons browsers don't give you the full path.

What do you need this for, if I may ask?"
2016-12-12 10:39:32;Django ADFS authentication;"I haven't used django-auth-adfs, but as to the Microsoft link you supplied, yeah, that ought to work.  The ""F"" in ADFS is ""Federated"", so you can put a remote domain controller in your Azure infrastructure that periodically syncs with your local AD.  The remote AD will be within Azure's DMZ.  

[Here](https://docs.microsoft.com/en-us/azure/active-directory/active-directory-aadconnect-azure-adfs) is a brief overview of it. > My concern is that it's only accessible internally, so I'm not sure how this will communicate with the app which runs on Azure.

In theory you might be able to set up some kind of persistent VPN connection to their server. I wouldn't recommend it. They're going to have to set up a public-facing server on their network that communicates with the ADFS server. Best solution would be if Microsoft already has something baked in that can expose a more common standard like CAS or OpenID. Those have a lot more libraries available."
2016-12-12 08:21:12;DjangoCon Europe 2017 | Join us in Florence, Italy on April 3-7;"I'm going to wait until I see some talk subjects announced, and I hope there will be more technical stuff this year instead of meta-stuff.    Subject: Your DjangoCon Europe 2017 Confirmation & Receipt

:)I wish I could go. Since I can't go, you should go! Why?

1. DjangoCon Europe is awesome. Great place to learn and network.
2. Florence, Italy is incredible. The food, weather, and people are just plain lovely. "
2016-12-19 09:50:35;Generating the leftmost column of a table before the rest;"Do the heavy lifting in your view. Create a new array that has everything in the right place and pass that to your template.

I think you can zip them together in the view like this

    array = zip(array0, array1)

and then iterate over it in the template like this

    <table>  
    {% for a, b in array %}
      <tr>  
        <td>{{a}}</td>  
        <td>{{b}}</td>  
      </tr>  
    {% endfor %}
    </table> If you're confident both arrays will be the same length you could do the following:

    from django import template
    register = template.Library()
    
    @register.filter
    def index(List, i):
        return List[int(i)]

And then in your template:

    <table>  
    {% for item in array0 %}
      <tr>  
        <td>{{item}}</td>  
        <td>{{array1|index:forloop.counter0}}</td>  
      </tr>  
    {% endfor %}
    </table> 

But it would be much, much simpler and less expensive to just build a single list in your view.You could just rotate the display of your table instead of its markup, [maybe like this](http://jsfiddle.net/MrLister/n9pfy/4/)"
2016-12-19 07:46:06;Suggestions for dev and stable branch workflows with respect to PostgreSQL database.;"Personally I use the same db for both develop branch and master branch. Usually works fine but maybe others can chip in and advise if this is the preferred approach?Usually I have only one database for development of my local machine. It's getting a bit more tricky if you think of database migrations which adjust the schema, because then the branches ""master"" and ""dev"" will not work with the same database.

What worked well for me so far: Once I had a local database ready as a good base for development work, I did a dump of it. This way I can use it during development and testing without having to worry too much, even if I screw something. Based on the dump I can have a good starting point within a snap.I use the same db on my Dev machine for master and dev. Just have to remember to apply ( sometimes backwards) migrations when going back and forth if the schema has changed. If it goes pear shaped then just clone from the production db again.The important part to remember about branches is that you're working with versions of code and not different databases.  If you are working with different versions/schemas of databases then you'll need to specify such in your settings/environment/django-settings/whatever and then merge between databases.

So, long story short, set up a separate database for development use if you need to do bug fixes or feature requests.  Use it locally and trash it if need be, but pull down database changes from productions and push code fixes up to production.I use one branch and do all my tests locally before pushing to master. I don't run an exact copy of my prod DB on my dev machine, everything in my dev DB is just tests and not meant to reflect the prod DB. However if I for some reason need an exact copy of my prod DB on my local, I just download it. 

I think this works very well.Personally I really like using virtualization to solve issues like these. You can use Docker-compose or Vagrant to create an environment where you can recreate your PROD environment. One of the provisioning steps can be to restore a backup from your production database. Then you can create a new environment for each branch you want. Also great for testing migrations, as you can tweak them until they work just right, and restore the previous state easily."
2016-12-19 02:55:50;Steam trading - Django-based one way trading, user logging in using Steam;"> I have zero experience when it comes to handling Steam trading and I was hoping I might bump into someone here who does

Asking on /r/Django is unlikely to find someone.Maybe start with [this](https://github.com/naiyt/steamapiwrapper/blob/master/README.md) ? I don't think you'll find anything django-specific, you should probably just search for generic Python or REST APIs."
2016-12-19 01:17:37;Database router not working;Which version of django are you using? According to the Django docs [allow_syncdb was deprecated in 1.7 and completely removed in 1.9](https://docs.djangoproject.com/en/dev/releases/1.7/#what-s-new-in-django-1-7). That would cause the kind of behavior that you are seeing.For completeness, this also may have been necessary (I did it anyway): making sure that my `website` folder was in the PYTHONPATH, and that my DJANGO_SETTINGS_MODULE was set correctly. 
2016-12-19 00:40:04;Django Multi-tenant SaaS on Heroku. 1 last problem I cant figure out.. Static IP addresses?;"Heroku private spaces is the closest you'll get to static IP addresses, you're probably better off skipping heroku and deploying straight to AWS most likely.How are you running this. Nginx plus gunicorn will trivilially allow you to run a wildcard domain. In your app you can read headers to know the user.Do you really need the user to be in the subdomain?

https://service.example.com/client1/*

This would seem sufficient."
2016-12-26 18:54:47;Running django models on a server;"So you have a standalone script which writes to a Mongo DB without using Django, and later on you'll make a Django project which can also talk to that DB?

If that's the case, you just need to periodically run your script (assuming that's how you intend it to work). There should be no need for Apache or such; just tell `cron` to run it for you. https://help.ubuntu.com/community/CronHowto

When you do come to host the Django project, Apache is a fine choice. nginx is the other choice; you will find plenty of help on how to set up either. If your server already has one installed, use that one.

Django does have a built-in HTTP server but it's designed for development work. You shouldn't expose it to the public internet.You'll need something to run Django on the server, whether that's Apache, Gunicorn, or something else. 

You also need to consider how you're going to collect the data from the API. Your traditional Django view is only going to get executed when someone makes a request for that page, so you'll need to do something to regularly execute your code and poll the API.If you plan on using Mongo db with Django your going to have a bad time. 

https://medium.com/cs-math/2014-django-development-mistakes-in-2014-f48623f58b21#.tzqix6l5e

I would recommend using PostgreSQL instead. 

I also recommend nginx with either uwsgi or gnuicorn. I prefer CentOS for my host OS as it is basically RedHat Linux and extremely stable. "
2016-12-26 13:31:10;django-pixels;"Why just Python 2?    def pixel204(request):
        """""" Return a 204 response. """"""
        response = HttpResponse(204)
        return serve(request, response)

Why do you even need a docstring?    
Why do you need response midvariable?
And why do you need empty models.py file?

    def test_something(self):
        pass

This is not real test"
2016-12-26 09:09:53;Use Django or end up building a Django;"[Any sufficiently complicated Bottle or Flask app contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Django.](https://en.wikipedia.org/wiki/Greenspun's_tenth_rule)Here is the counter argument presented by Aaron swartz himself when considering Django as a possible framework when they switched reddit from lisp to python back in 2005.  http://www.aaronsw.com/weblog/rewritingreddit . Some of the arguments are now outdated but a lot still rings true today, it's a fun read.https://media4.giphy.com/media/lqv8wKcdblzRS/giphy.gifThere's that small detail of having to debug and fix your code and some of your external ""apps"" when the core Django devs break backwards compatibility every couple of months.

If you're using it commercially, make sure you budget for this.[removed]"
2016-12-25 20:01:41;What's the state of django 3rd party libraries vs. rails?;"https://djangopackages.org/categories/apps/You are looking the wrong way. You need to be looking for tools/frameworks and examples for front-end stuff. You will find a django package that does all of those things, but not in an integrated way, and you'll have to go through a lot of work to make them all work as you want You can do anything/everything in either at this point. Its just preference. Use what you likePillow might be good for image uploads. You will likely want to take a look at Django-Channels ""https://channels.readthedocs.io/en/stable/"" for some of this. Mainly the chat/messaging system."
2016-12-25 18:05:47;AJAX & Django;"Here is a good explanation.
http://stackoverflow.com/questions/20306981/how-do-i-integrate-ajax-with-django-applications 

I imagine you would need to use [setInterval\(\)](http://www.w3schools.com/jsref/met_win_setinterval.asp) and just have the client check the view that is handling the AJAX request every second or so. This may be a good use case for django [channels](https://channels.readthedocs.io/en/stable/) and using websockets in your client side code."
2017-01-02 19:40:29;Last user activity;"I use a middleware. On every request set a datetime field in the request.user.profile to the current time. I actually wrote a blog post about this a while back on a way I accomplished this.

https://godjango.com/blog/record-last-access-not-just-last-login/

You can extend it further like someone mentioned in a comment and do a custom middle ware.Update a table field whenever a user makes changes? Or use a client side script which sends a request every once in a while, in the server side associate the current time for users last action. Or use a middleware. Or...

There are basically a dozen methods to accomplish your task and the required python knowledge is already present if you've setup Django and know that there is a last_login field.Event Sourcing pattern?  

1. http://martinfowler.com/eaaDev/EventSourcing.html  
2. https://www.youtube.com/watch?v=aweV9FLTZkU  
3. https://2015.pycon.ca/en/schedule/39/  
"
2017-01-02 17:41:34;Trying to make my own version of django-admin startproject. Have I created a monster?;"This might be useful: https://github.com/pydanny/cookiecutter-djangoDjango already has a system for this that you may find way easier to modify.  `startproject` takes an [option of a template of your starting django project](https://docs.djangoproject.com/en/1.10/ref/django-admin/#startproject).  [This folder](https://github.com/django/django/tree/f996f7366724c75a74fc316b456e6bee98688077/django/conf/project_template) contains the base template that django uses during `startproject`.  You can fork and modify that template, or find a number of other folk's templates now that you know what to look for.> Have I created a monster I can no longer control?

Do you feel in control?"
2017-01-02 15:43:44;Major issue with templates, not updating;"When you say you tried clearing your cache, which cache did you mean? Your browser's cache, or your server's cache?

This is almost certainly a problem with your server's cache, or potentially (if you are using it) Cloudflare's cache."
2017-01-02 10:23:26;User in class based view;"Every class-based view that's part of Django stores the `HttpRequest` object as `self.request`. So you can simply refer to `self.request.user`.Firstly you already have the user object on `request.user` - there's no need to do another lookup. I'd really recommend reading through the [official auth documentation](https://docs.djangoproject.com/en/1.10/topics/auth/default/) - there's probably a better way to achieve what you're trying to do.

As for accessing the user in class-based views, in most CBV methods you'll find the `request` object on `self.request`.Thanks ubernostrum and radiacnet that was what i needed ;)"
2017-01-02 07:59:01;Blog tutorial in Django 1.10;"Did you do the official django tutorial? 
https://docs.djangoproject.com/en/1.10/
You build a blog web app from scratch. 
What're the issues you're facing though?[Djangogirls do a comprehensive blog tutorial](https://tutorial.djangogirls.org/en/), or you could use wagtail.  If you're struggling to build your own, Wagtail might be a bit too much magic, though.The tutorial you linked by /u/sentdex is literally a step-by-step on how to create a blogging app.Are you using wagtail or any CMS?Try [Tango with Django](http://reddit.com). Maybe it will help you. When I tried to learn Django, I was looking for as many tutorial I could find. Also look at these usefull [links](http://www.fullstackpython.com/django.html). Good luck in your future endeavours.[deleted]Checkout this channel https://www.youtube.com/channel/UCWEHue8kksIaktO8KTTN_zg They have comprehensive tutorials on building a blog in django. It helped me so much and I believe it is probably the easiest way for a beginner to learn django. Just follow and code along."
2017-01-09 16:50:06;Generic Catch-All Error Page?;"By default there's different template names for 400, 403, 404 and 500. You could just create an error.html and in 400.html, 403.html etc just extend that template. See https://docs.djangoproject.com/en/1.10/topics/http/views/#customizing-error-views for more infoYou could just point the `handler404`, `handler403` etc in your `urls.py` all to the same view function. Bear in mind that if Django dies or just fails so magnificently that it can't even process the 500 error template (it happens), you're left with the Nginx (et al.) error.

It may be worth considering handling these error codes solely at httpd level. Depends what you do with your error pages. It might be worth having a fallback for any 5xx page that nginx can serve."
2017-01-09 16:03:34;Mistakes I Made Writing a Django App (and How I Fixed Them);"I think I've made every one of those. And I raise you hardcoded primary keys in every single view unit test (which looking back are actually integration tests) that I wrote. On (2), I think `resolve` is better than `startswith`

    def service(request):
        match = resolve(request.path)
        try:
            return {""service"": match.kwargs['service']}
        except KeyError:
            return {}

if you feel like that might be too much slower than the loop method, you can pass in some hints to resolve, but I think it's fast enough that you wont notice.I would start with

> runs on Python 2.7Awesome! It's always nice to see where other devs have made mistakes and the steps to improve them. Helps when you are about to make a similar mistake!Your site looks amazing."
2017-01-09 15:41:58;I've got plans for a Django project, but am unsure about organization and how to make all the pieces connect--can you help me out?;"This is what Django management commands are usually used for.

Wrote a function which scrapes the API using requests and stores the data using your Django models.

Now write a very short custom management command which calls that function.

(Avoid the temptation to just put your scraping code directly in the management command - doing so is harder to test interactively from an ipython shell or write unit tests for)

Your cron job can then call manage.py <your_command> directly

The advantage to doing this is that Django's management command infrastructure will handle setting up database connections etc for you.

As for model design: whatever makes the most sense for the kind of queries you want to answer. I suggest storing the raw JSON you get back from the API somewhere as well since that makes it easier to debug and experiment with new data models in the future.[deleted]"
2017-01-09 15:38:03;Django forms with a Normalized Database;"    class CustomerForm(forms.ModelForm):
        class Meta:
            model = Customer

You will also need a ManyToMany field from Customer to Program called 'programs'. Constraining it to just five is a little tricky, but should be resovable in a clean_programs form method.

 Some other advice:

* Your field names are not named according to PEP8. That's going to bite sooner than you think. I suggest learning that PEP8 standard and adhering to it.
* Don't worry about a fancy front end now with Angular, react, and so in. Just get it working with HTML.
* Get Two Scoops of Django before you do any more on this project. Your future self will thank you.

I don't have time to go into huge detail but start by playing around in the admin as it's much quicker to prototype modelforms here and see if the 'natural' output from your schema gives a satisfactory UI or not.

1. Assuming your db already exists and has the schema you want them use inspectdb to quickly create model class scaffolds. Check the output and correct it as neccesary
2. Once you've got models create ModelAdmin classes for each model . If you have a model that should always be in a many to one relationship with another model make it in inline of the one.
3. Many to many is usually best handled using django-autocomplete-light. It gives a much nicer UI than any other method I've tried.

You should be able to knock up a basic CRUD in a few hours this way. As most of the admin is just built on normal django forms and views then - if you need to create a UI for non-staff - recreating this outside of the admin is pretty simple and you'll have a proof of concept to refer back to.I have thoroughly struggled with the front-end.  My models work, and the functionality I want is there and I can test everything in the console... but trudging my way through front-ends and forms and jquery and javascript and trying to decide between angular and react etc etc has caused a ton of issues.

Ultimately, we've used the Admin for the things that we (the admins) need to do... update select lists or build our ""workflow"" or check our cron job history...  

But now we're starting our front-end.  We landed on Crispy-Forms and Bootstrap 3, but it's still a ton of customization to get datepickers and formatting and columns and tabs to work.

I would definitely suggest starting with logic only first -- just getting a POST to update a model with a button, or having one button add a new customer while another button saves that customer's first order, etc... validation of invalid emails, even something like enabling something like autoFill a single field will lead you down a long API / AJAX path, let alone an Audit Trail.

Oh, and we use DataTables -- it has a bit of a learning curve, but it has been really fantastic."
2017-01-09 15:05:44;What's the difference between these two types of property definitions?;"Those two examples are, under the hood, completely identical. The `@property` decorator syntax just desugars to to the second one.

As a rule, the first approach is generally preferred. The Django codebase seems to make fairly extensive use of both. I'm not sure exactly why, but my best guess is that it's largely for historical reasons.The only examples of the second syntax I could find in Django appear to be used to pass a second 'setter' function (the decorator syntax for this is quite ugly IMO). [example](https://github.com/django/django/blob/master/tests/properties/models.py#L22)

Edit- found some more in `fields.py`. These usages seem to be used to keep a reference to the original function. This can be useful if you want to pass the function to something like `map` or `filter`.It's the same thing, just using `property()` as a decorator. ""Python decorators"" would be a good search term to learn more.Maybe backwards compatibility with something that calls `foo._get_property()`? Or it's possible they just have inconsistent style in their codebase is spots."
2017-01-16 22:21:06;Django question: build visual execution work flows;"I guess you can try a bit of http://viewflow.io/ with something like gojs/jointjsHello molan.

I have been using GoJS together with Django Rest Framework to create some interesting things.

We have developed a package to allow the user to create and manipulate workflows, together with tasks to fired by celery.

If you are interested we can talk with the company to opensource it."
2017-01-16 22:14:56;Probelm: OpenShift v3 + nginx: How to serve static files;Use nginx s2i. Ex: lunik/s2i-nginx docker image
2017-01-16 20:11:56;Trap in counting related objects in Django;
2017-01-16 19:43:45;django-idefix: A little toy project looking for contributors;"Looks like a fun learning project, but really why don't you just install a JSON formatter in your editor of choice? I don't see how this makes editing fixtures any easier than using Sublime Text.fixtures can easily be created from existing data in the DB. 
( http://stackoverflow.com/documentation/django/4933/database-setup/17482/fixtures#t=201701181942453706481 )
So I never actually edit fixtures."
2017-01-16 18:25:32;Django app deployment on AWS using ElasticBeanStalk.;"Make sure you have all the AWS wsgi and environment files setup properly. You'll also want to make sure you have a requirements.txt file filled correctly and in the correct spot.

Also, could you run tree or get a snapshot of your project directories and file and put it up here. It's hard to tell what goes wrong without seeing that. I had issues with this myself, but got it working with python 2.7 and django 1.8:

make sure you have the .ebextensions hidden directory in the root of your application. Within that hidden dir, you will specify your WSGI path info in a file named 'django.config'. For an example Web App that might look like:

    option_settings:
      aws:elasticbeanstalk:container:python:
        WSGIPath: Example/wsgi.pyIt sounds like the path to your files are invalid. Can you share with us the elastic beanstalk settings you are using, as well as your project structure?Cookiecutter Django has built-in support for elastic beanstalk"
2017-01-23 21:44:42;What are advantages of MTV architecture over MVC?;"[deleted]I came in to programming when the web was already the dominant medium, so I always associated MVC with MVT. It's interesting to hear about how MVC ""used to"" be, concerned with passing state around. It makes sense to think about web pages as being stateless; every new page just throw it all away (except a session cookie and url). 

Anecdotally, I had to build a screen scraper around a set of forms on a 3rd party website built using technology from 10+ years ago. It had this crazy ModelState object in the form that recorded every single change. I mean, if you chose a radio button the whole page would reload just so this state could be relayed back to the server and the ModelState updated. It blew my mind! The experience sucked with all those page reloads and when I read up on the underlying technology the author stated that it was a pretty bad concept. I finally came to the conclusion that somebody built it based on their background in MVC and tried to shoehorn it directly into the HTTP request/response flow. I think that ""classic"" MVC is pretty bad on the web, save if you have something like sockets. The section on this in Django Unleashed by Andrew Pinkham affirms what you read already, but here's his take:
""Whereas MVC is strict about which part of the framework can communicate with another, MTV is looser and allows for communication between all of the parts of the app.""Honestly, they're both the same thing. And they're both pretty terrible analogies for web development (I'm mobile right now so I won't go into details). 

But the thing that irks me most about MVT is that it pushes the template as a major component and disregards the status code and headers. And the MVT analogy breaks down when you begin doing stuff like JSON or XML APIs which aren't rendered templates but serialized data. It's in the [FAQ](https://docs.djangoproject.com/en/1.11/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names), but MTV is a more accurate term for the stateless request-response cycle that powers HTTP 1.1."
2017-01-23 21:43:38;SSO/CAS In Django;"I don't have experience with either of those libraries but I do use https://github.com/kstateome/django-cas as a cas consumer (our company uses drupal as the provider). 

It works like a charm, no complaints. We are only sharing name / email / authentication so user permissions aren't synced but it looks like that would be possible. I had never heard of CAS before this project but it works well for us.Looked into something like Okta..?"
2017-01-23 21:26:00;Altering database tables based on file uploads;"This is definitely not a job for the Django ORM, or any ORM for that matter.

If you want some database abstraction, I would recommend SQLAlchemy for this.

SQLAlchemy makes it quick and easy to grab column headers into a list. By grabbing the CSV headers and the existing table headers, you can just do set math on them to generate the difference, something like this:

    >>> db_headers = ['ID', 'ColA', 'ColB', 'ColC']
    >>> csv_headers = ['ID', 'ColA', 'ColD', 'ColE']
    >>> unique_csv = list(set(csv_headers) - set(db_headers))
    >>>
    >>> unique_csv
    >>> ['ColE', 'ColD']

From there, you can use SQLAlchemy's [DDL function](http://docs.sqlalchemy.org/en/latest/core/ddl.html#sqlalchemy.schema.DDL) to execute your schema changes. To make things simple, I would recommend using Django Templates to create your SQL statement. You can use a `{% for col in cols %}` loop to generate the columns you need to add.Create one json field for all the data, aka NoSQL SQL. It sounds like you're not going to be running any queries on the columns, just returning the data to the front-end for light manipulation, so this should work.How would you use this elsewhere in your app?

It sounds like you shouldn't be using Djangos orm. I'm not sure if one exists that does what you want.How about using a search engine like Whoosh or ElasticSearch to do the filtering and sorting of contents? You can use Haystack for easy integration of search engines.

So, when a user uploads a CSV file, you extract the header data and feed it to the search engine for indexing.  All querying (filter, sort, etc) are now done on the search engine. That way, your database tables will remain as before with little or no modifications.

Edit:
Another option would be to just store the header data in a separate table and just have a foreign key point to the other big table. You will use this new table for filtering."
2017-01-23 20:02:31;We customized the heck out of the admin, now it's starting to bite us. Mitigation strategies?;"[deleted]OK. An anti-admin thread. My bat signal has gone off.

Can you give some specific examples? I've got several fairly complex apps deployed with extensive admin customizations and on the whole they are stable and maintainable.

The admin is ""just Django"" - there's nothing to stop you maintaining a tight integration with the admin but using entirely your own views and forms where it makes sense. Admin integration can be as light as simply reusing the look and feel and inserting your own views in place.In every framework and platform in every language I've used, I've never seen it pay off to extensively customise core functionality in the long run, and virtually all of them warn against it for good reason: You *will* run into a brick wall when it comes to long-term support, as new versions often won't upgrade properly with your customisations in place, resulting in a lengthy process as you often end up having to completely reproduce said customisations in the new version every time you upgrade - and the more you continue to customise, the worse it gets.

If you're looking to add functionality to the admin site, make sure you do it within documented methods; it's far more likely that these will carry over with future upgrades, and follow a model that's easier to manage. Oddly enough the Django Admin site does have documented support for both [custom actions](https://docs.djangoproject.com/en/1.10/ref/contrib/admin/actions/) and as of Django 1.9, [JavaScript](https://docs.djangoproject.com/en/1.10/ref/contrib/admin/javascript/), but the implementation is pretty heavily prescribed, as you might expect.

If you can't achieve what you want within the restrictions above, you really want to make a new application with its own frontend for custom admin operations: Keep the admin backend code clean, and only used for the rare cases where you need to get down and dirty with backend operations.Can you please share what's limitation do you have with django admin?

I'm working on the admin replacement library - django-material, and looking for ways how the frontend part could be improved.You might try https://github.com/sanoma/django-arctic If it's mainly used for publishing content then you could think about wagtail as that seems to be very highly regarded.  It could save you building a lot of stuff yourself.I leave the default admin as-is, and create my own admin pages if I want specific views (usually just a few special cases. Basic CRUD operations I handle on the default admin page). Other than something like selenium or ohantomJS dont know how to test django admin.  I dont know of a pure django way to test it."
2017-01-23 19:05:12;Strange Admin Query Issue;The ?= part is the GET query params - I'd start with how your route is pulling extracting the parameters
2017-01-30 18:30:21;Advice For Payment Processing;"I have used strip many times in the past, and I can say it was very easy and should be almost as pain free as the square variant if the APIs are the same.

Standard practice for these payment APIs includes:

- Store as least amount of information on your server / database as possible, 

- Do payment processing in client side JavaScript and not on your own server

- When needing to display data to users, pull as much from the API with their associated token as possible (i.e. Payment statuses, account balance)

- Store the API token simply in the database with a foreign key to user and the token value

- Get the API token from client side after form validation (without Django forms typically, as this causes a refresh and server side tempting sending CC info on the wire) and save the value to the database in your above model

That's what I can think of off the top of my head We use CyberSource and Paypal at edX. I've also experimented with Adyen, Braintree (owned by Paypal), and Stripe. Adyen, Braintree, Stripe, and CyberSource (to a lesser extent) have very similar, and simple, integrations. If you can use one, you can probably use them all. At that point the decision comes down to which processor has the best rates and support."
2017-01-29 21:50:55;Model field for a dynamic dropdown of years;"Try doing this:

    def get_years(initial=1970):
        return [(year, year) for year in range(datetime.datetime.now().year, initial, -1)]

    class Profile(UserenaBaseProfile):
        starting_year = models.CharField(blank=False, max_length=4, choices=get_years, default=datetime.datetime.now().year)

The get_years is simplified - you can use third range argument to iterate backwards. Also you should pass get_years as a function.

I think the original error you were getting is because the choices structure should look like this:
    
    choices = (
        ('1', 'Option 1'),
        ('2', 'Option 2'),
        ('3', 'Option 3'),
    )
 
and your structure is straight up list of ints.Set ``choices`` on the field in your form's ``\_\_init__`` methodIt's pretty terrible to use a drop down for years. seems like you've got this solved, but for future reference maybe, you could use a modelchoicefield in the form and then override the queryset in the view like this:

form.fields['starting_year'].queryset = get_years()

hope this helps anyone struggling with dynamic dropdowns as i had"
2017-01-29 21:03:58;How to use a 3rd party javascript addon into django generic views?;well you just have to edit your template and add the js code, the only thing you need to know in this case is the id of the form field where you want to use the time picker and you can easily check that with the browser inspector or by viewing the html source of the page
2017-01-29 12:21:26;django-cookiecutter-boilerplate;"Hello, after almost 2 years experience of development. I decided to create my own cookiecutter template inspired by Django-cookiecutter project.

Feel free to ask me something about template or create issue :)  

Maybe someone knows Docker and server settings more than me and can help improve docker-compose configs for production.It would help to compare to the original django cookiecutter project so we know why we would choose your project over it"
2017-01-29 10:09:48;SuccessMessageMixin working local, not live;"`forms.Form.is_valid(self)` should be `self.is_valid()`. Also, I don't think you should have that `if` statement at all, it's up to the caller to only call the method when the form is valid.

Are you running the same Django version locally and live?

Make a simple view which just adds a message, does it work locally and live?Do you use the same settings file in both production and dev env (hint : you shouldn't). If so maybe you should check if `django.contrib.messages.middleware.MessageMiddleware` is present in MIDDLEWARE setting in production file too.Can you post your success message mixin code?"
2017-02-06 20:46:30;how to use shared sessions between django site and android app?;I'm not sure what your intention is. Normally you'd provide some sort of API for your Android application. You can either ask for the same username and password you are using with Django anyway or implementiert an other way of authentication (oauth e.g.). Either way this should and would be coupled with the Django user. Pinning this to one shared session between web and app provides no benefit I'd immediately see. If your Android app sends `Cookie` headers in requests and obeys `Set-Cookie` headers in responses then you will be able to use the usual login/logout Django views. Check the documentation of your Android web browser widget or HTTP library for what it says about cookies.I am using django-oauth-toolkit for enabling third-party authentication, perhaps it is overkill for your needs, but you could try.
2017-02-06 16:13:58;Best place to override;"If you modify the existing model instance from ""Haring"" to ""Harding"" everything else that references that model will automatically just...know it.

It's a little unclear what behavior your expecting or wanting here.Update all rows that reference the wrong Harding to point to the correct Harding, then remove the wrong Harding. I guess I don't understand the problem because that answer seems obvious to me.

    Thing.objects.filter(owner__last_name=""Haring"").update(owner=User.objects.get(last_name=""Harding"")
    User.objects.get(last_name=""Haring"").delete()
Actually, I'd put it in the Admin class by overriding save_model. Call the original implementation using super() to save the form. Then search for instances with a different pk but same name, and merge them in."
2017-02-06 14:49:37;I created a Django package to render Chart.JS charts.;"Hi, needed a package like this for a little project I am working on, now I have released it separately. Will add a comparison of this package to others (e.g. django-chartit or django-graphos) in the future, but haven't gotten around to this yet. The main takeaway is that this package focuses solely on rendering and configuring .Chart.JS chartsLooks really nice. I like using Chart.js so far. So this could really make it a lot better! ThanksLooks cool. I'm going to need charts for my project soon so I'll keep this in mind. Thanks!That looks really helpful. My first thought is about interactivity. It looks like a combination of async and parameterised charts would make it possible to easily filter or modify a single chart by pulling in a new dataset.

It would be great to include an example of this in the docs."
2017-02-05 23:41:07;"Reconciling Django’s template-based MVC model with React's Component-centric model; AKA how to build your front-end without making a single-page-app";"The problem with doing it this way is that you end up with real issues with separation of backend and frontend logic - your views and your frontend become inextricably tied.

This is fine in smaller situations, or where you are only using react for certain components (in which case I'd argue for either Vue or Jquery being better solutions).

I also cant' see how you're going to get that to work in a buiild process once you scale beyond a few pages - are you going in and adding a new webpack entrypoint for each page? Presumably if you are you're using webpack-loader to render the script tags?New post, I welcome all writing feedback, typo corrections, content suggestions, etc.  I'm working on making it funnier and more entertaining to read, but all the initial content is there.

This is an issue I've heard a lot of people complaining about, but I never see tutorials online about how to manage passing data to frontend without exposing it all via REST APIs.Thanks for this!  This is an approach I think I'll find really useful. I only have a tiny bit of 
experience with both React & Django, so let me see if I'm getting this right. If I wanted
to describe this strategy, would it be accurate to say:  

1) Let  your Django views return the data you want to render, in React-friendly format, 
including a relative path to the component JS file. 

2) Render those views with a template that designates a div for React to render into. 

3) Django template loads the React JS file, then React renders/transforms the props 
the View returned. 

4) Profit.  

Is that about the gist?

Seems simple and graceful. Would love to hear some more about how you handle inter-page/inter-component state and the rest of the real world complexity you mention. 

I didn't notice a link for this little example-- do you have a project you'd share?  My experience 
with web-dev tools in this era has been that there's often a couple hours of fiddly setup 
before you can start actually making anything actually happen. If you've got that build/load 
etc. system dialed in, I'd be grateful to see exactly how you set things up. 

Cheers!Great post, I ended up doing something similar before when we just wanted to add a single React component to an existing page.  Am definitely interested in your ""next blog post"" items :) Webpack or browserify ?How would the front-end build process would look like in that sort of setup?Why bother with React? Why not just render everything in Django?Where does the `|json` template filter come from, if you don't mind me asking?

**Edit** Nevermind, I just saw the [linked GitHub repo](https://github.com/Frojd/django-react-templatetags).Call me pedantic, but Django has never, ever claimed to be a MVC framework."
2017-02-05 23:18:10;Django for Flask users · a quickstart;great article thanks!
2017-02-13 18:40:10;GeoDjango + MapBox;"This is a bit late, but one option you should consider is using django-leaflet and using the leaflet API to pull in your Mapbox layers.  I've used leaflet a good bit, and it works pretty well with mapbox.

The leaflet tutorials in addition to the django-leaflet readme should get you started."
2017-02-13 14:46:19;Designing Modules in Python - Part III (Retries);Why, how the retry logic via a decorator??This short series has been a pretty interesting look into the subtleties of writing a good API for your modules. I think more consideration could be put into the structure of the last segment, the A/B tested one.
2017-02-13 12:34:28;To Use Guardian or Not?;"I've found django rules to be a good lighter weight substitute if it works for your needs: https://github.com/dfunckt/django-rules I've done object level permissions both using `django-guardian` and not. Based on that experience I would say that if you need permissions on a broad range of different objects `django-guardian` is a good choice.

On the other hand, if you only need object permissions on one or two types of objects it will be cleaner, faster, and easier to just write it yourself. Object permissions are actually very simple to add on top of the base Django permissions system, and `django-guardian` really only makes sense if you're starting to think to yourself ""maybe I should use generic foreign keys"".I have plenty of many to many fields to check for permissions. It's kind of annoying that Django has no easy way to query for user permissions and group permissions at once. But it's not too hard to make a helper method that does that."
2017-02-13 00:25:23;Django AttributeError: form object has no attribute x;"Ok, found the solution, so in case anybody ever stumbles upon a similar situation, here's what it was.
I actually had a couple of errors, one was bad syntax:

1. Since the form object doesn't hold those attributes, my code should have been:
    form.cleaned_data['first_name'] 
and so on.

2. In views.py it was:

    myfile.write('%s ... %s ... %s ... %s ' % form.first_name % form.last_name % form.email % form.password)

which was wrong syntax. It's supposed to be:

    myfile.write('%s ... %s ... %s ... %s ' % (form.cleaned_data['first_name'], form.cleaned_data['last_name'], form.cleaned_data['email'], form.cleaned_data['password']))"
2017-02-12 21:43:54;Questions about user login;"For question 1 - you'll need to get the information about each user from the client (the browser) to the server (the app). There are many ways to do this which depend on how the user has interacted with the server before. E.g if they've previously logged in the the user is available in request.user so in the view you can pass a tailored context to your template to adjust the returned content for them.

Alternatively, you can do what you suggest, provide a URL for each student. In which case the students I'd in the URL will be available as an argument in the view. 

Which of these is better will depend on how the user relates to the student ID, e.g. Do you want someone to be able to look up someone else's profile?For question 2 there is a feature in Django forms that supports this... but I can't remember the name. I'll look it up when I get a chance.When you mention having a separate url for each club.... are you thinking of manually creating a page for each? Because that seems tedious and time-consuming.

I would definitely suggest create a 'Club' model in your database, with a ForeignKey to User called, say, owner or captain, something along that line.

So, you could have your default view look up the Clubs owned by request.user. For instance, if your model looks like this:

    class Club(models.Model):
       name = models.CharField(max_length=100)
       owner = models.ForeignKey(User, related_name='owned_clubs')
       members = models.ManyToManyField(User, blank=True)

then the code:

    request.user.owned_clubs.all()

would give you the set of clubs they owned.

Originally I was thinking of just looking up the club that the logged in user owns and returning it, but that would cause a problem if a user owned multiple clubs (those overachievers....)

so instead, if you had a url pattern like

    example.com/club/{club-id}/

then in your view, you could check:

    club = # lookup Club by id
    if club.owner is not request.user:
        # return an error

if you want nicer looking urls then /club/14/, look into something called an AutoSlugField and have it generate based off of name... so a club named ""Chess Club"" gets the slug ""chess-club"", and then you can use those in your urls to look up clubs like /club/chess-club/

This is all just off the top of my head... if there's anything you want more detail on, let me know, I'm happy to help."
2017-02-20 23:26:10;Need help making API calls to DRF from vuejs;"You need to include the csrf cookie or use session/token auth from drf and fetch your token prior to querying the API.

Im on mobile so cant give concrete example but drf has good documentetion on authorisation. Have a look at the DRF docs 

Edit: spellinghttps://docs.djangoproject.com/en/1.10/ref/csrf/

You need to add the CSRF info to your HTTP requests."
2017-02-20 16:54:05;Help me integrate Google Map in one page Django site?;"See https://developers.google.com/maps/documentation/javascript/adding-a-google-map ,   http://stackoverflow.com/questions/4074520/how-to-display-multiple-google-maps-per-page-with-api-v3 . Use Django template to output lat, long and maybe Google api key. correct me if im wrong but how is this django related?Shameless plug for a project I'm associated with...

If you can use OpenStreetMaps, I would suggest creating a model or form with django-osm-field. Embed the form in your SPA and create an endpoint that accepts POSTed data via AJAX from the HTML form.

If you do end up going this route, let me know how it works, or feel free to ask me any questions.I'm using leaflet for this, here is a quick start: http://leafletjs.com/examples/quick-start/

EDIT: you don't need to integrate, that's why you aren't finding anything, what you can usually do here, is to use django's templating system to inject your database data into javascript.

Let's say that you are following the leaflet example, change this line:

    var marker = L.marker([51.5, -0.09]).addTo(mymap);

to something like this:

    {% for store in stores %}
        var marker = L.marker([{{store.position.lat}}, {{store.position.lng}}]).addTo(mymap);
    {% endfor %}

of course this javascript should be processed by django, so you should add it to your .html file.

Another solution, if your data changes on real time, is to connect via ajax and load that data, but that is a little more complex."
2017-02-20 15:09:34;Django plugin for authenticate against WordPress;"My question is, has this been done in AllAuth?
If yes, I would stop.
If no, I would open a fork and add it in on the GitHub site and write based on their standard practices. Cause you know ""community man"".

But seriously, look at how AllAuth does their 3rd party integration to answer some of your questions. No need to reinvent the wheel here.[deleted] I guess if there is no demand for the plugin you woulnt of made it.
As for the blocking of authenticating a user, are you using async calls? Async calls shouldnt block the flow.. 

As far as authenticating goes, if authenticatie returns None just return generic invalid user/pw message? It looks good to me.
  "
2017-02-20 14:57:15;Problem with django.db.utils.OperationalError in Django 1.10;"Does `article_systemarticle` exist in the database?

Usually this happens when there is a migration already that makes this table, then the table is removed manually. 

You could make a custom migration that creates this table again, or just manually create it.Maybe you need to make migration like `python manage.py migrate articlesystem`?"
2017-02-20 06:15:52;Does it make sense to use non-canonical urls?;"This sounds like a good idea, until you realise it's actually the opposite. That approach is called Security through Obscurity. It's a crutch for a developer to make him think his program has better security than it actually has. 

Think about it: how hard is it really to brute force a URL if someone really wanted to? Not really, right? And on the other hand, you sacrifice some usability (human-readable URLs are not just for SEO) for not much security - a common trade-off when it comes to security, but it should always be a sensible one. 

You should make sure you don't screw up the permissions, instead of relying on a ""let's hope no one finds out"" if you do. I do this for a private B2B video platform but it sounds like you have some definition problems.

> Access will be ***strictly controlled*** on a report and client/user basis.

If access *is* strictly controlled, this sort of thing only serves to make the system less usable for people who are allowed to use it. It actually sounds like there are scenarios where access isn't strictly anything. That's a problem. Access to this stuff should be checked on request to it, not just the listing page.

> ... this is also how I am storing the actual documents

That makes it sound like you're giving direct access to the files. Hell no.

If you're hosting locally, keep the files private and use the X-SENDFILE header (via [a library](https://github.com/johnsensible/django-sendfile) to make it easier). That means access to the file remains within Django and it's Django just telling the  HTTPD to serve a specific file (which isn't directly available by URL).

CDNs make this more tricky but we use Cloudfront for video streaming and just time-encrypt the URLs with a signature and a keypair that Amazon can verify I wrote. I'm sure others can handle this scenario.

---

If you need authorised users to be able to share things with unauthorised users, I'd set up completely separate URLs that add extra data to the equation, like a token that lets you know *who* shared it and a good hash of that token, plus the article ID, plus secret salt.

When somebody comes in on one of these URLs, you can securely see who authorised it, if they still have permission, log the whole thing and then show the content.

You can go one further and store each ""share"" request (each time you generate this quanky URL for an authorised user) and then PIN the first user's IP address against a request so only they can view it while they have that IP. Paranoid management loves this but if they share it on (eg) Whatsapp or Facebook Messenger, the chat service will ""preview"" the URL and end up blocking the recipient. An interstitial ""click to view content"" might help there... But now we're getting complicated.

Again, these are things we actually do. I know signed URLs could be viewed as fancy obfuscation (a million monkeys with a million keyboards, etc), but they're significantly stronger than just giving the files funny names. They also let you interact with the request and IP-ban (by logging through to a fail2ban rule) the people hammering random URL access.Why not opt to use the rest framework and use object level permissions?"
2017-02-27 21:10:18;Modern Django — Part 1: Project Refactor and Meeting the Django Settings API;"Hey gang, just posted Part 1! It was a long write up, sorry for the wait.

It goes over: restructuring the project, Django's Settings API in detail, and ensures our application is running.

As always, appreciate feedback. Thanks.Finally a how to that starts with settings API. Awesome! Thank you!This looks great! I'm currently upgrading a couple of my apps from 1.7 to 1.10. I skimmed over it and like the things that I saw, can't wait to sit and go over both articles!Thanks for the write-up. I'm not sure why you need different settings and requirements files if you're using Docker? I thought the point of Docker was that you could reproduce app requirements in dev, staging, and production environments w/o a difference."
2017-02-27 19:29:49;Django cannot locate my static files for css/js, and i've followed a tutorial exactly! and tried out various methods via google and still isn't working;"{% load static %}

<!DOCTYPE html>
<html>
	<head>
		<title>{% block title %}{% endblock %}</title>
		<!-- CSS STYLE -->
		<link rel='stylesheet' type='text/css' href=""{% static
		'css/bootstrap.min.css'%}"">
		<link rel='stylesheet' type='text/css' href=""{% static
		'css/ie10-viewport-bug-workaround.css'%}"">

		<!-- JS -->
		<script type=""text/javascript"" src=""{% static 'js/
		ie-emulation-modes-warning.js'%}""></script>

	</head>
	<body>		
	{% block content %}
	{% endblock %}
	<script src=""https://ajax.googleapis.com/ajax/libs/
	jquery/1.12.4/jquery.min.js""></script>
	<script type=""text/javascript"" src=""{% static 'js/
	bootstrap.min.js'%}""></script>
	<script type=""text/javascript"" src=""{% static 'js/
	ie10-viewport-bug-workaround.js'%}""></script>


</body>
</html>Also this is the actual error https://gyazo.com/27983598f4897ee486725a9f79f4b6c5
That's a weird one. It looks like the `{% static ... %}` isn't actually getting parsed as a tag. It looks like it is getting treated as a literal string (which is a relative url in this case) and then the browser is trying to fetch that url.

Can you paste what your `TEMPLATES` looks like?What does your view code look like where you render the template to the HTTP response?  It looks like maybe your template isn't getting rendered, but instead getting served verbatim as text/html hence the static template tag is getting put in the URL instead of the tag actually rendering the path to the file.<title>List of blog post</title>
		<!-- CSS STYLE -->
		<link rel='stylesheet' type='text/css' href=""{% static
		'css/bootstrap.min.css'%}"">
		<link rel='stylesheet' type='text/css' href=""{% static
		'css/ie10-viewport-bug-workaround.css'%}"">

		<!-- JS -->
		<script type=""text/javascript"" src=""{% static 'js/
		ie-emulation-modes-warning.js'%}""></script>

	</head>"
2017-02-27 08:08:25;We pushed a new version of django-hijack, cmsplugin-contact-plus and django-favicon-plus to the PyPI.;"[deleted]I rather like that hijack system it's hell of a lot easier than what I currently have. 

The only change I would make off the top of my head right now is instead of allowing all staff, i would add the requirement of being in a specific Group. Something like `user.groups.filter(name__iexact='Hijacker Allowed').exists()` perhaps.Pretty cool, but you need to get that get that CSRF hole in django-hijack-admin from HIJACK_ALLOW_GET_REQUESTS sorted out. "
2017-02-27 01:41:16;How to enable GZIP compression in Django website hosted in heroku;"Use a CDN:

* https://docs.fastly.com/guides/basic-configuration/enabling-automatic-gzipping
* http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html#compressed-content-cloudfront
It's possible to run nginx in front of Django in Heroku - I've used this for custom logging in the past, but it may be possible to use it for gzip as well.

Here are my notes on how I set that up: https://gist.github.com/simonw/1e0fdf2e9b8744b39bd7

"
2017-02-26 23:12:42;Potentially dangerously stupid question regarding static content;"There are no stupid questions, mate, nothing wrong with not knowing something if you are willing to learn. /r/djangolearning is probably a better place for it but don't worry =)

Will the page be remaining static or will you eventually want to update it semi-regularly?

The django docs are really good here is the bit on localisation: https://docs.djangoproject.com/en/1.10/topics/i18n/There's very little difference between a static html file and a Django template unless you're under heavy load. My guess is that you aren't.

Just treat your HTML as Django templates (one is a subset of the other). Then add Django template syntax as and when you need it. PM me if you need more info."
2017-03-06 19:49:40;Does it still worth switching template to jinja2?;Very minimal, and the engineering overhead (ie. not being able to use the overwhelming majority of existing code, increasing bus factor, making it episilon-harder for someone to contribute to your projec, etc.) makes it a little pointless these days, despite it being completely pluggable these days.In 10 years, never had a need for it. If you're transferring tons of logic into templates — you're doing something very wrong.It never was, it's just an option
2017-03-06 17:09:19;How do I use user actuvation with Djoser?;"There are four parts to user activation

1. The fronting sends a request for user registration at **/register/**
2. On user creation, the backend sends a activation url to the user's registered email. Which should be a url for the frontend. 
3. User clicks this frontend url, which makes a request at **/activate/** to the backend 
4. The backend activated the user on receiving a valid request 


Since It needs a post request, which can't be automated from email. I am not sure you can effectively test this without a frontend.


**ACTIVATION_URL**

The ACTIVATION_URL in the settings is used to construct the frontend url, which will be sent to the user's email. The settings needed looks like this:

    'DOMAIN': 'frontend.com',
    'SITE_NAME': 'Frontend',
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,

the activation url sent to the user's email is constructed with domain and activation_url

**Making request at /activate/**

Then the frontend makes a post request at **/activate/**, for which the documentation says : 

    Activate
    
    Use this endpoint to activate user account. This endpoint is not a URL which will be directly exposed to your users - you should provide site in your frontend application (configured by ACTIVATION_URL) which will send POST request to activate endpoint.
    
    POST
        URL: /activate/
    
    request
        data:
            uid
            token
    
    response
        status: HTTP_204_NO_CONTENT (success)"
2017-03-06 16:15:35;Django-like frameworks in other languages;"You mean things like [Ruby On Rails](http://rubyonrails.org/) and [SailsJS](http://sailsjs.com/)?A Django Developer would feel at home with Grails. We moved from Grails to Django and they do the same thing. The Difference is running in JVM or Python and of cause the language. Symfony in PHP is pretty similar especially in regards to templates, however unlike Django it is annoying as fuck. But... but... then you'd not be using Python...

/me scratches head in disbelief.Laravel + Backpack is a really nice way to bake database cruds. Imho it's better than the Django Admin (sadly). It has cropping of images, select2, custom forms (columns, tabs...) and many other really nice components. Hope Django Admin moves in that way anytime -- https://backpackforlaravel.com1st you need to think that Java, PHP, Ruby, JS, ... are different in some points to Python.

after this ... for example in PHP, I find Symfony3 the more closest in the WAY to do the things that i did see in Django... and propose this with PHP projects.

now in Ruby ... all the people come with Rails in their mind :).

You need to think in SIMPLICITY .... this is the real lesson that comes with my with Django, Flask and Python.

This simplicity comes with you, not only the language used :)"
2017-03-06 13:42:19;5 Gotchas with Elastic Beanstalk and Django;"I think it's important to understand that EB is an application version/deployment manager, not an auto scaler. The auto-scaling groups are a feature of the underlying EC2. Most comments here are related to scaling which is just a convenience add-on.I don't think EB is that good. 99% of projects are better off without it.

I set my web nodes as a statically sized group. Over time as my customers grow, I add more. Letting the beanstalk decide ""ohh big spike in traffic, lets go spin up 5 new servers in 5-10 minutes"".. has not seemed that helpful to me. Size your web load to be your peak traffic, or peak traffic + 1 or 2.. and you will be fine.
"
2017-03-05 22:54:11;Need some suggestions on DB model, and tips on running a python script through Django;"Sounds that you don't need a database at all.

Just start with forms - https://docs.djangoproject.com/en/1.10/topics/forms/

There was a recent post in r/python about ""Python with Google Sheets"".  A pretty awesome six minute video!> run my Python script (which fetches tweets from a user) through Django

Google ""Django management commands"". Alternatively, use a queue like Celery."
2017-03-13 21:04:39;Migrations don't alter db?;"Make sure your database configuration is correct in your settings file and that you're pointing to the correct settings file with $DJANGO_SETTINGS_MODULE. if those aren't set properly your migrations are likely setting up and migrating a sqlite database somewhere instead of altering your postgres. Welp, looks like I figured it out.

We have two databases in our project, with one model being routed to database B, and everything else routed (implicitly) to database A. Within the `allow_migrate` function of the db router we do have, it was returning `False` if the app being migrated didn't match that router's app. It should have returned `None`, to allow routing to proceed.

From the [docs](https://docs.djangoproject.com/en/1.9/topics/db/multi-db/#allow_migrate):

>Note that migrations *will just silently not perform any operations on a model for which this returns False*. This may result in broken foreign keys, extra tables, or missing tables if you change it once you have applied some migrations.

:'("
2017-03-13 17:44:30;Postgres Joins and Django Querysets;I'm confused after looking at your data model and code, and I think something much weirder is going on here. Maybe you can clear things up. First, why does Participant have `event_id` as a column? Can a participant only participate in one Event? My intuition says there should instead be an association table between Participant and Event to facilitate a ManyToMany relationship. Second, why is `event_id` also in Organizer, but Event also has `organizer_id` in it. Django ORM wouldn't create this with a ForeignKey or even a OneToOne. It doesn't make sense to me for Organizer to have `event_id` as that would limit an organizer to only organizing one Event. So then we get to your code. Having `participant_set` in your select_related() shouldn't even work. Maybe an old version of Django? In 1.10 it throws an error if you try to add a reverse relationship to select_related(). Basically select_related is to be used when there's 1 of something tying to a record, and prefetch_related should be used when there are multiple (mainly on the reverse end of a ForeignKey or either side of a ManyToMany). Further, your posted SQL is using those weird `event_id` columns, which makes no sense, so my guess is that your models are set up VERY weird. Was this an existing database that the models were written to match? If I were to write this from scratch using properly set up models, the queryset would look like `Event.objects.select_related('calendar', 'organizer').prefetch_related('participants')` and since Django auto-adds indexes for ForeignKeys, there would be no table scans and only 2 queries. Without seeing your exact Models and DB, it's hard to say, but I think something much more screwed up is happening, and this is not the fault of Django or Postgres, and the point of your article really only has to do with the weird corner your project has painted you into. For most cases JOINs are going to outperform prefetches.
2017-03-13 17:10:41;Windows Server - Asynchronous Task Queues;"Meh, 1st world problems. There are a whole lot more task/worker packages beyond Celery and RQ. 

But if you just need to send the occasional email and cron work then just fukkit and use a database backend. If your app can run a ton of users and dynamic content and whatever it does then a simple job cron gizmo that plops some emails or indexes or whatever is not going to kill it either."
2017-03-13 15:53:16;Can someone help me with some DRF serializers and viewsets? I'm not understanding something.;"You might consider using a `*RelatedField`: http://www.django-rest-framework.org/api-guide/relations/. If you definitely want to use a nested `HardwareTypeSerializer` I believe you will need to create a custom `HardwareSerializer` solely for creation, or override the `create` method.

The official support channels may offer better support: http://www.django-rest-framework.org/#support.Just curious, what was the design idea behind HardwareType being it's own model, and not just at choice?

Anyways, I assume you've registered your viewsets using the default router, and if so, you should be able to do some testing by calling the different list/retrieve/create/update methods, etc.  

Also, you can probably override the create() method for HardWare so that it checks if HardWareType exists, and if not creates a new HardWare type (if your business logic allows that) and then link the two together.  

I think they recommend overriding these functions because some scenarios will allow the model to be created and cascade the creation of new models downstream, but other designs may require an error be thrown if the API tries to create a Hardware with a HardwareType that doesn't exist, etc.

Lastly, yes, when you retrieve it will only retrieve the ID be default, unless you specify the child serialize.  

http://www.django-rest-framework.org/api-guide/serializers/#writable-nested-representations

"
2017-03-13 13:36:31;Most pythonic way to count database attributes;"They're both a bit sqwonk. You *don't* want `get_or_create` here. You need to show them a form to create a new one. Let that form view handle the creation.

Your second way is closer though.

    # filter for properties with URLs
    # remove any with null or empty URLs
    # you could probably use: current_user.googleproperty_set.filter()...
    google_properties = GoogleProperty.objects.filter(user=current_user, website_url__isnull=False).exclude(website_url='')

    if not google_properties.exists():
        return redirect(... your create form view ...)

    # ... do your reporting ...
    

Edit: You don't *have to* redirect them to a separate view, you could just render a form on the same URL, but if you have to handle additions under another view (which it makes sense you might here), you may as well just kick them over there.Are your examples correct? There is no `user` field in `GoogleProperty` model..."
2017-03-20 22:07:23;Creating some sort of sequence from 8 views;"Use the user session to track progress, and have a check in each view on where they are, and redirect to the correct stage if it's not the current. If you use CBVs, it's easy to accomplish with a Mixin.Check the http://django-formtools.readthedocs.io 

The project is supported by django team, and it was previously in the django core.Ugh. Don't do it! 

Multi-page forms are terrible for users. I've never gone to a site where I've willingly filled out a form past two pages (except when I really had no choice like for student loan applications, and I hated every moment of that). Studies show that each page a user has to deal with leads to substantial loss of user engagement - with 8 pages no one will participate who isn't legally required to. If your users *are* legally required to fill out the forms, then I beg you to have mercy on them, and find a better way!"
2017-03-20 21:34:00;Django app auth / group usage;"You're looking for http://django-role-permissions.readthedocs.io/en/stable/ It's much easier to do it in Django.I don't think groups are the answer. If you are just starting your app, you can create a new model derived from the AbstractUser model including extra fields such as roles (student, professor, etc)

Then, using these fields and simple logic, you could let the users view only what the are supposed to."
2017-03-20 20:38:30;Can someone help me out to pass a dictionary to a form?;"With your current data structure you need a nested for loop in your template but I actually don't remember the specifics of those or if they're even possible. (Maybe others do...?)

So instead of nesting you could reverse your dictionary and list structures. So you would have [{""item"": 1, ""id"": 1}, {""item"": 2, ""id"": 2}]. Then in your template you could do:

{% for button in buttons %}
    <button id=""{{ button.id }}"">{{ button.item }}</button>
{% endfor %}

For documentation on how the ""for"" template word works, see here: https://docs.djangoproject.com/en/1.10/ref/templates/builtins/#for

Another thing I have never used but might be helpful in this situation is the template keyword ""cycle"".

P.S. Typing this on mobile was an exercise in frustration - apologies for bad formatting."
2017-03-20 19:27:11;Attach healthchecks directly to your routes;"""Routes""… what is this, Rails? ;)Hey! 

We've built a custom Django client for our health checks service and I wanted to share and solicit feedback. The gist is simple: easily attach monitoring to routes, either directly in urls.py or elsewhere, and publish the configuration to our service every time you deploy your app. "
2017-03-20 19:25:08;Django JSON support?;"[deleted]What does Rails do more ? Django has, at least,

> from django.http import JsonResponse
"
2017-03-27 21:51:54;Looking for cool resources for learning python & django;"If you have already done ruby on rails then I would suggest Django Girls and the tutorial on the Django site, for 3rd party packages Django Packages is a good resource. Django will tell you about big changes that will break your code before hand with warnings, normally you get them 2 versions prior to the change. If you are looking for new things in the framework the release notes are really solid for that.
    
    
https://tutorial.djangogirls.org/en/

https://learnpythonthehardway.org/book/

https://docs.djangoproject.com/en/1.10/intro/tutorial01/

https://djangopackages.org/The various Django conferences are pretty good; all recorded etc.The best resource I know for Django best practices is ""Two scoops of Django"". As far as staying current, following the changelogs for Django releases is actually one of the best things to do.Dude, sidebar.

/r/djangolearning/
I created godjango.com to kind of fill the niche of screencasts to continue learning stuff after you know some of the basics."
2017-03-27 15:50:16;Any good guides for using a ready made template with Django?;Django isn't Wordpress. There is no market, to my knowledge, for templates/themes. The primary purpose of a framework like Django is that you customize nearly everything.
2017-03-27 14:14:20;How to uplaod multiple records with a FilerImageField;I think the error here is that the Django ORM is expecting a PK to the image instance. I would need to see your code to be sure.
2017-03-27 13:07:55;"Is there a Django library for ""siloing"" off Users and Models into groups?";"This sounds a lot like [per-object permissions](http://stackoverflow.com/questions/33138477/how-to-handle-per-object-permission-in-django-nowadays) managed by group.This is usually called multi tenancy.

[Djangopackages has a list](https://djangopackages.org/grids/g/multi-tenancy/)I can recommend django-tenant-schemas for this use case. It might take some tweaking to get exactly what you're looking for, but it's pretty neat."
2017-03-27 10:38:36;Divio for Django Development?;"Most people doing this for a while might not have noticed that the SAAS/hosted version of Django CMS —that used to be called [Aldryn](https://github.com/aldryn)—  was renamed to Divio Cloud. I didn't know until I started digging around.

Divio is the company behind both.

Your question is essentially asking the risks and benefits of using software as a service, of which there are many, in both directions.

 - The main thing for me (the developer) and my clients during downtime. When you run control your own stuff, it's a lot easier to spin up another server, even if it's at a different host and get things back on within a couple of hours. When you're reliant on a single service provider like Divio, you live and die by their ability to keep servers running.
 - Not needing that devop experience is definitely a benefit for other people.
 - Are their servers close to your market? Can you tune that?
 - Are they competitive on price? You get to factor in management time but a starting cost of $50pm is significant for smaller entities, especially if you have other awkward requirements like high-RAM or high-bandwidth.
 - Can it really do what you need? I've got a few Django CMS sites in production and they're all tied into other apps in a way that wouldn't be feasible on a limited, hosted service.

Ultimately we can't answer these questions for you. $50 a month for a chuck-and-forget maintained service might be great for you. But it also might not.I have never heard of Divio. Divio is a great service and the guys behind it are really good! They also made Django CMS, which is a great library.Never heard of Divio before, but I welcome any new Django services and it's great to have different options.

But 50 bucks for 50K page VIEWS per month.

That's just ridiculous"
2017-04-03 21:24:28;From Translation to Contributor: Interview with Simon Charette of Django;
2017-04-03 17:01:57;Django and working with large database tables - slides;[deleted]
2017-04-03 15:45:44;What's the preferred method of doing UserProfiles now?;"> Think carefully before handling information not directly related to authentication in your custom user model.

That sounds very foreboding but I think most cases where you're talking about a project-wide Profile class are perfect candidates *for* a custom User class.

I think the argument [being made in the next paragraph](https://docs.djangoproject.com/en/1.10/topics/auth/customizing/#specifying-a-custom-user-model) is that if you're making a redistributable app, a MyAppProfile 1-to-1 with the standard (or not) User class makes a lot more sense that imposing weird User class requirements... I'm not even sure how you'd do that.I believe django-annoying has an AutoOneToOneField for this exact problem. It creates the OneToOne field lazily the first time it's accessed.For our own projects I'd always use a custom user model, even if it only extends the abstract model, even if we don't have a use-case for extra fields yet, because it is near-impossible to swap afterwards or add fields on the regular model. It is just a matter of keeping our options open.

That being said, the note you cited is accurate: user 'profile' fields might not belong on the user model. So avatars, postal address, preferences etc usually go somewhere else, and we only put on some flags and authentication and identity related stuff on the custom user model.A signal is the way to go. Yours should work, also consider:

    Profile.objects.create(user=instance)We extend abstractuser to add preferred language, timezone etc. It's working like a charm. When I first learned about this method, I left one to one behind and since then, I dealt with zero problems surrounding the user model. Really a life saver. "
2017-04-03 14:35:03;HTML form answers to Django view;"I think a big problem is the wording you're using here — maybe English is not your first language?

You're not actually interested in sending ""form answers"" here at all.

What you want to do is *filter* the movies listed based on the genres checked.

Is that correct?

If so, there are a few things you need to do to get this working.

First, unless you *absolutely* must use the name `Movies` it is highly recommend to name all of your model classes using the singular, e.g. `class Movie(…`

I'd also strongly recommend changing all of your `TextField`s to `CharField`s. Unless of course your *database* has all of these fields set as TextField (in which case, you **really** have a problem!!) At a minimum, I'm very concerned that your ""Release Date"" is a `TextField`. That's very odd. Also, your decimal fields are just, frankly, insane. 

Also, I'm guessing this is a legacy database which is why you're have `managed` set to False?

In any case, you have to add the following to your `Movie` (or, `Movies`) class, immediately below `vote_count`:

        genres = models.ManyToManyField('Genre', through=""MovieGenres"") # again, `MovieGenre` is preferred naming convention

Adding this many-to-many field will allow you to reference genre records directly from within the `Movie` (`Movies`) model in a straightforward and readable way.

Now, the last part of the puzzle — getting the genres from the form on the page. 


I'm assuming in the template you have something like:

    Choose a genre:
    {% for genre in genres %}<label><input type=""checkbox"" name=""genre"" value=""{{ genre.pk }}"">{{ genre }}</label> {% endfor %}

You'll want to add this to maintain checkboxes:

    {% for genre in genres %}<label><input type=""checkbox"" name=""genre"" {% if genre in filtered_genres %}checked=""checked""{% endif %} value=""{{ genre.pk }}"">{{ genre }}</label> {% endfor %}


Then in your views.py:

    # DELETE def movie_list

        @property #using @property makes filtered_genres behave like a property/attribute
        def filtered_genres(self):
            if not hasattr(self, '_filtered_genres'): # only set this value once per request
                checked_genres = self.request.GET.getlist('genre') # getlist gets *ALL* checked items
                self._filtered_genres = Genre.objects.filter(pk__in=checked_genres or [])
            return self.filtered_genres

        def get_queryset(self):
            qs = super(MoviesListView, self).get_queryset()
            if self.filtered_genres:
                qs = qs.filter(genres__in=self.filtered_genres)
            return qs

        def get_context_data(self, **kwargs):
            context = super(MoviesListView, self).get_context_data(**kwargs)
            context['genres'] = Genre.objects.all() # don't mess with the self.genres code above; it's unnecessary
            context['filtered_genres'] = self.filtered_genres
            return context

That should do it!

Here are the key fixes you needed to do:

 1. Add a `ManyToManyField` so that you could filter Movies directly in the model without worrying about the `MovieGenres` model.
 2. Use `getlist`  on `request.GET.genres` to get the checked options
 3. Create a filtered queryset of matching genres based on those checked
 4. Customize the built in list view queryset to filter Movies by `filtered_genres`

Also: definitely **don't** include something like `[:40]` in `get_queryset` for a couple of reasons:

 1. `get_queryset` should *always* return a queryset, no exception. As soon as you introduce slicing the function is not returning a true queryset.
 2. Slicing should be handled in the template, not the viewHave you checked out the [docs](https://docs.djangoproject.com/en/1.10/topics/forms/)? Passing form data is simple - create a form with method='post', action=url.  Name your inputs. Don't forget to include a {% csrf_token %} . Add the 'action' route to your urls.py. Then in your views write a function to process the form data via request.POST['input_name']

I'd suggest you learn to do it manually before using a forms.py form, so you learn how it all works before you start taking shortcuts. "
2017-04-03 13:15:02;ProtoAPI Limited Beta - Create Django APIs in seconds without coding;Excellent. How funny I wondered a few days ago if anyone had done a GUI to create models and views for Django.
2017-04-10 18:46:44;djangocon 2017 talk about angular and django;"> I am planning to keep a quick intro typescript and how it helps in tolerating javascript.

... shouldn't you focus on django/angular interaction instead of talking about the basics of typescript?   I've seen so many talks about thing X somehow turn into ""lets discuss setting up my personal environment where I work with X"" and it's really frustrating because I already have my own environment, I want to know about X.  That sounds reasonable. Although I would note that almost all of what I found in Typescript that made JS much more pleasant to me was really just es6 or es7. (E.g. spread/rest operators, classes, arrow functions, etc.). 

As a side note, since using AngularJS and angular 2 I have picked up react, and it is such a joy to use - I have a hard time going back to angular projects. 

Intent there isn't to start a debate, but to say that if you're enjoying the nicer features of JS, you might enjoy trying React with them too!I would like to know how to separate responsibilities, like what exactly django and angular would do. Like managing logins, authorization, use templates at all or leave it all to angular? Maybe it's just a newbie question.Angular4 or 1.x? I'd love to see and help contribute to the repo. I'd love to know how to do CORS right. Trying to host my front end on CDN and want to make sure I am securing it properly. "
2017-04-10 11:27:17;What has changed with django 1.11 in django.Template.render()?;"The docs for this are here:

https://docs.djangoproject.com/en/1.11/topics/templates/#usage

>**Template.render(*context=None, request=None*)**

>    Renders this template with a given context.

>    If context is provided, it must be a dict. If it isn’t provided, the engine will render the template with an empty context.

You are right. It is very confusing. It reads like the wrong docs were updated. Why would this information be under Template loaders? It should be in the API docs.

**Edit:** Looking at the source, I see what is going on. When the backwards incompatibility notes say `django.Template.render()` what they actually mean is `django.template.backends.django.Template.render()`.

In other words, a Django template still takes a context object. However, if you are using the generic backend API `get_template()` and `select_template()` functions to retrieve a template, you are getting a wrapper, not the actual Template object itself. The render function for that wrapper only takes a dict.

You would do this if you wanted to decouple your code from a specific template engine, so that in the future you could swap Django Templates for Jinja2 and only need to change your templates, not your views.Note the levels of import. 

django.Template - generic template class, only dict not Context. Could be jinja or django

django.template.Template - a django specific template. Takes Context. 

Well that's how I read it. Haven't tried 11 yet. The answer is literally on GitHub..."
2017-04-09 12:29:05;Testing django mixins;I test the child classes that consume the mixins. I treat mixins like abstract classes/interfaces—they don't get tested in an isolated fashion. When I have multiple child classes consuming the same mixin, I make a test class mixins and have the tests inherit it. 
2017-04-09 09:38:04;No module named <app_name>;"This is likely not a Django problem but a general Python problem. Something is wrong with the module itself, or your Python path. 

Can you run `python` in your project directory and run `import myWebsite`?Can you try these steps and report back?

0. Remove all `*.pyc` and `*.pyo` files from your project repository, just in case a stray compiled file is causing subtle weirdness in your tests.

1. Comment-out `myWebsite` from your `INSTALLED_APPS` list.
2. Comment-out every single line in `website/website/routing.py` and add only `channel_routing = []`. (There should now be no reason for `myWebsite` to be imported in any form).
3. Run `./manage.py shell`. If you get to the shell prompt, then you know that `website.routing.channel_routing` was successfully imported, albeit empty.
4. From the prompt, run `import myWebsite`. My guess is this step will fail and the error message will be more descriptive than the one you get when `channels` raises the `ImproperlyConfigured` error.
5. If the import *does* work, type `myWebsite.__file__` at the prompt to verify that the correct module is being imported.[deleted]pythonpath"
2017-04-08 21:43:43;New maintainer for the django-background-task-example project.;
2017-04-17 13:59:10;Media class in Django (https://docs.djangoproject.com/en/1.10/topics/forms/media/#form-assets-the-media-class);"The documentation you linked to has an example:

    from django import forms
    
    class CalendarWidget(forms.TextInput):
        class Media:
            css = {
                'all': ('pretty.css',)
            }
            js = ('animations.js', 'actions.js')

Have you tried something like that (but with your own CSS and JS files)?Are you trying to create a self-contained widget that knows which CSS and JS files to load with it automatically (likely something you re-use in different places)?

Or do you just have a view that contains a form and need to add some CSS/JS to the view?

Because the latter is much simpler and it's just a matter of including static files in your template.

> I don't want to use bootstrap and I want to add custom CSS to my form.

I'm curious about your opening sentence as the two halves of it sound unrelated. It makes me wonder if there's an underlying misunderstanding.

Your question *sounds* like you're asking: ""How do I style forms widgets?"". The answer to that is ""the same way you style everything else - in your CSS"" but I think there's more to your question than that.

What's the issue you're having just using normal CSS style rules to make your widgets look right? Do you need specific classes on the widgets? (as opposed to using a class on the wrapper element and applying CSS via selectors that target via that)"
2017-04-17 02:58:41;I'm drawing a blank... One queryset to grab data from two models?;"I'm not sure I completely understand your question, but perhaps I can get you going in the right direction.

If you have a `Profile` object, `p`, you can access all of its `ProfileImages` objects with statement: `p.profile_images.all()`.

You may replace `all` with the various [field lookups](https://docs.djangoproject.com/en/dev/topics/db/queries/#field-lookups) offered by Django.

You may also be interested in checking [`select_related`](https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related).https://docs.djangoproject.com/en/1.10/ref/models/querysets/#prefetch-related

I think you want 

    profiles = Profile.objects.order_by('?').prefetch_related('profile_images')[:4]

Can you give that a spin and see what it does?"
2017-04-16 18:20:27;Query optimization in Django Directed Acyclic Graph;"Are you using a graph DB? Neo4j is the canonical graph DB, and there are a few starting points:

* https://github.com/scholrly/neo4django - Note that this project's last commit was in 2014 and doesn't appear yet to support Python 3.
* https://neo4j.com/developer/python/

And of course, you could always use a relational DB like pgSQL to store graph stuff, but it just isn't as plug and play for that sort of thing as a purpose-built graph DB.[Here is a related HN thread](https://news.ycombinator.com/item?id=10316872)DAGs in django? do you want to store the nodes in the database?"
2017-04-15 22:34:20;[Rest Framework] Uploading Image to nested serializer;
2017-04-15 16:48:57;deployment and URLs;"I think you could configure Nginx or Apache to serve the other static sure at `/` and everything Django at `/my-django-site/`.  Then you would just need to root all of your URLs under `/my-django-site/app-name/`.Are you running 1 django project with multiple installed apps (app1, app2) ? If so, just make a 3rd app that'll act only as the main landing page. I'm not sure where /webapp/ base is coming from, we would need to see the apache config

In your projects urls.py

    url(r'^$', include('app3.urls')),
I think one solution is to have a  `url(r'^$', views.index, name='index')` somewhere in a urls.py. And have the index view render an `index.html` template that sits in a templates folder in the main folder.

"
2017-04-24 20:58:08;Writing an API with django REST framework, how to model the history of API requests?;"I would expect the light id to be in the url, so

> /light/1/usage

For any variable parameters, such as start_time, end_time (optional maybe?), put them in the querystring

> /light/1/usage?start_time=2017-04-24T12:00:00Z&end_time=...So, this problem has two parts... The first part is the actual data modeling. This happens separate from Django Rest Framework, and there are a couple of things you can do for it:

1) You could use a package like [Django Simple History](https://djangopackages.org/packages/p/django-simple-history/) to track changes on the model.

2) Roll the history model yourself. Create a model, perhaps called SwitchHistory or something like that, with a DateTime field and perhaps fields to store the old_value and new_value. Then, when handling the PUT request in your DRF view, you can create and save an instance of this model. This solution is less flexible and extensible than the first option, but if you're learning is probably the more beneficial in the long-run.


Whichever way you go, you'll then need to write DRF view to query the new history model. This should be as easy as your initial View. 

"
2017-04-24 17:30:21;Django Middlewares and the Request/Response Cycle;"I'm a junior developer in a Django/React shop, but I taught myself web dev with Rails (like most folks, it seems).  I do like Django a lot, although in the beginning it was really confusing to me.  I'm going to try and start doing this kind of post every week or so (class-based views and then forms next), so stay tuned.  My goal is some kind of 'practical mastery' or 'functional fluency' maybe: understanding how Django works well enough to not see any of it as 'magic.'

I'd really appreciate any advice/guidance from the greybeards out there; this is a great community.  Thanks![deleted]"
2017-04-24 10:13:30;Uploaded images don't show up in template;"In development django serves the media files itself, but it's not very efficient so in production that's done by the webserver.

My guess is you haven't got your webserver configured to point at the media files correctly
"
2017-04-23 18:49:20;Keep on getting Bad Request(400) from Django with nginx and gunicorn when reaching my domain. Why?;"It's hard to tell because this will be related to IPs, names, and urls and you've scrubbed all that out.

you're using `include proxy_params;` which means nginx will pass whatever is in the HTTP requests `Host:` header as the `Host` value passed to gunicorn who passes it to django to use in the ALLOWED_HOSTS.  So that value has to match all the way down.

ALLOWED_HOSTS doesn't need IP values, it's looking for host names.  If you run django with DEBUG=True (`./manage runserver` et al) then ALLOWED_HOSTS isn't checked at all.

Make sure whatever you are typing in your browser is what's in the `server_name` line (remove the IP from there) is what's in the `ALLOWED_HOSTS` entry (remove the IPs from there).

If you are still having issues, shoot me a PM in the the real IP and urlDue to the lack of customer service and bs that went on with me I had to ditch digital ocean and I went with linode.Digital Ocean is shit I had the same issue I had to recreate my entire droplet. Did you set up ssl yet?"
2017-04-23 17:39:48;Mapping Forms to Models that don't quite match;"What I have thought of just after reading this is, make a form in forms.py, include all fields except weight and nutrition. 

For weight:

Make a decimal field. Also include a choicefield for the units, it should display a drop down of all units.

For nutrition:

For each of fat, protein and carbs include a decimal field. It is assumed that the units are going to be in grams.

In the view (FBV for simplicity) , you have to take care of these fields separately. Did you understand this method? I can elaborate if you didn't.

I'm sure there's a more elegant way of doing this using the models of Nutrition and Weight, if you give me the models.py code I can try to code it."
2017-05-01 22:14:22;Using Django/DRF view logic in Channels consumers;"You won't be able to run a view without a Request object, which websocket messages don't have, but you should be able to separate out the logic from the view so you can re-use it in both places.

Sending a serializer out to clients is possible - turn it into valid JSON, then send that as a `text` payload out over a Group that all the connected clients are in."
2017-05-01 22:00:31;First internship, using Django;"Of the many resources out there, here's a few I keep going back to:

- [Tutorial] [Obey the Testing Goat](http://www.obeythetestinggoat.com/pages/book.html#toc) - Step-by-step project construction using TDD (test driven development)
- [Book] [Two Scoops of Django: Best Practices for Django 1.11](https://www.twoscoopspress.com/collections/everything/products/two-scoops-of-django-1-11) - You'll find this very useful to have at your side
- [Video Tutorials] [GoDjango](https://godjango.com/browse/) - Short and to the point video tutorials. Things are explained very well.There's no silver bullet for getting into new code bases in my experience. Try to solve specific problems and allow yourself to fail/give up is a good start. So have a bunch of bugs or things to fix lined up so you can give up on a few, and come back to the ones you gave up on after having fixed some other thing, and iterate like that. 

It will take time and be frustrating/painful. Just allow yourself lot of time and be prepared to feel frustrated and unproductive. This is normal.Just start and end with end-to-end testing with seleniumI would highly recommend the django tutorial that the new Boston does"
2017-05-01 20:27:27;Looking for some thoughts and advice on currencies;"I've used [money.js](http://openexchangerates.github.io/money.js/) for handling converting amounts on the client side. If it needs to be server side then https://openexchangerates.org is a good place to start (it's what powers money.js) and it has Python client libraries.Store *all* currencies and note which the the user provided. Ie have fields for USD, GBP, EUR, YEN, etc and given_currency. If I submit a new listing in GBP, convert that out to all the other fields and store ""GBP"" in given_currency. You can then search any currency directly, quickly. And update the converted fields daily. That's how you'll get an accurate enough™ result without doing live calculations or fuzzing against a static standardised currency.

My problem with standardising to a single currency is two people working in the same, other currency. They'll see artefacts in the conversion and that'll seem really janky. You could go halfway and store a search value. This would make it easier to support many currencies but 
 then you have to convert at search time and there will be jank... You should have table which stores the quoted rate, and the quote currency. Then you want to have another table that has the (at least updated daily) exchange rates. Then allow the person searching to quote the currency that they want the quotes in. Then you can convert all the quotes into the chosen currency.  
Other things to consider would be showing the conversion rate used at the time of the quote, and allowing users to limit their search to quotes in a particular currency (limit their exposure to exchange rates)."
2017-05-01 15:51:45;Behaviour on invalid cookies inside the Cookie header;Done.
2017-05-01 12:53:22;[New to Django & Python] Is the two scoops book good for learning Django as a beginner who doesn't have experience with frameworks?;"> expects you to be experienced already with Django

Indeed.

It's a fantastic resource, but is certainly not a tutorial.I learnt through the official tutorial as someone who knew next to no Python or any other server side language, and it was more than adequate. First I recommend you check out [LearnPythonTheHardWay](https://learnpythonthehardway.org/book/), which is free to read at that URL (not actually very hard - don't let the title put you off), and then just get stuck in to the Django tutorial. The Two Scoops of Django book is more like an Advanced Tips and Tricks guide for those who are already familiar with Django, so I'd steer clear from that until you're comfortable with the framework. But seriously the Django documentation is easily some of the best programming documentation I've ever found on the web and the tutorial is more than adequate to get you through the initial stages.Correct.

Instead, take a look at the tutorial that is part of the Django documentation: https://docs.djangoproject.com/en/1.11/intro/Two Scoops helped me to establish a standard project organizational structure.  That was the most useful part for me.I was recommended obeythetestinggoat.com as a good intro to Django with the added bonus of learning Test-driven development as you learn - a great practice for any learning software engineer."
2017-05-08 22:50:20;How to implement nested routing?;"The Django Rest Framework documentation itself says you need to use the drf-nested-routers package. 

http://www.django-rest-framework.org/api-guide/routers/#drf-nested-routers

I've used it before in production but generally it seems easier to pass extra parameters in as query strings and have the endpoint URL be describing the object you are expecting to get back. But if you have a valid reason for nested routes then that package is the way to go. This seems to confirm my suspicions that out-of-the-box DRF does not supported nested REST API endpoints: https://www.machinalis.com/blog/nested-resources-with-django/
There's an issue in the DRF GitHub repo that addresses this. Basically the DRF authors think nested resources is an anti-pattern, so they don't support this out of the box."
2017-05-08 20:47:51;Not understanding field__icontains?;Do you have another url entry that is getting this URL first?
2017-05-08 18:11:45;Best way to test Django REST API with Authentication?;"Incidentally, I just discovered that Session based Authentication seems to already be working.  I can login via the Admin portal in a given browser and only that browser will be logged in.

What's strange is that I haven't added any special lines to my settings.py file as per this article: https://chrisbartos.com/articles/how-do-i-implement-session-authentication-in-django-rest-framework/

So how is it working?
"
2017-05-08 08:47:26;Stable django deployments (without downtime);We do much the same thing. One thing that happens intermittently, but it happens fairly often, is a TemplateNotFound exception. We have been experiencing this for a number of years now. And we had thought that the use of `cached.Loader` could improve the deploy situation and erase this error. But it still doesn't. Does anyone have any thoughts on how to cure this one in a deployment process?How does this restart the application? Looks like this just kills gunicorn and let's supervisord restart it? Have you tried a graceful gunicorn app reload by sending using HUP instead of TERM? It saves us the many seconds of downtime while supervisor restarts gunicorn and gunicorn loads our bloated legacy application.Are you creating the virtualenv during deployment? If so, you might try to compile and relocate the virtualenv on a build system. This does not only speed up your deployment, but makes it more reliable and eliminates the need for compilers on your target systems.If you want actually working graceful reload, take a look at https://github.com/stefantalpalaru/uwsgi_reload
2017-05-08 05:54:44;I'm struggling with implementing dataTables into my django app. StackOverflow tells me that jquery must be loaded first before the datatable.min.js. Did that already and it still doesn't work. HELP!!!;"Your error message is telling you exactly what is wrong: Datatable is not a function. 

Capitalize that second T"
2017-05-15 21:41:39;"""Flow"": Building blocks for Views";Could we see the BaseView? It's kinda hard to see what you're doing herewhat are you trying to accomplish with this?
2017-05-15 17:12:17;Another Form Question;"A view with a form should *almost always* look like that (see https://docs.djangoproject.com/en/1.11/topics/forms/#the-view):  
  
    def main(request):
        if request.method == 'POST':
            form = LocationForm(request.user, request.POST)
            if form.is_valid():
                form.save()
        else:
            form = LocationForm()
    
        terms = Term.objects.all()
        context = {
            'locations': locations,
            'terms': terms
        }
        return render(request, 'analytics/sample1.html', context)

  
It is the responsability of the form to validate and then save your data in db:  
  
    class LocationForm(Form):
        location = forms.CharField(...)
        
        def __init__(self, user, *args, **kwargs):
            self.user = user
            super().__init__(*args, **kwargs)
    
        def clean_location(self):
            data = self.cleaned_data['location']
            try:
               return geolocate(location)  # assuming an api to get a geolocation from a physical address 
            except LocationDoesNotExist:
               raise forms.ValidationError(""Address not found."")
        
         def save(self):
             location = GeoLocation(self.user, self.cleaned_data['location'])
             location.save()

  
As a side note, try to be consistent with your nomenclature (follow https://www.python.org/dev/peps/pep-0008/).  
*edit*: add a validation error messageYou can instantiate and stick your form wherever you want.

When someone clicks submit, you'll have to go through a sever-client cycle in order to get that information passed to the view method on your server.  Then you can do whatever you want with it including not showing it anymore, showing it blank, or showing it with the user's data in it"
2017-05-15 16:22:25;How to send confirmation email with django when user signs up?;"I've used this in the past: [django-registration](https://django-registration.readthedocs.io/en/2.2/)
Check out a service like SendGrid.  https://hellowebapp.com/news/tutorial-setting-up-a-contact-form-with-django/ this tutorial kind of explains how to send email with information from a form, which you could kind of change to get it to do what you want.  

Is the confirmation email to verify their email address or just to confirm their membership?you can use the send_mail function given by django itself. if you want to do the email confirmation, you can do that with creating a link with random token and then change the user is_active to true."
2017-05-15 11:44:28;Need some help making a POST request to logout with django-rest-auth;"It sounds like you are doing it correctly. Send the POST request with your current token to `/rest-auth/logout`, and then delete the (now invalid) local token data. That should be all you need to do. If you login to your Django admin after sending the POST request, you should be able to confirm that your token has been deleted.

Your post is a _little_ confusing, as you sort of say it both works and does not work. Are you having an issue still, or just wanting to confirm that you are doing it ""correctly""?You should either be invalidating the JWT credentials on the server or removing them from your local storage. Both would be good as well. I haven't used the django-rest/auth solution and am unsure when it actually does when attempting to logout. Look at the code and see if you're using it wrong."
2017-05-15 05:20:09;What video series or book do you recommend for learning Django?;"Work through the tutorial and then built a prototype of something, then host it on AWS. You'll learn the basics pretty well.I learned from the pythonprogramming.net video series by u/sentdex 
Django Web Development with Python: https://www.youtube.com/playlist?list=PLQVvvaa0QuDeA05ZouE4OzDYLHY-XH-Nd I would recommend Two scoops of django.[django-book](http://djangobook.com/the-django-book/) is one of the best IMO. It's comprehensive and covers all the topics quite deeply than any other book in the market.For tutorials for Django, we maintain a list of [Django tutorials](https://www.twoscoopspress.com/pages/django-tutorials).Read through the code on ""Real World"" Django example. Real world is a collection of implementations of a complexish blogging engine written in several frameworks. Django is one of them they implemented it in and you can view it here https://github.com/gothinkster/django-realworld-example-app Coding for Entrepreneurs.  His pacing is pretty good. I usually find myself rewinding rather than fast forwarding, which is what I prefer. He has free stuff on YouTube and some more in-depth paid ones on his website. "
2017-05-22 21:54:38;Set different expiration times for different sessions?;Set an expiration date in the session on login. Check it in a middleware
2017-05-22 18:37:04;Multiple projects, shared auth, single sign-on;"Do not share user tables! We are still dealing with problems from that decision five years ago. Sharing tables is a great way to end up with a monolith that will become difficult to break apart in the future. 

Create an auth service to store your user info and handle registration and login. That service should support OAuth, OpenID Connect, or your preferred protocol for single sign-on.

Your other service may have a light copy of user data (e.g. username, email) to appease the user model constraints, but that is it.

We use Django OAuth Toolkit as our provider, and a custom client built atop Python Social Auth. "
2017-05-22 17:42:52;Building a Reusable App -- question about templates;I usually include templates in the app. When adding that app to different projects, you can always override the templates.Yes, add the templates to the app. But don't copy-paste the app. Add your app through the requirements.
2017-05-22 15:40:06;Using URL Dispatcher as a Dependency Injector;"Should the url router be involved here? Isn't it more common to add dependencies as attributes on the request object in middleware or view decorators?

Interesting approach."
2017-05-22 14:46:34;Is it possible to abstract the Group similar to the User?;fwiw I ended up going screw it and modified my `User` model to mimic the existing `auth_user` name so at least I have consistency using the internal django naming.
2017-05-29 20:53:52;I'm looking for people to develop nature web in Django.;How much are you paying? Why Django? I am cautions of those with enough knowledge to know of a framework, but not enough to use it. I suggest fully understanding the problem before deciding on the solution. Django may very well be the correct solution, but it may also set you down the wrong path.Why don't you start your project on GitHub? If people are interested/inspired, they will contribute. Since you don't want to make money, why not make it open source :)
2017-05-29 19:52:49;Modern Django — Part 2: REST APIs, Apps, and Django REST Framework;
2017-05-29 17:26:07;Django-Viewflow and Django-Material 1.0 Release;"Hi everyone, I know it's been a while since beta announced https://www.reddit.com/r/django/comments/31anhc/djangomaterial_material_design_for_django_forms/

But finally, today I released the stable versions of django-viewflow and django-material libraries.

I hope you will like it!

http://demo.viewflow.io
Awesome! I've been using Viewflow at work for over a year. Very powerful and well designed library. Congrats on reaching 1.0 Mikhail!You mention a PRO version in your medium article, but at least on the mobile version of your website, I see no mention of a PRO version. Do you have a link listing features of the pro version and it's cost? "
2017-05-29 13:40:00;Advantages and Disadvantages of Django.;"I think that post got lost in the translation. It's hard to follow sentences like this:

> While PHP is specifically designed for web designs, Django bases on more robust language. So, to write a good code, it is easier to do it in python compared to PHPSeems to me that it largely misses the main question people ask today: whether you want to do single-page applications or to serve whole pages. Hey, nice article about DJango...
Check these also 
https://hackernoon.com/advantages-and-disadvantages-of-django-499b1e20a2c5
https://www.mindstick.com/Articles/12417/the-advantages-and-disadvantages-of-using-django
"
2017-05-29 13:00:06;How much should a beginning Django Developer Charge ?;"My advice to people looking to do contract/freelance work is this (and is based on experience in the US; for another country, this will be wrong).

First, figure out what your monthly cost of living is. That includes your rent or mortgage payments, all your bills for utilities, insurance, etc., cost of food and other necessities, plus money to be able to actually have a life outside of working, and build up some savings.

Got that number? Good. Now, multiply it by 4. And finally divide that by 176. This is a starting point for figuring out a good range for your hourly rate.

You quadruple your expected monthly costs because A) as a contractor you pay a higher tax rate than someone who's an employee, and have expenses an employee doesn't have and that you probably didn't think of when figuring your monthly cost of living, and B) you're not actually going to log 176 billable hours (four weeks of 8-hour weekdays) every month, so you need to make sure your rate is higher to make up for the non-billable hours you have each month, since those hours don't earn you any money.

So, for example, if your total estimated monthly cost of living from step 1 is $3000, you a good place to start figuring out your hourly rate is with an estimate of (3000 * 4) / 176 = $68.

Some other pieces of advice:

1. Get a lawyer and an accountant.
2. Have your lawyer draft a boilerplate contract for you to use with clients. The most important line in this will be one that explicitly says you are not doing ""work for hire"", will retain copyright to code you write for the client, and will assign copyright to them upon timely receipt of payment in full. This gives you a big axe to swing at non-paying clients, since you hold copyright to what you built for them and can DMCA it off the internet if they try to screw you out of your money (see also on this topic the classic advice video [""F*ck You, Pay Me""](https://vimeo.com/22053820)).
3. You want to get paid in installments at defined milestones in the project. You do *not* want to get paid $0 until it's done, and then have to be desperate for any kind of money while the client has what they want. A client who won't put up installments over the lifetime of the project is a client who won't pay you ever. See again: ""F*ck You, Pay Me"". 
4. You're not always going to be working. Building up a cushion for when you go a while without a client is incredibly important.I think people here are being a bit absolute about something that is *really* very variable. You're paid whatever you can get somebody to pay you. That's all that matters.

But this looks like spec contract work and you're a beginner so things are stacked against you. Beginners underestimate the workload. They underestimate how picky clients will be and how much control they have when they're holding the final paycheque over your head. Seriously though, when I started freelancing I made some horrendous quoting mistakes (like 50% underestimates). It's a contract so you eat the loss. Then —burnt from that— I made more mistakes and lost jobs for being too expensive.

So you might luck out but chances are you've got this wrong already. Just getting some work done and getting paid for it is the important step. You'll get experience and be able to quote more accurately in future.

One important thing, write something in your contract that allows you to terminate it within a timeframe (eg 2 weeks) unpaid. If you're not making progress at the rate you need to and it's actually going to take (eg) 12 months, you need to be able to reavail yourself or renegotiate. It sounds gnarly but an experienced tender client won't bat an eyelid.

I say that's important because some clients are dicks. They'll be deliberately vague, high-pressure you into something and then you find out there's twice as much work as you accounted for, and they can threaten to sue to hold you to maintain contract.Throw that number out and consider it a starting point for negotiation. But always know your BATNA, which means that you should know when to not accept a price. Is it worth $10 per hour to you? I'd say no way, you'll be ready to break out of the contract when you're 10% done. 

In a contract always give yourself outs. If they don't do this or that, then you don't have to go further. If your time or costs exceed some threshold then you can renegotiate and if renegotiation fails you can stop.

Don't assume that if the other party breaks their end of the bargain that you can. You can't.

Never, ever, ever, ever sign a contract you are offered. If they aren't willing to modify it based on negotiations then you need to either get a lawyer BEFORE you sign or just walk. I had a law professor tell me this once and it has saved my ass. You can literally take a pen and scratch out things you don't like and add in anything you want. Initial your changes.

Most cities have a freely accessible law library, often it's part of the bar association. In there will be a book with examples for every kind of clause you may want to put into a contract.You're really overselling yourself. I've been doing this for years and I'm only just at the point where I can realistically ask for $50/hour.

If you're going to cost for the whole project you should set aside a few hours and really figure out how long it's going to take you, it seems like you're just randomly guessing. You should cost based on small milestones that you have a really solid plan to achieve, not a 50 hour block followed by a 500 hour block.

Based on what you've said I think you might be biting off more than you can chew.Without the specs, it's really impossible to say. Imo that's very expensive.Django developers on my town wrote custom Django apps for $125/hr. It depends on your skills, your speed, your experienceI manage a team of Django developers, and I interview a few Django guys each month (including guys with full-stack skills).

Based on what you've told us, your market rate is $15 - $25 per hour.Have they evaluated existing systems? Or will they do that a month in when they wish you'd made more progress?

Are they a walk in service or are they sending technicians to people's homes? If a walk in service then the map is optional. Start with a map widget from Google Maps that can be made in their GUI without you writing any code.

Are they currently taking all bookings by phone/email? How about they just have a form taking the user's email and phone number. Let the user choose a slot and send them email confirmation. Cancellations can be phoned in or emailed (employees will update the appointments using a Django admin interface). Bam, you now reduced their call volume by 80% and didn't have to implement sign up, login, forgot password... but of course you can add a link in the email to cancel/move the appointment.

Try to find the smallest thing you can sell them, go with that. You will get better at estimating, they may realise they don't need all those features, and if they turn out to be the nightmare clients that want the design and wording of everything changed six times - my suggestion only has one external webpage and one customer email. You can drop them and still have something they are using ""for your portfolio""'.550 hours for something like this is a joke. 100 would be conservative.I do $375/hr.$50 hour?? That, honestly and bluntly, IS INSANE.

There is no way the client would go for $27K on this. Furthermore, _if they do_, they have no idea what the hell they're doing and will probably turn into a huge nightmare for you.

By all means, though, pitch your figure and see what they come back with. I'd assume $2500 or so, but that's mostly a shot in the dark. $5000, perhaps, but I honestly don't see this going much over that. It doesn't sound like you bring much to the table, and for that--inexperience and no portfolio--they'll just go to India/China/Serbia/Croatia and buy some POS for $500 that won't really do what they need, but will be cheap and cover about 65% of what they want.Firstly, you are not worth $50 per hour.    
You are $25 at most.

Secondly, for anything more that 120 hours you should give good discount.    
For 550 hours discount should be very good.

Thirdly, I doubt it is worth to spend 550 hours for googlecalendar ripoff."
2017-06-05 15:54:47;Wagtail - How to update to latest release?;"Wagtail has a community support on SO, so please ask there:
https://stackoverflow.com/questions/tagged/wagtail"
2017-06-05 12:48:59;Build a discussion forum in Django: Django Unit Test;
2017-06-05 09:10:07;A Guide to Sending Scheduled Reports Via Email Using Django And Celery;"There isn't any need to use `django-celery` anymore you can just `pip install celery`.  In fact the Github description for django-celery is:

    Old Celery integration project for Django  I'd be careful of cramming all your mailing into one task.  If you're using time limits on your workers you might exceed it once you get a lot of reports with lots of recipients.

For this architecture I'd set up a master task that identified the reports that need to be run, then kick off individual tasks for each one:

    @task
    def trigger_emails():
        for scheduled_report in ScheduledReports.objects.ready_to_run():
            run_report(scheduled_report.pk)

    @task
    def run_report(pk):
        scheduled_report = ScheduledReport.objects.get(pk=pk)
        try:
            scheduled_report.run()
        except SoftTimeLimitExceeded as exc:
            pass  # Note the exception, possibly schedule a retry?


In a real world scenario, you might find some of this useful, too:

Create another object, `ScheduledReportRun`, to act as a ""log"" for that particular run, when it started, what it was doing, what happened when it errored out, etc.  As the job progresses, you could add to a ""notes"" text field.  That way you can add an interface for users to see the status of some report and why they didn't get it.  You might also collect parameters for that report during the run so you could re-created it if necessary.

It would all depend on your requirements, really.  But having the ability to see what went wrong in a web UI allows you to pass off that level one support, so you don't have to ssh in and check the log files all the time.You can combine this with a django-fsm field and maybe even its concurrent-locking mechanism to ensure you only process schedules or send messages once.

Also: the code formatting on the site seems broken. It is sans-serif with weird white space and breaks on apostrophes.Or you can run cron/screen with a Django management command that does this.  I'm confused why people layer on so much complexity to do something simple like repeat a job? ( cron and screen are already on your server ).

To run your job on screen just do:

create a send_emails.py.py command, in it drop an infinite loop with a sleep 24 hours ( to do once a day ).  Or sleep an hour and check if hour == midnight. ( 2 lines of code ).  Then do...

screen -d -m python manage.py send_emails.py

Now you're sending email like a boss."
2017-06-05 08:28:12;django rest-auth datefield may not be NULL Error;
2017-06-05 07:33:51;Django admin integration for Django Hijack.;"This is a great package, specifically django-hijack in general.  I have a few projects I'm tinkering with where the impersonation feature would be a huge value add.  I'm not OP, just saw they posted this package and I've had success with it :)I love hijack admin. I even extended it a little with a mixin to hijack models that have a user related to them, like a `Customer` model for example.

    class HijackRelatedMixin(HijackUserAdminMixin):

        def hijack_field(self, obj):
            return super(HijackrelatedMixin, self).hijack_field(obj.user)

Edit: I might make a PR for this..."
2017-06-12 22:06:50;How to make a scheduling app with Django?;
2017-06-12 21:04:42;What does your sandbox/staging env look like?;"I often override the admin_site.html template to add a big banner at the top noting that it's STAGE, and have even added some JS to pop up warnings whenever a form is submitted. Otherwise, I've had the issue of the client spending hours on data entry only to realize it was on the stage database, then ask me to ""copy the data over"" to production, which can be a major PITA if you've already had IDs taken and have a lot of foreign keys. Otherwise, you're correct. Docker makes it very easy to spin up an exact replica.You've pretty much nailed what a sandbox/staging environment is - a scaled down copy of production infrastructure. You can help alleviate the extra maintenance by using some better deployment techniques. [Fabric](http://www.fabfile.org/) is nice, or you can go with a service like gitlab that can automatically deploy for you. To keep settings.py DRY between dev, stage, and prod, we use multiple settings files which build on each other, as described in two scoops of django.  We went a bit further.

One detail that I found useful, was to derive both stage and prod settings from one common settings file (which I called prodish ie ""prod-ish"") to capture the bulk of the similarities.   So the production and stage settings became extremely brief.Feature flags!

Prod and staging and beta are all the same server. Each have different feature flags flipped, so different things happen.

That way a customer can try his REAL LIVE account on beta, see if he likes the new workflow. If he makes an edit, it's not just an edit to dummy data, it is an edit to the real deal.

So I have 1 deployment. It happens on every single commit that passes all tests on the master branch, so 10-50 deploys per day (we are small).

You obviously need to trust your tests and be careful with what you do, or it could be a mess. You can break code with feature flags.."
2017-06-12 16:18:52;Can I download django 2.0?;The closest you can get is to checkout master from github. That said django 2.0 is set to release 6 months from now. Probably not a lot of the new stuff is going to be there quite yet.
2017-06-12 13:03:27;Monitoring App for checking status of servers?;"I'll just leave this here - https://www.youtube.com/watch?v=Q9BagdHGopg&t=8m59s

So yea, don't write your own monitoring system. Use an existing one.[Shinken](http://www.shinken-monitoring.org/) is compatible with Nagios scripts/checks and arguably looks nicer.Zabbix."
2017-06-12 12:28:18;Profiling and Improving Performance of your Django App using Django Debug Toolbar!;Hello. Is there an RSS feed of your blog posts? 
2017-06-19 21:59:00;"Will be giving a local group talk: ""Best Practices with Websockets"". Do you have strong opinions, resulting from lots or little experience?";"0 experience - I need to start with why websockets and not sockets? 

What does doing this actually gain me anyway?Could you provide the material and Record the lecture? "
2017-06-19 19:34:08;App for storing static files on S3 without providing explicit credentials;"I don't get the point of this. Maybe I'm missing something, or don't understand the use case for this correctly.

You're using the `boto3` library, which already checks the IAM role (as a last resort. It works through this list of credential providers http://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials).

I'm already using `django-storages` without providing the credentials, and it does work, picking up the credentials from IAM roles assigned to the EC2 instance. How does this package improve over that.This is a different workaround for what I believe is the same problem:

https://github.com/boto/boto/issues/1477#issuecomment-38759048

It seems simpler since it doesn't bother with getting temporary credentials.Though, I don't actually mind supplying the credentials in settings.py

Is there anything I am missing?I just realized that I forgot to mention in the title that this only works if your project is running on EC2 instances. Whoops."
2017-06-19 15:44:02;A Django Wedding Website and Invitation + Guest Management System;"As a newbie-dev I love seeing Django projects - being recently engaged I'm ecstatic to see a wedding project!

Definitely going to be tinkering with this! I will let you know if I use it and get it up. Thank you!Very cool, thanks for sharing.I made something very similar but just had the form send me an email with guests RSVP. We only had 40 guests and most were couples so it wasn't too cumbersome this way. Just something for people to consider, especially as my wife was the one handling the responses not me, she was copied on all the emails. So I made something like this six years ago for my wedding. At the time, I knew mostly PHP so I developed it in that.

It looks like you did a pretty kick-ass job, well done :)

Thanks for sharing too, I'm looking forward to poking at the code. You might want to integrate with twilio for the fun of it, but I'm not sure what you would send out with itNow that's what I call romantic xDVery cool! I'm getting married in August and wanted to do the same thing! tnx for opensource "
2017-06-19 14:41:56;Sort/Order by function for returned results?;Haystack `SearchQuerySet`s support an `order_by` method ([docs](http://django-haystack.readthedocs.io/en/v2.6.0/searchqueryset_api.html#order-by)). Assuming you're doing some sort of pagination and are using a `SearchQuerySet` to get your results, that's the way to go.
2017-06-19 12:30:45;Database indexes in Django 1.11: difference between db_true, indexes and index_together;"According to the docs, you can give indexes a name and you can set an order for each field in the index (but not all DBs are equally supported).

But in reality the whole point of this is to bring extra flexibility to define other types of indexes where supported. Currently as of Django 1.11 and only when using Postgres you can define GIN and BRIN indexes if that is something that would fit your needs. (see django.contrib.postgres.indexes at https://docs.djangoproject.com/en/1.11/ref/contrib/postgres/indexes/)

Being able to define indexes as you described is just the most general case and unless you want to use a feature named above (naming indexes or ordering fields) you can probably use indexes as you've been doing until now (db_index and index_together).The index stuff got updated in a recent Django; in the Meta options you used to only be able to use field names (and get a generic index) but now can use a Index class instance to specify what kind of index you want (there are a few different ones, especially in contrib.postgres). 

So \#3. and \#4  are new (class instance) and old (list with strings). 

I believe \#1 and \#2 are the same, if you use the `models.Index` default index. But \#2 allows you to use something else.

"
2017-06-26 21:45:24;Django Rest Framework. Need help.;
2017-06-26 18:36:02;Why is API and JSON important in web framework?;"Could you clarify what your question is asking? What do you want to know about it? 

Sounds like a homework questionJavaScript is the native language of most web browsers. In order to interface with backend systems APIs are used, and send serverside data to that JavaScript. The method they use are something called JavaScript Object Notation, or JSON, which allows multidimensional data to be transferred.Most common use case I can think of is AJAX. Traditionally (say with Django), if you want to do something, i.e. POST responses of a form, GET details of an object, or do a DELETE, you will have to reload your webpage. We can set things up (say with Django REST Framework) so that our URL's look something like /api/user/<username> and return JSON. For example, /api/user/UnKn0wn27 might return a JSON object containing your username, first name, last name, and e-mail. This is what's used for AJAX; for example note how Reddit does not reload the page when you do things like delete a comment, etc."
2017-06-26 12:15:31;Django server with pygame - javascript GUI;"Is it possible? sure. 

Though considering that you need to redo the GUI in javascript anyways, it is ~~probably~~ easier to redo the entire project in javascript. 

If you really want to run your game on a server, it is probably easier to use Flask instead of Django. "
2017-06-26 10:35:01;Python and Django Full Stack Web Developer Bootcamp;"I highly recommend [the DjangoGirls tutorial](https://tutorial.djangogirls.org/).I started with the docs/the official tutorial, and it's what most people recommend.

If you don't want to go that route, I'd recommend starting with ""TDD with Python"", since it's free and covers both the basics and some stuff (ie: testing methodology) that isn't really in the Django docs: http://chimera.labs.oreilly.com/books/1234000000754/index.htmlI have finished most of that course and I am so thankful that I found it! However, I would only recommend it if you know next to nothing about web development; several lectures are devoted to the basics like HTML, CSS, and Bootstrap and so you may consider that a waste of time/money. Other than that the instructor does a good job at explaining core Django concepts.

Note: don't pay more than $10-15 on any Udemy course.I would say do the Django girls tutorial, the official tutorial and the mozilla tutorial and then you will be all set. No need to pay for any courses.i know some javascript but am new to python and went through the udemy course.

the django stuff is really confusing and I never finished it.
there are example projects that might be good reference for later.
going through http://www.obeythetestinggoat.com/ now. things are making a bit more sense.
Same opinion, there are a lot of references (and official docs as well, whether Python or Django) which are free so you don't have to pay for a course. If you already have programming knowledge, then Python should be very readable, even if you haven't formally studied it (it was designed that way). For Django, I suggest going through the official Django tutorial, and perhaps the Tango With Django tutorial too (though might be older, but it was helpful in my case).I have one more question (which I think already know the answer)... I should learn git and github/bitbucket before starting to learn django/python (or any opensource language) right?
Right now I'm a SAP programmer so I never had to use github or anything like that, because everything works in a ""closed"" environment, but I'm well aware of it's purpose and how it can help me in projects... so I definitely must learn git first right?A silly question that cames to mind... I'm a Windows user (yeah, I know, don't kill me yet :P ), and I know we need to use a terminal a lot with Django and Git, so my questions is... should I use Command Prompt or Windows PowerShell?
I know the Windows PowerShell kind of emulates the Linux and Mac terminal, and that two systems are way better for coding than Windows, and since I have a little experience in Linux (Ubuntu), should I use the Windows PowerShell?maybe start with Flask? not as ""heavy"" as django and might be better for someone starting out"
2017-06-25 15:42:29;Good hosting for new project in Django?;"> I'm working on an online learning service for kids [...] Data analytics is going to be a key part of the service

I hope you're investing in legal counsel.  even if the data analytics has nothing to do with the users, any service aimed at minors is a PITA at bestI've been on webfaction for years. They're great for basic stuff and demos but if planning a production system I'd consider something that can scale.

Was going to suggest Heroku but it sounds like you're already there. Unless you want to roll your own, might want to take a look at Amazon Elastic Beanstalk. There are a lot of tutorials out there on how to deply Django on it.A lot depends on your priorities.

If this isn't going to be your only project, I'd encourage you to take a couple days to learn how to do the deployment yourself, and use a VPS (personally, I like Linode). It *will* take a couple days but you'll learn a bunch and going forward future projects will be easy and cheap.

On the other hand, if this is your only project, then the savings probably don't justify the couple days time investment. I can't really strongly recommend any specific service since I always just go with VPS, but when I teach Django Girls, the tutorial uses PythonAnywhere, and it seemed pretty nice and easy. As a bonus if you're unclear about how to do anything, you can use the tutorial for reference. As another bonus, since their main focus is Python, Django specific support is going to be excellent. So while I don't have much direct experience with it, it's the first thing I'd look at if I wanted some sort of managed setup.Do check out https://www.pythonanywhere.com. They specialize in Python hosting and deployment is similar to Hero ku, except that it's at a fraction of the cost.Webfaction only. I have  loved Webfaction for years. I have a couple django instances, wordpress, etc on my account there. 

They are inexpensive. I get access to a shell. Their support staff has always been extremely helpful.

[affiliate link](https://www.webfaction.com/?aid=2456)DigitalOcean has one click deploy Django servers, reasonably priced and scalable.My 2c: just got majorly screwed by webfaction, despite having used them for many many django sites since Sep 2008 ... avoid them. 

Repeat: avoid Webfaction. They hate their django users apparently. 

(screwed = they just updated all their servers, sent wall-of-text email that toward the end amongst some dot-points said: ""Some possible issues are: - Apache configuration adjustments for Django and other mod_wsgi apps"" .. no support docs or anything just broke every django website overnight. Had to do some far-too-serious plumbing myself to resolve (recompiling apache without docs srsly?), ruined my week, am really peeved about it.)

+1 Python Anywhere, one of their main guys is Harry Percival who wrote TDD in Python (https://www.obeythetestinggoat.com/) and does heaps of positive work in the community. They also offer special ""education"" accounts.Pay for devops, save on hosting"
2017-07-03 15:17:43;Opinions on super modular templating;"I tried many small templates once and hated dealing with it later. Can't answer very precisely but here are a few things to keep in mind:  
* The django template system is not really efficient when it comes to include a lot of files because it copies the context everytime, but it is probably not a real issue unless you have a really huge/complex site.  
* You can bundle your js/css files into one using django-compressor or something similar to avoid doing too many http requests. Or use CDNs for largely used libraries.  
* It is almost always better to split the code, whatever language, but only if you can find a fit name for the file/module; And also try   to avoid splitting for the sake of having small files, a file/module should encapsulate the smallest unit of logic, which means files with business logic will probably get big - it's ok.  
* I avoid embedding script/style in html files.  
  
edit: format -_-aIf you're creating a SPA I'd completely separate my client-side and server-side code. Use Django as basically a JSON API and then use webpack to create my asset bundles. It is very easy to make a huge mess of small components and have busines logic and data access spread out all over your project. You can then loose control over what is going with includes and custom template tags and filters and context processors and template block extensions and overrides.

It also gets messy to orchestrate if different components need same data, or different versions of same data, of different access permissions etc. Or find you got a pile of N+1 problems because some template is traversing your model structure un unforseen ways or requerying the same data over and over.

There is probably a sweet spot for your type of project. 

I find it best to use templates strictly for presentation. Move all business logic outside the views, and sometimes even have the views transform and serialize everything to primitive data instead of passing models and querysets. This works well if you already use serializers in your JSON api, but maybe less if you go for something based on standard GenericViews.

Choices choices. Whatever works for you."
2017-07-02 12:09:08;DjangoCon Europe 2018 Call for volunteers;
2017-07-02 01:14:10;Insert a source code from a file into a template;"I figured it out. In case someone browses for it in the future, I created the following filter:

@register.filter  
def get_text(filename):  
    file = open(filename, ""r"")   
    text = file.read()  
    file.close()  
    return text  
  
Then, in my template I load this filter with:
{% load get_text %}

and call it with:

{{""./templates/scripts/source_code.py""|get_text}}Why not just use include?Sincerely, just

    {% include 'path/to/file/with/your/source.code' %}

Most of the times you don't need anything else.

The only time I needed custom inclusion tag was when I wanted to store files in original form in filesystem but have included version minified in non-trivial way.    
So I wrote minification inclusion tag that not only did minification but also caching because my minification process was relatively very resource-heavy.Indeed. There was an error in my path. After fixing it, include worked just like the filter I created. Thanks everyone for pointing it out!"
2017-07-02 00:09:05;Django bugfix release: 1.11.3;
2017-07-01 19:27:22;How to drop tables? (value too long error);"You can do it in psql:

`psql`

`\c database_name`

`\dt`  (lists the tables for your database) 

`DROP TABLE table_name` 

If you'd like to do it in the ORM, then [this stack overflow question](https://stackoverflow.com/a/2286289/1293222) is probably your best bet. "
2017-07-10 22:27:37;Is there a benefit to using Django over Flask for API development?;"Note that, *mostly* people complaining about the bulkiness or bloated-ness of Django aren't really thinking the issue through.


What difference does it make to you that the code for RSS syndication is sitting there on the disk?  You just don't use the parts of Django you don't want to use.


[Here's](https://raw.githubusercontent.com/syntarsus/minimal-django/master/minimal.py) a minimal Django project.  1 file, 23 lines.


A lot of the ""feeling"" of bulkiness you get from Django stems from the fact that the documentation and tutorials focus on exposing you to everything it can do rather than just getting you going.  I think that's a real issue with Django.The arguments are pretty much the same as any Django vs. Flask question. Django does more for you out of the box. You save time by not implementing things yourself or gluing various packages together. Django has Django REST Framework. There's no details on your application requirements, so I'd just pick the one that gives you the most things you need. Your time is more important than anything else, so if you need an an auth system you might as well use one that's been tested and proven, and that applies to Flask or Django.One advantage I've found to using Django over Flask is that when looking for help on the Internet, you're going to find much more of it for Django than Flask.

Partly because there's just way more people using Django, but also because the micro-architecture approach means that while you may find other people doing the same things as you, they could have chosen different components to do it. So if you're having trouble serializing your model, you need to find help from someone else that not only has had the problem you're having, but also with the same ORM you used, and the same REST framework you're using.Django Rest Framework is simply amazing. The ModelViewSet class totally boosted my productivity.For small projects, I strongly prefer Django. Flask gives you more freedom to plug in whatever you need in whatever way you need to, which is rarely important unless you're talking about large or technologically unusual projects. If the primary purpose of your API is to read some data from somewhere, do a little processing, and return that data, Django has strong opinions so that you don't have to have any and a robust ecosystem to cover the things you probably forgot or didn't realize you'd need. Django's feature set being bulky doesn't mean Django itself is slow or resource intensive. (I mean, you can make it slow or resource intensive, but you can make anything slow and resource intensive.)In my brief experience, it's easier to hit the ground running with Django. You have your ORM, migrations and authentication ready from the get-go and there's a lot of information how to do common stuff. With Flask, I almost always get distracted with way too much thinking about structure and architecture. That's not bad by itself, depending on the deadlines :). It's more flexible, but also requires somewhat more legwork.


If you want to go the microframework route, be sure to take a look at Falcon, Sanic and Hug, too!


There's a book called ""Lightweight Django"" which describes the lighter, API-centric approach you aim for."
2017-07-10 13:51:34;How do I access a file that has been saved? (File field);"It depends on what storage backend you're using.  When you access a FileField attribute, you are given an instance of FieldFile:

https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.fields.files.FieldFile"
2017-07-10 02:40:15;Django Rest Framework - Forms for Large Model;"> only to find that django forms overwrite data with none if you don't send it, so that's how I ended up on DRF.

You probably jumped the gun there. Can you explain this part in a bit more detail? It's entirely possible to write forms for a subset of model fields.There are several tools that will let you store the form values in the session, then post it all at once when the user hits submit on the final page. Just google for 'django multistep forms'. Or build it yourself. I'm probably not the best person to answer this question, but my gut reaction is that you might want to reassess the model itself rather than try to smash a solution through. They're populating null because, well, they are null when you submit.

Looking at this from a database schema perspective, having all those fields in the same table doesn't really make a lick of sense. It would be best (again, from a DB schema perspective) to split them into separate tables (i.e. models) and create forms based on each of those.

Edit: as far as manually rendering and filling in junk data for null values (if that's what you want?), I will let someone more skilled at DRF answer. I'm not that person, sadly.I think you'll want to look into the form wizard functionality.  It used to be included with Django proper - now it's in an optional util app. It allows you to build up the model's full data over a series of wizard steps.  http://django-formtools.readthedocs.io/en/latest/wizard.htmlWe've found (at work) that Django forms are fine for just very simple use cases and quickly devolve into spaghetti code and nasty workarounds. So we built a replacement: tri.form. It's still rough around the edges in some places but it does a whole lot more and better. "
2017-07-09 23:50:57;HTML / CSS / Javascript Question;"It just depends on what your goals are. Are you going to develop on the back-end(server side), front-end(client side) or both? As for me when it comes to web technologies I employee a ""Learn as I go"" principle, and only learn the technologies I need to accomplish the task I'm doing.I'm also just starting out with Django, but here's my understanding of its interaction with HTML/CSS/JS:

HTML/CSS/JS are used for the front-end of your website. If you want to make things look pretty, then thats where these will come into play. 

Django handles the back-end of your website. It manages forms, linking static documents (such as your css/js files) database interaction, etc. It essentially does the things you would use PHP for on an Apache server. 

Again, I'm new to Django, so if anyone has any corrections/comments, I'm open to critisism. "
2017-07-09 21:47:17;How big can a views.py file get before it will be considered bad practice?;"no, 600 lines is not big.600 lines doesn't sound extreme and I wouldn't refactor it simply because it's long. Although being long is a good alert for ""this module is doing more than it should"", it's not always true. Check if there is too much unrelated code on it and if so, refactor splitting some utility functions or additional modules. For me, the main reasons are: make your code more obvious and easier to find pieces and avoid merge conflicts when multiple people work on the same code base.I once inherited a project with a `views.py` file of about 2000 lines, with functions scattered about.

My first step was to make a `views` module, and pull out all those functions into discrete files describing the general area of responsibility: `access`, `catalog`, `comment`, `api`, etc.  The shared functions got pulled into a `utils.py` file.

Structure is much better now, because I can just open up the view of the area of responsibility I need to work on, rather than jumping about randomly in a large file.The length isn't normally a problem except when it makes static analysis in the IDE super slow. 

The length might indicate you're doing way too much copy paste development though, which is a problem. But only you can answer if that's the case. I wouldn't worry about it until you're up around 3000 lines then you could just split them into subapps if it seems logicalFor me, 600 lines would be too long. Split into separate apps. You can even nest apps for added organisation!I do not think 600 lines is big, but this is a matter of taste.

I have broken up Python modules in the past, and I think the ""proper"" way is to create a directory with the same name as the Python file (ignore the `.py` extension), break up the `.py` file into multiple modules within that directory, and add a `__init__.py` file that imports everything from the contained modules.

## Example ##

`models.py`:

    ...
    
    class Thing(models.Model):
        ...
    
    ...
    
    class OtherThing(models.Model):
        ...

would get broken up into:

* `models/things.py`
* `models/otherthings.py`

and `models/__init__.py`:

    from .things import *
    from .otherthings import *

Doing it this way means you don't have to modify any external imports from `models.py`. Example: `from myapp.models import Thing` doesn't need to change.I have project that consists of several apps. I normally split up my views when it comes to app relevancy and the app with the largest views.py file has about 3,379 lines of code. Those lines of code are nothing but pure CBV code related to that app. I keep all my utility functions and such in a separate module that I import when needed.  As far as the views.py size goes, I really don't think it matters as long as you keep the views relevant to the app, as far as performance goes it's negligible, but I could be wrong?

As far as refactoring goes, then YES, you should always try to refactor and minimize your code, why do something in 4 lines when it can be done in 2?If you don't see reason to refactor it may be because there is none.

Only refactor when you have clear and important reason for it.

Avoid cargo cult programming at all costs."
2017-07-17 13:51:24;How to cache API requests from a service?;"[Django’s cache framework](https://docs.djangoproject.com/en/dev/topics/cache/)

More specifically: [The low-level cache API](https://docs.djangoproject.com/en/dev/topics/cache/#the-low-level-cache-api)

in short:

    from django.core.cache import cache


    def my_view(request):
        # First check cache for existing data
        cached_result = cache.get('github_api_response')

        if cached_result:
            # We have data stored in cache. Send it out.
            return cached_result

        # There is no data in cache. Go get some.
        result = github_api_request()
        cache.set('github_api_response', result)  # cache.set('github_api_response', result, 30) to add specific timeout (in minutes)

        return result"
2017-07-17 13:24:24;DRF error: difference in POSTing json vs url-encoded with an m2m;I get that there may be some special concerns you have to take into account when creating / updating the m2m relationships, but I don't understand why the json post is behaving differently than the url-encoded.
2017-07-17 12:14:11;College Project;"You mean like https://www.class-central.com/ ?

You can look at that site and a few others, play around and get some inspiration for features (like comparisons of similar courses, specializations/capstons, how frequent new courses appear, etc)"
2017-07-17 12:11:42;Editing Data - modelformset_factory?;"I feel your problem is in the template. See https://docs.djangoproject.com/en/1.11/topics/forms/modelforms/#using-the-formset-in-the-template and maybe manually render the forms/fields in a single table?
"
2017-07-17 07:04:34;Real-time with Django instead of Node;"> So, I'm confused

Django-instant author here. Yes the situation with websockets is confusing. Channels is supported by the community but does not seem to be massively used in the real world. Andrew Godwin recently posted about [Channels 2](http://www.aeracode.org/2017/7/11/towards-channels-20/) so that things are going to change in Channels. Btw I was surprised that no one commented on it.

Thanks for your interest in django-instant. I was very confused too when I first looked at a solution for websockets and I ended up coding this to address mostly two concerns: to be able to plug it on an existing instance not having to use Daphne/Awsgi and keep the things simple with a straightforward api and almost no learning curve.

This module is under active development and is now after maturity: the api is stable and the community around the [Centrifugo](https://github.com/centrifugal/centrifugo/) websockets server that powers this is very active and welcoming. If you give it a try feel free to open an issue if you encounter any problem or need information on something.I'm using Channels in the real-world on two projects right now. Works great. Use ReconnectingWebsocket and you dont have to worry about anything. I'm actually giving a small talk on Thursday on Channels (if you happen to be in Boston). But feel free to msg me and ask anythingI don't think there isn't a good story for django around this.

The solutions for node are probably a better choice at this point; that's not to say it can't be done, but you should really pick your stack for the task at hand, and django isn't really the stack I'd pick for RT web stuff.

Some idle points: 

Don't bother with Django REST Framework Reactive, its not what you're looking for.

Have a good read before you start using Tornado; it doesn't run with uwsgi so its quite different from many other python hosting things and getting it to run nicely can be quite a pain.

Channels is a mixed bag of things; its nice, but its a bit clunky, and there are plans to make changes to it. I wouldn't call it a great long term bet to pick up at this point.

...that said, I'd never recommend anyone pickup meteor and use it, for basically any purpose, so I guess it depends (personal experience, mongo <--- **shakes head**. Just no). Django is probably a better choice than some other things...Another python framework to consider is [apistar](https://github.com/tomchristie/apistar#performance). I'm linking to the performance heading of that page because it looks really impresive. It is a new project, but I think the guy behind it is a core committer of django-rest-framework.I'd probably just send a message from my Django app to Redis, and then have a separate Node.js process pick it up and deal with it. I've done the same with Laravel before.Why not use Django Channels? It's officially maintain library.I don't know how does Channels handle ale the blocking operations... Any cache or Sql gets in a large number will kill an unprepared app."
2017-07-24 21:16:23;Using OAuth to authenticate users with Django;"Start with allauth and [the deprecated?] social-auth. 

No idea if these work with Microsoft, but the docs and pipeline in allauth are extensive. If OA2.0 is used, I don’t really see an issue. Write your custom pipeline if needed (e.g. assign user permissions, make columns, import profile pictures... I’ve done all these in the pipeline)."
2017-07-24 14:45:49;You must define the environment variable DJANGO_SETTINGS_MODULE;"This might help: http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/

Or read up on running a command from your top-level directory by running:

% python manage.py shell
> I've tried setting the DJANGO_SETTINGS_MODULE = mysite.settings inside the settings.py.

The purpose of `DJANGO_SETTINGS_MODULE` is to tell django where to find your settings file. 

https://docs.djangoproject.com/en/1.11/ref/django-admin/#django-admin-and-manage-py

Either use `manage.py`, or `django-admin --settings=mysite.settings` or export a env variable in the shell `export DJANGO_SETTINGS_MODULE=mysite.settings`If this is a command you are likely to be running again and again, I might make it a Django ""management command"". :)

(Also, are you testing email delivery? If so, there's already a management command for this!) "
2017-07-24 13:52:50;Anyone used Django Channels? Can you help me understand what options are there for load management?;Is this a general outline question or do you want anything specific?
2017-07-24 12:02:06;Installing a django project in an enterprise environment;"Depending on your set up here are some of the ways I have deployed Django projects.

Using CI:

1. CI server checks out code from repo
2. Install requirements from PyPi server.
3. Run tests
4. If everything passes, package up just the code (no VCS metadata or tests) into a tarball
5. Have CI server (or manually ran script by a operations person), rsync tarball and deploy it

Using staging environment:

1. Have script or something checkout out code to staging server from VCS
2. Run post deployment commands (install new requirements, migrations, etc.)
3. Test code in staging environment (unit tests, whatever)
4. Have script or something package up code just like CI server would and deploy it

Another important thing I would recommend is making a internal PyPi server that you install only the packages you need on to and vet each package for security issues and licensing before installing it. You can then restrict any staging/CI/production environment to only use this server to install from. I am not sure on our exact implementation of the PyPi server where I work, but this is what we do. We also have a CI job that runs to look for any known vulnerabilities in any of the packages we use so we can upgrade them when needed. For installing packages without an internet connection: a technique I've used in the past is to have a separate git repo that includes all of the Python dependencies needed for the project as .tar.gz files (today I would try using wheels here) which can be installed using ""pip install filename.tar.gz""

Separate repo because putting bulky .tar.gz files in your main repository will bulk it up in size considerably.If it were me, here's what I would do:

1. On my own laptop, install [devpi](http://doc.devpi.net/latest/), boot up `devpi-server`, and point `pip` at the local `devpi` running on my laptop.
2. Do all the setup of the codebase, including installing all the dependencies.
3. Copy `devpi` and its dependencies onto whatever media you're permitted to use, along with a copy of the local package index `devpi` created while setting up on the laptop.
4. Take that media in, install `devpi` from it, boot up `devpi-server` on the machine I'm deploying to, point `pip` at the locally-running `devpi` instance, and proceed with install from its local package index.

For bonus points, the codebase itself should be put together as a Python package and ""uploaded"" into the local `devpi` so that it gets installed with everything else.I agree with /u/angellus but I generally prefer to use git to deploy code for Python projects - configure the server to pull from either a release branch or master, or configure your CI environment to communicate the correct branch to the server. Then, the server will pull the changes down, run commands like installs, and then reload the server. Since all files are in memory, the site will not update until the server is reloaded (this does not include static files, which will switch as soon as they're updated, so race conditions do exist here). 

The reason this is ideal for me is because everything required to run your code should be checked in to VC - packaging doesn't really help with Python projects because you don't (read: shouldn't) have artifacts or anything like you do in .NET or Java based projects. 

I would also use CI for staging as well - systems like Bamboo make this really easy and help out really well with release management as a result.A buddy of mine loves [Pants](https://pantsbuild.github.io/python-readme.html) which creates a single 'pex' binary to run the application.

""... manipulation and distribution of hermetically sealed Python environments .."" sounds right up your alley.Django app could be easily distributed as a deb file (in case if your server is under Ubuntu or Debian)

It's the highly popular way for django distribution. There are several guides available on the web


https://www.nylas.com/blog/packaging-deploying-python/

http://www.laurentluce.com/posts/hello-world/

https://hynek.me/articles/python-app-deployment-with-native-packages/

https://github.com/codeinthehole/django-in-a-deb-file"
2017-07-24 09:19:34;best way to learn django for web developers who are familiar with python ?;"- Official tutorial https://docs.djangoproject.com/en/1.11/intro/tutorial01/

- Django Girls https://tutorial.djangogirls.org/en/

- Mozilla https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django[The official tutorial?](https://docs.djangoproject.com/en/1.11/intro/tutorial01/)And once you're done with the tutorial, grab Two Scoops of Django.Lightweight Django is greatThis is a pretty recent video so the stuff will be up to date.
https://www.youtube.com/watch?v=yDv5FIAeyoY"
2017-07-31 21:02:53;What do you guys use for idempotent long-running tasks?;"When you say ""long running"", you're saying you're using something other than a task queue?

Yah what do you want, a job or an infinite loop?

I have a task that is an infinite loop. I use Kubernetes, so it is a super simple docker container with alpine python, and my 30 line python script. It just runs in a loop doing a task forever. If it dies, the container shuts down, and kubernetes spawns a new one. It ensures I never have more than 1 instance up at a time. (Maybe 30 second gap of it not being up if something crashes).

But if you aren't using kubenetes, this answer is useless for you ;)     Would likely need to see your entire stack for how to fit this in.


Can't you use a simple task queue for that too? If a worker gets interrupted an other worker could grab the job again after a threshold for the ""in progress"" flag is exceeded. You could also write a supervisor that checks if a worker is currently working on a job and frees the job again or even does others fancy things. To solve this I basically did the following, in case anyone else wants a decent solution.

Each job on spawn is added as an entry in DB, status saved as 3 choices, 'queued', 'in progress', or 'done'.  

When a job is picked up by a worker, there is a thread that is spawned that updates the updated_on on the job every 30 seconds or so.  This is to mimic the 'acks_late' function available in celery (which I should have used on this project, looking back).  If the worker dies for any reason, then that 'ack' thread will die with it, so we know we need to re-queue it.

Important to also know that you only want to select jobs that are 'in progress', or else you could end up respawning completed * queued jobs."
2017-07-31 20:45:10;Uploadcare uses Django for most things and Flask for some of the smaller simple ones;"this is not true :)
while we're using django more than flask, it is definitely not used for ""most things"" though."
2017-07-31 19:11:35;Help with two model classes referencing each other.;"You'll need the `ForeignKey` on `Student`, but not on `Classroom`.

Once you have that set-up, you can retrieve all of the `Student` objects from the `Classroom` using `some_classroom.student_set.all()`. See [this example on ""following relationships backwards""](https://docs.djangoproject.com/en/1.11/topics/db/queries/#backwards-related-objects) for more information."
2017-07-31 19:08:09;URL dispatching and request processing;
2017-07-31 14:45:47;How to populate a DropDownList based on another DropDownList in django?;https://pypi.python.org/pypi/django-smart-selects
2017-08-07 23:20:04;venv, django, and git;"The virtualenv can exist anywhere on your computer, there is no need to cover it by git because you would technically have a requirements.txt file that lists all required libraries that you use. 

So in the event of a new machine being setup, you start a new virtualenv using the same python version and then run `pip install -r requirements.txt` to install everything.[deleted]For your gitignore check out http://gitignore.io for reasonable starts to your ignore file.I prefer to use [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/) and keep it completely separate. It makes it easier, at least for me, to manage multiple projects and doesn't clog up the project folder.hm, I guess it has to be in the same directory or it wont work?

I suppose I could use a different directory and just copy my venv folder after each update and replace it.I guess I am doing things out of order and should have set up my repository first and then my virtual env, django project, etc.Your virtual environment is only for python packages. So when you install git (a non-python package), it should be installed globally by using a package manager.

The entire virtual environment folder should be gitignored because 1) there are a ton of files in it, and 2) because it can be easily recreated as long as you have a requirements.txt file. requirements.txt is just a file that contains the output of ""pip freeze"". You can then install all your requirements with ""pip install -r requirements.txt"".

For directory stucture, here's an app I'm working on that you can use as an example: https://gitlab.com/mac-chaffee/ncsu-menu-notifier (my virtual environment is gitignored in the root of this project)"
2017-08-07 14:47:19;Best Resources for Learning about Models Design?;"Models are really just syntax sugar on top of your database.  What you want are books on good database design.Three books are good for learning models:

* 2 scoops of Django
* Mastering Django
* Django unleashed "
2017-08-07 13:51:20;GeoDjango or ElasticSearch for Geo enabled apps?;"geodjango is more than sufficient for what you need to do. it's much more powerful for geo querying than elasticsearch, which may be beneficial to you in the long run. being that geodjango is built into django itself, and works from the same data source as your app's data, you will not have the cognitive and process overhead of leaving the basic django toolset, nor will you have to sync your data between database and elasticsearch.

if, eventually, you need elasticsearch for its full-text search powers (which aren't necessarily available or ideal in postgres), then its geo ability _may_ be a reasonable addition to your stack."
2017-08-07 11:57:53;How handle settings.py and local_settings.py?;"you're putting the `... from .local_settings import *...` at the very **end** of your *settings.py*, right? Otherwise they'll get overridden by whatever comes next in the original settings.

If that's not it, confirm that your local_settings.py is in the same dir as settings.py, and maybe try switching the `pass` statement for `raise` so if it does fail there's an exception to look into.Take the dot in front of local_settings out. 

Should be:

try:
    from local_settings import *
except ImportError:
    pass

You can try something like [`django-split-settings`](https://github.com/sobolevn/django-split-settings) or [`django-configurations`](https://django-configurations.readthedocs.io/en/stable/). It is much easier to handle settings this way."
2017-08-07 00:51:06;Django REST Framework Authentication by Example with JSON Web Tokens (JWT);"fyi on the topic of jwt: https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoidAwesome. I was just looking into this.
Enjoyed the tutorial. Really nice.

Just a small typo correction:

* your url endpoints are ""/auth-jwt/""

* but your curl test example shows ""/jwt-auth/"", so it doesn't work as shownThis helped me quite a bit. Thank you! I do have a question; can anyone point me to a tutorial or example that uses a production safe login using JWT? I've ditched my PHP experience to learn and start using Django and the prod ready logon system eludes me."
2017-08-14 18:51:00;Clean Architecture in Django;"Oh FFS. I don't want to pick on you, especially since I do actually think there are good ideas in Clean Architecture, but Python is not Java. It has free-standing functions, use them!

Something like

    class ProductDatabaseRepoFactory(object):
    
    	@staticmethod
    	def get():
    		return ProductDatabaseRepo() 
    
Can be collapsed to:
 
    def make_product_database_repo():
        return ProductDatabaseRepo()

Or better yet:    

    ProductDatabaseRepo()

Which contains fewer lines of noise, makes it abundantly clear what you're trying to achieve, and - trust me - is just as scalable as the OO version."
2017-08-14 18:30:26;How do you develop and iOS/Android app over a django webapp?;"Django Rest Framework - http://www.django-rest-framework.org/

You build an API that does the work and data is passed to and from the API and whatever client frontend in a well defined way.

DRF is not the only way to build API's with Django, but it is the most popular.They are using Rest APIs which can also be created using Django via popular frameworks such as Django Rest Framework and Tastypie. You can check this [tutorial](https://www.techiediaries.com/tutorial-django-rest-framework-building-products-manager-api/) on techiediaries to learn how to use Django Rest Framework to build web APIs.Django rest framework can be used to  build a rest api that will allow django to communicate with your mobile app."
2017-08-14 18:25:42;Helper script to start Django dev server, run migrations, etc. in just four keystrokes (MIT, PyPI);Really nice. Thanks for sharing :-)
2017-08-14 17:45:01;Does anyone have experience with ORM-apps shared between projects? In what situations did it work or fail for you?;"It might be good to **keep it simple** for now. Scale when the need arises, not before.Feels a bit premature, especially since you don't have concrete features to support. What data do you even need to share?

Simplicity is so valuable. What can you do to make this simpler? Not coupling stuff makes things simpler. 

Why make 'micro services' but then tie it together at the data backend? Are those even microservices really? Or just a fragmented application mess? If you need the same data it is the same service. 

I think you worry too much. "
2017-08-14 15:53:08;From URL to web page: walk through to Django;"Expand with HTTP, middleware, and DB connections and you'll cover most everything people need to know about web requests I liked it, short but sweet, make more!Seems super basic but for me it was the key thing that helped me really understand how it all worked. Url points to view points to template.

Maybe next do a simple Model and saving and retrieving data.


This is a really great short but explicit description of the process. I've found that one of the biggest problems with many Django tutorials is that it assumes that you already know how HTTP works and have experience with how web frameworks abstract things away. You're told to write a 'view' function or a 'model' class but you don't really see their place in the overall flow.Very nice. 

Maybe a description of building forms from models.

One thing that confused me was the template language. I was like ""Why aren't I just using python why is there this new template language BS? What is *wrong* with front end devs?"" Maybe a brief little thing about templates. Best explanation I have seen for that is djangobook.com.

Why do we use this new language? Explanation here:
https://djangobook.com/django-templates/

Where can I find a good introduction to the templates? Here:
https://djangobook.com/basic-template-tags-filters/What is funny is there is this reputation that django is really well documented, but there is this need for ultra-simple things like this because most of the documentation is still actually kind of complicated and the learning curve feels like a step function. :)I needed exactly this webpage about a month ago when I was smashing my head against Django trying to make it stick. As someone who is still new, nice work, it would have been my ideal find had I not already put in the time.This would have saved my life a month ago, will send it to future Django learners. Cheers ! "
2017-08-21 21:33:19;Allow users to create subdomains.;"Yes, you can redirect folders to subdomains. I think this is what you are looking for: https://www.werockyourweb.com/redirect-folder-to-subdomain/I've done this years ago on a freelance collaboration site I built. It used django and allowed dynamic subdomains to be created on the fly. I'll see if I can dig up the code. You need to configure a bunch of things at different places in the stack to have a working subdomain.

- DNS (so browsers can find and request your subdomains)
- Nginx/Apache (route subdomains to backend app)
- Django (allowed_hosts and your own logic)

It is doable but not with just django, although if you are on a provider like AWS that has a strong API you could do the DNS stuff from python (boto3) and then try to find a secure way to have dynamic subdomains in Nginx/Apache. "
2017-08-21 19:02:15;Why is GET method data returned differently from POST method data in views of ModelForms?;"If the form isn't valid, you'll fall through to the render() call. Essentially, the code says the only time to not render the name.html template, is if the form was valid. In that case, redirect elsewhere.

If you move render to inside the else clause handling the GET, when the form isn't valid on POST, you will effectively return None and then things will go kablooey.The flaw in your logic is that you're missing that the redirect only occurs if the form is valid. 

If the form is invalid, then in the first snippet, the users will fall down to the render, have a form object populated by their invalid form, and that page will show with error messages and whatnot. 

In the second snippet (yours), an invalid form submission throws a 500 error complaining about how your method did not return an HttpResponse object. "
2017-08-21 18:04:47;The simple way to understand Django models;"> Personally, I started doubting whether programming is really for me.

Wait till you look under the hood then."
2017-08-21 12:38:42;Packaging Django Projects;"Why would I use this rather than setup.py for packaging apps and preferred methods for project deployment (e.g. Git)?I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/python] [Packaging Django Projects • r\/django](https://np.reddit.com/r/Python/comments/6va20k/packaging_django_projects_rdjango/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)Just some clarifications

* The packaged django project uses Gunicorn and not the django development server

* I've removed the .deb files from the repo

* Static file handling is done by whitenoise"
2017-08-21 03:53:53;Question about Django class-based UpdateView;You'd better be with separate forms, I reckon.
2017-08-28 17:57:27;Has anyone had problems with Django settings files not interpreting environment variables correctly?;"> heroku config:set DJANGO_DEBUG="" ""

    "" "" != """"A string with a space does *not* evaluate to false. In Python, `bool(' ')` is `True` (an empty string is actually `False`, though).

Environment variables are always strings. For things like `DEBUG`, I usually compare them to ""true"" or ""false"", like this:

    DEBUG = os.environ.get(""DJANGO_DEBUG"", ""false"").lower() == ""false""

And then set ""DJANGO_DEBUG=true"" in shells where I want to enable the debug mode."
2017-08-27 20:19:03;How do you develop on a remote server?;"Some of your better options will be to use a tool that can provision your dev environment automatically, something like [Docker](https://docs.docker.com/compose/django/) or [Vagrant](http://kappataumu.com/articles/vagrant-box-django-cookiecutter-quickstart.html). At this point in time, if these are both new to you, I'd recommend looking into Docker.Anddd [Edit: another] best answer: install Linux. Not even messin.I ssh into the server and use tmux + vim, for more comfort I mount the server with sshfs/nautilus and edit the files in sublime directly.You should be able to develop locally in windows, and then deploy the code to the remote server. The exact way that deployment works depends on a lot of factors, but nothing you shouldn't be able to adapt to windows. 

(Note I have not done this; it's not a common development environment for Django)

Developing in a VM should be OK as well- they make PyCharm for Linux too. However the whole process will be very similar (develop locally, deploy to remote server).VirtualBox with the Linux server, django, database, python and plugins all installed on there.

Once you've got Linux running, SSH into it and setup django, DB etc.

Then, the code sits on your windows box and the VM sees it through the shared folder.

Set it up right and you'll be coding on a local repo, which the server also sees as if it was local, and you'll be able to visit the site locally on 127.0.0.1:8000 (or whatever).

Zero lag, you're coding directly on the ""remote"" server, and viewing the site on a server that lives on your PC.

Why VirtualBox?  Because it's ridiculously easy to then give someone a copy of the VM regardless of whether they're using Windows, OSX or Linux and all the settings will just go with it so they can be up and running in about 10 minutes.So you are describing my normal workflow -- I exclusively develop remotely over ssh. I don't even have python installed on my work machine.

We have 3 Red Hat Enterprise Linux servers that are identical, divided into dev/test/prod boxes. Dev is active code changes, test is, well, test, and prod is the actual public-facing server.

I ssh into our development box, write code in emacs, save/restart/reload browser -- everything fancy that Django does still works (though we use Flask), you can still run the development server, you just have to point your work PC's web browser at the development box/development server's port, etc.

When I'm satisfied with the Dev setup, I commit it and release it to our test server. We have built some automated tools to assist with this, but it's nothing you couldn't do manually, just commit the code, checkout the code into the right directories, make sure you have the right python packages, etc etc. Your team probably has a workflow that makes this easy already, if they're experienced working remotely with Python.I write scripts to sychronize my code to the Linux server.  Look into winscp's scripting options.  It can generate the start of a script automatically: https://winscp.net/eng/docs/ui_generateurl

Then I usually use synchronize: https://winscp.net/eng/docs/scriptcommand_synchronize

Other options to consider are running something like rsync or ansible in wsl or sharing your dev location with cifs and editing directly on Windows.Mostly we don't, but sometimes we use PyCharm's SSH support. 

Python is not really suited for remote webdev IMHO, often servers run the application differently in production then in development. Like django locally has a nice relaoding development server so you can hot code, but in production django runs in like Gunicorn and Nginx (or uwsgi or whatever) and would not even see code changes until a reload command is issued.I do all my dev work on remote servers.  Even the dev VMs I run on my local machine I run headless and ssh into them.

So, from windows a few things.  First off, if you'll be doing a lot of command line work you'll want a good way to do that.  I recommend using cmder and the linux for windows addon.  This gives you a clean terminal, native bash, native ssh, all that good stuff.

* https://gingter.org/2016/11/16/running-windows-10-ubuntu-bash-in-cmder/

Second is a way to access your remote codebase and work on the files easily.  You can use vim over ssh, an IDE with built in sftp or ssh tunneling, or use an sftp client that lets you open/edit/save files transparently and use whatever editor you normally like.  I usually go for the last option if I'm sitting down to spend time developing and will be working on multiple files at the same time.

* https://winscp.net/eng/download.php

I'm surprised nobody has mentioned this setup for PyCharm, since that's the environment you use with your normal workflow.

* Setup a deployment configuration with SSH details for remote server.  
* Upload all files initially (right click base path, 'Upload to <server from deployment config>)
* Turn on the 'Automatic upload to deployment server' configuration.  Every time you save, the modified file will be uploaded.   (Tools -> Deployment -> Check Automatically Upload)
* Configure remote python interpreter using deployment configuration.  Point to python binary in virtual environment on remote server.
* Create run configuration for Django, make sure 'No reload' is NOT checked.  Set host to 0.0.0.0
* Run configuration you just created.  PyCharm will SSH to remote server, use virtual environment python to run django dev server.  Every time you save a file, it will automatically be uploaded to other host and Django will automatically reload so your new code is running.  

It's very quick, especially for a local VM (though, typically these are small files anyway, so upload is usually quick even across the internet to some datacenter).  

No need to take any special action when you change your code to trigger this...   Just ctrl-s to save it.

Your remote server can be a VM, an actual box on your network, some cloud provider machine (AWS has a free tier for a year if you haven't used it yet, a micro instance should be fine).
[deleted]Use a VM on your windows machine. You should be able to directly edit files in the VM from the host OS. I do not use VMware, but you can do it with Virtualbox shared folders.

Otherwise, you could dual boot."
2017-08-27 12:34:03;Django lookup in new tab/window;"you don't want to open a new window or tab. it's not 2003 anymore. use a modal.Have your search button return HTML content.  Use Javascript/Jquery to fill an empty modal with the HTML content that was just returned.

"
2017-08-27 11:29:40;Beginners question - cloning project from github but manage.py runserver doesn't work - help;"Sounds like a syntax error. Can you post the full traceback that dumps when you run `python manage.py runserver`?Can you link to the project?On mobile. Are you sure that it is a python3.6 project? Importing works different in python3.6 compared to python2.7. 

Try making a new virtualenv in python2.7 and try again.It's fixed on my internship: The senior developer installed a few things. It wasn't just 1 easy thing or something. It took a while. 

Anyways, it works now."
2017-08-27 10:47:12;Is templating on <script></script> an acceptable practice in the Django community?;"I'd probably baulk at wrapping js logic in Django tags. I'd move all django logic to a block at the start where I set the values of parameters that were later used by the javascript. Keep your Django logic in as separate from your js logic as possible. 

    const csrf = ""{{ csrf_token }}"";
    const is_authenticated = {{ request.user.is_authenticated|yesno:""true,false"" }};
    const user = {
        name: ""{{ request.user.first_name }} {{ request.user.last_name }}"",
        id: {{ request.user.id }},
    };    
    
    if (is_authenticated) {
        blah;
    } else {
        meh;
    }

EDIT - one caveat is security - ""NEVER TRUST THE CLIENT"" - i.e. it's ok to allow js to modify the UI but make sure you verify anything auth related server-side

If you're putting context variables into js strings, make sure to use the [escapejs template filter](https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#escapejs)This is a familiar sounds rabbit hole!
You need to be VERY careful about introducing XSS vulnerabilities.
I've done this before, my approach was to dump all the data into a global data variable that other parts of my JS could grab it from, this avoids having template tags littered through your JS.

    <script>
    var preloaded_data = {
        first_name: ""{{request.user.first_name}}"",
        last_name: ""{{request.user.last_name}"",
        ...etc...
    }
    </script>

You can even write a library helper that lets you pass in a dict in python and it magically appears all escaped and the like.
csrf token you should be able to pull out of... I think a cookie with JS without having to pass it around.The Django admin approach to this is to move to data attributes on HTML elements: https://github.com/django/django/commit/d638cdc42acec608c1967f44af6be32a477c239f#diff-6f61a4571a97f023bafaedabcadd5f54 - you could query these in javascript, a jQuery example would be `$(""#element"").data(""user"")`.

The advantage of this approach would be that you can set a Content-Security-Policy to say that your site doesn't use any inline javascript, which could be a potential minor security boost.
That works and it's common but it's easy to get a huge thicket of code & you need care when validating user-submitted data.

I prefer using the HTML5 data attribute on the appropriate elements — e.g. if I was seeding a map widget, `<div if=""map"" data-center-point=""{{ point }}"" …>` and using the standard dataset API to read it. I find that's cleaner, reduces the complexity of that exchange point, and I like avoiding a global block of definitions by keeping the data declaration close to whatever uses that data. Fairly commonly it's useful to be able to target with CSS as well — attribute selectors or generated content are nice ways to avoid scripting at all.

The main decision point for me: inline works well for small amounts of data which you want to render the page. If you have a lot of data and/or it's not load critical you should consider a separate JSON view which can be loaded asynchronously, especially if that allows either the data or the HTML page to be cached more aggressively.Another option is to assign all of this to a context element and json serialize it before using it:

    class MyView(...):
        def get_context_data(...):
            ...
            context['page_data'] = json.dumps(xxx)


    <script>
        var data = {{ page_data|safe }};
        if (data.user.is_authentated) {
           ...
        }

Just make sure that you handle strings like ""</script>"" correctly!There CAN be legitimate cases to use templating to generate js, but it's probably not what you want to do. 

 In your case, it's a violation of Separation of Concerns.  If you're unfamiliar with the concept, the basic idea is to decouple various layers and responsibilities of a piece of software and only provide an interface between them. With MVC the primary concerns are data, logic, and presentation.  

Here, you're blurring the line between data and logic by building your logic from your data rather than providing an interface where your logic can retrieve the needed data.  This has several consequences:

* your javascript is no longer cache-able since it is generated for each user, each request, and each authentication state
* it's more difficult to debug because you no longer have a static js file to refer to. it's possible to setup source maps for complex build chains, but here you'd need to probably write your own unless one already exists, which i doubt
* it's no longer possible to write unit tests.  Since your js is dependent on your server-side code, you now have to write more sophisticated end-to-end tests even for simple things

Basically how bad of an idea it is depends on how much javascript your project relies on. Not common, but not entirely unacceptable. The biggest question in all of these situations should be ""why?""

A {% url %} tag in Javascript is the most common case for me. Auth would be a new one for me. If I wanted to show a user's name, I'd put it in HTML. If I wanted to get user data in the backend, I'd use request.user. I'm having a lot of trouble figuring out why I'd do what you have going on there, but I can't just categorically say it's wrong.

There's some middle ground for things like model IDs. You'll need to protect yourself against a [Resource Injection Attack](https://cwe.mitre.org/data/definitions/99.html), but I've often been of the opinion that if a user wants to ruin his own experience by violating the UI conditions, that's not on me.The biggest disadvantage that inline scripts have that you can't enable Content Security Policy header to restrict Javascript execution and prevent XSS attacks - https://content-security-policy.com/

CSRF token could be received cookies. Django documentation covers this with js examples:

https://docs.djangoproject.com/en/1.7/ref/contrib/csrf/#ajax

And the rest data could be passed to the script tag as `data-` attributes. You can check django.admin source code for the example

https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/popup_response.html#L5

https://github.com/django/django/blob/master/django/contrib/admin/static/admin/js/popup_response.js#L4

In the modern browsers, you can even use `document.currentScript` inside you js to get access to `data-` attributes

https://stackoverflow.com/a/22744637/46548
"
2017-09-04 23:09:07;0-100 in Django: Starting an App the Right Way;Great tutorial and info! I'm actually going to be restructuring an app I wrote into multiple apps soon and this helped to understand what needs to be separated into its own app. 
2017-09-04 20:41:06;Is using multithreading in a request a bad idea?;"I don't have enough experience with gunicorn to answer your question. However, have you considered looking for optimizations outside of multi threading? Is pre-calculation not an option?Replying quickly, I'm sure others can flesh out a better answer from this:

 * Don't use multiprocessing
 * Use a message queue like celery to parallelise.
 * Alternatively use gevent/eventlet to do async stuff if ""calculating a lot of things"" is I/O bound (ie. database calls, not in-Python maths)"
2017-09-04 20:26:06;Which library can I use to add Social Login to my website?;"all-auth https://github.com/pennersr/django-allauthWhich ones have you looked into so far?
I always use django-allauth.
It is however a bit tedious to customize. It's been a while since I've implemented any of them but last time I checked, Python Social Auth was the daddy.

http://python-social-auth.readthedocs.io/en/latest/I just started a new project with django-allauth.

All-auth seems to be the only package for the task which is actively developed, and works with Django 2.0."
2017-09-04 16:36:50;Is there any way to make a Django app with REAL TIME STREAMING PROTOCOL;[Django Channels](https://channels.readthedocs.io/en/stable/)    
2017-09-04 09:35:58;Trouble with def+vuejs+axios (Can't set auth paramerters/headers).;"You need to ensure that you're providing the proper headers with your calls. I see that you're passing in `username` and `password` but I think Basic Auth headers are more complex than that. But, as the DRF documentation statues, basic auth is *'generally only appropriate for testing'*. 

I would suggest taking a look at [token auth](http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication). I'm working on a VueJS frontend plus DRF backend project that uses token auth. With token auth, each user gets a secret token and that token is passed to the backend with each call. If you follow the documentation it's really straight forward. It also makes `POST` requests with axios really easy. Once logged in, my `axios` requests look like this:

    var dataObject = [{ ... }]
    var URL = 'some/endpoint/'
    axios.post(URL, dataObject)
    .then((response) => {
        console.log('New object saved') // or whatever tasks you want to do on successful POST
    })

With `axios` I store the base URL and the headers to be passed in, so the actual code for the requests is small. Still not certain why the method in OP doesn't. Most likely just wrong way to use it, since I can't seem to see an example like that on their github readme. This works : 

     axios({
        method: 'POST',
        url: ""http://127.0.0.1:8000/api/tournaments/"",
        data: {
          ""name"": this.tournamentName
        },
        auth: {
          username: 'username',
          password: 'password'
        }
      })"
2017-09-11 22:40:44;Django User's Sessions;"As long as you can authenticate the username/password they give you against the third parties system, then upon successful authenticate ensure they have a local django user and just stick with that.

This is what mine looks like when the users are all stored in another system:

    if sp.WebAccess(user_id=username, password=password):

        user, created = User.objects.get_or_create(username=username)
        if created:
            user.email = raw_username
            user.save()
        
        auth_login(request, user)

        return redirect('users:index')

    else:
        messages.error(request, 'Invalid Information Supplied')
        return redirect('users:login')


OR you could create your [own authentication backend](https://docs.djangoproject.com/en/1.11/topics/auth/customizing/#writing-an-authentication-backend) and in settings supply that backend as the only one."
2017-09-11 21:02:25;Token Authentication and Authorization with GraphQL and Django;"> The graphene documentation provides solutions for a handful of Django authorization scenarios, but doesn't cover how to integrate with any authentication methods beyond the standard Django LoginRequiredMixin

Right. I found that it is possible to check authorizations at the resolver level using the `context` object just as the usual `request` object:

    def resolve_something(self, args, context, info):
        if context.user.is_authenticated:
            return Mymodel.objects.all()
        return Mymodel.objects.none()you forgot to add static dir path in your pelconf

    THEME_STATIC_DIR = THEME + '/static'

nice article tho"
2017-09-11 16:50:16;Trying to make cross site request to third party APIs;"Are you trying to do make these requests on the front end with Ajax, or in Python? If Ajax, this isn't really a Django question. If Python, you can simply `import requests` and do something like `requests.get(""https://jsonplaceholder.typicode.com/posts"")`.

[Here's a quickstart guide to the `requests` module](http://docs.python-requests.org/en/master/user/quickstart/).Check out the `requests` modulePerfect thanks. That makes sense. Just had a friend tell me to use it. Like I said I looked at it but it did seem like I should be using it for this. I just figure it does hurt to confirm with the great people of Reddit. 
"
2017-09-11 15:39:02;django rest framework;"Something like this would work for the model, you can swap the CharFields with TextFields or whatever works best for your data:

    from django.db import models
    
    class Message(models.Model):
        data = models.TextField()
        message_id = models.IntegerField()
        subscription = models.TextField()

Best practice is to put that into models.py: https://docs.djangoproject.com/en/1.11/topics/db/models/ And then for the REST framework, you would need a serializer: http://www.django-rest-framework.org/tutorial/quickstart/ So your app can GET and POST the model correctly."
2017-09-11 14:47:37;A Complete Beginner's Guide to Django - Part 2;
2017-09-18 21:10:29;Remarking pinax-theme-bootstrap To Be Semantic;
2017-09-18 18:25:29;6.5M results: Local DB first?;"Shouldn't matter much, that isn't all that much data to be honest... unless you are storing binaries directly in the DB, you can also just use the django dumpdata to export if you don't want to process it on the server.I don't think you need Django to do that ... if your goal is just to represent the dataset, you can just publish a http://jupyter.org/ notebook. 6.5m might sound alot, but is nooooothing. :-)
Just post the dump or create a jupyter notebook!"
2017-09-18 17:26:15;Django 1.11 -- Classy Django Forms;"Nice.

In the same note:

* [Django class based views](http://ccbv.co.uk/)
* [DRF class based views and serializers](http://www.cdrf.co/)"
2017-09-18 15:35:06;Security acronyms explained: CORS;
2017-09-18 15:03:27;Tutorials to learn Django;
