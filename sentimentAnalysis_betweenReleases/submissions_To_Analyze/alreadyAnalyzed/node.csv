date;submission_text;comments_text
2010-01-17 17:47:38;Want to play around with Node.js? Compile it in Ubuntu!;"I had no problems with compiling Node on Kubuntu and on Linux Mint. It's odd to hear about problems on UbuntuI don't know or care about node.js, but posts like this leave me in awe of the power of the internet.

very likely 1 post like this could save literally thousands of developer hours better spent looking at porn"
2010-01-17 15:49:26;(fab) - unusual javascript DSL for async web apps;
2010-01-17 15:31:40;Finding domain names with Node.js;
2010-01-17 04:03:15;Twitter-Node - node.js lib that creates a streaming connection with twitter and pushes any incoming statuses to a tweet event.;
2010-01-17 03:19:39;Picard - A Micro-framework for node.js;
2010-01-22 17:45:35;How would you serve 100,000 simultaneous comet requests with Node?;
2010-02-05 11:46:51;Plurk: Instant conversations using Comet.;
2010-02-04 15:29:50;node_debug - HTTP web console and object explorer for node.js;
2010-02-10 14:12:02;Real World Node.js - Redis and streaming;
2010-02-22 09:49:53;node.js v0.1.30;
2010-02-17 21:08:45;Do;"Why do they have to use such dumb names? Good luck googleing help for ""do""Really nice library."
2010-03-04 12:07:57;Node.js - A Quick Tour II;
2010-03-19 19:34:50;Express - Node.js Web Development Framework;I've done overview of some Node frameworks in my blog and by far Express is the best (others included were Djangode, Nodemachine, Nerve and, right now, Geddy).There are some problems with this, but the nodejs framework world is in a really early stage and express is currently arguably the best in it.
2010-03-17 21:35:37;Learning Server-Side JavaScript with Node.js (For Beginners);
2010-04-12 23:53:08;Fotofoo – An image management solution using SproutCore and Node.js;
2010-04-19 21:12:03;A Universal (Including Node.js) Package Manager for JavaScript;"Meh. Write some code. We will gather behind it if it is any good.

EDIT: It looks like they have written the code. Anybody have a link to it?"
2010-04-19 18:33:49;I just built my first commercial app in Node;"Nice work!Looks interesting. I'm interested in node.js but haven't done anything with it yet so genuine question: how would this be used? In PHP I would run a `SELECT` and then need to use the data straight after and I can't really see a situation where I wouldn't. Do you run a select at the beginning of your server side processing, go do some other stuff while it fetches, and then handle the data when it finally gets back from the db?

Also, did you mean to link to the app you built as well? :)"
2010-04-22 16:54:15;I created simple search engine (with web crawler bot) on Node.js + Sphinx + CouchDB;I wish the blog post was in english :\
2010-05-01 08:33:26;Ndee = Web Server, Javascript Serverside Code Evaluator - Think PHP but Node. (Not a CGI);"Configure your virtual hosts in the config, put your pages in the webroot you've defined. No content type support yet, and not proper status codes as of yet. It's not a fully featured web server, but it's enough to start.

Code like this:

    <body>
      <p>
        <?sjs
          var fs = require('fs');
          puts('HELLO :D');
        ?>
      </p>
    </body>

puts and require are built in functions that are in the context of the page's script object.

Todo list so far:

* Sessions
* Better security
* Output buffering stuff"
2010-05-01 03:59:53;node-git: Read git repositories from Node.js;
2010-04-28 22:49:25;Heroku is now hosting Node.js apps;
2010-05-10 20:48:05;Hummingbird for node.js: Real-time web traffic visualization;Video of hummingbird in action is here: http://vimeo.com/11613517Just wondering, is the demo at http://demo.hummingbirdstats.com/ working, or is it just that the monitored site isn't really getting any traffic at all?
2010-05-21 04:24:36;Py A La Node: Calling Python from Node;
2010-05-31 23:34:56;http-console: a simple and incredibly useful HTTP REPL built with node;
2010-06-06 04:50:58;node.js Cygwin port;Includes link to source: http://github.com/raff/nodeLet me know when it's native. *Goes back to bed*
2010-06-02 08:42:59;Binary Stream Parsing in Node.js;
2010-06-12 05:18:34;Ryan Dahl — jsconf 2010 talk (video);
2010-06-21 09:34:03;Parsing file uploads at 500 mb/s with node.js;"Actually, I'm looking for a more general implementation of a [string searching algorithm](http://en.wikipedia.org/wiki/String_searching_algorithm) like [Boyer-Moore](http://en.wikipedia.org/wiki/Boyer-Moore) mentioned in the article.

Anyone know of some nice code which I could port?"
2010-06-30 03:26:08;Vows - Asynchronous BDD for Node;
2010-07-11 11:46:21;DNode: Asynchronous Remote Method Invocation for Node.js and the Browser;Bonus: I just added require('dnode/web').source() to make web deployment super simple. [More on the readme.](http://github.com/substack/dnode/blob/master/README.markdown) and/or [see the new examples/web.js](http://github.com/substack/dnode/blob/master/examples/web.js). Thanks for all the upvotes!
2010-07-20 22:47:40;Linear algebra in node.;"""valid html is for bitches"" ?"
2010-07-23 19:09:45;Faye: Simple pub/sub messaging for the web (using Node.js);
2010-08-02 13:14:33;Node.js — So what frameworks have you used and which ones do you like?;"I've used Express, Djangode (not really a framework, more like theming engine), Geddy (even pushed some changes there), NodeMachine (eew) and fab. In my personal opinion Express is the best. Geddy is also good. I've written short articles in Russian on these frameworks back in 0.1.30 days.For me the best way to learn a new system is to write my own framework, so that's what I'm doing. Got a router, fast static file handling, module loading, and mostly working controllers and actions.

Next, I'll probably start to look at other frameworks to see how they do things and ape where appropriate. :)express is the best. "
2010-07-31 07:00:47;Understanding node.js (Introductory article, useful for beginners);Great! Thanks for sharing.The king / servants analogy was awesome.
2010-07-31 06:58:44;Clojure's edge on Node.js;
2010-07-31 06:50:44;Multi-Core HTTP Server with NodeJS;"    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    :::::::::::::::::::::::::::::::::::=88888::::::::::::::::&&&&&&&=:+&&&&&&&&+&+::
    ::::::::::::::::::::::::::::::::::::::88I::::::::::::::::::+&&&:,&&&++,:+:&&&+::
    :888888888888+:::=88888888?:::88888888888:::88888888&::::::+&&&::&&&,:::::+&&+::
    :::8888I::&888::8888&:::I888:888I,::88888:I88I?:::8888:::::+&&&::&&&::::::+==+::
    :::I88I::::I88I:888::::::8888888:::::I888:I8I::::::888,::::+&&&::+&&&&&&&+++::::
    :::I88I::::888I?888::::::8888888::::::888:888888888888I::::+&&&::::+++&&&&&&&+::
    :::I88I::::888I?888::::::I888888::::::888:88888888II:::::::+&&&::+++:::::,+&&=::
    :::I88I::::888I:888::::::8888888::::::888:888::::::I8888:::+&&&:+&&=::::::+&&&,:
    :::I88I::::I88I:8888::::?888:888=:::,8888:I888::::I888888::+&&=:+&&&+::::,+&&=::
    :8888888+8888888+I888888888,:?I888888888888I88888I:::::::&&&&&+:+&&&&&&&&&&&=,::
    ::??????::??????:::&III8?:::::::8II8,:&???,::=IIIII::::+++++:::::++:,++++++:::::
    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
2010-07-31 06:42:52;Alex Payne on Node and Scaling in the Small vs Scaling in the Large;
2010-08-24 18:04:35;Writing Node.js Native Extensions;
2010-08-24 18:03:08;Socket.IO — really simple API to leverage Sockets (both client and server);I definitely need to look into this. Looks awesome.Never need to worry about the complexities of sockets again, thanks for the awesome tool
2010-08-24 15:24:03;Using NPM with Heroku Node.js;
2010-08-22 23:04:51;What are the most interesting non-network node projects?;I wonder why nobody did a simple GUI library that mimics the HTML canvas API yet…[UglifyJS](http://github.com/mishoo/UglifyJS) is a non-network node project.
2010-08-20 09:45:27;Node.js v0.2.0 released!;
2010-08-31 19:59:30;node.js used in WebOS 2.0 to power phone services;
2010-08-30 20:02:42;My Reflections on Node.js Knockout Competition;
2010-09-14 09:34:48;Mongoose hello world example (help needed);"As far as I know mongoose does not have uniques yet, sorry.

At some point I had to decide whether I'd want to continue writing nohm or just use mongoose and saw that among other things uniques were missing and I'd have to implement all the stuff anyways, so I just did it for redis instead of mongo.
But maybe there's something out there that already does it? You should probably ask in the irc channel - some of the learnboost guys are there sometimes as well.If anybody would care to look at it I'd appreciate it. It seems quite easy but just keeps bugging me."
2010-09-14 03:46:16;Offtopic: Node.js -- he or she?;"I couldn't stop laughing... >Neither? Node.js would be an 'it'... 

It doesn't work that way.

Well, in German it would be an ""it"", but that ""it"" would belong to the ""framework"" you would append. (Everything else would sound funny.)"
2010-09-27 10:14:54;Installing Node.js On Ubuntu Screencast Tutorial;
2010-09-26 20:51:49;[ANN] Joyent Node Service!;Very awesome stuff guys. Keep up the great work! [ and give me a job :) ]I have a gut feeling that getting coupon code will take forever.
2010-10-03 18:36:39;Here are two variations of a common pattern in node IO processing. Which is better?;"The benchmark is flawed. If you use `+=` the string isn't flattened until it's used. Whereas it's flattened right away if you use `join()`.

If you call `toUpperCase()` on the returned string the results will be a lot closer together. E.g. 547 and 612 in my case (vs 2 and 512 before).

Edit: By the way, if you ignore IE you can use `Date.now()` instead of `(new Date()).getTime()`.I think this has to do with JIT optimization done in V8, correct me if I'm way of course here.The reason that Array joins are recommended over string concatenation in javascript is nostly IE7. It's far faster in IE7 to user array joins, the other browsers mostly show no to little difference.

edit: There it is again. The silent and stupid downvote.In the browser world Internet Explorer can be up to 100 times faster using the array method, but I've seen that Firefox can be faster using string concatenation. I don't think there's a massive difference in the V8 JS engine but:

You should do some experiments to find out which is faster (and of course, report back to the internet!)"
2010-10-02 22:01:14;node-soupselect for scraping HTML with CSS selectors;"Ported [simonw](http://www.reddit.com/user/simonw)'s python based [soupselect](http://code.google.com/p/soupselect/) to node.

The original soupselect is an extension to [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) making it possible to scrape content from HTML using CSS selectors. The node.js port builds on [htmlparser](http://github.com/tautologistics/node-htmlparser/).

The motivation began with reading [this](http://blog.nodejitsu.com/jsdom-jquery-in-5-lines-on-nodejs) but discovering the approach to be flawed for real world web pages, jsdom being too strict."
2010-09-30 23:56:22;Django is to Geddy as Flask is to what?;[express](http://expressjs.com) seems to fit in that area.I guess you could check Meryl... http://coffeemate.github.com/meryl/
2010-09-30 14:22:12;Install node.js without using sudo;"Beyond theoretically being a good idea, installing without sudo also makes upgrades much easier since you don't need to track a bunch of files and symbolic links down.  They are right there in your home directory. 

If you follow this guide exactly by using the opt directory, also follow Option 3 on the [NPM GitHub readme](http://github.com/isaacs/npm) using something like the following:
    root = $HOME/.node_libraries
    binroot = $HOME/opt/bin
    manroot = $HOME/opt/share/man

don't worry if ~/.node_libraries doesn't exist, it'll be created itself."
2010-10-13 23:59:33;Introducing node-lazy - lazy lists for node.js;"This looks pretty cool. One question, I suppose .join() can only fire its callback if .take() is somewhere previous in the chain? Otherwise how does it know when it's done? Also what is meant by ""think of join as in threads,"" can someone enlighten me?"
2010-10-25 19:10:17;Ready.js - prepare your javascript for production (weekend project);let me know if you are using it in one of your project, I'll link to it from my github page.
2010-11-09 00:40:52;Roll your own PubSub with DNode;
2010-11-22 17:13:17;I made an Omegle-inspired chat application using Node and Socket.IO. Check it out!;"Shit, man. I did the same thing, but I just cloned omegle entirely :|

http://hades.skidsr.us/Can't find a suitable partner.What made you choose to host the socket.io js files on the CDN rather than through Socket.IO-node?

Also down for maintainance :("
2010-11-30 16:34:33;[Ask] Do Node.js needs another package manager?;"I don't really have any issues with npm, but I come from a PHP/frontend background and have limited experience with package managers at all.

 My only real complaint is that npm has some issues when I'm using it with cygwin and I tend to have to manually download/make/install packages a lot of the time when npm will just fail.  I know its an edge case, as I have no issues with npm on my mac or my ubuntu box, but when developing on windows, it can be quite a pain.Handling different Ruby versions and gemsets is really easy these days. Have a look at RVM (ruby version manager). Also, with the rise of Bundler all your rubygems-hell problems should be fixed.

npm has a similar feature called ""bundle"". Just check the docs and you may find, that is rather easy to bundle your application with all needed packages.."
2010-11-29 03:29:43;[ask] are there ctags or similar for node.js to allow editors to do intelligent completion?;"Cloud9 IDE looks like it has Node support but I haven't tried it.  I would love Node autocomplete for Komodo!

Looks like [Webstorm has Node.js support in the works](http://devnet.jetbrains.net/thread/289933;jsessionid=42BA8CBF0781822728CAB89DFFC0DF3D) but this is the first time I've heard of Webstorm.
An eclipse module would be great. NDT? :P"
2010-11-28 23:20:00;Introduction to Node.js: installation, deployment, MongoDB;
2010-12-03 15:44:14;node-postgres - a well tested PostgreSQL client for node.js;
2010-12-02 08:02:32;Keeping NodeJS server up with forever;"I just finished setting up upstart to do this.  Unlike Forever, upstart will run your server as soon as the machine boots, which is crucial if you're using a reboot-likely service such as Amazon EC2.

http://caolanmcmahon.com/deploying_nodejs_applications_with_upstart.html

"
2010-12-02 05:23:51;NodeJS Roadmap by Ryan Dahl (video);
2010-12-01 17:54:10;DoTa with zombies;"Possibly?  What are your talents?

I'm a rails dev that has been looking for an excuse to learn node.hey, sorry to intrude.
Im also available to work with you guys.
My first contact with nodejs was at an hackaton in my country where me and some friends made a [project](https://github.com/miguelm/chatstorm) to do collaborative brainstorming. Im a developer with experience in c++,java,c#, some webdesign (html/css/js) and machine learning algos.

Message me if you want to know more, or think i can be an asset."
2010-12-01 08:19:41;This one's optimistic! Option parsing for node.js that gets out of your way;
2010-12-16 15:39:39;Shared drawing built with nodejs + websockets.;"Hi.
If i may suggest, feels odd the pencil icon vanishing sometimes when other people are drawing on the same space. 
Other than that, clean and nice. On github?only you are here :(Very nice. Did you use the canvas module? Also, were you at Node.Js Camp on Tuesday?"
2010-12-16 09:32:49;A node.js Cloud Hosting Platform;That the hell is Node.js!?  I see it everywhere and I can't find an answer less that 10 pages long.
2010-12-26 00:10:08;If you're looking for Node.js news the Dailyjs is doing a pretty good job;
2010-12-30 20:08:27;node-validator: Data validation, filtering and sanitization;"I kind of like the [json-schema](http://www.json-schema.org) (declarative) approach to this kind of thing, but on some level you will end up needing imperative validation too.
"
2011-01-09 02:05:50;Node v0.3.4 is out.;
2011-01-07 20:10:33;Sam Ruby: First Impressions: node.js;
2011-01-17 12:51:47;node.js downloader: downloader module for node.js;
2011-01-16 00:13:41;deja: use node.js to sync your dotfiles with git;
2011-01-22 05:05:04;Node.js self-contained Windows binaries - No need to install Cygwin;But in the end it's just the cygwin .dlls packed along. I have cygwin running anyway... Is there any advantage when using this instead?
2011-01-22 02:30:09;Express on railway — Adds Rails-style structure and MVC to Express;
2011-01-22 01:06:49;drty - A node.js port of Django;
2011-01-20 20:28:12;Tim Caswell on node.js [Podcast];
2011-01-31 06:55:23;Here are the notes on Installing node.js module for firebird and testing it on Amazon EC2;
2011-01-29 19:20:42;Node sessions with sesame!;
2011-01-29 18:33:02;Graph of npm package dependencies;I noticed that quite a few packages depend on Vows, but hardly any depend on expresso. I wonder why that is.
2011-01-27 17:49:54;Userland long stack traces for node! This should make finding the root of the errors in async calls much easier...;
2011-01-27 11:27:42;Express Form — Form validation and data filtering for Express;
2011-02-08 21:20:09;Confusion over session IDs using Connect;Make sure your connect server is on the same domain as the page you are accessing it with. This is something I got caught out on whilst building Ragechat.
2011-02-07 19:37:50;Nodester: Node.js Open Source Hosting Platform;"If you're still waiting for a no.de coupon, this might be a service to try! Not totally stable yet, but it's an interesting project. Uses git to deploy (a la Heroku) and has a simple JSON API.

There's also a more cutting-edge version live at [bejes.us](http://bejes.us/)

(Disclaimer: I wrote a third-party CLI called [yanc](http://github.com/agnoster/yanc) that I quite like, it's mostly working. If you do an `npm install yanc`, you can then request a coupon with `yanc coupon` - it reads stuff like your email address from your git config)WTF! When I click ""I Wish"" the dialog disappear and it seems nothing happened."
2011-02-05 04:19:03;When to use a procedural language and when to use Node (x-post from r/php/ );
2011-02-03 08:03:51;Node.js v0.4 is less than a week away — Developers  please begin moving your code to 0.3;Is there a change list available somewhere for v0.4?
2011-02-14 18:32:14;Mingy: command parser for node (for making CLI tools, text adventures, MUDs, etc.);Really like the way you add commands and set validators. Good work.
2011-02-17 17:03:21;Smoothie Charts + Node.js + Loggly = Near Realtime Website Graphs;
2011-02-17 16:41:04;TileMill - Node.js and Express.js based open source mapping studio.;"Sort of a [cross post from r/programming](http://www.reddit.com/r/programming/comments/fmmq9/announcing_tilemill_a_modern_map_design_studio/)


The r/programming post above is the release announcement, this is the product page.
 Beautifully designed and responsive UI. I just installed it and it seems to work ok in Safari but when I try it in the latest version of Chrome only about 10% of the tiles actually load. The debug console outputs: `WARNING: No datasource for layer 'x'` (regardless of browser) where `x` is cities, country-labels etc…[a map built by the chicago tribune team in tilemill](http://media.apps.chicagotribune.com/census-2010/population-change/index.html)"
2011-03-01 14:08:38;Create Your Own Node.js Module [by Isaacs];
2011-02-28 16:46:21;Sign Up Now Joyent's Node.js event [San Francisco, March 1st];Should have probably said in the title that it's a no.de (Joyent's hosting service) event rather than node.js, but Ryan Dahl will be giving a presentation.Hopefully we'll see some NYC love soon.
2011-02-28 08:46:08;What it’s like building a real website in Node.js;
2011-02-27 02:27:04;Interactive Plotting with DNode, Express and the Node.js REPL;
2011-02-26 20:40:28;I've made (crude) xkcd-style delaying proxy server in Node;"Nice! If you're interested, I made a [node.js proxy](https://github.com/greim/hoxy) which can arbitrarily tamper with web traffic. For example it could introduce delays, make responses cache forever, tamper with cookies, replace all instances of ""<p>"" with ""<h1>"" etc, or pretty much any dirty trick you can dream up."
2011-03-06 06:13:01;Lets make a Twitter Clone in Node.js;"How about... you make something innovative with node!I thought this would be a tutorial too, and would be an interesting write up. But he does link to the code on [github](https://github.com/tglines/nodrr). 


If someone wanted to follow along they would have to use 
    git log 


Using that get the hash value of each commit, then use 
    git checkout <commit hash>

Edit: made my own fork of this project on [github](https://github.com/stephenbreen/nodrr) use 
    git branch -a 
to view all branches then use 
    git checkout <branchname> 
to view the code at that commit.
I thought this would be a tutorial"
2011-03-02 16:18:21;6 Must Have Node.Js Modules;TIL there is a node.js subreddit
2011-03-15 15:28:10;Perscriptive Node.js (StackOverflow Question);Yeah, callback counters is the way to go. When you're not sure what order it's getting done in and you don't want to nest callbacks endlessly, you can use a counter to keep track of how many functions need to run and how many have completed (or still need to finish). The thing I don't like so much is that your code always has to check if it's the last callback operation, but at least it will work.*Prescriptive
2011-03-14 12:13:59;Create a Chat Server in 12 Lines of Code with NowJS (node.js module);"This blog post is just a needless middle-man for the [nowjs homepage](http://nowjs.com/). In future please link directly to the source article or homepage. Otherwise, thanks for the submission :).As an aside, has anyone found a work around to get now working with express? Seems to initialize properly, but then connect's server throws a cryptic error in the ""next"" handler and dies. (sad)"
2011-03-14 04:55:21;Proxying to node using nginx;Biggest bummer about proxying through nginx: no WebSockets.
2011-03-13 01:24:11;"Node JS and Server side Java, oops, I mean ""Java copypasta""";"I like the hand-wringing about ""real programmers"", but I also like the comments on both versions of the article (on this site and the original blog) relating to bugs in the server code which was copy-and-pasted in the manner of ""non-programmers ... who only program PHP front ends"" - but which is better?

There's only one way to find out... [FIIIIIGHHT](http://www.youtube.com/watch?v=Np6gyUb0E7o)!"
2011-03-20 22:05:30;"Getting started with Node.js: writing a simple ""Hello World"" application";"Here's a simpler hello world application:

    console.log(""Hello World"");

What you have there is a web server echoing ""Hello world"" to a browser. It really annoys me when people try and pass these off as the first step tutorial when really, it's showing one of the most advanced features of the framework."
2011-03-20 12:41:19;Ryan Dahl introducing Node.js to the SF PHP Meetup Group [Video, ~1 Hour];
2011-03-19 07:39:41;Node 0.4.3 released;
2011-03-29 13:41:13;Browser-side require() for your node.js with browserify;Awesome... I want *my* Browserify purple plasma wand!Love this!  Already using it to provide stuff like underscore.js in my client side, without having to have two copies in my app for client + server side.  If you are writing javascript-heavy applications, this is a must!
2011-03-27 22:13:05;Semicolon-Agnostic Javascript Syntax Checking with JSHint;
2011-03-27 22:12:35;Nodejs vs Play for Front-End Apps;
2011-04-05 17:28:30;Asset: Javascript asset manager for lazy people (think homebrew for assets);
2011-04-05 15:19:51;OpenSSL memory use in Node.js;
2011-04-02 17:20:36;node v0.4.5 released;
2011-04-02 13:44:44;Node.js learning and debugging;
2011-04-01 18:19:08;/r/node I present to you an open source node based sticky note web server.;"It's really well done, and I appreciate it being on github with what looks to be pretty simple, straightforward code. I'm new to node so plan to dive into the code and learn from it.  Sandbox/wall: http://primarywall.com/fXB6T44fkq

ADDITION: Lucky this URL didn't contain that Fifth Glyph."
2011-04-12 18:09:03;The Node.js Rap - a community based rap project to teach and promote node.js [see: http://soundcloud.com/marak/];I approve of this message.
2011-04-12 17:02:25;Node.js is dead. Long live Node.;
2011-04-11 15:46:16;Writing My First Node.js Module And Event Emitter;It never really occurred to me how much of a messy hack ( -stuff- )() is before. Weird that he calls anything in javascript Classes though.
2011-04-08 20:29:00;NodeJS and the JavaScript Age;
2011-04-07 11:32:20;Playing with Nodester, the open source Node.js hosting platform;
2011-04-19 12:47:00;The Node Beginner Book;
2011-04-19 06:09:49;A template for setting up Node.js-backed web apps on EC2;
2011-04-17 21:35:50;Safe Javascript/Asset caching with Node.js and nginx;
2011-04-16 12:36:58;Nodelytics, Node.js real time stats;
2011-04-16 05:51:11;Realtime Messaging And Synchronization With NowJS And Node.js;
2011-04-26 14:58:22;Node.js - it's not just for the web;"there's an app for that.  er, i mean there's a package for that.

[varargs](https://github.com/substack/node-optimist)

and you can write a synchronous (and asynchronous) module for fsync, but remember that node.js is single threaded, so if you write a synchronous fsync call, you're beholden to the filesystem until you get back control.

Ugh, turns out fsync [is already exposed](http://baudehlo.wordpress.com/2011/04/26/the-problem-of-non-automated-documentation/) in the API. It's just not documented.

However flock() is not, which would be very useful.We're actually writing an app that uses Haraka. Baudehlo, perhaps you spoke to one of my colleagues, Arlo.It can be for files too.  Among my many projects is to write a .gif parser."
2011-04-26 06:06:24;Taking Baby Steps with Node.js – The Towering Inferno;
2011-04-26 03:19:33;Analyze your module's dependencies with this module from nodejitsu;This uses monkey patching of Module._load to watch require() statements, then uses npm's package information to match a required module name and load src location to the package that contains the module. For me an interesting aspect of this is to take the information it produces, massage it into graph form and perhaps then annotate it with metadata (comments, links to issues, etc.).  If you work on this let me know.
2011-04-25 21:33:40;/r/node - Typhoon: Just a minimalist blog engine I wrote with Express;"Been using Node and Express to power my blog (http://blog.ht4.ca/) figured I might as well open-source it. Works good, minimalist and db-less. ;)

Starting a blog is quite simple, `npm install typhoon` then clone [https://github.com/cjoudrey/blog.ht4.ca](https://github.com/cjoudrey/blog.ht4.ca)."
2011-04-25 20:04:29;node-smores: an extensible bot for Campfire;Have been writing this on and off for the past few months between Node and PHP and finally sat down and completely overhauled it yesterday. Very happy with it.
2011-05-03 15:30:22;The Magic of Node.js;
2011-05-02 21:21:12;Deploy your Node.js apps for free—Duostack is now in public beta;for how long can everybody keep offering free hosting? =)Tried this out yesterday. Seems quite well designed... simple. Console access to MongoDB and Redis as well.Glad to see more competition in the Node/Ruby app hosting space. Maybe this will get Heroku to finally fully release their Node support, though I definitely like what I see at Duostack.Finally a platform that I can play with. I've been waiting an invitation from Nodejitsu and Nodester for months. 
2011-04-30 22:58:38;Build Desktop Apps with Node.js Using WebApp;"> ""WebApp"" was taken in npm already. It's now called TopCube! http://github.com/creationix/topcube. Also with a sample app to show usage.

— http://twitter.com/#!/creationix/status/63672243095474177[Working link to github repo](http://github.com/creationix/topcube)

Very cool, I was looking for something like this to use with my current app.  I didn't want to have to resort to like AIR or Titanium + a node daemon."
2011-04-30 21:11:02;npm 1.0 released;
2011-04-30 14:17:11;Nodejs firebird driver version 0.0.5 is released;
2011-05-10 07:49:03;Hands-on Node.js book - The Node.js introduction and API reference;[FREE Node.js API reference](https://github.com/joyent/node/tree/master/doc/api)...[Also free](http://nodebeginner.org/).
2011-05-10 00:31:07;Data.ja - Data Manipulation and Graph Persistence for Node.js and the Browser;
2011-05-08 17:18:54;LooseLeaf: Lightweight blog engine for Node;
2011-05-08 01:24:23;what is the state of express.io? when would it be available?;What exactly is express.io? Is it in any way related to the express framework?I doubt anybody except for @rauchg himself knows the answer to this, perhaps ask him on twitter.
2011-05-07 14:38:38;CodePals - pair programming with Node.js and Web Sockets (source in comments);"Here's the source code: [https://github.com/theabraham/CodePals][3]

This is just a project I've been working on because Node.js and Web Sockets are so much fun. The syntax highlighting is done with [CodeMirror][1] and problems are scraped off of [Project Euler][2]. I know it doesn't work in FireFox, and I've never really tested it with more than 2 people, so if anything explodes -- whoops!

[1]: http://codemirror.net/
[2]: http://projecteuler.net/
[3]: https://github.com/theabraham/CodePalsthe nodester link seems to be down.Hey all, I wrote PrimaryWall w/ Pita.  http://github.com/pita/primarywall  <-- socket / node based sticky notes.

Might be able to help out if needed but pretty busy rewriting Etherpad in Node :|"
2011-05-17 15:46:39;DIY node.js server on Amazon EC2;
2011-05-17 15:14:41;Those node vs Erlang http server benchmarks? We think we figured out what the problem was.;"Can anybody re-run the benchmarks to see what difference it makes before and after the patch. Would also be nice to see it compared against one of the Erlang servers (just one would be enough) for reference.context yay

http://www.ostinelli.net/a-comparison-between-misultin-mochiweb-cowboy-nodejs-and-tornadoweb/#comment-32844

https://github.com/joyent/node/pull/1057"
2011-05-17 08:17:03;Embedded Models with Mongoose ORM;
2011-05-17 07:49:18;Web console with node.js;
2011-05-16 04:35:10;A Not Very Short Introduction To Node.js;
2011-05-24 03:18:13;Getting started with NodeJS: a concise roadmap.;
2011-05-23 16:59:48;Node.js cheatsheet;
2011-05-23 12:23:48;Real time notifications (part II). Now with node.js and socket.io;
2011-05-23 11:52:34;Single Pages Applications in Node.js;
2011-05-22 01:56:33;Node v0.4.8 released;[changelog](http://blog.nodejs.org/2011/05/21/node-v0-4-8/)
2011-05-29 05:31:18;Building your first node.js app – Part 1: Installing node on Windows 7;"Part 1 and it's already going downhill!

All joking aside, it's better to just setup a quick VM.  More control, easier to setup servers, more configurable, much more software at a breeze.  Generally anything else other than the Windows Server tools are horrible for web development.@ebbv
Thats the platform I'm on. 

@grenadeguy187
We are talking local development here, and cygwin works just fine in leiu of a virtual machine running nix. Hopefully part 2 is uphill:
http://bit.ly/jdDBjlFor anyone who just wants to try out node.js on a Windows machine, just download a [precompiled package](http://node-js.prcn.co.cc/) and then simply drag&drop your source files onto /bin/runnode.cmd

If you want to get into node for real, I strongly recommend a VM for full functionality.Ugh.  What?  Installing Node on Win7?  For fuck's sake just get a Linux VPS or something."
2011-05-28 05:23:06;Synchronous node.js;":( synchronicity makes me sad :(Good stuff Chris! Many noders may not like it but fwiw I think this is awesome.I once made something similar. Based on promise programming. I added some syntactical sugar to the Function prototype: a async function which would call the containing function (similar to .call or .apply) but with some asynchronous magic.

If a function is called with async a Promise is returned, just an empty object to which you can connect if the promise is fulfilled, (The object is filled). Also, all the functions called with async would have there arguments checked, if one of them was a Promise. Async would wait before executing the function.

Consider the following asynchronous functions:

    function getA(callback){
        setTimeout(function(){ callback(10) }, 1000);
    }
    
    function getB(callback){
        setTimeout(function(){ callback(20) }, 1000);
    }
    
    function square(a, callback){
        setTimeout(function(){ callback(a*a) }, 1000);
    }
    
    function add(a, b, callback){
        return a + b;
    }

Traditionally if we wanted to compute a^2 + b using these functions we would have to do something like this:

    var result;

    getA(function(a){
       getB(function(b){
          square(a, function(asq){
             add(asq, b, function(res){
                result = res;
    
                use result here...
             }
          }
       }
    }

Using async we can reduce this to:

    var a = getA.async(); 
    var b = getB.async();
    
    // a & b and the other variables are Promises here.
    
    var asq = square.async(a);
    
    var result = add.async(asq, b);
    
    result.connect(function(result){
       // here we wait for the result Promise to be fulfilled.
       // Now we can use use result here...
    });

This has the added benefit of not having to wait for getA before getB starts."
2011-05-27 00:03:24;OurSql: really simple ORM for nodejs/mysql;"Hey, there's another project with that name already: [oursql](http://packages.python.org/oursql/ ""Python binding to MySQL"")."
2011-05-25 17:13:00;Node.js Interview: 4 Questions with Creator Ryan Dahl;"Node.js 1.0 hopefully will come out within the next 6 months! Wow that would be nice.That's scary how he's talking about he's already cemented in by the build process and the CommonJS stuff. It's not even 1.0 yet O_o> Dahl: Node is a single-threaded, single-process system which enforces shared-nothing design with OS process boundaries. It has rather good libraries for networking. I believe this to be a basis for designing very large distributed programs. The “nodes” need to be organized: given a communication protocol, told how to connect to each other.  In the next couple months we are working on libraries for Node that allow these networks.

This part escaped me. Can someone smart restate this in easy-to-understand terms?"
2011-05-25 16:19:37;/r/node, I wrote a few tutorials on using socket.io and node.js - thought you might be interested;
2011-06-06 20:46:00;Code Review: Jade;
2011-06-06 05:22:55;m2node - a mongrel2 handler for node.js;
2011-06-05 21:47:02;Log.io - Realtime log monitoring, powered by node.js + socket.io;Nice proof of concept, but for practical purposes, I think i'd prefer to stick to `tail -f ...`Demo isn't working.
2011-06-05 03:28:42;Does anyone know how to resolve this issue? I tried few versions of node from 0.4.8 to 0.4.0 without any success.;"That thread has sample code for reproducing the problem. Are you able to run those samples successfully, or do you get an error?

Those samples run without error for me, so it does seem that they've fixed that specific issue. Perhaps your problem is a different one?Have you tried using latest dev version from GitHub?I think I was making POST request in wrong way in the sense that wrong value was being set for the content-length header parameter. Thanks guys!"
2011-06-04 05:05:50;Node.js PaaS Nodejitsu Open-Sources Several Tools;
2011-06-14 21:53:12;Store sessions directly in the cookie with connect-cookie-session middleware for Connect;also, if you're looking for a similar signed cookie implementation in node.js without the connect dependency, check out https://github.com/jed/cookiesIsn't this insecure? You would be revealing a lot about how your application works, and possibly divulging information that could be used to compromise the application, making this available to anyone who looks at the cookie contents. Better to store just the session ID in the cookie, and store the application's session data out-of-reach on the server.am i missing something here? isnt that how all cookie sessions work?
2011-06-14 04:36:34;node.js using mustache.js for templating;"I think you should check out [JSDom](https://github.com/tmpvar/jsdom). I love mustache, but JSdom just seems to solve the ""templating"" problem in the right way.Templating with mustache is just about the easiest thing in the world and if someone needs a tutorial on how to do it, I lament."
2011-06-13 23:07:48;Node.js is Backwards;Interesting read... saying its an imitation because its evented/asynchronous seems a bit much in my opinion.  Node users are aware of the single thread limitation and choose to work within it, it is called node after all.  
2011-06-12 10:25:06;brozeph/node-chess - GitHub [constructive feedback requested for my first github contribution];
2011-06-11 15:16:06;redis-tagging - A NodeJS library based helper to tag sorted items with Redis;
2011-06-21 19:19:32;Getting Started with Node.js on The Cloud;"Step 1) Sign up for Heroku

..."
2011-06-21 16:51:03;Creating chat roulette with node.js, socket.io, and OpenTok;Downvoting because your opinion differs is strictly against reddiquette, and now I'm -frontpaging this subreddit, as it seems to be full of it.Jade is the most hideous template system I've ever seen.  Why are people developing with it over EJS?
2011-06-21 03:44:25;Building a realtime Feed with RabbitMQ Node.js AMQP and mySQL;why mysql? mongodb sounds easier for that.
2011-06-21 03:43:38;NODE.JS IS BACKWARDS ???;
2011-06-21 03:40:26;What might the excitement about Node.js be about? JavaScript on the server? Events? Or, what?;
2011-06-27 01:07:39;Complex Asynchronous Queries in JavaScript;[from /r/Javascript](http://www.reddit.com/r/javascript/comments/i9ehe/complex_asynchronous_queries_in_javascript/)
2011-06-25 02:50:15;Presenting my facebook game programed with nodejs, ExpressJs & Faye Server;"I want to check it out, but I'm stuck with this American English handicap.I don't have facebook so can't check it out :(

I made a multiplayer/social game of catch:
http://mclear.co.uk/2011/04/06/introducing-catch-a-multiplayer-html-game/"
2011-06-24 17:20:02;Synchronizing HTML5 Slides with Node.js;"Interesting  - wrote [something very similar](https://github.com/danski/squeenote) year or so ago.

I like the use of the mobile device as a clicker - excellent application."
2011-06-24 05:53:13;Microsoft is Helping Joyent Port Node.js to Windows;repost[deleted]
2011-06-24 04:13:23;SocketStream: A Real-Time Web Framework for Node.js;"Disappointed with their choice to include jade as the template engine. Jade is really slow compared to creationix's haml implementation, IIRC.

It's pretty much a wrapper for socket.io, jade, and redis. The bulk of what the framework does is actually just socket.io, and honestly I don't find the level of abstraction very helpful."
2011-07-05 17:59:47;Taking Baby Steps with Node.js – Don’t Block The Event Loop;There are times when the fs.*Sync methods are appropriate. I use them to do the one-time load of config files when my apps start up. It's a lot easier to make a synchronous call for that, and in most cases, your app *can't* start until the config file is loaded, so there's no point in that I/O call being async.
2011-07-04 19:48:05;TLS/SSL Tunneling with Node.js;
2011-07-04 19:44:30;Slugr.js: Wrap node.js apps into a single executable file;
2011-07-04 19:20:00;DailyJS code review: Express;
2011-07-04 15:40:04;Setting up Node.JS on Windows w/ Cygwin;Or just use the precompiled binaries on http://node-js.prcn.co.cc/
2011-07-12 21:32:41;Did I find a bug in http.js?;
2011-07-11 21:00:27;reverse.proxy(at)node.js - my first project;"Nice. I suggest creating a method to specify your own file extensions you'd like cached. It looks like those are hard-coded at the moment.Congrats on your first node.js project!

The indentation makes it difficult to follow the source code though. Most people stick with either 2 spaces or 4 spaces, yours seems to be inconsistant, using 1, 2 or even 3 *tabs*.THX :)
I use on Windows ""E text editor"" and i think options like  ""tab size is the problem"""
2011-07-11 15:45:30;Evolving the Node.js Brand;"Not a huge fan of the logo. :-\ [Let me fix that for you.](http://substack.net/images/node_turtle.png)I wonder if this was a trademark thing? Not sure of the origin of the original logo, but maybe it wasn't Joyent IP so not trademarkable...ummmm.... that logo needs more work.  like, a lot of it.do not like. at all. too busy, too weird. :/Reduce background noise, just enough to understand what it ""might"" represent. And change the colors :)It would also help if the logo was readable.Logo is horrible. What's wrong with the current one? Node.js doesn't need a re-branding, it needs more examples on the website, an example with NPM on the website, along with a packaged install that includes NPM, and Windows support.

People don't use node.js for the logo, they use it because it's fucking awesome!More important than a new logo is for Node to pick a name for the project and stick with it: Is it Node or Node.js? Both names are used interchangeably in this blog post.

Keeping two names for the project splinters the branding and prevents either name from getting as recognizable and strong as it could. Already some package managers have a ""node"" package while others have ""nodejs."""
2011-07-10 12:24:50;The Node Beginner Book, an introduction to Node.js, is now complete;took the time to read it online, and yes it's a good intro/bookwhy do i want that in print... hmm.Just finished the book and it was pretty solid for beginners. I would recommend it for anyone just getting into node.
2011-07-10 05:15:46;Is it possible to forcefully take over an node module that is on npm?;npm-@googlegroups.com
2011-07-18 22:31:50;pubsub.io - a query based message hub based on node.js;"this looks useful for cases when there actually is no node end of the system (ie. there is only static/limited php file serving). it seems like most of the time one is running node, they can run also redis or another pubsub service + socket.io which obviates the need to rely on a 3rd party of pubsub.Just talked about this piece of software with a friend that is sitting in the same office as the creators. Are you the creator?

I was originally using NowJS, but pubsub seems to be very interesting.  "
2011-07-18 21:06:58;Planet node.js: Node news aggregator;"Cool. This doesn't look like a Venus instance; could an OPML outline be added?"
2011-07-18 15:22:24;Finally, a good syntax highlighter for node.js (Highlight.js + node support);What is the use case for running this on the server side? Wouldn't it be advantageous to make the browser do all this work instead of wasting precious server cycles?
2011-07-18 13:04:51;Nodejs and Socket.io Facebook app example;
2011-07-15 04:49:43;first official Windows executable (0.5.1);"Anyone got a clue how to get npm working?Exciting.I will have to look into [zombie.js](http://zombie.labnotes.org/) againi imagine those four guys are really happy about this.""It's Alive!!!""‏

ps.
node.exe -install services ?"
2011-07-24 18:02:39;"Iam the only one which thinks that node ""projects"" are dead?";"A project isn't dead if it doesn't have a commit within a month. There are however a lot of abandoned/dead node.js projects; node is still in it's infancy so this is to be expected. Check out [NPM's stats](http://search.npmjs.org/#/_analytics/alltime) for some interesting metrics. You're last sentence seems like a troll so I wont go there."
2011-07-23 04:36:56;I'd like to build an online poker site in node.js.  Suggestions, tips?;"Sounds like a very fun project. I like to play poker now and again and the quality of poker sites really annoys me sometimes - but I guess that's a little irrelevant in the beginning.

I would say that yes, Node is definitely mature enough for this. But having said that, if you really want to consider it as safe as financial transactions you really need to think about your architecture a lot, and then the choice of programming language is probably your smallest problem. My suggestion would be to make it for fun in the beginning, and then worry about the safety of the transactions afterwards. Otherwise you might lose the interest while the project is still only on paper.

Best of luck.The nodejitsu guys have some cool infrastructure that might be useful if/when you want to scale beyond one server, like forever and hook.io. Also see EventEmitter2 and dnode. EE2 might get merged into node 0.5.x so maybe you can also just wait on that one.node is an excellent choice for this.  If you're new to it, I suggest you start like I did: [go to github and find similar projects](https://github.com/search?type=Repositories&language=JavaScript&q=cards).  Fiddle around with them until it makes sense, and go from there.  Since you're looking for something well-known, you might run into projects that are *too* done giving you nothing to fiddle with and figure out.

Here's a [maybe](https://github.com/mscdex/youknow).I did a spanish card game with node. I've [submitted this here](http://www.reddit.com/r/node/comments/i8mr9/presenting_my_facebook_game_programed_with_nodejs/)  some weeks ago, I think that is a very similar project. My advice is to use Faye for the messages instead of socket.io. You can use an extensions in Faye to emulate a websocket interface. Faye works very well in most browsers.Make it use bitcoins. :D[deleted]"
2011-07-21 05:55:26;Node Roundup: 0.4.10, Geocoding, Bunker;
2011-07-20 12:02:46;Node.js error: EADDRINUSE, Address already in use;It appeared to be a stupid mistake. I connected and closed every 10 ms. Woops.
2011-07-20 10:46:50;Node v0.4.10 released;One of those fixes is the result of an issue I opened. I feel so important!
2011-08-02 00:26:17;Installing Etherpad Lite on Debian and Ubuntu;
2011-08-01 19:29:57;Code Review: Burrito;
2011-08-01 13:05:26;Question: How do I write asynchronous functions for Node?;"in node, process.nextTick provides a way for you to make an asynchronus function:

    var nonblock = function(limit_arg, callback) {
      var do_work = function(limit) {
        return function() {
          if (limit > 0) {
            limit --;
            process.nextTick(do_work(limit));
          } else {
            callback(""done"", limit);
          }
        }
      };
    
      process.nextTick(do_work(limit_arg));
    };
    
    var block = function(limit_arg) {
      var limit = limit_arg;
    
      while (true) {
        if (limit > 0) {
          limit--;
        } else {
          break;
        }
      }
    
      return ""done: "" + limit;
    }
    
    nonblock(10000, function(msg, limit) {
      console.log(msg + ': ' + limit);
    });
    
    console.log(block(10000));


I.E. node doesn't provide a way for you to magic away blocking functions, but it does allow you to run things on the next tick, so as not to block the currently running stuff.The purpose of asynchronous functions in JavaScript is a little bit different from what you seek.

Remember that JavaScript is single-threaded — it can only do one thing at a time. Here is some traditional, blocking code:

    sys.puts(""Before"");
    sleep(10);
    sys.puts(""After"");

In a real-world web application, the `sleep()` might instead be a time-consuming database call, network request (like waiting for data from the user’s web browser), helper tool, or file access.

If you used blocking calls like the above, the Node.js server would’t be able to do anything else (like starting to handle other web requests) while waiting.

PHP and many other web programming environments handle this by creating totally separate threads for each request. Node.js uses callback functions. You could write the same code like this, instead:

    sys.puts(""Before"");
    setTimeout(function(){
    	sys.puts(""After"");
    }, 10000);

Here, you create a function and pass it to `setTimeout()`. Its code hasn’t run yet, but when it does, it will have access to all the scope (all the variables) where it was created. `setTimeout()` gets a reference to  the function and schedules an event to fire on [the event loop](http://en.wikipedia.org/wiki/Event_loop) after the timeout expires.

The event loop is, essentially, a Node.js program’s to-do list (they’re common — all the GUI applications running on your computer probably use event loops!).

After the call to `setTimeout()`, the current function keeps executing. It eventually returns, and the function which called it returns, and so on, until the program ends up back in the event loop. The event loop looks to see if anything has happened (e.g. an incoming request) while your code was executing, and calls the appropriate function in your code. If not, it waits until something *does* happen (like the timeout expiring).

Asynchronous code *doesn’t* let your code do many things at the same time, it *does* eliminate blocking when some code depends on something external to continue.

It’s rare that you need to do blocking work inside your Node.js program. If you do, you should separate that work out into a separate process (which can even be another Node.js program), or write [a C/C++ addon](http://nodejs.org/docs/v0.5.2/api/addons.html) which is free to use threads.Okay I think there is a little confusion about both async functions and error events. Usually, you write an async function because there is a particular reason for it. Reasons include:

* What you're trying to do requires some sort of I/O that takes up lots of time which could be used otherwise. I.e. reading a file, doing database queries, writing to a socket.
* You deal with a library etc that has an async function and you have few choices but to deal with it.
* Usability / readability reasons that make it more comfortable to write async code.

Usually one of the above reasons leave you with one particular core or library function that *requires* you to provide a callback function. The other part of your function *could* be put in a synchroneous function, but since you have that one call, i.e. *fs.readFile()* your entire function behaves as an async function.

By providing a callback function to **that single one function**, you already have your async function. No magic there. I suggest that you don't over-analyze this topic for now. Leave *process.nextTick* alone alltogether, the benefits or using it are a little more complicated to explain when you're a node beginner.

Regarding error events and error handling. Error *events* are emitted by EventEmitters. Add an *ee.on('error', myErrorHandlingFunction);* to any EventEmitter and you will be able to catch errors. But that's another topic not related to async functions.

Errors in async code usually cause the callback to be called immediately and sending an error object as the first argument. If you want to be able to catch them, you could do something like this:

    function myCallback( errorObject, actualData ) {
    
        // if an error was provided, print the error and stop
        // executing the current callback
        if (errorObject !== null) {
            console.log('Error:', errorObject);
            return;
        }

        /* your usual things here */
    }

As a rule of thumb, the convention for callback functions is to expect *new Error()* or *null* as the first argument, and a callback function as the last argument. You then only have to check whether that first argument is *null*, meaning no error occurred, or anything else, that an error occurred.

Instead of just returning, this is also a healthy way to forward errors to the last function in line:

    function myCallback( errorObject, actualData, nextFunc ) {
    
        // if an error was provided, forward the error to the next
        // callback in line and leave this function now.
        if (errorObject !== null) return nextFunc (errorObject);

        /* your usual things here */
    }
Could you be a little more specific on exactly what you're trying to achieve?Try tame.jsstep helps."
2011-07-31 04:51:37;Node.js and MongoDB – A match made in heaven;I prefer Node.js and Redis. It's pubsub, interface and performance are awesome! Even though with Node.js using JSON it isn't really the interface I like, but the available data types.Personally, I don't like that libraries like Mongoose (and may others) force me to make schemas for schemaless databases like MongoDB. Why are they making one of the best features useless?I've been playing with Node and CouchDb, and although it probably doesn't perform as fast as the other nosql's I've gotta say having no driver and communicating with a database entirely through a REST interface in serverside JS is about the slickest kind of code I've ever seen.
2011-07-30 21:57:29;Reds: light-weight full text search for nodejs backed by redis;
2011-08-09 08:15:07;I think node.js is great, but what about making code easier to write and read?;"You should post this on the node-dev mailing list, not here. It will get more discussion from the key players there.I like the idea, but how realistic is this?I might not be understanding this correctly, but why couldn't node slowly port code over and as new features are added convert to using a system like this?

At least from the code samples you provided it looks hell of a lot cleaner, so I'm not quite sure why someone wouldn't want that.If you're so comfortable writing C, there's no point in using node.js. Just write C.[deleted]"
2011-08-06 04:03:14;More Than Web: Six Node.Js CLI Apps;
2011-08-16 21:43:25;LinkedIn sees massive performance boost after switch to Node.js for serving mobile content;
2011-08-16 21:00:21;Using NodeJS to Stream a Radio Broadcast;
2011-08-15 15:15:01;Using iptables to balance Node.js;
2011-08-15 14:34:43;Talk - Building a firehose with Node.js and ZeroMQ;We also open sourced the node-tail library mentioned in the talk: https://github.com/forward/node-tail
2011-08-14 01:41:35;Question: What's the right DB to use when dealing with transactions?;"I attended a very interesting session at the Open Source Bridge conference about NoSQL (document-based) databases (like MongoDB and CouchDB) and a similar question was asked -- how would you use a NoSQL database for an application requiring transactions? They asked for a specific example and the questioner said a financial application for a bank. Interestingly, there were was a person there who actually worked on financial software for banks, who pointed out that real software for banks does not use transactions!

The canonical example in database textbooks for transactions seems to be a bank account where you want to be able to transfer funds from one account (checking) to another (credit card) and you want the balance to change in either both accounts or neither (as a transaction).  But that is not how banks actually work. Banks require an audit trail, so they store each transaction (for example ""move $100 from my checking to my credit card account"") as a single entry in the database, rather than as a database transaction that changes the balance in two accounts.

In other words, instead of your database consisting of balances of your various accounts, it consists of a string of entries representing your transactions, which is perfect for a NoSQL database.

In fact, NoSQL actually has a huge advantage here, since a large bank will need to have multiple servers with multiple databases serving its customers, and transactions that change multiple tables would require complex and slow synchronization of the replicated databases, while using NoSQL allows concurrent updates to the same accounts, and thus is far more scalable.

So my point is, do you really need an SQL database with transactions?  If an important goal is scalability (which you say it is), you should look at CouchDB or MongoDB. You can store your incoming financial transactions as documents in the database. Then to calculate a balance just do a simple map-reduce (of course, if desired you can always cache the balances for faster access).The pure JavaScript MySQL driver for Node has some limitations when it comes to transactions. I don't know about the state of the Postgres bindings but I suggest investigating whatever you consider very carefully. Do some actual tests with real world scenarios you have to handle and make sure that it works as you expect.> but a friend recommended using PostgreSQL.

Listen to your friend.  PostgreSQL is faster, more compliant with ANSI standards, and much more pleasant to work with than MySQL.  And yes, I am too damn lazy to back up these assertions with links or references.  :)I think a [StackExchange][1] site (e.g. [StackOverflow][2]) is a better place for a question like this.

[1]: http://stackexchange.com/
[2]: http://stackoverflow.com/"
2011-08-22 19:15:14;Why we chose Node.js for server monitoring;No SMS alerts :(
2011-08-21 09:32:45;H-farm italy official location for the Node.js knockout 2011;"and this is the two apps from Italy:

http://fbse.no.de

http://knot.no.de"
2011-08-30 18:59:30;Hailstorm - load testing entry for node knockout (x-post from /r/programming);
2011-08-29 11:42:24;Metris - Multiplayer Tetris Node Knockout Entry;"Seems to be a bit buggy (or servers are overwhelmed?) I couldn't join games with 2 or more players, and the game I joined that had 1 only player, he was idle (or suffering the same bug I had?) and thus kept piling bricks on top of each other, causing the whole team to lose.there is tetrinet... ;)Hah, my team's project for NKO is Multiplayer Minesweeper. I detect a theme ;)."
2011-08-29 00:06:41;Our project for Node Knockout is finished. Vizard - send JSON data, receive realtime graph;"It looks pretty neat. Congratulations!Word! I've been thinking about doing something like this for a while, glad someone actually did it. I'll take a closer look tomorrow!

Good luck at nko!I wrote something similar last week. I'd be very interested to have a look, but it seems like the link you provided is broken."
2011-08-28 23:15:17;Installing and Running node.js applications within IIS on Windows;
2011-08-26 18:49:31;Re-imagining LDAP for Node.js;
2011-09-03 14:26:35;Racer: Synchronised models/data on Node.js and the client;Neither of the demo sites seem to be up-- but a very cool project nonetheless.
2011-09-01 21:00:31;Doodle or Die - our insane Node Knockout entry. Play and see what happens.;"I'm happy to answer questions about the game or coding in Node.    Internal Server ErrorThis one really made me laugh: http://i.imgur.com/tiSM6.pngThat was pretty fun once I understood how it works.

I like some of the reactions to dick drawings, like this: ""A rocket shooting out of boulders in a forest"".awesome dude, but right when i was submitting my nyan cat drawing, ""internal server error"" :EWow that was mega funSeems the traffic killed it :/http://imgur.com/By3AmSuper fun. Congrats!Ever seen [Telesketch](http://itunes.apple.com/us/app/telesketch/id428961023?mt=8)?Just came to say thanks for this :D[deleted]"
2011-09-01 19:15:13;Apestronauts is multiplayer space gorilla warfare (our Node Knockout entry);The page reloads before I can do anything...Regardless of whether we win or not, would you like to see us do more work on our game Apestronauts? Some of the things on the top of our to-do list include: health (so you risk being killed if you aren't careful), powerups (either weapon or defensive buffs), and deformable terrain (a planet you can blast holes in). Thoughts?
2011-09-01 12:37:37;FBSE: a Stock Exchange simulation game - also a #nko entry;I can understand that people implement FB and Twitter based login mechanisms. It builds viral market right into the product. But you know, sometimes i just dont want to tell my FB and Twitter friends that im playing a game online, and i'd rather just create a username and get on with the game.
2011-08-31 23:50:23;play against other redditors in 8bits on our node knockout entry: BOSSMAN;This is one of my favorite entries in Node KO.Neat! I like the look of it.I think I found an exploit. If you time your jumps to be exactly as you're landing you'll sometimes pick up insane speed.Very stylish, if only I could mute the music somewhere...
2011-09-13 15:55:03;Node.js is FAST;Author here: It's rare to see benchmarks comparing two very similarly written applications written in two languages. Admittedly my work on Qpsmtpd (I didn't write all of it, but I did make the async version that I tested here) was earlier than Haraka, so I may have learned something, but the apps are similarly structured, and I didn't expect that much of a performance difference.
2011-09-09 06:23:49;Node.js, Ruby, PHP job trends;Does not look that impressive in absolute numbers: http://www.indeed.com/jobtrends/Node.js%2C+Ruby%2C+PHP.html
2011-09-08 22:19:48;Private npm modules;
2011-09-20 06:33:50;Celeri.js: CLI Library For Node.js;This looks awesome! I've been looking for something like this to help me write fast server utils and stuff
2011-09-19 15:26:56;Code Review: EventEmitter2;
2011-09-17 20:00:40;Node.js library for supervisord;
2011-09-17 05:27:07;Designing a generic cache for asyc/emitters. Comments ?;
2011-09-16 22:19:51;20 Short video lessons on using Node.js and hook.io to build distributed applications;
2011-09-26 20:34:21;Jade & Stylus 0.16.0 released;I've really been missing the template inheritance of django templates, so hooray for the blocks!Some of the new jade features look neat, but I wonder why there weren't more bug fixes. I've already encountered several issues with both jade and stylus since I began experimenting with them a few weeks ago. 
2011-09-26 12:09:07;Node.js virtual environment;
2011-09-22 16:11:32;Gittyup.js: Deployment library for node.js;
2011-09-21 15:26:03;Multi-Process Node.js: Motivations, Challenges and Solutions;
2011-09-21 09:57:03;Difference between events and messages in Socket.io?;"They are similar, but emit/events are just a layer of abstraction on top of send/messages.

The WebSocket API uses the a send() method, which takes a string/buffer/blob. One side simply sends data to the other side over a single channel, and the receiver decides what to do with it based on the contents.

Socket.io implements a send, with a little sugar on top, for instance you can send objects and it will JSON encode/decode transparently. This is an improvement, but very much in the same spirit as the native WebSocket send(). You send anything you want via send, the receiver parses it and derives it's on consequences.

A common pattern that emerges is that you have types of messages, and what you would send() would be something like {type: 'click', data: {x:1, y:1}}, with some 'type' property describing the data. The receiver could then use that 'type' to decide the proper course of action.

This is where emit and events step in. They are relatively new in Socket.io, and a welcome addition. Now instead of having a single handler that switches based on some arbitrary property of a message, now Socket.io abstracts it away, by allowing you to give it an event name.

So instead of this:

    // Sender
    socket.send({type:'click', data: {...}});
    
    // Receiver
    socket.on('message', function (m){
       switch(m.type){
         case 'click':
            ...
         case 'something else':
            ...
       }
     });

You now can do ...         

    // Sender
    socket.emit('click', {...});
    
    // Receiver
    socket.on('click', function (data){
       ...
    });

    socket.on('something else', function (data){
       ...
    });
    
This code is unchecked pseudocode, so there may be errors.

**TL;DR** Socket.io events are a nice abstraction on top of messages that allow you to give more context to your messages, and ideally make your code easier to follow.Not to be a spoiler, but have you also checked out the alternatives? [SockJS](https://github.com/sockjs/sockjs-node) is a little more straightforward (IMO), and even better is a channel/message tool like [Push-It](https://github.com/aaronblohowiak/Push-It) that abstracts away even more."
2011-10-04 23:38:30;is node suitable for multiple http requests?;"It depends on the type of thing you're serving. If you're just passing JSON directly and asynchronous to/from a database, Node will definitely not be the bottleneck (and Node would be a great solution). If you're having to do a lot CPU processing on those requests (e.g. really complex page renders), etc. Node will probably be fine, but maybe not ideal.


What database are you planning on using for this?
I wrote and use http://node.io for this very purpose"
2011-10-04 22:52:33;Ryan Dahl: An Easy Way to Build Scalable Network Programs;hmmm, I wonder why vipre is blocking this domain?
2011-10-03 21:30:49;"node-fib: the fast non-blocking fibonacci server ;)";"Context: http://teddziuba.com/2011/10/node-js-is-cancer.htmlI'll repeat [my comment](http://www.reddit.com/r/javascript/comments/kzet1/fibonacci_for_node/c2on024) from the [r/javascript thread](http://www.reddit.com/r/javascript/comments/kzet1/fibonacci_for_node/):

> hey node.js guys! \*please\* don't become as immature and melodramatic as the Ruby guys, we have enough of that shit already."
2011-10-03 18:02:39;2 Factor Authentication in NodeJS - Works with Google Authenticator;
2011-10-03 05:18:27;Node.js Web/Software Development: Is Node.js a cancer? No!! It's quite nice, really;why does everyone feel a need to reply to that cancer article... it's bs and should not get more attention than just a simple shout back telling him he's an idiot. total waste of time.
2011-10-11 09:16:53;bounce your http requests around with bouncy!;
2011-10-10 20:57:11;"Bouncy: bounce HTTP requests around for ""virtual host"" support or load balancing";Does this all run on port 80? I've run into issues running apps on non-standard ports because of corporate firewalls. If it does, then kick ass.
2011-10-10 15:26:34;whats your alternative to mechanize?;"Tobi is probably what you want (npm install tobi)... supports cookies: 

https://github.com/LearnBoost/tobi

Zombie looks interesting, but I struggled with it and couldn't actually get it to do anything.great ill check them out thanks"
2011-10-17 19:52:09;Node API changes between v0.4 and v0.6;"they don't say how the zlib API is implemented. I really hope they're spinning a thread for it.

*edit: According to [this](http://comments.gmane.org/gmane.comp.lang.javascript.nodejs/31123), it runs in a thread also used for other stuff, but presumably won't block the main event loop while it crunches bytes. So all it probably well.Not as many changes as I expected but still great nonetheless."
2011-10-17 15:18:25;Node.js in Action: Interview and Book Excerpt;"Definitely anticipating the release of this book.

TJ is a beast on the Express project. Dunno when that guy's not working."
2011-10-17 02:29:43;RedNode - never refresh your Reddit tab again;"http://i.imgur.com/sWoSX.png 

&#3232;\_&#3232;
I just started learning node.js and I love the way it works. I think your project would be a great way to learn and demonstrate Node's event-based architecture through a useful example, so please, by all means, share your code. :) 

I'm sure others (and not necessarily redditors) will appreciate it a lot.[deleted]Do you want to level faster than your own? Do you want to enter more aspect of the game? Are you confused by your options? Follow the wow gold(http://www.bookwowgold.com) guide and Wow leveling guide and you will be able to level your World of Warcraft character faster. You should try to get a good World of Warcraft gold guide and leveling guide.

There’s practically nothing incorrect with leveling with the seat of your trousers. It’s only a little slow. Grinding works, however it is slow. Cheats and exploits and buying illegal gold can get you banned and what enjoyment is it receiving for the complete satisfy in situation you didn’t even come upon the content? That leaves buying a gold and leveling guide.
In the event you are searching for a specific dilemma and cannot locate it now, try acquiring for a few other thing. Sooner or after you should certainly locate the dilemma you have been concerning the lookout for. Just earning gold is of no worth unless you locate suggests of spending it.

It is not surprising to locate an awesome offer of new gamers dropping in the trap of earning as drastically gold as feasible in as short a time period of your time as you possibly can. Several of them even make the cardinal sin of attempting to buy Wow gold from other sites."
2011-10-15 02:22:57;Best Node.js hosting/solution?;"Nodester is pretty awesome and it's completely freeI'm using a pretty sweet home brewed system that uses nginx to serve static content and falls back to connect-vhost for everything dynamic. It's working pretty well so far (12 hours since finish). [How to configure nginx, and some more specifics.](http://www.techosaur.us/2011/setting-up-nginx-to-serve-static-files-and-automatically-reverse-proxy-fallback/) Also I use linode.

I also have some githooks which trigger fetch/pull && npm install on all of my vhost repos.I've tried:

nodester
joyent
heroku

So far, I've been happiest with heroku. The only issue is that the start-up time on the free service can be a little slow (a second or two), but that's ok.[deleted]Nodejitsu is in a private beta, but I've been using it and it's amazing.https://www.dotcloud.com/ is another option to considerHeroku is free for a single dyno, which can handle an absurd amount of traffic with no drama. I use it and I would recommend it in a minute."
2011-10-13 19:37:10;60$ to whoever can add Syntax Highlighting to Etherpad-Lite;I will put $20 into this.I might give this a go. Cloud9 already has this.
2011-10-25 22:51:18;GitHub open sources Hubot (AI-wannabe expandable node/coffeescript chat bot);who uses campfire?
2011-10-25 05:42:39;Testling: cross-browser testing platform (created with Node);"Plus testling just got a headless mode that you can run locally with jsdom: https://github.com/substack/testling

It's super easy to switch from running tests locally to running them on real browsers: just add `--browsers=...`!"
2011-10-24 21:31:25;Passport: simple, unobtrusive authentication for Node and Connect/Express;This is awesome. Great workGreat work.I haven't looked at it in great details yet, but what does your library do better than [connect-auth](https://github.com/ciaranj/connect-auth) or [everyauth](https://github.com/bnoguchi/everyauth) ?Any plans to support auth using Google?Is there an example of using passport with the connect framework? Note: I am not using express.
2011-10-23 22:16:18;AskNode: I just had this idea for a purely ajaxian web framework approach that might be interesting. I'd like to hear a critique or suggestions...;"Have you looked at backbone.js for client side MVC/MVP architecture?  What you're describing is quite similar.

You build out some model code to handle how your data should be structured.  It has baked in features to sync with a server (may require tweaking to work with your backend; it's written to work mostly out-of-the-box with Rails).

On the view/template side, you define how different pages should look, and reference the model objects stored in the client's memory (as javascript objects).  Clicking between 'pages' makes it seem like there's zero load time for most of the page, with the model data from the server populating in more slowly (think of GMail).I think it is great for Javascript heavy web apps.  Having a REST api and some client Javascript is a great way to make a web app.  There are also caching and bandwidth advantages.

For websites, however, it doesn't work so well since users expect the content to be there when the page loads (and so do search engine crawlers).  Github does a really nice hybrid where you load the page from the server for the initial load, then when a user clicks something that only reloads a part of the page they ajax in html for that part of the page, animate it in, and use pushState to add a history entry.

ex: go here [https://github.com/torvalds/linux](https://github.com/torvalds/linux) and click a folder in the file browser.

I've been thinking a very similar thing.

Every router is looking at the same one page index.html, single css and js compiled on the server.
with all other content being loaded by ajaxy-sockety-json using a rest api.

the index.html page could actually be empty

What would make this idea great is that its complete separation of logic all content (including layout information) is stored as json delivered by api request. How it works is that on initial load the website using html5 downloads the content (json), js, css and images to be stored locally using a manifest. That way the site is superfast and works offline. The json is not actually called via ajax so much as synced using socket.io the site prefetches a link ahead so there is no latency when clicking on links (in most situations).

I think this would work great for mobile websites in particular.Not that this a game killer, but you'd likely lose all browser commands: back, forward, refresh, etc, yes?"
2011-10-22 00:25:06;RailwayJS - MVC for Node;This looks absolutely awesome. I think node is about to steal the crown from Ruby in the way Ruby did to PHP and PHP did to ASP as the language to develop web apps in. However this requires a good MVC framework with ORM and now we have it. Just wish I could find some time to play around with it a bit.
2011-11-01 06:26:59;Node application boilerplates: minimal and ready-to-run node.js applications;
2011-10-29 21:47:46;Should I use https://github.com/pgriess/node-webworker for background processing or something else?;"What I am thinking is that in the case where I am using Node (Express) as a regular web server, if there's a way I'd like to avoid having to use nginx. I will assume the VPS has 4 virtual CPUs, use 2 of them for serving static files such as images and js/css, 1 of them for handling other page requests, and the fourth as a background worker.

Does that sound about right?No, it will be better to just use 4 identical instances of your app and load balance them.  Each instance could still offload processing using that webworker code, or process.spawn or fork.  You can easily offload all your static files to Cloudfront later on to free up resources.  "
2011-10-29 16:05:23;How to create app in subfolder using node/express/ejs;"you can set a 'basepath' in your express configuration for each server.What i usually do to accomplish that is have nginx in front and have each node app running in a different local portWhy not just serve that stuff with [node-static](https://github.com/cloudhead/node-static)?I'm not 100% sure .. but I think you can:

var app = express.createServer();

... do your stuff ...

var otherApp = express.createServer();

... do more stuff ...


app.use('/other', otherApp);



[edit]

Just to clarify, your 'otherApp' could have different public and views folders, for example."
2011-10-27 16:17:58;A humble offering from a node newbie, a RCON protocol client library for node.;
2011-10-27 00:48:29;Forking in NodeJS? [x/post from SO];"I just answered the question on SO, but, in short, you `child_process.fork()` is not the fork your’re looking for.

Keep using daemon.node, or daemonize at a higher level (execute yourself as a child process, indicate that it’s the child through an argument or environment variable, and exit the parent.http://nodejs.org/docs/v0.5.4/api/child_processes.html#child_process.fork

You pass it a path to another javascript file and it does something similar to: node file.js   but with some added bonuses."
2011-11-08 15:32:33;node.js firebird driver 0.0.7 released with support for node 0.6.0;
2011-11-07 17:05:51;Creating a real-time multiplayer game with Websockets and Node;"This is a bit redundant:
> return (prevX != x || prevY != y) ? true : false;"
2011-11-06 22:43:47;Node.js Debugging with the Built-in Debugger | TechnoSophos;"For the sake of completeness, there are at least two other ways to debug your node.js apps:

- Using the [Eclipse plugin](https://github.com/joyent/node/wiki/Using-Eclipse-as-Node-Applications-Debugger). Great if Eclipse is your IDE.

- Using a webkit inspector on a standalone web page, with [node-inspector](https://github.com/dannycoates/node-inspector).

Each have their own strength. For example, the node-inspector approach lets you use a CPU and heap profiler.

I believe both the plugin and the inspector let you modify the code currently running on the fly.
"
2011-11-05 12:35:10;Node v0.6.0 released!;"I'm not sure what change is responsible for it, but some stream-based file processing command line tools I wrote are running 4x faster on 0.6 than they did on 0.4. 
So, any notes about migrating code from 0.4 to 0.6?"
2011-11-04 21:51:22;Node.js Web/Software Development: Do front-end engineers using Node.js win if they can use familiar frameworks even on the server?;"It seems tempting, but there are a few gotchas:

- browser frameworks tend to be DOM-centric, because that's the main thing a browser gives you to play with. 

Have you tried playing with the DOM in node.js? Is it anywhere near your top-10 list of things you really want to be doing?  
So there isn't native DOM support in node.js, since you don't really need it. You can find a pure JS implementation for it there though: https://github.com/tmpvar/jsdom 

If you give in to a brief flash of sanity and decide you won't use DOM manipulation on your server-side code, what else do you get from your framework? a redundant form of module loading? various side utilities? Is it worth it?

- performance in the browser is not the same thing as performance on the server.

I mean, that's the whole promise after all. Write the same kind of code using the same framework, and magic happens. In fact, Yahoo's [cocktails](http://developer.yahoo.com/blogs/ydn/posts/2011/11/yahoo-announces-cocktails-%E2%80%93-shaken-not-stirred/) announcement makes it sounds like you can have the same code running on both side of the divides.

And superficially, it's not that different. Both sides need to stick to short bursts of non-blocking code and the coding patterns needed to do that are the same.

One huge difference though, is that your browser code doesn't have to run a few hundred times per second on a single box. The browser environment is much more forgiving from a performance standpoint.

The mostly blatant performance disconnect is going to happen when you decide to use a UI widget from your framework on the server side. On the browser, you have some initialization cost. Usually your widget is putting together its UI by creating DOM elements and appending them to the document. On the server side, that's costly. You can argue that's only because the only good DOM emulation library out there is written in pure JavaScript, and runs slower than native browser DOMs, but even a native DOM would still be an order of magnitude or two slower than a good old precompiled template.

Other things will hurt you as well. A page using 30MB of RAM for various data structures isn't going to make anyone blink. A server eating up 30MB per active request is going to be more of an issue.

Another point is the lifetime of your code. In the browser, your code runs once per page, and gets fully unloaded when navigating to the next page. On the server, some code is initialized at server start, some code runs on every request, but generally nothing gets unloaded. It's not obvious to abstract that away correctly with a uniform framework.

"
2011-11-15 10:58:41;I recently wrote my first node module - sentinel. What do you think?;"I really hate things that are GNU licensed.

Doen't most of these have built-in recompiling?"
2011-11-14 15:15:31;Watch_r.js: better recursive file watching;
2011-11-14 12:57:04;Bang: text snippets on the command line with Node.js;
2011-11-13 19:28:34;SublimeText-Nodejs;Hell yes! Think this would work with coffeescript?
2011-11-12 22:53:37;Nodejs+Fabric as fast as multi-threaded C++;"Cool, but  this isn't really Javascript/node.

> The high-performance parts of the application are written using a performance-specific extension to JavaScript, called KL **(Kernel Language). This language is similar in scope and syntax to JavaScript, but has some key differences** that optimize it for writing high-performance code.

> ...

> Fabric handles CPU multi-threading automatically, but the developer must explicitly write code for the GPU using OpenCL.

It would be more accurate to say ""Fabric is faster than C++ (and you can access it through Javascript)""

The association to node seems more like buzzword vampirism than anything else.
"
2011-11-22 00:50:25;NPM included in Node;Cool :)This was a good move. NPM is an incredibly valuable component of Node.Not sure if I agree that this was a good move. Some of the NPM code needs to be cleaned up/refactored.
2011-11-21 06:06:21;azer/genpkg - GitHub;
2011-11-21 00:34:47;term-canvas: use the HTML5 canvas API, via Node.js, to draw simple graphics in the terminal;
2011-11-20 20:51:16;Five Hundred Bucks to Hack on Etherpad Lite;"As far as the syntax highlighting, after reading the github thread its unclear what the requirements are.  Its done already.  

To make it work across multiple lines means basically starting over and may not be possible.

Anyway, 250 bucks??  What the fuck is this, rentacoder?
"
2011-11-19 23:48:02;What libraries/techniques do you use for using MySQL with node?;"I use Felix's library pretty heavily in production. Has performed great so far.

https://github.com/felixge/node-mysqlI use dbslayer and access it using http interface.  Most of the mysql libraries for node.js are slow except mysql-native but it has encoding issues.I have been using [Sequelize](http://sequelizejs.com) on a recent Node project of mine.

Thus far I am mostly happy with it...What about using something like  https://github.com/1602/jugglingdb it is ORM/ODM it has adapters for mysql, mongodb, redis and many others so you will have common interface for them.

I think its nice :) But i used it only in one project"
2011-11-29 22:32:11;node.js firebird driver 0.0.8 released with experimental support for node on Windows;
2011-11-29 17:40:28;elegant open source pastebin server written in node.js;"Nice.

Though sometimes it would be nice to be able to control what filetype it assigns things.

You've broken my Ctrl+L (i.e. made it do nothing), but you haven't managed to steal Ctrl+N from Chrome - that still opens a new window.Very nice design and functionality blend. Like the name as well.You have broken the back button (chrome).was having some server issues a bit ago - should be better nowThings I think would be cool:

1. Being able to select the type of syntax highlighting
2. Private pastes
3. Password-protected pastes (possibly with encryption)
4. Being able to set a paste expiration date

Will be following and contributing via GitHub. Nice job![Etherpad](http://etherpad.org) does this already :)"
2011-11-29 14:49:03;haba.js: plugin library for node.js;
2011-11-29 00:43:59;OSDC 2011 Presentation: The Joys and Pains of Node.js in the Enterprise;Yet another great talk with absolutely no camera on the slides.. :|Sorry about that the slides are here: http://www.slideshare.net/MarcFasel/joys-and-pains-of-nodejs-in-the-enterprise
2011-11-25 16:35:27;Node v0.6.3 released: now comes bundled with npm;
2011-12-06 17:01:27;Node.js modules you should know about: request;
2011-12-06 15:23:12;Node Toolbox - Categorized node module directory inspired by Ruby Toolbox;Impressive. Wish the description was being lifted from the Readme.md on GitHub though. Unless im mistaken, is that already being done?
2011-12-06 00:03:55;There's a node.js circle on Google+ if you care to add yourself;Couldnt figure out how to add myself to the circle but thanks for this post
2011-12-05 19:26:17;Gittyup: app deployment library for node.js;
2011-12-05 16:13:32;Node.js modules you should know about: lazy;i hate the loud adds on that site.
2011-12-13 20:56:36;Node.js modules you should know about: redis;"Does anyone have an example of how to back Redis with MySQl, e.g. in-use records are served/updated with Redis, but are eventually expired and written to MySQL for long-term storage?

Example: Multi-user live-edited document that is stored in Redis when in active use (for crazy-fast read/write), but then backed-up to MySQL for storage (since only a relatively few documents are likely to be in use at any one time, and we want to minimize Redis's memory footprint).

I see it mentioned as a possibility but never implemented."
2011-12-13 16:34:22;Check out Holi-Cray-Matic™ by Designkitchen - an arduino/node.js controlled conference room to spread holiday cheer! (x-posted to /r/nodejs) [i'm one of the devs];
2011-12-12 21:05:44;Node.js modules you should know about: socket.io;Excellent article. As a bit of a Node.js noob, this was an interesting read.
2011-12-11 23:24:10;Towards Auto-sharding in Your Node.js App « Living Code;"It's disappointing that he hasn't posted any follow ups since then. I'm especially interested in seeing his implementation of a sharded Redis client.Hey wait? Any one thought about the mechanic to be used on ""geo location""?"
2011-12-11 01:10:34;Microsoft releases Windows Azure SDK for Node.js on Github;Awesome!  Replying so i can find this later...
2011-12-20 21:57:28;vnc.js: how to build a JavaScript VNC Client in a 24 hour hackday using node.js, socket.io, and HTML5 canvas;
2011-12-20 01:50:50;Trouble in Node.js paradise: The mess that is npm;
2011-12-19 20:33:02;Bounty on a Neo4j Node.js adapter;Surprised this doesn't exist. Neo4j has an easy to use rest api...There already is one: https://github.com/thingdom/node-neo4j
2011-12-19 19:09:59;Passport Guide: Simple, unobtrusive authentication for Node.js.;"I've not used this module but I do like the current design trend in Node websites: super-simple.

It feels like Node developers are going out of their way to ensure maximum uptake.I can vouch for this module. I spent a significant amount of time evaluating all of the different options available, and Passport came out far ahead in simplicity and flexibility.

Unlike other solutions it does not try to implement all of the different services in a single library, but instead is very sensibly extendable through additional modules that are very easy to write yourself.

It makes this library very easy to integrate into your application, instead of being forced to build your application around it.Going to give a thumbs up for this. All the other auth libraries for node try to do too much; this one just handles authentication and that's great.I was hoping to find a module that would just let let me throw down a single `app.use()`, paste a <form> into my html, and handle all the different authentication schemes from a single callback. I'm not sold on this API.Is express required, or do they just find it easiest to explain by assuming express?How is this module compared to [everyauth](https://github.com/bnoguchi/everyauth)?it would be nice if there was a separate db installer that gave you users and roles so you didnt have to write one"
2011-12-18 21:25:47;the node.js aesthetic (The Universe of Discord);Great article. More than just being able to use Javascript, it has really been this aesthetic that has attracted me to node so much. I love the fast past of the ecosystem and the ease with which so many different modules can be made to play nice with each other, but I hadn't thought about it in terms of authors not having to worry quite as much about backwards compatibility.
2011-12-27 23:21:34;Installing NodeJs on a Server;Nice walkthrough. 
2011-12-27 14:52:33;I was looking at the buildr module for my Windows-based node installation when I encountered this. Making fun of Windows is not professional and paints nodejs in a bad light.;"There was a rant by Ryan Dahl some time ago. I think if anything, that would have painted Node in a bad light since he is the creator of it. That was poor taste in my opinion. However, for something like this. I dont think its such a big deal, especially since this reflects more on the OS wars as opposed to Node.js


just my 2 cents ;-)"
2011-12-23 17:56:38;NWM is the next generation LAMP;"Node, Windows and Mongo. Windows? Really? Is there really a driving force of Node developers heading to Windows?I've been using Node on Windows and i've had a really good experience. I put off adopting Node for a long time but jumped on the bandwagon as soon Windows got a stable release.  I wasnt prepared to spend time learning my way around another OS just so i could work with Node. Yes, thats lazy but i didnt want the extra overhead. Plus, 95% of our servers at work run Windows. If i'm ever going to persuade management to consider Node seriously, i could do with side-stepping the OS obstacle. 


 MongoDB has also been a very pleasant experience. Although i've not experienced it firsthand, i hear its buggy on Windows once your app starts hitting reasonable amounts of traffic. works on windows doesn't imply most widely deployed/used on windows.

This is a good idea, is there something like this setup that works on OSX?I'm behind NWM all the way, as long as the ""W"" stands for ""whatever"".  In other words, Node and Mongo, but develop and deploy on whatever OS you want.  Although I think the majority will prefer Linux for deployment, for development most will choose OS X or Windows.I hardly think windows will over take unix or linux in servers. Windows is garbage."
2011-12-21 22:26:58;JavaScript or SQL injection attacks in the Node.js platform?;I've seen this crop up lately. Only idiots use `eval` instead of `JSON.parse`. Don't be  an idiot.
2011-12-21 21:21:37;package.json cheatsheet;
2012-01-03 21:53:37;Mechanize-like solution in native JS for node?;"[Braaaaainssss](http://zombie.labnotes.org/)Also https://github.com/learnboost/sodahttps://github.com/learnboost/tobi

Fast and leverages JQuery for selection/manipulation.Any opinion on [WebDriverJS](http://code.google.com/p/selenium/wiki/WebDriverJs)?

One advantage of a Selenium solution is guaranteed function with sites that use JS since you're really using a browser engine to access them."
2012-01-03 15:35:44;"""Nearly all Node HTTP servers are vulnerable to DoS""";"Is this early adopter syndrome?

Presumably most problems of this sort would be gone by ""v1.0""..."
2012-01-02 06:10:50;Easy to use Node.js wrapper for Google's Image Charts;
2012-01-01 21:20:19;sift.js: mongodb inspired array filtering;
2011-12-29 16:48:51;Node susceptible to DoS attacks?;It's not only node.js/JavaScript, but this also affects other scripting languages: [Effective DoS attacks against Web Application Plattforms – #hashDoS](http://cryptanalysis.eu/blog/2011/12/28/effective-dos-attacks-against-web-application-plattforms-hashdos/)
2012-01-09 20:03:45;nodePDX 2012, 11th-12th February 2012 | Lanyrd;Also: We're currently looking for presenters to fill out the schedule. We're interested in hearing about whatever you've got. Go to https://github.com/nodepdx/nodepdx.github.com/blob/gh-pages/proposals/README.md for instructions on how to submit a proposal for a presentation (sounds way more formal than it is). Loving the idea of a free conference. 100% going to be there!
2012-01-09 02:21:06;NodeUp 10 (Node.js podcast series);
2012-01-08 04:21:59;Case study: How & why to build a consumer app with Node.js;
2012-01-08 01:39:17;Anyone want a ticket to Node Summit ($495, $200 below current price)? If so, PM me...;
2012-01-07 23:45:16;node.js? in my end user application? it's more likely than you think.;nice to see.  looks like you have a custom node.js and V8 for some await/async stuff?Thanks for sharing!
2012-01-17 05:30:18;Node v0.7.0 released;"Are most packages 0.6 compatible yet?DEFINE_bool(harmony, true, ""enable all harmony features"") gigidy    n latest

[And now we wait.](http://i.imgur.com/U8ABp.png)"
2012-01-16 06:48:54;Specific stack suggestions for writing an e-commerce website in node.js? (Considering express, redis, mongo and couch).;"I don't want to start a debate, but are you sure nosql is the way to go for a commerce site? My experience with ecommerce is pretty strong, but it's only been with php and mysql.

I've been thinking about a node ecommerce solution myself and would love to be kept up on the development of it if you're doing it open source.Not sure if you've considered payment processing yet, but there is a [node interface](http://www.catonmat.net/blog/stripe-payments-with-node/) to the [stripe](https://stripe.com/) processor which looked pretty cool.MongoDB, Mongoose and Jade. Backbone.js is a pleasure as well. > Maybe even use backbone as the router, shifting the majority of the workload onto the client; it'd be kind of interesting to see a store operating like this (I haven't really seen this executed before.

There's a reason why this isn't done.  Backbone.js (and any other client-side MVC, for that matter) is a terrible choice for an e-commerce site.  Don't use technologies that are new for the sake of using new technologies.

Backbone.js is meant for writing things like single page web applications.  You write the backend API which broadcasts JSON or some other data and the client application continuously syncs data between the client and server, so you don't need to refresh the page and your user interface is much smoother.

The reason why this doesn't work for an e-commerce site is the consequences that this will have for search engine optimization.  Search engines like Google (as of yet) do not index AJAX/JSON requests from client to server, so you will be losing out on many customers for your e-commerce site if they are unable to search for a product on your site by any search engine.

If this is just for the sake of learning, then go for it.  But if you're planning on actually using this, you need to take into consideration many other factors rather than just coding the site up.

**EDIT:** After reading all of the comments, there is a lot of bad advice in this thread.  Please don't use libraries that you've only heard of and don't actually know what they do.  Node and NoSQL is fantastic when used properly, but you have to know what the benefits of using them are over something like PHP/MySQL or anything else before actually using them.A document store makes a lot of sense to me. I'd stay away from CouchDB  because of the design decisions they made, such as serving pages directly from the db, and being ""abandoned"" to Apache. You might want to check out Riak and compare that to Mongo. Hell, maybe Riak would work better for an in-memory session store (probably not), but I think you should at least investigate it.use mongo, that's what it's built for. 

but, don't use node for a whole page/system. we tried it, and it will make you insane. 
rather use PHP/whatever for the most common views and node for high traffic areas (feeds etc.)"
2012-01-16 03:43:13;Why coroutines won't work on the web;The right thing to do would be to add a cal/cc feature to javascript.  Though I must admit that it will probably be years before something like this makes it to the core language.
2012-01-15 23:17:40;I just finished writing HotTap (for even simpler http requests), my first node package... Any feedback appreciated!;"I haven't written a node library yet either but it seems to be pretty nice.  Any particular reason you're using const instead of var?

And, just out of curiosity, why did you decide to use a ""closure pattern"" instead of modifying the prototype chain?I agree with qcomm.

You should use the prototype chain instead of assigning references. It will use the memory better. Also, I'm pretty sure const is just a reserved word and doesn't actually do anything except throw errors in standard JS. Does V8 allow its use?The code looks a hell of a lot better than my first node packages. Nice work!"
2012-01-13 16:44:34;Help cross compiling node/V8 for an ARM v4 architecture;A Raspberry Pi would be a much nicer (and way cheaper) target.
2012-01-24 22:35:17;boxy: Simple sandboxing for node;Come on, CoffeeScript? Worthless.
2012-01-24 22:28:58;xemplar: Community fueled collection of RegEx patterns;
2012-01-24 22:27:18;ipbind: bind() functionality for outbound sockets;Hardly anybody is going to use this if your docs and examples are written in coffescript.
2012-01-24 19:28:18;Node v0.7.1 released!;It says it installs Node-Waf by default. Is this also true on windows?
2012-01-24 17:56:14;Node.js modules you should know about: procstreams;
2012-01-31 23:44:28;How I Met Node.js;
2012-01-31 18:53:48;"Rapid Realtime App Development with Node.JS & 
MongoDB";
2012-01-31 16:45:14;Serenade: New client side MVC framework;"if anyone would like just a pretty railsy mvc template this is mine [https://github.com/tanema/node-template](https://github.com/tanema/node-template)


It uses a mysql ORM, has a clear separation of controllers, models and views and seems a little more straight forward than this framework. This framework not that straightforward and unintuitive. Just my opinion I have to say kudos on the documentation.Oh yes! I've been waiting for another js client-side mvc framework.

In all seriousness, I have no complaints about another library being released. As long as a slightly new angle is taken (and it seems either pragmatic or interesting), keep them coming."
2012-01-31 03:40:56;Locomotive - Effective web development for Node.js.;
2012-01-30 20:49:32;Ryan Dahl steps down;"I'm torn on this one but it's probably for the best. He may be getting burned-out on supporting Node rather than working toward other significant research.

I wish Ryan the best in his research projects. After all, Node came out of that sort of thinking.

From the newsgroup, it would appear that Isaac is more than capable to carry the Node torch.[Relevant.](http://substack.net/images/coronation.png) Let's just hope Node stays awesome, and I bet it will! :)I don't like this.
What if suddenly Linus will announce that he is stepping down?"
2012-02-07 03:44:10;Example: REST resource routing with NodeJS, express, and MongoDB;
2012-02-06 19:13:45;NodeUp:Twelve - A Node.js Podcast;"TL;DL: if you listen to nothing else, skip to the ""call for tooling"" analogy starting at 56:30"
2012-02-06 16:09:19;Logr - a logging and debugging library with filtering and custom adapters;
2012-02-06 15:21:59;Node.js and MongoDB – Getting started with MongoJS;Is MongoJS better than Mongolian DeadBeef?  Certainly can't compete in the name category.
2012-02-05 21:15:53;A Solution to CPU-intensive Tasks in IO Loops;"Clever! Retain the benefits of an event loop while providing a back door into pseudo threading on a stall...actually sounds a bit like this processor architecture I saw once. 

I imagine the only problems in implementing something like this would be any state information in the original event loop; although ideally that'd just be the request and response objects, right? Easily serialized...

Also, if the watchdog kept track of the event loop threads,  couldn't it kill long-stalled event loops via thread abort?[deleted]If I understand from a recently posted Dahl talk at Google, the non-blocking I/O in fact does use private threads under the covers.  So part of this proposed solution might be to open that mechanism up to general user tasks.  But I suspect that would get abused.

Secondly, it seems to me that the article's suggestions are quickly moving toward what real-time OSs do by their nature.  Maybe folks should just realize that and look at adopting those techniques sooner rather than later.

<rant>

BTW, the node community's use of ""real-time"" has bothered me for this very reason.  There are some pretty solid definitions of real-time, and they aren't ""we get to all events as fast as we can"", they mean no ""thread"" has to wait more than X time-units before running.  This is accomplished with similar watchdog processes as proposed.

</rant>

EDIT: But one down side is that as soon as processes can be interrupted, you lose one of the biggest gains of the node model: you can't count on owning the state of the system for the duration of your call."
2012-02-14 08:36:23;Cute interactive homepage written in node.js and socket.io;"and they're ""hacking"" on it by binding the character to the mouse and moving it around.  XDThat's pretty cool. Just had a little conversation with a guy from hackernews.Neat. This needs a case study.If anyone wants source code to do this, it most likely came from the [Node Knockout](http://nodeknockout.com) website which has all its source code available on [github](https://github.com/nko2/website)"
2012-02-09 19:34:12;Why Node.js is Awesome: A short history of web applications;I agree that node does have the possibility to simplfy the web app stack. but I wonder how many node processes are still sitting behind a Apache, or Nginx proxy.I think the history is missing the ~8 years between the height of PHP and now where frameworks like Rails had already decoupled route from implementation.
2012-02-09 11:38:07;semver your services with seaport;
2012-02-09 04:18:28;node.js and mongodb/mongoose tutorial;
2012-02-08 23:40:51;Linux Joysticks and Other System Devices in NodeJS;This is the most fantastically absurd use for Node I've ever seen! Love it.
2012-02-21 14:12:52;js-imagediff, now for node.  Render diffs from the command line and test canvas with jasmine imagediff matchers.;"Originally written for the browser, we've added node support to js-imagediff justing [node-canvas](https://github.com/LearnBoost/node-canvas).  Check out the browser example of the [diffs](http://humblesoftware.github.com/js-imagediff/) and the [jasmine-matchers](http://humblesoftware.github.com/js-imagediff/test.html).

    npm install -g imagediff
(requires libcairo)"
2012-02-20 04:47:12;NodeUp 13: New ECMAScript Features, Node Core Roadmap, HTTP Parsers;
2012-02-17 19:36:17;Roman to Decimal conversion;
2012-02-17 15:30:23;craigslist deploys Node.js based Haraka SMTP Server;I've never been able to get Haraka to work. One of the first things that attracted me to node was the idea that i might get a chance to play with Haraka. I'm always on the look out for a fast smtp solution although email deliverability is becoming a large concern now too. 
2012-02-17 06:36:14;Looking to get started with Node on Windows, any good tutorials on getting an IDE and server running?;"If you install 0.6.x you will see that installation is pretty much fool-proof.

As for IDEs, I usually [Cloud9IDE](http://c9.io) to code and to rapidly prototype. You can do all your git madness from straight in the interface.

On Windows, I use [SublimeText2](http://www.sublimetext.com/2).
You should compliment its default install with [Package Control](http://wbond.net/sublime_packages/package_control) which gives you care-free access to a multitude of prepared packages (Including a node.js package).

Although this applies to Coffee-Script check out the set-up proposed on [this blog](http://kevinpelgrims.wordpress.com/2011/12/28/building-coffeescript-with-sublime-on-windows/).I don't know if many people use IDEs for node/javascript. I don't even think that any (that have *notable* js support) exist. Just download node, write your scripts in your editor of choice, and run them from cmd.exe. At least that's how I do it on windows...1. Install [Node](http://www.yellosoft.us/helpers)
2. Write [Hello World](http://howtonode.org/hello-node)
3. Search [NPM](http://npmjs.org/) for interesting packages.
4. Build a cool project on [Joyent](https://no.de/).

Use whichever IDE you prefer. There's no reason to use a language-specific IDE.Node is extremely simple on Windows. Using just a plain text editor with a wizard based install of Node should get you going. Fire me across a pm if you need more help - happy to helpThe windows installer on the nodejs.org site installs node and npm for you:

http://nodejs.org/#download

If you're looking for more of the IDE type experience, there are some things you can do with WebMatrix:

http://www.hanselman.com/blog/WebMatrixAndNodejsTheEasiestWayToGetStartedWithNodeOnWindows.aspxI use [aptana](http://aptana.com/) for my nodejs development, should work fairly well on windows as well.If you are using Windows Vista or above check this out.
[WebMatrix and node.js: The easiest way to get started with node on Windows.](http://www.hanselman.com/blog/WebMatrixAndNodejsTheEasiestWayToGetStartedWithNodeOnWindows.aspx)"
2012-02-28 17:57:42;Persevere: A JSON-y, RESTful framework for Node.JS;This looks very promising for a work project I'm doing.  Anyone here used it yet?  I'm curious as to why it's gotten so little attention.  When I looked into it further, it looked like it was a project of some of the sitepen people.   I know about them because of work I do with Dojo, and they seem to be one of the top shops around for thick client JS apps.  
2012-02-28 17:25:49;Colours & branding on r/node have been updated!;"God that's a horrible green color on the banner. Why not use the background color from nodejs.org?

Light color: `#46473d`  
Dark color: `#33332c`Nice work... looks great."
2012-02-28 14:17:01;Managing Node.js Dependencies with Shrinkwrap [x-from: /r/programming];
2012-02-27 04:40:37;Up to date Express tutorials?;"https://github.com/visionmedia/express/tree/2.x/examplesI've found no real need for an express tutorial. The express guide is pretty awesome at describing everything.

Just go to the directory you want your project to live and type express init and you'll be set with a blank site.Not possible to give you any kind of meaningful advice without some understanding of your knowledge level. Are you an experienced Ruby dev who's built a hundred things in Sinatra, have you never written a piece of HTML or somewhere in between?"
2012-02-26 06:49:13;Learning node.js: I'd like to create a simple app to track my tv-shows;"- check for an api otherwise scrape a site like http://thetvdb.com/ to get your show info, and proper name. If someone searches for dex, you can present them with dexter as a valid choice.

- Once you have the shows with their proper metadata, you could scrape something like http://www.tvguide.com/search/index.aspx?keyword=bill%20maher to get the next air date

I think those would be the 2 main steps I think. Knowing when the episode plays next is the hardest step, maybe google around for a better source of information than tvguide.I'd use Mikeal's Request module to scrape whatever tv guide API you choose. You'll need a database of some kind, if you're already familiar with one just use that. Otherwise probably Redis. For simplicity, I would just define the shows you want to monitor statically in the code or through a configuration file or something.I would recommend [this boilerplate app](https://github.com/tbranyen/backbone-boilerplate) that uses node on the back end and backbone/jQuery on the front end.

EDIT: This isn't a specific app like OP is asking for as much as a template stack for building such an app w/node.http://services.tvrage.com/ has a good API for this sort of thing.

Getting a list of TV shows for the year is http://services.tvrage.com/feeds/fullschedule.php?country=US for example. Use xmlson to turn dirty XML into native javascript objects https://github.com/wearefractal/xmlsonHeh, I've actually worked on something like that before. But I abandoned it because I found other fun projects to work on. But I will probably revisit this unless your solution works. (assuming you'll opensource it)

My old project: [seenit](https://github.com/maritz/seenit)

Edit: If you have any specific questions feel free to pm me or ask them in #node.js (freenode.net). :)"
2012-03-06 20:38:16;Just spreading the word...;
2012-03-06 05:52:50;Karma Visualization Site built with Node (github link in comments);Here's the code: https://github.com/Omnivac/karma_by_subreddit
2012-03-05 01:16:47;How do I setup a schema in order to get started with a database?;"Here's one tutorial: http://howtonode.org/express-mongodb  

First thing I would do is install MongoDB.  If you can figure that out, go through this: http://www.mongodb.org/display/DOCS/Tutorial

Making a database is basically just going into the repl with 'mongo' command and typing 'use appdb' -- the db is created on demand when you then type 'db.things.save({test:'hello'})' or whatever.  It doesn't need to be more complicated than that.  See the tutorial.

More advanced http://www.mongodb.org/display/DOCS/Schema+Design  http://stackoverflow.com/questions/8239819/embedding-vs-linking-in-mongodb-when-to-embed-and-when-to-link
 
With MongoDB you can actually get away without even linking collections and just embed child documents, i.e. treat it as  regular JSON.  (This usually isn't the best policy, but it is fine for getting started learning, see 'more advanced' schema design above when you get bored).

I came up with my own way that makes it as straightforward as possible to do 'databasing'.  It does use CoffeeScript which I also recommend because it makes things easier also.  If you really want to you can convert this to javascript on js2coffee.org. It will look very similar, with more punctuation for the most part.

It uses MongolianDeadBeef (mongolian) and NowJS (see nowjs.org, sudo npm install -g now).

(You will have to install Node.JS first)

Server: CoffeeScript (node.js)

    express = require 'express'  #web server
    MongolianDeadBeef = require 'mongolian' #database thing
    server = new MongolianDeadBeef  #database thing
    nowjs = require 'now'  #remote procedure call, easier than GET/POST
    fs = require 'fs'
    util = require 'util'

    db = server.db 'appdb'  #database thing, appdb is name of db

    app = express.createServer()   #webserver stuff
    app.use express.cookieParser()  #webserver stuff
    app.use express.session { secret: 'burrito13' }  #webserver stuff
    app.use express.static(__dirname + '/public') #webserver stuff

    app.get ""/"", (req, res) ->  #webserver stuff
      res.end fs.readFileSync 'index.html'

    nowjs = require 'now'  #set up rpc stuff see nowjs.org
    everyone = nowjs.initialize app  

    everyone.now.dbinsert = (col, data) ->  #you can call these directly from js code in browser
      db.collection(col).insert data  #database thing

    everyone.now.dbupdate = (col, criteria, data) ->
      db.collection(col).update criteria, data #database thing

    everyone.now.dbfind = (col, callback) ->  #nowjs rpc call
      db.collection(col).find().toArray (err, data) ->  #database thing
        callback data

    app.listen 3000  #start webserver

____________________________________________________________________________________


Client: (CoffeeScript, convert to JS with coffee -c main.coffee, include along with jquery and nowjs in head of html doc)

    $ ->
      now.ready ->
        now.dbfind 'things', (things) ->
          console.log things 
You seem to be talking about MongoDB in particular, so I'll just say that MongoDB is a NoSQL database that stores JSON (BSON) documents, so there aren't ""tables"" per se, they're called ""collections"".

Also, Mongoose is a Node module that exposes MongoDB's API to a Node app.Are you saying you want to do database-style lookups without a db?  It's really pretty easy to use a db like mongodb by just installing it, and then using a connector like mongoose from node to the db server.

If you are familiar with other languages and bindings, then think of an app that uses a language like C# connecting to a DB like MS SQL Server via an ODBC connector.  Node is your app (server), mongodb is your database server (for example) and mongoose is like your ODBC driver connecting the two.

Perhaps I've just misunderstood your question."
2012-03-04 17:54:51;ZAVOD : A Simple to use realtime computation engine with guaranteed message processing capabilities for node.js;
2012-03-04 05:59:44;Any newbie friendly & up-to-date Node tutorials and resources?;"I would agree that you shouldn't focus too much on finding the perfect tutorial before diving into your project. Figure out your problems and research them as they come, rather than doing 100% of the theoretical framework first.

I personally found [The Node Beginner Book](http://www.nodebeginner.org/) to be most helpful, but I'm sure your mileage may vary.[deleted]"
2012-03-13 01:56:44;Why node.js is cool (it’s not about performance) [x-from: /r/programming];"I think this post nails it. I watched Ryan talk about why he chose JS at some point and he mentioned that it was easier to write completely async code because everything could be written from the ground up that way. There wasn't a culture to change (a la python and Twisted), there was nothing.With the introduction of cluster as a core module, I disagree about difficult multi-core code. After 30 mins of reading the docs I put together a module and now I just need to do this:

    var clusterForker     = require('clusterForker');

    clusterForker.execute(function worker() {
      // your worker code here.
    });

and now my worker callback is running on as many cores as I have. It's that simple. The code itself is only 70-odd lines, handles killing workers when the master dies and respawning workers if they die unexpectedly.

I'll throw it up on github if it sounds interesting."
2012-03-10 21:47:04;A very minimal JS T-Shirt you may like to have one!;"I bought one, please upvote/buy to make it happen.Please **upvote** and help us reach the goal. Thank you!
"
2012-03-08 20:03:02;Roll your own Node.js powered URL shortener and deploy it to the Heroku cloud [Tutorial];My first public/open-source web-app. My first tutorial. Please be gentle. :)Here's another really simple URL shortener that I wrote. The cool thing about is that it's less than 40 lines of coffeescript: https://github.com/davej/tinchy.js/blob/master/tinchy.coffee
2012-03-20 06:50:44;node.js firebird driver 0.0.9 released (tagged);
2012-03-20 01:44:20;App Check-in Server. A server side of a check-in service used by an app. Implemented in node.js. (Only my second node app.);
2012-03-20 00:28:17;Bypass a school filter and access reddit with a node.js proxy(?) server?;"http://msworddit.com/

**Disclaimer:**  I work in schools & tech and part of my job is developing tech that stops you accessing sites like reddit.  I don't want to sound like a dick but education is really important, please don't waste the best years of your life on Reddit.That's way more work than needs to be done when you can just create an ssh tunnel http://www.revsys.com/writings/quicktips/ssh-tunnel.htmlYou're overthinking it. The API doesn't need to be involved at all. All you're doing, at the heart of it, is sending an http request to a server you own, which then sends the same http request to reddit (or wherever). Reddit then sends a http response to your server which sends it on to you.

If you can access the proxy settings of whatever computer you're on, use this: http://www.catonmat.net/http-proxy-in-nodejs/

If you can't, use this: http://www.glype.com/http://www.squid-cache.org/"
2012-03-19 18:17:31;NodeUp:Fifteen (A Node.js Podcast);"I'm sure this Mikeal guy is a genius and everything, but is it really necessary for him to interrupt and contradict the other guy (was that Isaac?) every 3 seconds?
Anyway this Domains idea, is it something like:

    var domain = require('domain');
    var http = require('http');
    var fs = require('fs');

    domain.handleError('fsdb', data, function(err) {
      console.log('There was an error updating thing #' + data);
    });

    updateThing = function(id, data, callback) {
      domain.run('fsdb', id, function() {
        var options = { host: 'things.myserver.io', port: 80, 
                        path: '/update?id='+id+'&v='+data.new};
        http.get(options, function(res) {
          fs.writeFile(data.fname, data.file, function() {
            callback();
          });          
        });
      });
    }
So something in fs and http makes it call domain.handleError with the details if there is a problem with the request or file write?
Forgive me if I am completely misunderstanding or if this is a bad example."
2012-03-19 17:19:53;Exit after callbacks?;"See the async module and it's various flow control helpers.  You probably want parallel() in this case.  https://github.com/caolan/asyncI'm written various little command line thingies that mess with a database.

Don't forget to close your database connections when your program is done, or node.js won't know to end the process.

(calling process.exit() is almost always the wrong way to end a command line script.)

"
2012-03-27 12:55:52;GeddyJS MVC framework for Node returns. Now with Twitter Bootstrap out of the box.;"Looks pretty cool.  I'm gonna do the tutorial and see how this works :D!\

EDIT:

after doing the tutorial and doing some of my own tweaks I am really excited.  Geddy has a ton of potential. I am just hesitant to switch my projects over completely since I am not sure how much geddy will change in the futureAnyone have experience building applications this? Looks promising (more so than Persevere)."
2012-03-27 11:27:27;How to get POST data from stdin with node-cgi;"> But what's the most appropriate way to read the POST contents from stdin given this module?

You'll need to parse the HTTP headers, and the body, and everything. I don't know whether node's [HTTP module](http://nodejs.org/api/http.html) exposes its parser.That is absolutely the excellent searching site I’ve seen. It had been entirely easy to comprehend and it had been simple to look for the info that i required. Great page layout and beneficial information!
<a href=""http://www.insanity-60dvd.com/"">insanity</a> 
<a href=""http://www.ergobabystore.ca/"">ergo baby carrier Canada</a> 
<a href=""http://www.ergobabybackpack.ca/"">ergo baby canada</a> 
<a href=""http://www.ergobabystore.ca/ergo-carrier-sport-c-6.html"">ergobaby sport carrier</a>
"
2012-03-25 19:53:19;Why Node.js streams are awesome;wouldn't it be easier to just create a zip after the gallery is created and upload it to S3 as well?
2012-03-22 00:39:25;(french) Structurer une application Web avec Express et Node.js;Technical resources about node.js are pretty hard to find in French, which is one of the reasons why I started this blog (mostly about node, exclusively in french). Hopefully I'm not breaking any rule about posting a non-English article in this node subreddit.[/r/programmation](/r/programmation) :)
2012-03-21 04:12:08;ActionHero.js reaches V1! Framework for http and raw TCP (and cluster support);
2012-04-03 17:40:22;Using Passport for OAuth with Force.com;
2012-04-03 09:41:45;"Node.js on Windows with performance 
tests";"Wow, I really need to try out the Microsoft Web Platform Installer. Site seems to be down?Wouldn't the benchmark graphs be a little more useful with a concurrent request count on the X axis? As it is, it seems like they're essentially capturing one number and a little bit of noise around it.Using the Web Platform Installer is needlessly complicated.

Just go to nodejs.org and download the MSI, run it, and you're done.

See how easy that was? Just one sentence and I also didn't need any pictures."
2012-04-02 17:42:05;Yahoo's Node.js-based Mojito framework is now open source;"I'm curious:  is there something about this framework that is compelling enough to make a developer or a team of developers buy into the whole Yahoo stack?

I skimmed the docs, didn't see anything that I couldn't find elsewhere without the learning curve and/or baggage.
The biggest problem with this framework is that it's from Yahoo.  A dying company, with unknown goals, and an uncertain future.  They're suing Facebook for infringing their patent for displaying a newsfeed for fucking sakes.  The management must be snorting so much cocaine they have no idea how lunatic and desperate this company appears.

This framework might be nice or whatever but I won't use it simply because of the company that's funding this project.I still think pipes is an awesome service"
2012-04-02 12:20:05;implement.js : Strong type-checking for dependency injection and method arguments.;
2012-03-29 19:33:46;I just finished writing a tiny mongoose based authentication middleware for Express. Let me know what you think;Interesting. Have you tried extending via auth services like twitter/facebook/browserid? Where would you start?
2012-04-10 15:52:21;node-linq: Manipulate data like a wizard - Asynchronous LINQ implementation;[deleted]
2012-04-10 02:22:41;response to a node skeptic;I found this blog post interesting in an unexpected way.  Good on you,
2012-04-09 18:30:49;NodeUp's JSConf Recap (A Node.js Podcast);
2012-04-05 10:31:16;DeltaQL - a NodeJS datastore whose query results never get stale;
2012-04-04 20:04:02;Deploying node.js apps with Capistrano (yes, it is fairly painless!);
2012-04-16 15:51:21;Nodejs performance inside a try/catch block;"Try and not put performance critical code directly into the try/catch block; Instead, place a single function call in there which executes the desired code. The function itself gets optimised by V8 and exceptions will still be caught. (sanctioned by +[Vyacheslav Egorov](https://plus.google.com/111090511249453178320/about) )A better benchmark would be to actually do something in the loop or if statement. "
2012-04-16 04:58:48;backbone.js Model sync and Server-Side Controllers in Detail;"OP, are you the author of this piece? Could you explain the following:

>Another nice side-effect of using backbone.js at the client is the fact that backbone.js models map onto standard endpoint signatures and as result tend to normalize server endpoint signatures.

Great article. I get the sense we are at a very influential time."
2012-04-16 04:06:04;Node.js Framework Author Throwdown;FYI if you scroll down (trackpad) in safari and let it rubber band back into view the right side content gets hidden. Happens in the footer too.
2012-04-13 17:46:55;A vocal minority;You talkin' bout fibers?I think he used this mailinglist thread for inspiration: [How to avoid callback hell](https://groups.google.com/d/topic/nodejs/AiBJFuBMPls/discussion)Please don't tell there is something wrong with using Mongolian Deadbeef?  It is less asyncy but I think the parts that count are not blocking.
2012-04-12 20:39:59;Pane: Create native desktop apps in node and HTML5;[deleted]Is it going to work on Windows and OSX and if so how?Nice, but how fast is it? 
2012-04-24 12:14:41;Making an MMO in 48 hours;"Superb.  Congrats on doing that.  I suck at 48 hour competitions.Did they have to make the graphics in the 48 hours too?

There's existing tilesets out there, eg: http://telles0808.deviantart.com/art/RPG-Maker-VX-RTP-Tileset-159218223indeed. well done."
2012-04-20 14:32:55;Mixr, As Asset Pipeline for Express;Meh. Nice start but I want something where I can define multiple JavaScript or CSS resources. 
2012-04-19 21:04:54;Take a look at static-site generator I wrote with Node;Saw your post on HN. Very cool, I like how you showcase of a number of technologies.Interesting. Have you also seen [Docpad](https://github.com/bevry/docpad)? You both are doing similar things.
2012-04-18 21:36:55;node-traffik, a middleware for logging page requests into your favorite database;
2012-04-18 21:18:51;Node Version 0.7.8 (unstable) released;
2012-04-30 19:14:38;NodeUp, a toy language show.;
2012-04-30 12:11:31;multi-server continuous deployment with fleet;
2012-04-30 09:23:06;How to quickly start a single-page application with Node.js;
2012-04-27 09:59:15;Formed, a customisable form builder;I wish you posted this a week ago before I manually built all of my forms. 
2012-04-26 10:29:46;Some gifts from Motorola to the Node.js community  Node WebCL, WebGL, and GLFW;I'm not sure what GLFW is but I'm too scared to click at the office!Wow, from what I understand this means the time of true cross-platform gaming is here.. write a hardware accelerated game in one language that will run in browser, on mobile, and on Windows, Mac and Linux. This is too cool.These seem really cool but they have almost no documentation. Even just a list of functions and their arguments would suffice.
2012-05-08 12:32:54;HTTP Server Security Vulnerability: Please upgrade to 0.6.17;
2012-05-08 05:26:06;BDD testing with Jasmine, node.js and socket.io;
2012-05-06 17:51:48;BrowserID: Logging in with BrowserID, Passport and NodeJS;
2012-05-02 21:41:32;A quine in node.js;"That was so cheating.

    function quine() { console.log(quine.toString()) }

Now that's a quine."
2012-05-02 01:13:56;Live login stats for minecraft, (redis/node/socket.io stack);where did you find this?
2012-05-15 17:55:51;Taking Toddler Steps with Node.js – Passport;
2012-05-15 03:38:41;Seeking a mentor while learning Node.js;
2012-05-13 17:28:21;Use NPM's scripts functionality to facilitate pre-run batch operation.;Does anyone know if Heroku supports this? It would be great to be able to run tasks (eg client-side script minification) automatically between pushing to Heroku and starting the app.
2012-05-11 22:23:56;How To Keep Node Modules Secure Using SourceNinja;
2012-05-11 18:40:57;Jinja for Node.js;"https://github.com/paularmstrong/swig

Basically the same syntax, more actively maintained. 3x the watchers and 3x the forks. I don't think the syntax of template languages such as hogan and mustache are much removed from jinja, either.

Personally, I use jade, because I don't like typing out full html, but whatever.This is fantastic!"
2012-05-20 21:00:18;Vein 0.2 released - RPC/PubSub via WebSockets;
2012-05-20 16:17:10;I got sick of all the broken and unstable directory tree watchers, so I made a fast, simple and stable one that works, even on Windows.  Please check it out!;Watch and stats appear to be implicitly declared.Hmm this looks nice! Sorry for the stupid question, JS / node.js noob here: Would I be able to write a callback that calls another program such as sass or fabric when something changes?I wish the file object wasn't just a path string. I wrote a little function to parse the string and break it in to 3 parts file name, relative path and full path. Makes it easier to deal with.Thank you - indeed Mikeal's watch was nice but had an annoying bug where the create event was fired twice - and Issacs code in npm is just ugly to read.  I'll give this one a try as I need some of this functionality.
2012-05-17 17:29:52;Nodo: command line TODO app in Node;"Nice work, thanks, rogeriopvl!

When I make todo lists, I often have links to pages with more information -- for example, one todo might have a link to a Jira ticket.  So a must-have requirement in a todo app for me is support for links.

Fortunately Terminal.app on OS X already gives me the capability to follow links (just learned this today actually).  If you have a link -- doesn't matter what protocol (http:, mailto:, vnc: etc), then Command-double-click (Shift-Command-double click in 10.6 and earlier) to open the link.

Thanks to that little feature, Nodo became very useful for me :)
"
2012-05-29 05:40:02;v8+: Node.js Native Extensions in C;
2012-05-27 13:59:01;Why I Started A Node.JS user group;"Is there a good/commonly used website to find these types of user groups in your area?

I'd love to join these sorts of things, but i don't want to travel a state or two lol."
2012-05-27 09:39:38;node-firebird pure javascript driver is ready for testing;Huh... I thought firebird was a mozilla e-mail client or something.
2012-05-26 07:23:03;Firebird driver for node.js in pure java script;"and by ""java script"" you mean ""javascript"" of course."
2012-05-23 14:43:04;Building a bot with hubot;
2012-06-04 20:59:39;I'm newish to terminal, having a problem;Does `ctrl + c` work?You just need to exit the interactive process you're in. Many REPL-like environments provide an exit command, though IIRC, in node you have to issue a Ctrl+D to exit.
2012-06-04 17:53:07;node-firebird vs node-firebird-libfbclient (pure JavaScript vs Firebird library wrapper);I hated under Delphi. Has it gotten any better?
2012-06-03 12:36:04;rp-compress - Tiny/Fast ASCII text compression;Saw the thread about minifying Rick Astley lyrics the other day, too. Pretty neat you made a module out of it, nice job.Good work.  Those lyrics repeat a lot of phrases though, how does it fair 1) on completely random English words 2) vs gzip?could someone explain to me why (and when) you would actually want this?
2012-06-03 06:44:00;Roundup of 6 Node-based static site generators;
2012-06-12 17:04:48;The State of Node.js Debugging;
2012-06-10 23:16:57;OIC - Node.js/CoffeeScript Component/Blogging Platform -- any feedback on project is appreciated;"> ...I've got a place to put the browser-side code, which is in JavaScript... I'm sorry, it's in CoffeeScript.

I'm sorry it's in CoffeeScript :'/"
2012-06-08 17:22:52;/r/node meet WebMatrix 2:  a free IDE for node.js;"Just trying this out in a VM now. Problem is, I don't want to install all these dependencies just to do Node development. Why do I need SQL server stuff?

Just feels easier to stick with Linux.Beyond the serious Microsoft hate in these threads, this looks pretty good.

I'm doing development on an open source Node.js module at the moment, and we're trying to get it working well on all platforms, so this looks pretty great.  Any plans for integrating any of the Node.js testing frameworks into it (like Vows.js or something similar)?Looks good, too bad I will never ever touch this because of MS dependencies.I got reading this and thinking ""Oh wow, that's cool"", then I remember that VIM exists... and that Sublime Text 2 exists... and that they will run on whatever platform I want.

Plus the whole ""open source"" thing isn't really something I'm willing to part with. Who knows what the heck is going on in the background of a Microsoft IDE. There's something ironic and downright *wrong* about a closed IDE designed for open source development.>Microsoft

You're telling me I should switch to the worst platform for Node development to develop node?Reasons I won't use this:

1. Modules with native dependencies don't work on windows or are a pain in the ass to install
2. Not open source
3. Doesn't do anything I can't already do in sublime
4. A large percentage of node developers don't even own a windows machine so getting them to work for it is a hassle
5. Requires full stack install of MS products

Take it as constructive criticism - it's nice to see MS trying but it just isn't there yet.Microsoft? No, thank you."
2012-06-06 15:11:03;Setting up real SSL with Node.js and Express;"you don't do that. node.js is very, very slow with SSL connections. you use a proxy in between for 443 only. nginx turned out to be the fastest solution while i was testing various SSL proxies and other webservers. it's set up in 5 minutes and does a great job. fyi: the speed over nginx is around 5-8 times faster than what node.js SSL can provide.nice writeup...

I've been using [stud](https://github.com/bumptech/stud) to handle all my SSL - it will handle everything transparently and allow you to forward into the regular port 80.Error in step 5? 

    var dad1 = fs.readFileSync('gd_bundle.crt').toString();
    var dad2 = fs.readFileSync('gd_bundle.crt').toString();
    var app = express.createServer({key: privateKey, cert: certificate, ca: [dad1, dad2] });

seems to just make two copies of the original bundle. Another option might be to read the one file and split it by newlines (or whatever delimiter is used) in memory; something like:


    var dads = fs.readFileSync('gd_bundle.crt').toString().split(""\n"");
    var app = express.createServer({key: privateKey, cert: certificate, ca: dads });

Aside from that, helpful info."
2012-06-06 13:40:04;IISNode Setup;"I have managed to set up node.js on IIS using IISNode, but I have been unhappy with several of the choices made there, particularly that it's impossible to serve root path (i.e. ""GET /"" ) without URL rewriting which is unbearably slow. 

I assume your enterprise requires windows for administrative reasons, which is fine, but I highly suggest you consider dropping IIS entirely or perhaps only to serve static content such as images.

Instead, consider using [NSSM](http://nssm.cc/) to install your node app as a Windows Service. Once you are comfortable with this, look into using [Winser](http://jfromaniello.github.com/winser/) which does a great job of integrating NSSM with Node and NPM.  

*Edit* I only just realized I hadn't asked what your actual problem is. So..... what are you trying to do that's failing to work? "
2012-06-19 18:47:05;Nodejitsu's pricing info just went live.;"[deleted]Not sure how they can have a ""Most Popular"" flag if it only just went live, but OK...

Other than that, it's actually quite a well-reasoned post explaining why there's no free tier. I wonder if my beta account will stay free though?[deleted]Sorry, we do not support mobile browsers yet. Please visit our website on your desktop or laptop computer.

Are you kidding me? (Not this blog post, but any of the linked pages)Why is unlimited $3/drone and not cheaper...? If I'm buying 25 drones I expect to get a better price/drone than if I were buying 1.Or you can just get an EC2 Micro for free for a year, and run your app on there. Would be less hassle, cheaper, you'd have more control. If you've got enough knowledge about you to use this platform, you've got enough to host your own instance.Can you use MongoDB with Nodejitsu?  I.E., is it built in, or do you need to have an account on MongoHQ or something?"
2012-06-14 18:51:51;Library for flexible photo storage by Chute;
2012-06-14 16:38:57;Cachelicious - Delicious Node.js file stream cacher and HTTP cache server;"Interesting.

The ""fast"" section doesn't really tell me much though. 

Perhaps adding a comparative benchmark with connect or express serving files through static / staticCache middlewares would help people understand the kind of performance gains they'd be looking at.

On the other end of the scale, maybe a simple comparison with other popular static serving platforms (nginx) on the same hardware?

"
2012-06-26 14:26:53;My first node project! API for converting things to text. [tools used];"Seems pretty cool and snappy, thanks for posting. I very much love that it can be used as a general purpose text conversion service, and I'll try to remember its existence if I ever need it. 

I'm curious about your architecture, though. I assume you're using node.js to handle the requests and offloading the conversion work to separate processes. Are you utilizing third-party services to do any of the work, or running them yourself?

I also have an off-the-wall idea, just to help put your site (and your nodeing) through the paces. Post this to a main subreddit (just mention it as a new service) and try to get ReDDOSed. See how well Node.js handles the extra traffic. Love the skin - great job!"
2012-06-26 01:19:55;"Bridge: ""A Simple, Robust
RPC Messaging Server""";
2012-06-25 22:40:53;Ideas for a node (v0.8) project?;"My friend and I are replicating a board game.

Server side: MongoDB - Express - Socket.io

Client side: the usual suspects (HTML/CSS/jQuery) - backbone (if needed)

We are still hammering out a few issues but I believe this exposed us to some of the more prominent technologies employed in a typical webapp stack (Please correct me if I am wrong)."
2012-06-25 15:43:17;Node v0.8.0 is out (with HUGE speed improvements);"okay, am i the only one jizzing in my pants around here?[deleted]new child process stuff is glorioussounds awesome!
I'm a node newbie (only ever worked on 0.6), and have never upgraded to a newer version.
What would be the correct way to upgrade node? Through apt-get or npm? (I'm on ubuntu)Did anybody else experience an explosion in packages to download when updating via NPM?  Is this odd?  I want to make sure this isn't a glitch on my end.Yo Dawg, I've heard Node.js is blazing fast at ""Hello, World"" benchmarks - http://i50.tinypic.com/ibg8cp.jpg

> Aleph is a Clojure framework for asynchronous communication, built on top of Netty and Lamina."
2012-06-23 14:51:23;Simple zombie.js app failing, what am I doing wrong?;"Never used zombie.js but have you tried giving the submit button the id of ""submit"" ? Your other inputs both have ids and I would assume that is how the fill() command is finding them. Give that a shot. It seems like what you have should work; here is some text from the docs:
>To submit a form, use pressButton. The first argument can be a CSS selector, the button/input element. the button name (the value of the name argument) or the text that shows on the button. You can press any BUTTON element or INPUT of type submit, reset or button. The second argument is a callback, just like clickLink.

My only guess is that the input type is ""image"", not ""button"" or ""submit"". Maybe try using clickLink(""submit"", callback) instead?You might try phantomjs if zombie won't work."
2012-07-03 01:49:37;pulsar - EventEmitter/PubSub via WebSockets;Are there any significant differences between this and socket.io?Server example has a typo... Makes me wonder what kinds of typos/bugs might be in the actual code... 
2012-07-02 23:50:22;Setting up Node 8.1 with Express, Stylus and Jade;
2012-07-02 20:03:26;Google IO video presentation about optimizing javascript code to run faster on V8;thanks for sharing!
2012-07-02 19:36:00;OAuthorize - Implement OAuth 1.0 servers in Node.js;How secure is this? Would it be a good idea to use in my own app?
2012-07-02 10:35:22;Looking for advice regards less.css and sass as well as semantic;"Bootstrap does not support less but is built upon less. So if you want to use Bootstrap it would not be wise to use another css preprocessor, because you would have to convert the bootstrap source files.

What is semantic.js?"
2012-07-10 19:33:23;A Massive NodeConf Recap (w/ isaacs, dshaw, visnup, substack, and mikeal);Link is broken, gives a 404.
2012-07-10 15:46:05;Mubsub: Pub/sub for Node.js and MongoDB;
2012-07-10 08:23:23;Has anyone tried to integrate jquery with node.js+express boiler plate;"First, I don't see that you actually have a script tag including the datepicker itself... just jQuery and jQuery UI. That might be your problem. The datepicker is not included in the UIs package, at least when I set mine up a couple weeks ago it wasn't. (This is what I used http://trentrichardson.com/examples/timepicker/)

Also, why are you using that boiler plate setup that has not been updated in 11 months? In terms of nodes life span, that is incredibly old and probably very out of date. It actually has packages (at least one anyway, hoptoad) that the author has depreciated. 

I would recommend you try to build your own set up. You will learn far more that way and be more confident making core changes to any package you may use in the future.


"
2012-07-07 05:34:00;What is the best way to REALLY understand Node?;"O'Reilly's [""Node up and running""](http://shop.oreilly.com/product/0636920015956.do) has some good and broad coverage.

I will say that it's damn hard to find good Node tutorials and walkthroughs that are more than ""here's a 1-file app that's that's nothing more than a model or two at most"".

Message me and I'll be happy to Skype and walk you through my Github projects and see if anything looks interesting to you or worth a deeper dive. pick a project, do it. 

learning by doing. 

at the same time have #node.js open to ask if you have questions. 

books are good but will get you only so farThis question is very zen.

But really, I'm also a fan of the pick a project and go method.Node development is a ""way of thinking"" as much as anything. You need to develop a lot of practice apps just to get your mind around it. 

ORA's ""Node up and running"" was ok, but like most of the ""up and running"" series feels rushed and incomplete. There are two books coming out from ORA soon ""Learning Node"" which is fairly good (so far) and ""Programming Node"" by Travis Swicegood. I am particularly excite about the latter. He wrote an excellent book on Git which shared that same ""way of thinking"" difference from its predecessors, that book was excellent and helped me get into the Git mindset. I have every expectation his node book will do the same."
2012-07-06 23:22:15;New to node.js and asynchronus programming -- I can't get past some simple concepts.;"Conceptually, the difference is in ""who"" is doing the listening...  You touched on the right concept when you said ""I could just ask the phone state every X seconds..."" but you've got it reversed.

The client (browser in this case) subscribes to be notified of updates so rather than polling, the server is notifying when the state changes.  In this case that notification takes the form of an emit event.

Given your example, on client connect, you would do two things.  First, you would get the current state of the phone system.  The second thing you would do is subscribe to updates.  In this case, you might get a ""all OK"" on your connect and then be immediately notified of an ""on call event"".

The trick here is not to try and jump to the actual state in instantaneous time (the race condition you described) and to just take each event as it comes.  With async programming, there is always a ""limbo"" state when things aren't in sync.

It's best to describe ""real-time"" in async programming as ""near time"", rather than instantaneous, which is what you're most likely used to with traditional linear client server programming.

I wouldn't say that this isn't an example of what async programming isn't for, but rather that you might need to adjust your thinking a bit to accept what near-time means in this context.

Hope that is helpful.


 If you send another socket.io message immediately after the first one, I am fairly certain that it WILL arrive after the first one.  That's dependent on the specific way that socket.io works, not Node.js.  Its sending out TCP messages which are ordered.  If you really think that they might get out of order somehow (not sure how) you can number the messages and ignore any that have a lower number than the highest you have received for that type of message.

I use node.js quite a bit and I don't know what you are talking about when you say thread pool.  As far as I am concerned as a developer using Node.js, Node.js doesn't have threads.  The underlying implementation may use them, but I don't see them and as far as my programs are concerned there is just one process.  

It all runs in one process and only one thing can happen at a time.  Therefore you cannot have race conditions.  The way that it handles lots of different simultaneous I/O is by using non-blocking I/O.

If you are using socket.io, then say that and discuss in terms of the way that library works.

I don't use socket.io anymore, Now.js is more straightforward (its built on top of socket.io).

What queued events are you talking about?

Exactly how are you reading the phone system log and what format is it in?  Link to your code or at least snippets.

If you are reading the phone log file multiple times based on messages from different clients, don't do that.  Instead monitor the file and read the new information from the end just once each time it changes.  Then keep that in memory and send updates based on the data in memory.

http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener


This is actually very similar to a problem I've been working on, also using Node and Socket.IO (but it's a general problem). To first put it outside of a Node context, think how you would solve the problem if you needed to do an AJAX request to an entirely separate service to set up your interface (your ""initial state"" event), and you know that that service might report stale data. Now, this service could be on a PHP or Rails server for all we know, and we could poll it repeatedly to see if there are any updates since we last polled. Node makes long-running connections a lot more easy, but the problem still remains.

So, back to the problem at hand. You could set up a subscription first over Socket.IO to get updates, _then_ you would query for the ""initial state."" Until you get the initial state, just buffer all the incoming messages. Then, when the initial state comes, merge all the incoming messages into that model... some may be included in that state, some may not. Now you've got an [operational transformation](http://en.wikipedia.org/wiki/Operational_transformation#Basics) problem at its core.

Now, operational transformation can be very hard to get right - take a look at the Google Wave codebase if you want to see a complicated way to do it, IMHO needlessly complicated. But operational transformation can be easy when every event has an ordering number (including your initial state)... simply apply everything in order, and overwrite the existing state. You might be able to use a timestamp. Alternately, if you're lucky enough to have only a single server originating messages, just keep a single incrementing in-memory counter on that server. Node.js is single-threaded so you don't even need to worry about atomicity!

TL;DR: assuming that each message, including the ""initial state"" message, is in order...

    on initial state
      get all updates with order-numbers greater than the initial state's order-number
      sort them by order-number
      overwrite initial state
It depends on where the queuing happens. The order is not dependable if it's coming off the network and the queueing happens in the thread pool that handles I/O.

However, events on a single socket happen in order, so you can rely on that; events emitted internally are emitted in order, too.

So where do these events come from? Do they happen based on a single source? Multiple? Do those sources coordinate.If your ""client"" is a web-browser, you should look at [Socket.IO](http://socket.io/)

Emitting and receiving events between the client and server becomes really stream-lined, and it's all done in real time.

You can set up your server to emit its current state to the client whenever it changes, and emit its state to the client whenever the client asks for it."
2012-07-17 17:43:03;Pocket NPM - An android app to search NPM on the go (3.0+);"> This app is incompatible with your Verizon HTC ADR6300.

Wat?

(ADR6300 = HTC Incredible)

Edit: Okay I guess the title DOES say ""3.0+"" - but.. why??"
2012-07-17 16:36:35;Need some help on fetching XML feeds with HTTP.get and HTTPS.get;[deleted]I can place more files into the Gist if anyone wants to replicate this, but the cache package is not required to get the error.
2012-07-15 08:53:07;Express, CoffeeScript, Jade and Stylus using Skeleton;"I hate that he didn't do his research when naming the Skeleton project, as theres already a popular project named [Skeleton](http://www.getskeleton.com).dat whitespace

Honestly, not a big fan of either, though I'd be interested in hearing from others if they think CS/Jade/Stylus has made them more productive."
2012-07-14 06:39:06;Don't mess with a node.js c0d3r;
2012-07-13 20:07:05;Guide to deploy node.js apps to AWS from Mac OS X (I) | Javier Manzano's Blog;"Just remember: EC2 is ephemeral, EBS is ephemeral; gods help you if you're storing state (writing to fs, storing a database) on it. Heroku is nice since it enforces all those conventions---but you pay the price for that. If you just want a ""server in the cloud"", I'd suggest going with an actual virtualized server (like Rackspace, etc), than EC2.

I would add to your EC2 instance: a startup script that automatically associates an EIP to your instance, grabs environment variables out of SimpleDB,  pulls down the latest stable code from your repo and starts the process(s)--and bundle that as a private AMI.

Of course, if that seems like overkill,  go with Heroku since if your project scales to the point where you can afford a SysAdmin... That's what they're going to have you to do anyway (or some flavor of that)"
2012-07-24 08:25:28;Javascript data structure library recomendations?;"[This](https://github.com/mauriciosantos/buckets/) might fit your bill.  I'd be curious to see the cost of implementing traditional structures in JS vs mimicking functionality as cheaply as possible on top of the native structures.

Intuitively, I want to say that using a plain key/value object for storage and a companion array of keys to enforce order is likely to be faster and less memory intensive than anything homegrown, but I don't have the data to back that up.

Additionally, if you're targeting node/v8 only, you may be able to leverage the fact that the keys returned in Object.keys() or in a for/in loop are in the order they were first set. That's generally not portable, but if it happens to fit with your use case, it's likely to be the fastest/cheapest way to do things.
I've decided to go with [google closure](http://closure-library.googlecode.com/svn/docs/index.html) via [nclosure](https://github.com/gatapia/nclosure). It has avl trees. And **a lot** of other stuff too.

If you want a list of objects in order then why not just use Array.sort?

What exactly is your application?

You may have a really good reason to do that, but then again, maybe not.  I think there are a lot of people who get confused by computer science courses that aren't always relevant to a lot of common contemporary programming problems since most of that stuff is already implemented by modern tools and frameworks.  Or they are optimizing things that don't need to be optimized.


"
2012-07-23 00:54:14;How can I store a string in a SQL database?;"The data should be transferred via a POST request to some URL to your server, which will cause your application's router to signal a callback function to insert the data from that POST request into your database.

The routing framework most commonly used is [Express](http://expressjs.com/), simply because it contains a lot of built-in goodies like body parsing and template rendering too.  In Express, to do something like that, you would have code like this (using node-mysql):

    var express      = require('express'),
        mysql        = require('mysql'),
        app          = express.createServer(),
        connection   = // set up your MySQL connection here;

    // Express middleware to parse the JSON data you POST
    app.use(express.bodyParser());

    // Set up the POST route handler
    app.post('/users', function (req, res) {
        connection.query('INSERT INTO users SET ?', req.body, function (err, result) {
            if (err) throw err;
            res.send('user added to database with ID: ' + result.insertId);
        });
    });

    app.listen(3000);

This assumes that you have some sort of 'users' table with your MySQL database with a column 'name', and that it uses some sort of auto-incrementing counter for the user ID.  On the client side, you would just use $.ajax to POST to /users with data in the format:

    { 
        'name': 'clarle' 
    }

Where each key in the JSON data you POST will correspond to a column in your MySQL table.  It's pretty straightforward, but let me know if you have any other questions. :)Start here and let me know what you don't understand:
http://stackoverflow.com/questions/5710358/how-to-get-post-query-in-express-node-jsI'm a big fan of http://www.sequelizejs.com/
It's a great, simple ORM"
2012-07-22 00:15:11;Rivet - Efficient task-based build tool using Node.js;
2012-07-18 19:43:19;Use Node.js in a Java legacy application (Struts1);I don't really understand what you're trying to do here... Are you trying to implement a web interface for looking at your Java application's log output?  If so, you might want to look into something like Splunk.
2012-07-18 18:42:23;Simple coverage - without touching disk;"Solved! [**cover**](https://github.com/itay/node-cover) is exactly what I want, and clearly inspired by [coverage.py](https://bitbucket.org/ned/coveragepy/). I'm gonna fiddle somewhat with the options, but it looks great (now if only it could generate the HTML report without needing the intermediary report on disk).Its not as nice, but the internal v8 profiler is always an option. It touches the disk though
"
2012-07-31 12:40:42;"Experimenting with Node, Socket.io, and Phonegap - real-time accelerometer data
      - YouTube";Pretty cool.nice! i've been working on a plugin for phonegap that provides native websockets implementations in case the browser version isn't very good https://github.com/maxogden/cordova-ios-socketrocket[deleted]
2012-07-30 14:10:24;Automatic Minification with Node.js and RequireJS;"I just wish RequireJS would go away :s.. it's rather tempting, but frankly using a compiler like Browserify has proven (to me) to be far more usable and likable.. not to mention consistent with my Nodejs code, which is the most important thing to me.

RequireJS seems like a bunch of work to do something that will eventually be in the JS specs by default (i'm not sure if ES6 has a importing proposal or not)

**edit**: My apologies for coming off rather harsh, these are just my opinions."
2012-07-29 21:18:30;An Introduction to libuv;
2012-07-29 11:03:44;Mastering heroku app deployment;
2012-07-29 08:24:49;Did any of you guys tried node on openshift?;
2012-08-07 03:49:12;Node and Express Tips;Great article.
2012-08-06 15:39:29;Minecraft + Node.js + Socket.io = Awesome;I tried to do this kinda stuff about 8 months ago but there wasn't a good module for it and I didn't wanna dive into the minecraft world binary format. you should release this so people can hack on it! nobody really cares about code quality :)
2012-08-04 02:17:43;ProtoSock: Framework for creating websocket-based protocols (with fallbacks);
2012-08-03 16:26:31;Like Unix Expect: Automate Command Line Programs in Node.js with Suppose;
2012-08-03 06:50:30;Simple Memcached server in Javascript with 100 lines of code;"Hah, that is pretty awesome :)

Have you tried to benchmark it with something like [mc-benchmark](https://github.com/antirez/mc-benchmark)?

Also I don't see any of the increment/decrement stuff, and I also don't see the flush_all command.Hi guys,

I am studying node.js. It is a wonderful utility to write network-based application.

Now, I have written a memcached server using node.js. You can have a look at https://gist.github.com/3244607

I tested the program, and found it could reach 12000/s throughput. However, during the test, I found sometimes the speed suddenly decreased due to the GC pause from my mind.

Is there a way to improve my code ?

ThanksHi guys, I have updated the code. Now, it is not just a memory store. With LRU code added, it become a real Cache Daemon. 
You can review the code here: https://gist.github.com/3291755

Any idea to improve the LRU algorithm or memory management, please let me know, Thanks.

"
2012-08-14 23:26:10;Node.js and graph databases;"You're overestimating how many people use that tech combo (nodejs + neo4j).  Both are still bleeding edge enough that you may be among only a few dozen people in the world who will have even tried using them together.  After a few weeks and a few blog posts and you might even find yourself an authority on the subject.If you're going to work with a graph database, I recommend going for one with a built in reasoning capability (this was one of the things that allowed Watson to kick ass in Jeopardy).  Using a graph database that doesn't have reasoning or semantic capability is like kayaking on flat water.  Sure, you can do it, but you would have been better off in a canoe or row boat.  If you want to play with a kayak, go into territory that other boats can't handle: whitewater.  

In the case of graph DB's, the territory that other databases can't handle it is in storing the output of NLP tools as structured, query-able data.  Querying natural language is the holy fucking grail.  

Check out Stardog.  (www.stardog.com)  It's much faster than the other graph databases i've messed with.  It isn't free, but if you contact the owner of the company, I am positive he'll hook you up with a free copy to develop with.  It's a tiny company, but his stuff is being used in the banking sector.  

Node is actually ideal for this, due to the fact that queries of a database with built in reasoning can take a while.  You'll get some results immediately, but other results will continue to trickle in.  This is where callbacks will come in handy.  "
2012-08-14 19:46:41;BatchFlow: Easily batch process collections sequentially or in parallel in JavaScript/Node.js;I would love to hear why you think async does too much.> Why don’t I use the wonderful library async? Well, `async` tries to do way too much. I also suffer from a server case of NIH syndrome. Kidding, or else I’d rewrite Express.js. Or, am I? Muahahhaa. `async` syntax is also very ugly and not CoffeeScript friendly.
2012-08-11 21:03:16;Testing API endpoints with Frisby.js;
2012-08-11 13:34:34;Testing a Node.js API with Mocha, Async, and Should;
2012-08-08 05:40:43;Thread Alternatives for Node v0.8+?;"Node.js v0.8 had [major improvements](http://blog.nodejs.org/2012/06/25/node-v0-8-0/) to the cluster module, which is now really powerful.

It's very easy to use (the API remains effectively the same as v0.6), but the underlying code has been completely rewritten.  It's definitely worth checking out if you're doing any sort of high performance Node.js work.I use separate node.js servers.  I was thinking about trying out Web Workers or something.. are you sure that won't work?

Anyway, a separate process works fine.  And I definitely would not assume that you need to worry about a queue.  I would say test for evidence that it won't work without your explicitly implementing a queue first before getting into that.

One easy way is to just use Express and POST data.

Another easy way is to use dnode.

Express can't lose its connection since it doesn't maintain one, so that is a plus, although that probably isn't really an issue.

The cluster thing might be better to use now though, although I haven't used it.  I wonder if the messaging between master and workers is any faster than say dnode or http (it might be).

What exactly are you processing (curious)?


[deleted]i personally have my main thread open a new copy of itself, do the time consuming activity, and then respond back to the main thread with the relevant outputs"
2012-08-19 16:31:18;1M concurrent connections;i want to see how he spawned 500 ec2 instances.
2012-08-16 14:15:01;Making a Node.js Command-Line Utility;
2012-08-15 15:47:43;Can this be done in Node?;"Yes it can. have a look at node cron https://github.com/ncb000gt/node-cron. It should get you where you want to go.>doesn't need to go in an interval

Node cron might be good but..  if its every few minutes, then what is actually wrong with just using an interval?

    setInterval(cleanUpDatabase, 3 * 60 * 1000); //clean up database every 3 minutes

You might (or might not) want to put that cleanup code in a separate code file and run it as its own process.

Also you might consider just using a regular cron job, although that can be a pain in the ass with file permissions, paths etc.



  
You should use a job queue to achieve that (that gets really interesting when you start to have multiple kind of jobs). **Kue** does that really well ! https://github.com/LearnBoost/kue The api is really simple (in your case, look at the delayed jobs), and it even provide a web interface to track your jobs. There's one drawback, you must run a redis instance (just use something like redis-to-go). Because of the event-ed nature of node, a running client can handle both requests (web) and do its own internal tasks (perhaps in a loop with setInterval or setTimeout).  There are 'tasks' in actionHero can be set to fire evey n seconds https://github.com/evantahler/actionHero"
2012-08-28 16:00:09;Reverse proxy connect module for 3rd party sites -- It's like a server side greasemonkey;
2012-08-27 18:40:25;Why platform specific package systems exist and won’t go away;
2012-08-27 08:53:15;Resource Reflection in Flatiron;
2012-08-24 20:16:45;BatchTransform: Easily process and transform/convert files.;
2012-09-02 21:41:52;App.js file generator - Tool for learning Express.js;
2012-08-31 01:35:18;The way I write my code is probably godawful, and I'd like some help.;"Tips:

1. Return when you encounter an error instead of using if/else, kills a level of nesting.
2. Use redis.multi() where possible. Since your game is fucked anyway if Redis goes down, might as well combine those last 2 sets to kill more nesting.
3. Break stuff out into separate functions where possible.

1 & 2:

    validateNickname(nickname, function(err, message) {
      if (err) return socket.emit('error', err, message)
      redis.hset('players', nickname.toUpperCase(), nickname, function(err, reply) {
        if (err) return game.databaseError(socket)
        if (reply == '0') return socket.emit('error', 'nicknameTaken', 'Sorry, that nickname is already in use. Please try another one.')
        var multi = redis.multi()
        multi.hset('socketID', socket.id.toString(), nickname.toUpperCase())
        multi.hset('whereIs', nickname.toUpperCase(), 'lobby')
        multi.exec(function(err) {
          if (err) return game.databaseError(socket)
          socket.join('lobby')
          socket.emit('ui', 'moveToLobby', nickname)
          socketio.sockets.in('lobby').emit('lobby','numPlayers',numPlayers)
        })
      })
    })

1, 2 & 3:

    validateNickname(nickname, function(err, message) {
      if (err) return socket.emit('error', err, message)
      redis.hset('players', nickname.toUpperCase(), nickname, function(err, reply) {
        if (err) return game.databaseError(socket)
        if (reply == '0') return socket.emit('error', 'nicknameTaken', 'Sorry, that nickname is already in use. Please try another one.')
        moveToLobby(socket, nickname)
      })
    })

    function moveToLobby(socket, nickname) {
      var multi = redis.multi()
      multi.hset('socketID', socket.id.toString(), nickname.toUpperCase())
      multi.hset('whereIs', nickname.toUpperCase(), 'lobby')
      multi.exec(function(err) {
        if (err) return game.databaseError(socket)
        socket.join('lobby')
        socket.emit('ui', 'moveToLobby', nickname)
        socketio.sockets.in('lobby').emit('lobby', 'numPlayers', numPlayers)
      })
    }
I also suggest looking at https://github.com/caolan/async
To help with the nested-ness of the code.If you're having to nest multiple callbacks, use something like [async](https://github.com/caolan/async)---use the [waterfall](https://github.com/caolan/async#waterfall) method if you need to use the values in your next call, or use redis.multi() (or async.series) if you just need to make multiple calls.

Also, what insin said.http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742
Use async for the ridiculous amount of callbacks you have.
Look at some examples on proper form.
Always define all variables at the top of a function. Use closures.  It is a best practice to use var as least as possible.
Example with proper structure; https://github.com/Thuzi/facebook-node-sdk/blob/master/fb.jsI agree about naming the redis client redis.  Anyway, to make things easier, I like to use CoffeeScript, indent two spaces, Now.js instead of socket.io, and Mongo (with the Mongolian Deadbeef module) instead of redis.  Redis is cool and I am using reds and redis for a full text search thing in one of my projects, but Mongo is more straightforward.  Now.js is also a little more straightforward than socket.io I think.

I would do something more like this (probably needs at least one or two error checks, I know):


    Mongolian = require 'mongolian'
    dbserver = new Mongolian
    db = dbserver.db 'cardgame'
    game = require './game'
    express = require 'express'
    app = express()
    server = app.listen 8080

    nowjs = require 'now'
    everyone = now.initialize server

    moveToLobby = (user, nickname) ->
      lobby = nowjs.getGroup 'lobby'
      lobby.addUser user.clientId
      user.now.moveToLobby nickname
      players = db.collection 'players'
      players.findOne {nickname}, (err, player) ->
        player.location = 'lobby'
        players.update {nickname}, player, (err) ->
          lobby.updateCount numPlayers++

    #some more code here for routing, etc.

    user = nowjs.getClient clientId

    validateNickname nickname, (err) ->
      if err?
        user.now.error 'validateNickError', err.message
      else
        nickname = nickname.toUpperCase()
        players = db.collection 'players'
        players.findOne {nickname}, (err, player) ->
          if player?
            user.now.error 'nicknameTaken', 'Sorry, that nickname is already in use. Please try another one.'
          else
            players.insert {nickname, clientId}, ->
              moveToLobby user, nickname
read http://www.callbackhell.comConsistent indentation is very important because it allows you (and us) to parse your code automatically so we can use our brain power to understand the logic rather than the text structure.1. Proper indenting.
2. Once you figure out pyramid makes it impossible to see anything, refactor.
3. ???
4. Profit."
2012-08-30 03:13:30;Presentation on Node.js and NoSQL;
2012-09-10 03:27:30;Production Deployment with node.js Clusters (0-downtime and more!);Unless your DNS goes down.
2012-09-08 04:08:33;Growly: a simple interface for Growl;"Cool that it uses GNTP instead of relying on the command-line tool growlnotify. Good work!Excellent.  I actually have a project I might use this in.Awesome. I'm going to try this out later tonight. Thank you, thank you so much for the plethora of examples. Cool, but why didn't this suit your purposes?

https://github.com/visionmedia/node-growl"
2012-09-07 20:01:29;DumbPubSub - Lets your non-evented apps, like PHP, 'subscribe' to events in your Node.js application;"I hunted around for a similar module, but couldn't find anything. Does anyone know of a different module accomplishing the same task?

I created this for a heterogeneous environment; we have PHP and Node.js running. When the Node.js application is aware of some change in data, I want it to notify the PHP application so it can update cache entries, etc.This and Etherpad Lite = interesting.redis got pubsub - maybe just use that?"
2012-09-07 13:27:36;Skinny Coffee Machine - a simple JavaScript state machine with observers, for browsers and Node.js;
2012-09-06 01:18:13;Nettuts+ screencast on npm;
2012-09-18 19:28:09;Introducing Gith - GitHub WebHooks For Node;This is great! Nicely done.
2012-09-18 11:42:20;Any node.js devs here doing any contract work? My company needs an app written. Estimate 4 months of dev work. Must be a fluent Linux admin, as the app interfaces with th OS quite a bit.;
2012-09-17 14:57:53;Steam for Node.js;"Wow, SteamRE is pretty awesome. I always felt really unhappy with the lack of APIs to interact with the Steam network.

Kudos for porting it to node.js.Maybe cross post into /r/SteamOn the theme of Steam and Node there's also https://github.com/PinionTech/srcds-info"
2012-09-17 05:33:03;Is your code too fast, too readable, or just too good? redeye will fix that!;This is exactly what was looking for!Sample output would be nice. Does it just convert JS to CS?
2012-09-12 15:17:45;Does anyone know of a node framework similar to Padrino for Ruby? If not do you want to help me make one?;"Yes! I'm the author of Locomotive (http://locomotivejs.org/, https://github.com/jaredhanson/locomotive), which builds upon Express in much the same way as Padrino builds upon Sinatra.

Locomotive adds controllers, resourceful routing, and routing helpers to Express, as well as a standard directory layout and boot sequence.  I'd love to see additional, optional modules for other useful features like generators, etc.

The code is well-tested and modular, which makes it easy to contribute to and extend.  Take a look at it, and let me know what you think.  I'd love to get more people involved developing the project.Not to my knowledge. It seems that Padrino is built on top of Sintra; what functionality does it layer on top?"
2012-09-25 15:00:47;naught: zero downtime deployment and clustering;
2012-09-25 14:53:55;string.js;"You should include the script in your own page, so that people can play with it in the console.

Also, from your examples:

    S(['a,b']).s // ""['a','b']""         <-- your example
    ['a','b'].toString(); // ""a,b""      <-- realityLooks cool! I would rename the clobberPrototype method to extendPrototype or something. It should check for existing methods and not clobber them if it does in fact clobber anything. Thanks for sharing this.I think your landing page could do with a rearrangement. Instead of being greeted with all the cool things string.js does, I get an explanation about why you're not extending the prototype. Save that for way down the page and show me some code that makes my life as a developer easier and justifies sending your library down the pipe to my users.I can see this being very handy. Especially in assisting jr devs who don't know regex well enough to implement these types of functions on their own. Granted, it is an excuse for them to postpone learning regex like they should, but in the end these are things almost every langauge/platform has available, so its great to see it in a pretty clean format here. Thanks!I really disagree with the fear of modifying the prototype except for Object, and even then, that's not a problem anymore in modern JavaScript engines.Late to the party, but here are a couple of ideas anyway.

This library creates new objects for pretty much everything.  
It could be mitigated somewhat on ""anything but IE"" JS engines, using `__proto__`

    function S(str) {
      str.__proto__ = BigPileOfStuff.prototype;
      return str;
    }

    function BigPileOfStuff(){}

    BigPileOfStuff.prototype = {
      __proto__: String.prototype,
      method1: function() { return ""blah""; },
      // etc.
    };

Pros:

- cheap, fast  
- less cruft to handle native string methods/length properties, hide the ""new"" in ""new S()"", etc.

Cons:

- no IE support  
- toCSV wouldn't work as is. Doesn't really belong in this library though.

It may be possible to have a fallback for IE that preserve the semantics you get everywhere else, but that might be a little tricky.


Another small thing that would improve performance is to resolve constant checks out of functions. For example, String.prototype tends to not change much. So instead of

     trim: function() {
       var s;
       if (typeof String.prototype.trim === 'undefined') {
         s = this.s.replace(/(^\s*|\s*$)/g, '');
       } else {
         s = this.s.trim();
       }
       return new S(s);
     }

You could do something like:

     trim: String.prototype.trim === ""undefined""?function() {
       return new S(this.s.replace(/(^\s*|\s*$)/g, ''));
     }: String.prototype.trim


*Edit: setting `__proto__` on a string literal gets ignored hard. The S() function would need to wrap it in a new String(str) first, then the resulting object could be messed with in the expected ways. That's a bit less fun since it implies an object creation.Why would I want to use
> S('Hi').length

instead of JavaScript 1.0's
>'Hi'.length

?

I know I sound facetious, but these are the types of questions that make me wonder if a ~4KB library is still overkill and worth including. (Sorry.)"
2012-09-21 18:38:50;A Node Case Study: How collaboration works in a large open source community;
2012-09-21 13:46:34;Deployd: Node.js app to build RESTful JSON API's using a web GUI;"Interesting demo, I would have tried this out for a personal project I'm working on but I had already implemented all the cool parts of this (except for the web GUI) in my own manner.

Ah well, there is always next time.Hmmmm. I'm currently writing something in angularjs and this could be a good way to build my back end. My only confusion stems from the fact that angularjs has built in ways of interacting with RESTful APIs... but deployd also provides a client side script for interacting. I'm not sure which method I'd go with.The api does function(result, err) instead of function(err, result). Did they say why?Can anyone provide some insight on the differences between this and actionHero, or some other API project I have yet to hear about?Hilarious..."
2012-09-20 12:34:26;JavaScript, the everyday language;
2012-10-01 15:18:51;Firebird client for Node in pure Javascript is updated : 0.0.6;
2012-10-01 10:47:15;I need some guidance on a simple Node project.;"Usually it is the other way around, you put a proxy *in front* of Node, and node just serves up what it must. 

Things in the web dev space have become so...interesting...that I wind up just putting a proxy in front of everything and shuffling to different backend servers based on rules.

If you do go this route I recommend nginx as your dev webserver in the front, as it is able to proxy out-of-the-box. Then run apache behind that on some port and node too on another.Sessions are usually stored in cookies and the browser sends the cookies based on the domain. This means that if node-http-proxy proxies the cookie headers to the apache then everything should work fine (and the session is shared between node and apache).

[Wikipedia: Implementation of HTTP Cookies](http://en.wikipedia.org/wiki/HTTP_cookie#Implementation)Some of my primary doubts about this:

* Does this make for a shitty session environment
* Does this dramatically increase the overhead
* Can node handle php/mysql easily, negating why I *think* I need to redirect to Apache
* Is shuffling traffic to a separate server on the same machine a bad practice for any reason I haven't considered.
* Is there a simpler way to get the benefits I think I wantI don't see any reason to do that.  If you want to leave Apache on port 80 then just run express on port 3000 or something like most of the examples.  (Then you just go to http://thehost:3000)

I also don't buy into the whole idea that you shouldn't serve static files with node and instead have to run nginx or something.  Thats BS.  Express serves static files just great.

"
2012-09-30 14:27:40;I gave a short presentation the other day about writing databases with node, heres a video!;
2012-09-29 20:19:45;Getting Started with Poet, a node blogging platform;"Nice work. For anyone else looking, OP has an example of Poet in action at his site:

http://jsantell.com/If you tell me I can import from Wordpress, I am sold. :-)"
2012-09-29 14:13:55;Nodejs.org is down, or gone?;"> Domain ID:D157222203-LROR
> Domain Name:NODEJS.ORG
> Created On:29-Sep-2009 14:50:55 UTC
> Last Updated On:20-Sep-2011 00:04:23 UTC
> Expiration Date:29-Sep-2012 14:50:55 UTC
> Sponsoring Registrar:eNom, Inc. (R39-LROR)
> Status:OK

http://www.quickmeme.com/meme/3r4kl5/

source: http://news.ycombinator.com/item?id=45895638.12.44.238
is the ip for the site and can be accessed from thereIts back upThey forgot to renew it trollolo"
2012-10-09 18:46:51;best resource for learning node.js in my opinion;"I literally just sat down at my laptop, thinking to myself ""Alright, let's learn us some node.js""

I love you, man!love you too, seems to be a great courseI suspect that if you complete the free courses, you could earn enough ""prize cash"" for a free month of Codeschool.

Edit: there's only 4 free courses, so if you do those, you could get at most up to $20 in coupons.

I did the Github and JQuery Air courses and at the end of each of them I got $5 prize cash coupon towards a purchase for completing the courses.  Whether or not it will all apply all at once when I purchase will work or not... I'm hoping it will.I just wish it covered any kind of databasing.  I've hit a wall with mongoose and it's driving me nuts.  Storing values, but they're all returning all undefined properties >:(Sweet jeezus. It's accessible video with closed captioning."
2012-10-08 20:59:09;Firebird client for Node in pure Javascript is updated : 0.0.8 with one enhancement;
2012-10-08 19:00:49;This Time, You'll Learn Node.js: Lesson 2 - Nettuts+ on Blip;
2012-10-08 17:55:41;I'm looking for neat node.js tutorial set;"I enjoyed codeschool's node course, it definitely fits your 'neat' criteria -- http://www.codeschool.com/courses/real-time-web-with-nodejs (not affiliated, just a fan)I'm working on one here, if you're interested.  

It uses Express and Mongodb

http://mikevalstar.com/Blog/103/Coding_with_Nodejs_Part_1_Getting_started_with_ExpressI have some tutorials at

http://www.codehenge.net

I also have an online course at:

http://www.udemy.com/learn-nodejs-by-example/
"
2012-10-08 13:07:50;SHA-3 extensions for Ruby and Node.js;"Note that there's a pure JS version of something that's either sha-3 or very close to sha-3 at http://code.drostie.org/sha3/

It'd be neat if there were a npm module that would inject sha3 support in the builtin ""crypto"" module (conditionally, checking if crypto already knows about a sha3 algorithm), with a dual native+pure implementation (similar to mongojs's node driver.)

That'd allow folks to use sha3 with the same API that will eventually be added in node, and work regardless of one's ability to compile native extensions.
"
2012-10-16 23:55:26;swear - a simple promise implementation for node and the browser;If you're the guy that wrote this, you need to go into a little more depth about the potential uses of this library.  As is, it's underwhelming.
2012-10-16 20:08:11;mixer - a lightweight module/event system (inspired by Stapes);
2012-10-15 17:48:27;Can anyone recommend some good node.js material (not just the official API docs);"codeschool.com has a node class that I haven't taken. Nodetuts.com is great but outdated. However, figuring out how newer versions of node have changed is a learning experience in and of itself. http://nodebeginner.orgDepends on what stage you're at - be sure you're solid with ECMAScript, prototype inheritance, and async programming first before stepping up to coding in node.Personally I find good books is good material. These two seems decent
[Learning Node](http://www.amazon.com/Learning-Node-Shelley-Powers/dp/1449323073/ref=sr_1_16?ie=UTF8&qid=1350333879&sr=8-16&keywords=node.js)
 and 
[Node: Up and Running](http://www.amazon.com/Node-Running-Scalable-Server-Side-JavaScript/dp/1449398588/ref=sr_1_2?ie=UTF8&qid=1350333879&sr=8-2&keywords=node.js)

The shorter one seems to get you faster started. They are both from this year but anyway a bit dated.

This will help with the building aspect.  [Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) are some of the more usefull things to be comfortable with in the programming world.Some common links, as taken from the nodejs Google Group:

Ryan Dahl presentation:
http://www.youtube.com/watch?v=jo_B4LTHi3I

Online book:
http://www.nodebeginner.org/

Other resources

Felix's Node.js Beginners Guide http://nodeguide.com/beginner.html
Felix's Node.js Convincing the boss guide http://nodeguide.com/convincing_the_boss.html
Getting started with Express for node.js http://machadogj.com/2012/5/getting-started-with-express-for-node-js.html 
http://nodeguide.com/beginner.html
http://blog.nodejs.org/ http://howtonode.org/

Express Web Application Framework for Node
http://expressjs.com/

Geddy (another web approach)
http://geddyjs.org/

NPM Node Package Manager
https://npmjs.org/

Other Links:
http://delicious.com/ajlopez/nodejs
http://delicious.com/ajlopez/nodejs+tutorial
http://delicious.com/ajlopez/nodejs+webdevelopmentPeepCode.com  [Full Stack Node js](https://peepcode.com/products/full-stack-nodejs-i) tutorial. 

I've seen and followed many tutorials about node, but this one I 've found to be the best. It will set you back 12$, but it's a small price to pay for such a high quality videotutorial."
2012-10-15 15:02:58;My first node project. An online insult voting system build using meteor.js;I uploaded the code to my github for anyone interested. https://github.com/dfmcphee/instaburn.mePretty amusing. The domain name made me lol. :)Sorry for the repost, accidentally deleted the last one.I'd be curious to browse the source if you have it on github or something.Is the web server also coded in Node / Express?is it just me or am i starting to hate bootstrap themes?
2012-10-12 04:21:40;Utility to Help Research NPM Packages;[Node toolbox](http://toolbox.no.de/) seems like a better option. The signal-to-noise ratio isn't quite as good as the [ruby toolbox](https://www.ruby-toolbox.com/), but it's getting there.
2012-10-22 04:02:49;Using socket.io for a full website?;"Seems like you found some good resources, but yeah - it's pretty easy to add socket.io on top of other stuff.  Specifically you want to look at the express section on the socket.io website:

http://socket.io/#how-to-use

For an example of this, check out this little template thingy that uses chat with socket.io with express:

https://github.com/MicrosoftWebMatrix/ExpressStarter

Hope this helps![deleted][deleted]"
2012-10-18 14:06:55;What does /r/node think of Yahoo's Mojito?;"I got the old XML heebie-jeebies just looking at their sample application.json files and never went any further.I'm working with Mojito right now, and it's a pretty neat framework.  There is a significant amount of structure that it forces you to have, which, depending on how your team prefers to work, can be positive or negative.

It's much easier to work with Mojito if your team is familiar with [YUI](http://yuilibrary.com/), since how models/controllers and the like are structured using YUI modules.  Still, even if you aren't familiar with YUI, it's pretty simple to pick up, though some of the more complex parts of Mojito, such as [composite mojits](http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_composite_mojits.html) and [inter-mojit communication](http://developer.yahoo.com/cocktails/mojito/docs/code_exs/intermojit_communication.html) take some time to pick up.

A good source of information (better than the documentation) I found were the [examples in the Mojito source code](https://github.com/yahoo/mojito/tree/develop/examples) and the [YUI Open Hours](http://www.youtube.com/watch?v=Odn3uXahSfs) that featured Mojito.  It's easier to see how it works from actual applications first rather than reading the docs.

For those that are also recommending Meteor, I've given a [talk on comparing Mojito, Meteor, and Derby](http://clarle.github.com/decks/2012/js-frameworks/), which is a pretty high-level comparison of those frameworks.

If you have any other questions, feel free to let me know!After looking at the Mojito docs, I must agree it seems a bit... dense. I find this surprising because YUI 3, the underpinnings of Mojito, has great docs and examples IMO: http://yuilibrary.com  They might be a better place to start. I know I would be quite lost trying to understand Mojito's code examples without experience in YUI first.have a look at meteor (http://www.meteor.com/), it reached 0.5 and now has authentication, it's quite ready for a spin

"
2012-10-17 00:05:13;captchagen - a native canvas based image/audio captcha generator;
2012-10-25 21:49:41;camera - create readable streams from connected webcams;
2012-10-25 17:07:53;Scraping and parsing HTML with Node;"tl;dr: `npm install cheerio`
Thanks for posting this. jsdom was and is an awesome idea, but a stripped down, non-full-featured dom purely for server-side processing makes so much sense.Am I right to assume that this is considerably faster than jsdom? I've been using that for a lot of regular scraping it typically clocks in between 200 - 400ms to build each dom. 

How does it handle invalid HTML? I've found jsdom to be relatively resilient (at least moreso than PHP's simplehtmldom, where I regularly have to regexp out the valid part, then feed it through).

Also, I like that this separates out the request from the parsing; I've found jsdom's connection error handling to be less than ideal.

I'll give it a shot. "
2012-10-25 15:40:33;Isaac Schlueter, Maintainer of Node.js, Answering Questions on Crowdhall;"Sign in with Facebook or Twitter. *nope.*Or you should just follow him on twitter he pretty much answers all of this stuff just by talking everydaycool site[deleted]""Maintainer of Node.js""? He runs npmjs.org, though he was relatively recently hired by Joyent to work on the Node.js team."
2012-11-05 07:11:04;Node Exception Patterns;"``return``ing an error instead of ``throw``ing it in a sync function is madness. There's no way you can automatically tell that this error is actually an error, and not a valid return statement intended to get at the stack trace.

If you're writing a synchronous function and it can fail at its task, then it *should* ``throw`` to signal that something went wrong and it couldn't complete as expected, rather than pretend that it completed.

If your ""ActionHero"" library can't handle that kind of mechanism, [just copy mine](https://github.com/dfellis/queue-flow/blob/master/lib/queue-flow.js#L599), it's not hard to handle async and sync-style errors in Node.js"
2012-11-04 19:33:13;node-firebird version 0.1.0 -  api changed to conform to what is usually done with node and databases;
2012-11-01 18:01:57;Getting Started with Passport;
2012-11-01 03:09:05;mysql-model: Backbone model for communicating database using node-mysql;~~But everyone knows SQL is *so* 2007 and you're not allowed to use anything but NoSQL!~~
2012-11-13 20:31:37;Weekly selection of useful Node.js links;Was somewhat interested in this, but why does a broken link have 8 upvotes?Doesn't work for me.  Can't connect. I wonder if you used Express with the built in exception handler thing, which doesn't actually catch all exceptions, and then your server died.  Just use process.on 'uncaughtException'I also can't connect to it (Rockmelt and Safari here) :/
2012-11-13 18:35:49;faces - Facial recognition using OpenCV;It looks interesting. Did you do some testing with it?
2012-11-13 17:12:24;Node-Firebird 0.1.1 is released;
2012-11-13 00:04:31;Grunt-Qunit but on multiple browsers-better continuous integration with node;
2012-11-12 04:32:53;Our submission for node knockout. I present you LexiCube.;This is really great! Are you considering open sourcing it? Yep, we will put it up on github. Please vote for us if you enjoyed it! Thanks.I played this last night and really enjoyed it. You got my vote!
2012-11-19 07:37:32;Jugglingdb Firebird adapter is ready for testing;"This is one of things where I'm not sure whether something should be said, or just left alone. I feel like I'm doing the wrong thing either way. So here goes.

Let's see. We have [16 submissions by OP in /r/node on Firebird](http://www.reddit.com/r/node/search?q=firebird&restrict_sr=on). None of them have attracted any kind of meaningful comment, the top contender for that title being [""Firebird. Heard about it forever... never met a soul who has used it.""](http://www.reddit.com/r/node/comments/juxn3/nodejs_firebird_sql_extension_tested_with_latest/c2fdgk2) ( out of a grand total of 4 comments shared across those 16 submissions, none of them from OP.)

And yet those links, apparently all about minor driver releases, consistently get some upvotes.

So... What are we doing here?

Do we have a little firebird community here on /r/node? If so, I'm sure the rest of us would love to hear about you guys and what you're building with this mature yet lesser known database, which stands in contrast with node, a better known, less mature stack.

Do we have folks that just give sympathy upvotes to everything indiscriminately? That's nice. A bit odd here, but not exactly harmful yet.

Anyway, I just thought I'd raise the issue, and maybe finally start some kind of discussion in one of those firebird submissions."
2012-11-17 00:55:48;HashPay (my solo NodeKnockout entry, vote!);"is this safe? what if your twitter gets hacked? Or an app posts using #money?So with my calculations on service costs (5% + $0.39), to send that $3.50 coffee cost to your friend, you need to spend an extra $0.57 on top?

I think I'll just leave the money on the guy's desk.Hey just wanted to say I think this is a really cool idea. Merging stripe and twitter was really creative. Your page has a nice design, too.

I might give the connect button a subtle hover effect? Whatever. That's being picky.

I wish I could look behind the curtains on projects like this one. I have a lot to learn.Nice work.I love the landing page! Of course security is a big issue, though. It would be rather trivial to figure out which users are using your app and then to target them for takeover. Is there an email or SMS confirmation?What does it do?  
I don't see anything clickable.  
Pressing keys does nothing.  
No instructions."
2012-11-15 17:22:45;My Nodeknockout Submission check it out made in 2 day;very cool! nicely done 
2012-11-15 16:42:05;[meta] Question for the users & mods about /r/node CSS;"Yes, the link colors are silly and reddit's default colors are much better.

The :visited color is typically brighter and less saturated (if the background is white-ish) than the regular link color.I think swapping would cause a lot of confusion. Maybe changing the colors altogether would work.I largely disagree. The relative level of brightness between the two is very comparable. If anything, I would argue that the purple is darker than the blue. Not to mention, since a large part of the web uses the blue-to-purple scheme, whenever I see purple I automatically register it in my head that I've visited it.

Swapping the colors would be extremely confusing since people have come to expect blue for new and purple for visited. A new color scheme altogether may work but I have no qualms with the current scheme."
2012-11-14 22:15:20;Testing Node.JS with Jenkins and Mocha;
2012-11-26 14:39:08;JavaScript Platform Weeklly Links - Node.js, jQuery, Javascript;can't access ... yet again :(You always post links to this site and it never actually works.
2012-11-26 13:22:52;Tutorial: Node.js and Express.js - Part I - Getting started: Create your first webapp and REST api;"I always found the scaffolding a bad example of how to start learning Express.js. People should just start with the bare minimum. 

    var express = require('express');
    var http = require('http');

    var app = express();

    http.createServer(app).listen(3000);

That's all you really need to get started. 

I would then explain what express is. ""A stack of functions that gets executed in sequence for every request. These functions are called middleware."". 

I would then show a general middleware example.

    app.use(function ....);

Then I would explain routes and that the router is actually also a middleware which can execute it's own stack of middleware for a given route.

Once they know this you can start working with forms, sessions, etc and explain them you extend your application by just adding a function (middleware) to the stack.

The reason why I would start with middleware is because 99% of the questions in IRC are. 'req.body is undefined what do I do!'. Then they show their code and they either defined the body parser after their router or they didn't define it at all.

I have a little app to help people with this: http://enome.github.com/application-generator/

I also made this awesome diagram for a question I answered on SO: http://i.stack.imgur.com/nrVJQ.png"
2012-11-25 20:28:16;npmsearch - fast npm search with results sorted using both relevance and downloads;You can now [try the online demo](http://npmsearch.docucalc.com/)
2012-12-04 20:40:14;Drop Root Privileges in Node.js after Binding to Port 80;"This is not a good way to do it IMO.

Instead consider using [authbind](http://manpages.ubuntu.com/manpages/hardy/man1/authbind.1.html).

Installation is simple: add the file /etc/authbind/byport/80 that is executable by the user you want to run the app (let's say 'www-data').

Then run authbind as www-data. Here's an excerpt from an upstart script I use:

> su -c 'authbind node server.js 2>&1 >> /var/log/node/app.log' www-data

This simple command runs authbind as the user www-data. Because /etc/authbind/byport/80 is executable by www-data, it can run on port 80 with no root privileges whatsoever. The 2>&1 trash simply routes stdout to a log file.Am I the only one that finds his code snippets unreadable? 

On topic: Serve your node process on a high port (>2000) and then use either `iptables` or `ipfw` to route port 80 to your node app. If you already have Apache or nginx running then use that to forward port 80 to your node app.[deleted]This is absolutely a legitimate way to do it. It is how apache, or nginx, and may other applications/services which need to perform some elevated operations. That is the reason for the original article, he's just doing it the way that you traditionally do it.

I prefer to use authbind to allow non-privileged processes to bind to low ports myself. Although I think authbind is maintained by debian, I don't know how widely available it is.Putting this kind of logic into your program is borderline retarded. This is not the kind of thing that should be part of **any** application's operation."
2012-12-04 11:08:00;request-json : request simplified for JSON use cases;This looks cool, and very useful.  My one tiny nitpick is the use of coffeescript on the github explanation.  Not saying there is anything wrong with coffeescript, but you should call it out when you use it so people don't get confused.  Unless they already know what coffeescript is, there is no way for a user to see -> and know that it translates to function(){}. 
2012-12-04 07:14:01;Command and Conquer - HTML5 v0.6, now has Multiplayer support with Node;"Holy god that lag.

Also -- for someone doing something so advanced, why is the website so shit looking?"
2012-12-03 17:53:08;node user authorization app with express, mongoose, bcrypt and mongodb;"Awesome.  

Any idea what client side bcrypt performance is like, I've had real problems with one implementation even on a decent machine.

edit: are you doing client side bcrypt?  Not actually needed if using SSL."
2012-12-02 18:24:41;[gist] nodejs app - expressjs 3.0 + socket.io v9 + passport + redis;"Posting this because of the tremendous issues I had before on my own trying to get socket.io & expressjs to share sessions & authentication - only doing authentication via expressjs (http) and not over socket.io (websocket) for practical purposes; I'll let someone else take a whack at that part of the madness.

This isn't the complete code for the app itself, as that's for something I'm privately developing, however the relevant stuff is there as a start.

I should also note that use of connect's memoryStore with this - even for debugging - is a bad, bad idea.  Within 15 minutes node would OOM because of how memoryStore works (it would leak something awful on the heartbeat, on line 146 iirc).  You need...***need*** redis for testing even, just for stability's sake.

Also using nconf, bcrypt for hashes, and security-by-obscurity methods for hash storage as well (bcrypt hashes need the salt split out of the hash itself for proper obscurity).


Hopefully this saves someone several hours down the road at some point.Just so you know, running Socket.io with a Redis store in production is a bad idea. It unfortunately begins to eat up resources at an exponential rate as more and more connections are made—to the point where scaling servers only makes the problem worse and the entire solution becomes unusable. In my project I ended up switching to Faye (http://faye.jcoglan.com/), which reliably scaled without performance issues. Fortunately I didn't need any of Socket.io's special features (rooms, namespacing, auth, etc) in that project.

It's been said that Socket.io 1.0 will come with a Redis store that is usable, but Socket.io 1.0 has been on the verge of release for months now. Hopefully the next version hits soon.why would you use redis for sessions and not memcached? I did this exact setup and was able to get it working just fine. I eventually had issues with proxying that had me drop socket.io because all it would wind up doing is long-polling anyway. [deleted]"
2012-12-11 22:16:53;Backing up and restoring a mongodb to a different database;"mongodump, mongorestore.

ah, never mind, I thought that's a question."
2012-12-11 19:22:19;I wrote small tutorial how to set up new NodeJs project with Mocha and JsCoverage, personally learning so if it misses something please comment (aside of English, which I'm also and obviously polishing that way). Please stay constructive.;"Don't believe TJ about the version of jscoverage on npm being ""broken"", it's not. [I'm using it in my test suite without issues on Linux and OS X](https://github.com/dfellis/queue-flow/blob/master/test/test.js)

Also, I've been trying to make queue-flow as well-covered as possible, so you might find some other tricks and neat testing libraries being used in there that you might like to borrow. :)"
2012-12-11 17:59:24;Asynchronous error handler for Connect/Express based on Domain module;
2012-12-11 14:25:17;What are you guys using for production hosting?;"I'm very satisfied with Heroku. Its free if you keep things to 1 dyno (and you can hit it with uptimerobot to keep it from by hibernating if that's a fear). You still have to cobble together your external services (MongoLab, RedisToGo and S3--assuming you have any file uploads), but I personally like thinking/developing in distributed services. And Heroku does consolidated billing across services, which is convenient too.Amazon EC2 - Free for one year.I'm using a Rackspace server with my own Node and database instances.
It looses the advantage of the Cloud offering providing upgrades and so on, but at least I know whats going on on *my* server.I also have an app on Nodejitsu with its data stored using MongoDB and have had no such issues.

Before committing to a move you might try running your app on the free tier at Amazon to see if your issues are also present there.my site www.sharelatex.com runs on linodes which have been great.softlayer. btw. they also offer mongodb as service since last week ;)Man up...AWS EC2. Free Tier and then roughly $30/mo for a EBS backed Micro instance after the first year.If you don't mind rolling your own node instance, [Linode](http://linode.com) is rock solid.I say go for Rackspace or Linode.  I have used both.  They are both good and MUCH cheaper (or at least better value) than any paid Heroku thing I believe.  This site has a script that will install MongoDB, redis and Node.js on Ubuntu: http://apptob.org/

I don't really trust the performance on Amazon and don't think its a good value.

"
2012-12-08 19:15:52;Facebook App Development on Localhost;"Hi there again guys! This is another little write-up but this time about the hosts-file workaround to develop on Facebook using your local box as the server.

I'm looking forward to getting better at this and sharing whatever I can, so any feedback is really appreciated! 

Thanks for your time![Wiki on HOSTS](http://en.wikipedia.org/wiki/Hosts_\(file\)) if you're concerned about people locating the file"
2012-12-17 20:22:17;Node2Blog - A simple blog template made in node.js;"Very cool, nice ship! One suggestion - throw `node_modules/` in your gitignore. People should install pre-reqs themselves.Looks good, I might give it this a go.  
edit: I know it's a small project, but have you chosen a licence?Really nice one, mate."
2012-12-17 16:45:32;Open Source Alternative to TransloadIt;
2012-12-17 16:43:27;SantaBooth: A WebRTC hackathon project for HolidayJS;
2012-12-14 11:36:23;NodeJS Test Coverage Reporting with CoverShot;
2012-12-13 21:27:00;Desktop HTML5 apps game changer? node-webkit;"Looks just like AppJS.  Why didn't they just improve App.js??Interesting, I have been looking and evaluating different multi platform JS desktop application frameworks.This is exactly how I hoped the world would turn out, its just a shame that I had no hand in it.

Great to see Intel involved with this - although I don't know of anything software wise that they've been particularly successful in pushing forward."
2012-12-21 23:15:37;Node error handling;
2012-12-21 19:26:45;node.js real time stress test analysis - preparing node for election night;Wealth of great info here. Really liked the productionizing Node.js section. Thanks!
2012-12-21 18:57:57;Testing a node.js express app with Mocha and Should.js;
2012-12-21 16:09:14;Redis/Node.js global locks and workers in more detail;"Why does everyone have to use redis for all types of non-persistent shared state?  Why not just use a separate Node process and talk to it with dnode?

Its like people want to use redis just because that's what everyone does."
2012-12-19 14:29:47;A stream server that does most of what people really want from a social network.;
2013-01-01 01:12:26;sequelize.js - A solid, and flexible ORM for MySQL and other flavors of SQL;Here's a real question: is this a non-blocking design?  If not, what real advantage would it carry over npm package [mariasql](https://github.com/mscdex/node-mariasql)?
2012-12-31 18:27:28;Issac Schlueter - Discovering Node;"TYPO! 
It's Isaac, not Issac."
2012-12-31 14:43:51;The secrets of Node's success;"Node is actually breaking ground into enterprise where other languages have been trying for years. In each case it's the same story, the companies mobile division with no pre-existing infrastructure/code.

Node definitely solves a real problem which Java Servlets utterly fail at, async-io.
"
2013-01-07 20:39:19;Streaming Audio on the Web with NodeJS « Pedro Mateus Tavares;Really detailed post. Thanks!
2013-01-03 16:35:38;Enter Chimera, the other kind of Phantom;I use coffeescript for some of my own stuff as well, but using it in blogs or public libraries is in my opinion a crime to humanity.Does it support websockets?
2013-01-03 13:16:25;found this open source, node.js app on r/webgames, i thought you might like it;"I think I just got rick rolled

http://imgur.com/Pe8if"
2013-01-02 19:52:13;minecraft protocol module with a decent test suite;"Rather than just emitting 'packet' for every packet that comes in, it might be more handy for people using the module to be able to subscribe to specific packets. Saves having a massive on-packet function.
i.e. when the module receives packet ID 0x01 and the module emits 0x01, with the packet payload. I made one of these, too. :D

https://github.com/mappum/minecraft-netThis is looking good! Got the example client working, let's see if I can get the bot to walk now :)"
2013-01-15 07:55:12;swig-email-templates - use template inheritance to generate your emails;
2013-01-12 20:56:28;Javascript has a Built-In Dependency Injection Framework;
2013-01-22 12:46:10;nwm - A dynamic window manager for X11 written with Node.js [x-post from /r/linux];"gonna try this out in work tomorrow and report back - features look great

edit: Works great, it's easy to get going in Ubuntu 12.10 but less ready to work with, gnome-panel et al than say, bluetile or xmonad. Looking forward to customising it, which looks quite easy.This is really cool!"
2013-01-19 04:14:43;Hardening your node.js app for production with nginx. [Part 2 of a series];"I know I'm just going to get downvoted and called an ignorant idiot or something here because I am going against commonly accepted wisdom, but I feel like someone has to say it.

A.

>As I’ll explain, nginx is used for almost everything: gzip encoding, static file serving, HTTP caching, SSL handling, load balancing and spoon feeding clients

In probably 90% of the cases where people are trying to use one server to handle all of their traffic, you don't need nginx to do those things.  

Node.js can do gzip (http://nodejs.org/api/zlib.html), static file serving (http://nodejs.org/api/fs.html), caching (cache[filename] = filedata), SSL (http://nodejs.org/api/tls.html), load balance between processors http://nodejs.org/api/cluster.html.  

Everyone likes to use Express for everything.  I usually do, but I don't think its really necessary either. I know Express and/or Connect either doesn't or didn't use to actually cache static files in memory.  If it still doesn't then you can add that.  Or probably something like https://npmjs.org/package/static-asset would work.  But in most cases (i.e. you don't ACTUALLY have one of the most popular websites on the internet) even a typical Express setup re-reading the files for each different client is still going to perform fine.

I mean you really don't need Express or Connect at all.  All of that stuff, HTTP, SSL, GZIP, reading files, is built in to Node.js.  Its less than 1000 lines of code to add in caching and file serving.  Its good that we're not reinventing the wheel, but when your typical wheel isn't really caching or doing other things you want, then, even if you don't want to write one line of caching code on your own, maybe it would be worthwhile to at least look at the newer versions of Express and Connect and see what you can do with them rather than just assuming that you have to use nginx.

B.

OK on this previous article http://blog.argteam.com/coding/hardening-nodejs-production-process-supervisor/

>To begin: keeping our servers up is hard. Whenever a node.js error is unhandled, it unwinds the stack and leaves v8 in an unrecoverable state.

No it doesn't.  Maybe it does that sometimes, but hasn't been the case for me.  When I use process.on('uncaughtException' it catches the exception and continues.  Now, OCCASIONALLY doing that might not work.  If that happens then you can add forever, but for a lot of cases it will never be a problem.

I know that the common belief is that you MUST let your app crash and use forever and that uncaughtException is just a horrible thing, but the common belief is just not true.  

If you are already comfortable with nginx and how to configure everything, I'm sure this approach is awesome.  AFAIK its fast and stable.

One sentiment I disagree with, though, is that node is not suited for static file serving.  We've been serving static files with https://github.com/carlos8f/node-buffet for about 6 months now with great success.  According to our benchmarks (though no benchmarks are perfect), node keeps up just fine.  nginx still wins, but not by as much as you might think.  If your team isn't familiar with nginx, NOT adding more R&D overhead can be pretty valuable."
2013-01-18 20:04:45;why I'm saying 'pass' on working in Eclipse and Aptana;"So a week ago I was coding in Aptana.

I look at the site and it is not working. Look at the code...no sign of bugs. Look back at the site more closely....go back to the code. Then I am like...what teh fuck. So I ask my coworker and...well, he looks at it in vim and it turns out some weird character made its way into my code that wasn't visible in Aptana which is why it wasn't working.

What the hell. I've yet to experience this in Netbeans. Although, I am still waiting for it to load so that could be why.

    </joke>"
2013-01-17 18:49:01;is there a 2 way databinding + events (client side) library?;"Look into [AngularJS](http://angularjs.org/). It should cover everything you want to do.Using ko I think you can use Computed Observables for what you are trying to do.

Have the Computed Observable be the value of the background color.

The Computed Observable is a combination of all the textbox properties. So when the Properties bound to the textboxes change it fires back to the Computer Observable and updates the bg value.Seconding AngularJS. There was a bit of learning curve for me though.Would something like an event emitter library be what you need? https://github.com/Wolfy87/EventEmitterknockout and its .extend method on observables would be a good fit for this in addition to other libraries mentioned (angular/etc)...

Just added as a FYI...There's ember.js. Angular.js feels too much like adding js via onclick to me."
2013-01-29 04:01:37;I could use your thoughts/advice on my new content management platform built with Node.js;"Cool!  Any consideration of using jade or another styler within the themes?  Maybe your CMS could act as a wrapper around a base express/jade setup.Neat, I also got a Node.js CMS which are a bunch of Express.js apps I can mount onto an existing base app. That way the CMS doesn't take over the application so you still keep the flexibility of express but you can easy add a content managing part. I can show a link if anybody cares don't want to hijack this post.Suggestions: 

* use nconf for options
* node-uuid for RFC-compliant uuid generation
* be consistent with your coding style. you're flip-flopping quite a bit in your original code, imoI read this yesterday and was thinking about it last night - its a great idea, and if you can keep it simple to use then I think it would be far more useful than the likes of Drupal which, while powerful, is a massive application with a steep learning curve.

I think, and don't shoot me down on this because I've not thought it through particularly deeply, that if you were able to incorporate Twitter Bootstrap at the presentation end, then you'd be able to offer pre-made templates (in a similar manner to those available for Drupal) and hopefully promote your technology the better for it.Might inspire https://github.com/cliftonc/calipso"
2013-01-28 22:10:41;"My Vine API client (written for Node; very rough right now)";
2013-01-27 11:08:32;First version of GridFS file server for connect/express. Useful with cloud hosting.;Oh man that's exactly what I may need :)
2013-01-25 18:47:06;blip - become just another blip on the radar;"Use - hide data within lossless images.  Most image uploading sites check image metadata and such, but don't bother to look at the pixels themselves.  So long as no compression occurs, you can essentially whatever you please, then have someone else extract the data on their own to obtain whatever you've ""embedded"".

Embedded data is stored within pixel color values themselves, allowing the image to appear, for all intents and purposes, to any automated scanner as a generic, harmless image.

Your own usage may vary; I'm not responsible if you decide to do anything crazy like embed a .torrent file at the bottom of a screenshot of a game or whatever.  This was written mainly as a comp-sci experiment for myself with node, buffers, zlib, and a few other libraries, and took a couple of days along with a good bit of help from tjfontaine of oftc in getting Buffer & zlib (gzip) to behave.

license is MIT license, no warranty.  Due to issues with npm package `node-gd` not compiling on systems other than Linux, users of other systems are currently out in the cold.  If you can assist with getting node-gd to compile on Windows and Mac, please do so here: https://github.com/mikesmullin/node-gd"
2013-01-24 19:28:51;Dimsum generates lorem ipsum text for your Node.js and web projects.;"I just wrapped up an RC of this component, and updated it on NPM. I'm a bit of a notorious lurker around these parts, but I thought I'd toss it out there for some feedback.

On NPM: https://npmjs.org/package/dimsumELI5?How about markdown output?  Also have some chunks bolded, some italicized, a link or two, et cetera - to demonstrate how those styles would look in the block of text (optionally).This is awesome. It's one of those things you didn't know you need, but totally speeds up the development process.Took 2 minutes to get it working in my app, weeeeeeeee"
2013-02-04 19:49:05;I made a web repl for node that is half editor half console. Let me know what you think;"This is pretty cool! It would be nice if it could be integrated in to existing projects to control them or check the application's state.nconf! Do eeet!  Makes handling settings much nicer tbh.Awesome, is it possible to provide this functionality as an [Etherpad](http://etherpad.org) plugin so we can work collaboratively?I think the embeddable idea is absolutely perfect -- often I want to check the state of a variable or change a config variable while my code is running, so this would be great!  

My one pet peeve is that executing deletes everything from the text box. My usual workflow is to try out some code, make a small change, and try again, so this gets in the way. Otherwise, really good!"
2013-02-03 23:11:09;Can you guys tell me what I'm doing wrong here? : javascript;
2013-02-03 19:37:37;fs-extra: Drop in replacement for fs. Adds a few extra file system methods.;"Hi, module author here.

I wanted to share this not because it's new or novel. But because I'm interested in getting the community's feedback. Particularly on the section ""Roadmap"". 

This is my most depended upon module (https://npmjs.org/package/fs-extra) so I thought it made sense to solicit feedback from the community to help guide it in the right direction.I dislike these kinds of utility grab bags of functionality.

1. It's difficult to know what is in them so it isn't obvious from the `npm search` results that your particular module has whatever it is that I'm looking for when I go to search.

2. Big packages with lots of methods are much more work because there is much more surface area for bugs. This is another issue of focus.

3. Versioning for downstream dependencies is much harder since it's not always clear which function changed in which particular version and when it's safe to bump the version. You might not even be using the function that caused the major or minor version to increment so to upgrade that package dependency requires a careful upstream analysis of the changes. It's much nicer for packages that depend on your modules when each piece of separable functionality is made separate since the versioning is independent too.

I like it much better when these morsels of functionality like cross-platform `rm -rf` are split out into entirely separate modules with entirely independent documentation and tests. It's much easier to contribute patches to tiny projects with narrow scope than sprawling packages with no clearly defined limits. With tiny modules you also avoid the constant turf wars and bike shedding about which functions belong and which functions don't belong. It's something of a historical mistake that the fs module is as large as it is, as the emphasis in the node community and core developed has turned largely towards highly focused tiny pieces.

Here's a relevant discussion that erupted months ago (edit: and I see is linked to in the fs-extra readme) with one of my modules with some more concrete examples and reasons for preferring small modules to large utility-style ones:
https://github.com/substack/node-mkdirp/issues/17

And just for fun [hoarders](https://npmjs.org/package/hoarders) is the utility grab bag idea taken to its most comple logical extreme.regarding `createFile`, maybe liken the operation to shell `mkdir -p $basedir && touch $filename` in your docs?

I don't like the naming of `remove` - it's a bit too generous.  Perhaps something a bit more strongly worded, like `purgePath`?  You need to imply that it's a recursive delete, after all, and that it should be used with **utmost caution**."
2013-02-02 09:43:17;"the ""right way"" made node.js rest application?";"The creator of express made a bunch of example apps, here is a good one for understanding express mvc: [example](https://github.com/visionmedia/express/tree/master/examples/mvc)It seems to me like there are two competing definitions of REST: the Roy-Fielding-certified official definition (google him) which is somewhere on the level of advanced academic philosophy, and the POST/GET/PUT/DELETE === CRUD+sensible URLs definition which passes for REST among actual working programmers these days.

So when someone asks what's the ""right way"" to build a REST app, there doesn't seem to be very good or consistent mindshare on the topic, because of these competing definitions, which is why people tend to get bogged down looking for definitive REST frameworks or tutorials.

I would say at a minimum, in order to create a good REST (ish) HTTP-verb-based endpoint system, make sure you understand the verbs, and especially the concept of idempotence. Make sure you understand HTTP, and make sure you understand the URL abstraction. For example:

    this is NOT REST
    GET /users?username=foo > 200 OK { ""result"": ""error"", ""reason"": ""user 'foo' doesn't exist"" }
    GET /users/foo > 200 OK { ""result"": ""error"", ""reason"": ""user 'foo' doesn't exist"" }
    GET /users/bar > 200 OK { ""result"": ""success"", data: { username: ""bar"", ... } }

    this is REST (ish)
    get /users/foo > 404 not found
    get /users/bar > 200 ok { username: ""bar"", ... }

If the above doesn't make sense to you, you're unprepared to write anything even closely resembling a REST endpoint, tutorial or not. Otherwise you're well on your way. [edit] sentence structureI know this isn't really an answer, but I've found that the general attitude in the node.js community is this: ""The right way to build it is the way that gets it done"".  I love this attitude, because frankly, what good is theory if it doesn't pay your rent :)

Stick to small, well defined, modules that do one thing. Try to keep your app as small as possible, delegating most of the actual 'work' to reusable modules.  If you are building this for a company, you may end up with a bunch of private modules, but thats OK.  You can open source them later.  

Try to develop with testing in mind, and start writing tests as soon as your first RESTful URl is up and running.

The Express examples linked to elsewhere in this thread are a decent place to start.  Plenty of successful REST apps in the wild are running on Express."
2013-02-02 07:40:05;holla - The easiest way to make apps using WebRTC;If you would have told me 5 years ago that Skype could essentially run in a browser, I would've called you a mentalist. trying this out right now..
2013-02-12 19:44:52;Continuously Deploy your Node.js app using Github & Nodejitsu;"Neat trick, but no mention of hooking it into [tagging](http://gitready.com/beginner/2009/02/03/tagging.html). Doesn't anyone use a [test or QA stage](http://i.imgur.com/8Rc2U8Y.jpg)?I use that with http://actionherojs.com/.  They hooked me up with free hosting for open source projects http://opensource.jit.su/

You can set it up to deploy after a travis ci build passes and goes green rather than just on every deploy.  This way, I can have a server which automatically has the latest, stable build.  "
2013-02-11 17:13:18;rumble - cli read-only twitter client, inspired by earthquake;"Did you intend to store your auth key?

		consumer_key: '...'
		consumer_secret: '...',Best use case: split terminals or a terminal multiplexer with a split configured - you're able to keep tabs on what's going down on twitter while still doing what you need to elsewhere.  Also, as it uses user-streams, it's going to be almost real-time updates straight from twitter itself, so you can stay up to date on the latest from what you follow.

Due to the client being read-only, you're not able to interact though - that's a limitation due to my poor understanding of working with ncurses (which I'm slowly working on, at some point I'll create something using node-ncurses I think!).

At some point, my goal is to compete featurewise with [earthquake](https://github.com/jugyo/earthquake) - a ruby cli streaming twitter client which is amazingly powerful...but awfully buggy.

I've also ended up sending a couple pull requests back up the chain to the `twit` library [to improve its compatibility with twitter's user streams](https://github.com/ttezel/twit/pull/35) and [improve debugging](https://github.com/ttezel/twit/pull/34) - hopefully they will be merged in soon.

rumble can be installed through npm as package ""rumble"", though you'll probably want to install it as a -g'd package so that it's easily run as a command unto itself.

Feedback and contributions welcome!"
2013-02-07 00:05:06;How should I handle namespaces on server and client side?;"Since you're already using CoffeeScript, I'd recommend using a commonJS require library such as [browserify](https://github.com/substack/node-browserify) or [component](https://github.com/component/component). Personally I use and love browserify, but I'd recommend you look at both. Having a consistently enforced module system that is dead-simple to use and doesn't require any boilerplate is much (much) nicer than writing all that crap by hand.Use AMD/CommonJS on the client and Node.js require on the server. Avoid setting any global variables.

    Baz = require 'mycompany/bar/baz'"
2013-02-19 18:18:23;holla (P2P calling over WebRTC) now supports Firefox!;"thanks man! I found holla super easy to use, keep going!I'm bookmarking holla, just in case I decide to do anything peer-to-peer in the future.Glad to see this, going through WebRTC posts. I'm looking for something to support multi-party audio-only WebRTC chat (both client and server side code would be nice), and Holla is a candidate for now. Haven't looking into it too deeply yet.

If Holla can't do this, any tips on figuring out the WebRTC signaling protocol and all that?"
2013-02-19 14:23:09;Jott - Command-line static blog generator for Node;"This looks interesting, I'll give it a ride. Thanks!

EDIT: 
> It will probably never support markdown

Quite easy to implement a sort of jade/markdown mashup though, since jade supports filters. Just add [`marked`](https://github.com/chjj/marked) (or whatever) and then just do this https://github.com/visionmedia/jade#filters. Perhaps nothing new on the table, but for the interested..Also see etherstream :)"
2013-02-19 13:42:53;node-crontab equivalent for Windows?;"Its a shame that we have issues like that because it kills platform independence.
What do you specifically want the cron jobs for?The equivalent is the windows task scheduler, but how effective that will be really depends on what the Xeon jobs were calling. Maybe post the cron jobs?first, why !??

second, i think the node-contab is only a small part of the problem, it is normally used to call bash scripts - try to find out what the webapp does and find a new way

(sorry for my bad english, it is not my mothertongue)"
2013-02-17 04:42:21;In lieu of all these rails and java security issues as well as PHP's long history, are there any node.js security issues or concerns?;"There a good write up on securing Express apps at http://blog.liftsecurity.io/post/37388272578/writing-secure-express-js-appsFind a good host like nodejitsu etc and follow their blog. When the last security bug in Rails came up, EngineYard was on that like white on rice. due to node's structure, expect vulns to come against specific libraries or modules, not the nodejs core.Really, as with any language, you do your best to make things secure and then hope you didn't fuck up. 

But really, to my knowledge, and I read a lot of stuff about nodejs, I haven't come across anything.Good things about Node.JS - it uses a JS engine from one of the best browsers out there, written from scratch by outstanding engineers using modern techniques. Browsers are targeted by all sorts of hackers so it's had a lot of audits.

But that's also a bad thing. Node.JS rips a JS engine from desktop software and puts it into a network daemon. This probably opens the door to lots of vulnerabilities.

Also, Node is basically useless right out of the box, so people add a lot of modules and packages just to start serving up web pages. Many of them haven't had any security audits. Most of them were written in the last two years by people who were just hacking around, not expecting to run mission-critical software.

That said I doubt it's much worse than Ruby, Python, or PHP."
2013-02-15 01:04:16;"Tendr: A new, simple, flexible way to deal with files on Node.js; Your Thoughts and Suggestions, please.";"When you ask for thoughts and suggestions, that's *usually* when you want a moderately-sized solid example (or decent documentation).  

Looking at your dependencies and size, I don't see much point in using this independently.  Feels too heavy for little gain; I can get something just as comfortable out of other packages and my own code.


...Also, point-release version pinning?  Sure about that?  node's community seems very good about sticking to semver - usually fine to pin to minor releases at least.Looks awesome! Reminds me of stream wrappers in PHP.i don't see how this is any easier than using `fs`"
2013-02-26 23:28:29;Node.js VS Scala VS Clojure: what for an API with a we-love-java-we-dont-even-know-why business component in the company?;"Shouldn't you be concentrating on a high performance Architecture first, then doing a tech-spike to produce a Minimum Viable Product (MVP) using a number of technologies so that you can Validate the performance and maintainability and prove which is the correct one to go for. (Yes I know I sound like an Eric Reese disciple, but I suppose I am)

The Business will always push for simplicity, quite often because they don't understand software development and are concerned that a new project becomes someone's new hobby horse - quantifying your findings with hard data will go some way towards mitigating this concern of theirs.

How many guys have you got to work on this project?  Could You do a week long tech-spike and at the end put a couple of pages of report together in order to see the right answer nailed?

Personally I'd be betting on Ngnix being in the mix, fast and simple to setup, possibly with some native (C) or scripted (Lua) customisations.I use Node a lot at work and for my personal projects, but based on your description of what you want to do (it's a bit vague, are all of these ""API""s HTTP-based?) you might want to use [HAProxy](http://haproxy.1wt.eu/), [NginX](http://nginx.org/), or [ZeroMQ](http://www.zeromq.org/).

We *have* used Node.js to provide a sort of proxy to our primary Node.js application, but it's a front-end that's fairly intimately aware of the application instances it's providing the connections for, and is horizontally scaled (not one Node process) because we just need that many concurrent connections open. I wouldn't recommend going down that path for proxying to any kind of application -- compiled is still going to get you an order of magnitude better performance -- [see Alioth's Language Benchmark Game](http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=all&lang=v8&lang2=gcc).

(No benchmark is perfect, but I think these are the ""least wrong"" benchmarks out there.)You forgot to mention Go language by Google. Or perhaps more appropriately still, [nginx + Lua](http://blog.cloudflare.com/pushing-nginx-to-its-limit-with-lua). Then you would have scored a full house in Buzzword Bingo.

EDIT:


If I were trying to do what you appear to be describing, I would undoubtedly be using nginx, extended with Lua (and maybe some C). Reason being, despite the fact that I have no knowledge of Lua nor is it particularly well-known [compared to Java, in particular by the suits influencing OP's position], most of what you are trying to achieve can be done with just a little bit of nginx configuration more or less straight out the box: it can proxy all types of http/SPDY/websocket, etc. requests to various other backend technologies including rails servers, PHP-FPM processes, JVM's... pretty much anything. And nginx is very high performing and very solid. Why re-write an inferior version in Java (although I'm sure Java is pretty much as capable as node, if somewhat slower to develop)?Ok, doesn't sound like a proxy at all.  I mean in a way, but not in the normal sense of the word proxy.

 http://noflojs.org/

To me Node.js is much more straight-foward than Scala and Clojure and I bet it will take much less time to develop using that.  I recommend CoffeeScript, although a lot of Node.js people dont like it for some reason.

Also sounds like you may be trying to anticipate a little too much as far as making it able to handle unknown needs in the future.  So you may need to start with some concrete use cases and then factor as you add more.

You could be creating a bottleneck.

Look into the Express routes maybe, the request npm module, node-cron, maybe dnode depending on how apps are talking to each other.  setInterval, setTimeout. 
   

Why can't the apps talk to eachother directly?"
2013-02-26 14:29:16;LAWD: A game I made with some node.js;I put together this badboy over a couple months using some AWS elastic computing clouds, some webGl and node. If you want to know how I did anything AMA. Also if you want to add a bot to play with goto: http://ec2-107-21-183-223.compute-1.amazonaws.com/LAWD/addbot.html and click connect.I have no idea what's going on, or what I'm supposed to do. 
2013-02-26 12:08:03;Sails - Realtime MVC Framework for Node.js;"Hey guys, 

I've been lucky enough since last Spring to get some time between projects to develop Sails.js. I'd been wanting to work with Node.js, but doing production code was just a little too time-consuming. Sails.js has saved me loads of time on subsequent projects, and made it much easier to spin out realtime and single-page web apps quickly.

Since adding on the ORM last November, things have gotten a lot more exciting. My goal is for us, the community, to build the MVC framework for Node.js, but with fresh perspective from the ten years that have gone by since Rails came out in 2004. I think we're off to a pretty good start.

If you've got any questions or thoughts, let 'er rip.  Google group: https://groups.google.com/forum/?fromgroups#!forum/sailsjsFor everyone like me who immediately wants to know ""what makes this different / better than Express?"", here's a quote from the docs:

> Sails does a few things other Node.js MVC frameworks can't do:
>
>   * Automatically generated JSON API for manipulating models means you don't have to write any backend code to build simple database apps
>
>   * Built-in authentication, role-based access control, and customizable policies assignable at the controller/action level
>
>   * Transport agnostic routing: 
>
>Sails controllers also handle Socket.io / WebSocket messages! This makes it much easier to send the server-originated or 'comet' notifications you need for features like chat, realtime analytics, and multiplayer games.
>
>   * Automatic asset minification with Rigging: 
>
> Your UI code is automatically included in development mode, and minified into a simple, gzipped file in production.
> 
> Support for:
>
> * CoffeeScript
> * LESS

Edit: Cleaned up the formatting a bit...original post was from mobileBy the way, if anyone is interested, my company is sponsoring a Sails.js hackathon this weekend with some pretty sweet prizes.  http://www.hackathon.io/sails-hackathonThis is probably comparable with http://actionherojs.comHas anyone tried out [compound](https://github.com/1602/compound)?I wanted to give this a look then I read the readme:

Security
 TODO

I think I'll wait. 
"
2013-02-24 18:15:55;Stop Writing REST API Clients;"On the contrary, writing REST API clients *does* scale. What doesn't scale is expecting every service to conform to a meta-standard.I thought the whole point of REST was to get away from having to write WSDL-like descriptors? Instead, you publish a set of content types, and how you parse the response is based on the content type returned by the server, rather than some descriptor that's only valid for that particular service.doing anything by committee and asking everyone to agree on a standard just will slow things down.  good luckWaiting to see how long it takes for someone to post up the xkcd standards comic.

I should take bets.> Facebook, Twitter, LinkedIn, Youtube, Instagram, Dropbox, Yahoo ...
This doesn’t scale.

WutHATEOAS gonna' HATEOAS.Make it YML and it'll be 1000x more appealing, JSON simply isn't suited for this kind of declarative functionality since it has excessive amounts of punctuation (brackets everywhere makes it unreadable).

The Twitter REST API example has so much whitespace and unnecessary brackets that it's strikingly reminiscent of XML.

There's some value in declarative meta-functionality however as others have mentioned it's a slippery slope that leads to SOAP.I like the idea, certainly reducing code redundancy and excess work is a good goal. However, when you go down the path of specifying what is essentially business logic in config structures, rather than in code, how do you avoid the mess that Java web development has become? i.e. ""Java developers hate their language so much they write as much as they can in XML""

More to the point, how do you ensure that your API clients are easily maintainable and debuggable when they are not specified in code themselves?Nobody says you have to use *all* of those services. Anyway, it scales because it only takes one person to write the client once.There's also a standard called WADL which was designed for exactly this sort of thing (although it's still XML based): http://en.wikipedia.org/wiki/Web_Application_Description_LanguageI had an idea and a prototype for this written for Rails applications. It was two separate projects. 

The first one was sort of a YAML-interpreter that had some rules about how you describe your API, and then its output was a documentation website for said API.

The second one was a Rails generator that hooked into your router and basically asked for the namespace in which your API lived, then went through all those routes and checked the controllers for inline documentation. I was never sure how to set the next part up but ideally it the second part in this part would have been to test all these routes and requests (pretty much like unit tests) and documenting the output in a meaningful way.

The third part would have been creating something much like this, but this'd would've been completely automated once you had the basic stuff documented and your test-like-query-documentations set up.

So it was more about documentation rather than creating a client, but creating a client was always part of the vision. I still have not found a good place to document APIs and I think there's a place for this, but I'm freakin' lazy and don't finish my super awesome hobby projects."
2013-02-23 02:53:30;Apto: A flexible little static site generator for Node.;
2013-03-05 13:34:53;Concurrent tasks computation among NodeJS child processes (vertical scaling);"Your link is bad; here's the correct one: https://github.com/FGRibreau/node-childrenCan you give better examples of where this might be useful? And does it only work with underscore functions?"
2013-03-05 01:43:28;JSON-Toolkit: extensive JSON object traversal and modification;This is cool but as usual it seems like substack actually already solved most of these problems.  See js-traverse
2013-03-05 00:49:49;How would you explain node in a few paragraphs to students that know programming and the web, but have never seen something like this before?;"If you want them to understand then do an interactive walkthrough rather than a presentation.  Have them bring laptops or do it in the computer lab where they actually code stuff.

I think one of the confusing things is callbacks (although this is similar in the web browser), so maybe have a few exercises where you demonstrate how Node is asynchronous and event based, maybe just by showing how some stuff gets output to the web browser or console ahead of other stuff that is in a callback.  Also like the other guy said you could set up some blocking code to show how that stops the output from other parts of the program (for example a setInterval).

I would also show them npm and some cool modules if you want to motivate them.  The amount of free stuff to play with / take advantage of in node modules that other people have already written is a big motivator for me.  Show them the NPM home page where it says 24,350 packages.  Stuff like colors and ansi packages.  And/or show them some socket.io/now.js/sockjs/sharejs realtime collaborative stuff.Personally I'd not bother with Express in the first instance, I'd do the standard ""Hello World"" application and show them how simple it is to have something that sends out a response to a web request.

Then as an exercise get them to process the incoming request, first with a RESTful type of request, and possibly then using an Ajax request.

Once they realise that there's a load of common patterns with the request structure bring in Express or Connect.  This way they'll have some base knowledge that will help them better understand the request/response.

Hopefully this will make them comfortable with the technology which will then enable you to start to push the Asynchronous nature of the technology - they may have never passed a function as a parameter, or if they have they may not have understood what is going on, once they're grounded in this then the whole ""nothing doing 'till an Event occurs"" paradigm should flow.

Learning by mistakes is a great way to challenge people, it shouldn't be hard to trick them into writing a blocking function - they're sure as hell going to find a way to do it themselves as we must have all done at some point, so provoking the thought process of non-blocking events early on should get them thinking along the right lines.I started writing up something like this a while ago -- never finished though: https://gist.github.com/maxogden/4011336I'm not sure if this is what you are looking for, but I think a common misconception that confuses people up front is that with Node.js, you are writing the server, whereas with something like PHP, you are just writing a program that outputs data for a server to send.

Explain that Node.js is just a JavaScript interpreter with with nice libraries made available to you that make things like web applications easy.  There is no magic... just smart design.Do it, do everything you need all in one process.

...And do it all at once, seamlessly."
2013-03-04 23:46:33;Why parsing Wikipedia is hard, and how the encyclopedia is using Node.JS to make it easy;"The use of Node.js seems orthogonal to the problem they're trying to solve.

How did Node.js help them here? The article didn't really say.

My only other comment is that they're insane to try and preserve the current wiki syntax as-is. They should have parsoid simply translate to HTML and then from HTML to a simplified wiki syntax, have that show up across all of their documents, and then accept only the simplified form from here on. Then the WYSIWYG editor development would be a far simpler task.hard? try parsing DMOZ."
2013-03-02 02:45:23;Node v0.9.11 (Unstable) Released;sweeeeeeet, but boy I cant wait for that (unstable) to go away and for the version number to be v1
2013-03-11 22:58:38;AWS Elastic Beanstalk for Node.js;Sweet!
2013-03-11 19:38:56;How do I compile or obtain node with dtrace support for Ubuntu?;"DTrace doesn't work on Linux, so that's that for profiling that way.

If you're just looking for hotspots in your code, I'd recommend running node with the V8 --prof option enabled and then use ``linux-tick-processor`` to turn the logfile into a profile.

[This Howto for OS X](http://blog.arc90.com/2012/03/05/profiling-node-programs-on-mac-os-x/) is the clearest on how to do this, just replace ``mac-tick-processor`` for ``linux-tick-processor``.

If you want continuous profiling of your code that you can query from your server from time-to-time, [clouseau](https://github.com/uber/clouseau) provides primitives for hooking some profiling onto your functions, and [uberclass-clouseau](https://github.com/uber/uberclass-clouseau) automatically hooks it onto all methods of objects created with [John Resig's Class](http://ejohn.org/blog/simple-javascript-inheritance/)-style constructors."
2013-03-11 16:08:12;Node v0.10.0 (Stable);"Very nice to see new Streams interface.

In regards to

    Child.prototype = new Parent(); // <-- NEVER EVER DO THIS!!
    // If you see anyone doing this in any javascript library ever,
    // post a bug telling them that it is a huge terrible mistake!
    // Inheriting from a class should not call that class's ctor
    // on the prototype shared with EVERY instance of the child class!

Thank you, isaacs, for pointing this out! Ridiculous practice."
2013-03-11 09:09:40;Running AngularJS on the server with Node.js and jsdom;what? why?!
2013-03-10 21:40:57;Tracking down a memory leak in Node.js 0.8 and Socket.IO;"For another fun resource-murdering bug, use socket.io with redis.  It has issues with adding way too many subscribers, causing huge perf problems once you hit enough concurrent clients.

edit: for reference: https://github.com/LearnBoost/socket.io/issues/862#issuecomment-8978801

I may be off in my description of the bug. Great post.  How did you generate that first time-series graph?  Manually from multiple heap dumps?  Or something trickier?I was just looking at your issue last week.  Thanks for digging into this more and providing a great detailed analysis.  Socket.IO is powerful, but given a little more time to mature and work out kinks like this, I expect performance to increase drastically in the near future.

I hope I have time to dig into this issue soon:
https://github.com/LearnBoost/socket.io/issues/1148A great alternative to socket.io is sock.js http://sockjs.org I've been using it in production now for a few weeks on http://worldofcardgames.com with no issues. It's MUCH lighter-weight than socket.io"
2013-03-19 16:13:15;Can Stylus be configured to compile .css once, instead of on .styl change?;"I would just compile it as part of your build process before you deploy, [grunt](http://gruntjs.com/) is a JS task runner that can handle compiling stylus, minification, and other build tasks.  It can also watch your .styl files for changes and automatically compile them.Stylus, by default, will only compile once - [see here](https://github.com/LearnBoost/stylus/blob/master/lib/middleware.js#L149)

It will compile if it has not yet been compiled  or if the source has changed:

    changed.length ? compile() : next();

That will either compile the source or move on to the next middleware if the file has changed.The behavior I've seen is that when Stylus runs in production mode (NODE_ENV = ""production""), it will not look for changes in .styl files.
Files get compiled once, and that's it.

However, it'd still go with tribalfloyd's recommendation. Build everything once, deploy things ready to go on each server. You'll shorten your server restart time to the strict minimum, and will generally live a happier life as a result.
What about force: false in the settings? Hmm, that's probably the default. 

But another question: why is your .styl changing frequently in Prod? I suspect that it doesn't compile on every request, it only compiles if the file is changed (file watcher). In fact, I'm fairly sure that's what happens based on what I see in my logs. 

"
2013-03-19 11:59:56;Setup a Node.js project, provision it with Chef, and deploy it within a load-balanced configuration.;Thanks for sharing, I was just about to endeavor with similar deployment, this is a great help.great blog post! adding you to my google reader. or whatever reader i'll be using.
2013-03-18 09:30:27;scope - JavaScript closures vs. anonymous functions [x-post from /r/javascript];
2013-03-17 18:53:47;Show /node/: Node.js Express Example Application;"Things you forgot about: 

* CSRF protection (express has a middleware for this, check docs)
* Proper email valiation (`node-validate`, `express-validate`)
* Timing attack prevention; you're not disclosing whether or not an email exists (general ""invalid email/password"" error), but an attacker close enough to your installation network-wise can determine if the account exists due to use of bcrypt.  hashing is expensive in terms of CPU - it'll take time to gen and compare the hash, so based on a response time, the attacker can probe for legit accounts.  Run a dummy hash cycle if no account's found and use it to burn cpu time to confound attackers.
* Unauthorized access prevention; tarpit anyone after too many login attempts to slow them down (and possibly captcha)

Things you're doing wrong:

* Storing bcrypt salt separately; bcrypt includes the salt in the hash, so unless you're ripping the salt out of the hash after generating it for security-by-obesity purposes, you *do not* need to store the salt separately.

Looks decent, but you have some work to do to cover your bases and improve your skills.

EDIT: BTW, you're reinventing the wheel a bit here.  Check npm packages `passport` and `passport-local`, or http://passportjs.org/i just wanted to send a thank you for this post.  I am currently working through the logic of this functionality and this will help me immensely.  Thank you for posting it!"
2013-03-17 18:40:18;TDD: what do you use?;"I use tap a lot. Integrating with travis-ci.
Good, easy and lightweight.

Edit: [simple tap example](https://github.com/clux/trials/blob/master/test/singlemulti.test.js)jasmine-node, technically BDD, but I find it better serves the goals of robust, thougtful code versus simply TDD.

https://npmjs.org/package/jasmine-node
https://github.com/mhevery/jasmine-node

With examples of how to write Jasmine specs:

http://pivotal.github.com/jasmine/I use mocha. Its really intuitive.Unit Tests != TDD

first is a tool, second is religionUsed nodeunit before, but development stopped about 10 months ago or so. Switched to mocha, much better.Mocha with Chai. 

> crappy experience with the watcher function on windows

File watchers on Node/Windows are generally blech. I've had good luck with Mocha though. Personally I'm migrating toward running all my node code in an ubuntu vm. 
"
2013-03-25 21:20:48;I am the author of Express.io, a realtime web-framework that merges two great technologies express & socket.io.  It's open source, and it makes developing realtime applications a breeze.;"Major downside: you don't pass the socket.io or express instances to the library, instead *it* loads them itself.  Also does full version pinning.  You're **completely** frozen for version updates until author decides to bump deps.

...Do not like.What exactly is the benefit of using this, as opposed to just initializing socket.io and express yourself? Using socket.io with express is well documented, and takes about 5 minutes to set up anyway.As someone who uses express and socket.io, can anyone tell me what the benefit of this lib is?

It just seems like an opportunity to increase the amount of bugs, and make it more difficult to stay on leading edge of each respective library, all for the sake of a bit of syntactical sugarLooks like it's just a configuration (with some opinions) for Express.js and Socket.io. So I guess 'breeze' should be taken with a grain of salt since you still need to come up with a lot of stuff on the client.Pretty cool.  I have found another thing that I think might actually be even easier: NowJS.

###
    It does use CoffeeScript which I also recommend because it makes things easier also.  If you really want to you can convert this to javascript on js2coffee.org. It will look very similar, with more punctuation for the most part.
    Uses NowJS (see nowjs.org, sudo npm install -g now).
    You will need to specify express 2.x in the package.json to use it as is

    Server: CoffeeScript (node.js)
    ###
        express = require 'express'                        #web server
        nowjs = require 'now'                              #remote procedure call, easier than GET/POST
        fs = require 'fs'

        app = express.createServer()                       #webserver stuff
        app.use express.cookieParser()                     #webserver stuff
        app.use express.session { secret: 'burrito13' }    #webserver stuff
        app.use express.static(__dirname + '/public')      #webserver stuff

        app.get ""/"", (req, res) ->                         #webserver stuff
          res.end fs.readFileSync 'index.html'

        nowjs = require 'now'                              #set up rpc stuff
        everyone = nowjs.initialize app  

        everyone.now.list = (callback) ->                  #nowjs rpc call
          callback ['apple', 'oranges']

        app.listen 3000                                    #start webserver

    ###____________________________________________________________________________________


    Client: (CoffeeScript, convert to JS with coffee -c main.coffee, include along with jquery and nowjs in head of html doc)
    ###
        $ ->
          now.ready ->
            now.list 'things', (things) ->
              console.log things cluster support?I'm using it and it's awesome!"
2013-03-25 14:25:32;Getting Started -- a bit overwhelmed;"Start with creating your own module, then publish it to npm, make a http server in just pure Node.js after that start with express.js. 

Also getting a mentor is probably the fastest way to get started. I might be open to giving you some guidance if you like. I am pickels on freenode. You can mostly find me in the #express.js channel so drop me a PM if you are stuck.Why not buy a book?  This one is pretty good: http://www.manning.com/cantelon/

Also, you could read the ExpressJS guide: http://expressjs.com/guide.htmlHere's the best tutorial I've ever seen on Node. It's by Steven Sanderson (one of the main devs of KnockoutJS), and while it's focused on using Node in MS Webmatrix in Windows, most of it will apply to any dev environment.

[Node.js development with WebMatrix 2 and Express](http://blog.stevensanderson.com/2012/07/09/node-js-development-with-webmatrix-2-and-express/)
Hang out in #Node.js on freenode IRC. Lots of people who can help.As a preliminary, make sure you know and understand all the advanced Javascript here:
https://developer.mozilla.org/en-US/learn/javascriptSaw this a little late... but my suggestions would be to invest some early cycles understanding a unit testing frmework like mocha or jasmine, it will be really valuablee when you are trying to write something ""real."" Also, peruse github, look at source, when you dont understand it, clone, run and tear it apart. Also, node is written in node (javascript that is), so read the node source, its a great way to learn how it all fits together. And one more thing... grok a promise framework, like Q... I am not saying that promises are wonderful, and you should use them everywhere, but you want to understand them when a module provides them, and they are a great intro to async and functional programming.> All I'd like to do is start out understanding how to build a basic MVC single page. Then maybe insert a form and have that pass to the backend and have it return something.

You should learn PHP or something for that, IMHO. Node.js is not the best tool for that kind of project.

Node is best for projects where your Node application is responding quickly to inputs with small bits of information. For example a WebSocket server, or a very atomic API.

Using it to serve up web pages, catch form posts, process them, etc. is totally doable but it's not a great use case for Node and I think you'd be better off writing such a site in PHP, Python, Ruby, etc.

If you want to do it in Node the way to do it is write a backend API in Node along with a client-side Web App that handles all the front end stuff and talks to the Node API.

But it sounds like you want to write something more traditional, which is why I suggest languages that fit that paradigm better."
2013-03-25 04:11:07;Where is node-waf?;"node-waf has been superseded by node-gyp.

if you are installing a recent version of node, it will come with node-gyp instead. packages using waf will need to update to gyp to work.

https://github.com/TooTallNate/node-gyp"
2013-03-24 18:57:29;Wrapping C code for node.js?;"Is there any reason your C code won't compile with a C++ compiler? There's only a few things that excludes C++ from being a superset of C.   

EDIT: I'm not sure about wrapping C with Node, but it's not hard to implement C with C++. This wiki article is fairly helpful, in my experience.   

http://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2BYour wrapper needs to use C++ to do the right things with V8, but the functions you're wrapping can come from a straight C library if that's what you're into.

So the situation is really just a matter of mixing C and C++ files / libraries correctly.

[node-ffi](https://github.com/rbranson/node-ffi)    extern ""C"" {

    }"
2013-03-23 11:34:00;Podcast: Node & NPM with Isaac Schlueter;Was one of the better javascriptjabbers. I sometimes don't like it because they invite way to many people . Also some of them are more ruby coders than they are Javascript coders which sometimes leads to awkward questions.I could NOT imagine anyone else was talking besides Zach Braff once Isaac spoke up. Definitely not a bad person to be compared to.
2013-03-31 20:13:18;Google+ Sign In for Express;"Or, you could use passport.

There's a couple for google-based auth liste: 

https://github.com/jaredhanson/passport-google

https://github.com/jaredhanson/passport-google-oauth

I suggest looking through the list of strategies in the passport readme: https://github.com/jaredhanson/passport#strategies-1I once tried to communicate with a google api. Still have nightmares about it. So following the github repo for future reference.

For auth I mostly use Mozilla Persona (BrowserId) because you don't need any api keys to use it. An other cool way of doing authentication is [authom](https://github.com/jed/authom). I like auth and error events which gives you a lot of freedom so you can for example add your own req.PLUS if that's what you want."
2013-03-31 18:04:04;bugger - node.js debug runner (alpha);
2013-03-30 00:19:53;Tips for Debugging Native Modules (for people who don't know C);I had to debug a running Node process in production, because OpenSSL couldn't verify some RSA signature (which worked fine on the development machine). I think it would be useful if you mentioned that gdb can attach itself to existing processes.
2013-03-28 22:14:28;pagen - a simple but colorful website generator for node.js;it's colorful, sure, but...maybe leaving the design more up to the users would be a better idea. :\
2013-03-28 13:30:37;nCombo - Node.js Realtime Framework;"The demo looks like crap and there is no documentation, definitely not a framework I'd use.> It's really efficient with server resources

Prove it.

> Designed to run on multiple CPU cores

How so - using cluster or something else? Load balancing going on, and any failure recovery in use?  Whee for being vague...you're marketing to programmers after all, get into the nitty-gritty!

> Significantly reduces development time

Everybody says this.  Few do it.

> Lets you program in a single language (JavaScript)

Most people are already doing that if they're using node to begin with.

> Full duplex client-server interaction (thanks to Socket.io)

k, so we're using socket.io...that's...a start towards being specific.

> Allows you to call server-side functions and listen to server-side events from your client-side scripts

...in a nutshell, REST.

> Seamless app-to-app interaction - Your apps can talk to each other with just one line of code each.

Is it IPC or is it over HTTP or some NIH'd socket communication.  Very vague.

> Smart caching that refreshes clients when server is restarted

If-Modified-Since header...?  Fairly basic thing to pull off with http.

> Session management

`app.use(express.session())` - not that hard.

> Global data management and selective event emission lets you emit events to target specific users.

Define ""global data management"".

> All necessary middleware is included; custom middleware can be added optionally

`express.use()` in a nutshell.

> Authentication and authorization via middleware

again, express and passport handle this perfectly fine. how does this do anything different.

> Comes with a default file upload feature based on Valums AJAX Uploader

I just groaned. I hope, hope, hope this is done right, or the framework going to be a festering hive of exploitation.

> Can be extended with third-party node modules and client-side libraries

...if you can't do this already in a node framework, something's very wrong with its design.  This should be a given. :|

---

Looking through the rest, looks like it forces you to handlebars for templates (wtf why can't I choose my own damn templating library to use).  Also very verbose in design (blegh).

Doesn't even implement anything for a configuration helper - I mean, come on, how hard would it be to coax people towards commander or nconf at least?

Overall, it's very disorganized, very monolithic.  Too many catchphrases and not enough real functionality.

Enough of mumbling this cloud bullshit. Make it useful.So, the front page advertises that nCombo ""allows you to build desktop-like web apps"", but the demo shows a barebones page with a jQuery UI dialog and some trivial socket.io functionality.

Here's what I was expecting to see:

http://docs.sencha.com/ext-js/4-2/extjs-build/examples/desktop/desktop.html

or http://docs.sencha.com/ext-js/4-2/extjs-build/examples/calendar/index.html

or http://docs.sencha.com/ext-js/4-2/extjs-build/examples/simple-tasks/index.html

I then read the feature list and thought ""some of these seem interesting, but I didn't see that in the demo"". And when I clicked on ""Reference"" and saw the usual ""coming soon"", I realized this has a long way to go before I would use it.

Also, I would replace your links with a nice big ""Watch Demo"" button and create a new demo.I'll just leave these two here:

* Meteor: http://meteor.com
* DerbyJS: http://derbyjs.comTheir web is built in php. That is by itself enough to start alarms buzzing in my head considering they are promoting nodejs framework.Real-time means something very specific in software engineering: [Real-time computing](http://en.wikipedia.org/wiki/Real-time_computing)"
2013-04-09 22:01:01;Writing Clean Code With Nested Promises;"using promises for something this simple is unnecessary. it makes it harder for other people to read your code, and you're trying to code around a paradigm you don't have to learn (at least for this problem, since it's simple).

    var request = require('request')

    exports.verify = function (data, callback) {
      postToService(data, 'https://production-url.com', function (err, response, body) {
        // do stuff

        callback(null, results)
      })
    }

    function postToService(data, url, callback) {
      request.post({
        data: data,
        url: url
      }, function (err, response, body) {
        if (err && err.code === 21007) {
          postToService(data, 'https://sandbox-url.com', callback)
        } else {
          callback(err, response, body)
        }
      })
    }

SO much simpler.Why not have a function signature like thus: postToService(data, url, fallbackUrl)

In my view nested callbacks aren't themselves evil; you really just want to separate async provisioning logic from outcome logic.I'm a bit sleepy so I don't wanna explain the logic behind this snippet in detail, but `Q`—from what I can gather—supports Promises/A+, so you don't need any nesting if you use it correctly.

    var request = require('request')
      , Q = require('q')
      ;
    
    var postToService = function(data, url) {
      var deferred = Q.defer();
      var options = {
        data: data,
        url: url
      };
    
      request.post(options, function(err, response, body) {
        if (err) { 
          deferred.reject(err);
        } else if (hasErrors(response)) {
          deferred.reject(response);
        } else {
          deferred.resolve(body);
        }
      });
    
      return deferred.promise;
    };
    
    exports.verify = function(data) {
      return postToService(data, ""https://production-url.com"")
        .fail(function(err) {
          if (err.code === 21007) {
            return postToService(data, ""https://sandbox-url.com"");
          } else {
            throw err;
          }
        });
    };

I would suggest reading up on how Promises/A+ works.You can actually simplify the request call.  Also, I am not sure promises really make it easier.  I would just do something like this using CoffeeScript and indenting two spaces.

    request = require 'request'

    exports.verify = (data, cb) ->
      request.post 'http://fakedomain.com', data, (err, res, body) ->
        if res?.statusCode is 21007
          request.get 'http://roy-t.nl/services/RESTEcho.php', data, (err, res, body) ->
            cb err, body
        else
          cb err, body




"
2013-04-08 20:59:04;Structuring Client-side JavaScript code - How do you do it?;
2013-04-08 16:39:32;Client and Server tests looks the same with the Tape and Browserify;"Not to piggyback on this post too much, I really do like how tape works the same in Node and the browser, and I like that tape's output is compatible with the standard Perl came up with for their automated testing all those years ago, (and all of the test automation support that implies) but its not that great of a human-legible format.

I like using [nodeunit](https://github.com/caolan/nodeunit) locally, and the API is remarkably similar to tape's.

Enough that I can bootstrap tape's test object to run my tests originally written for nodeunit with [this function](https://github.com/dfellis/queue-flow/blob/master/test/test.js#L10):

    function bootstrap(test) {
        test.expect = test.expect || test.plan;
        test.done = test.done || test.end;
    }

and calling it at the beginning of each test function, like so:

    exports.someTest = function(test) {
        bootstrap(test);

Then I have separate test files for Node.js and the browser; the Node.js test file contains tests that only pertain to Node.js and don't have any meaning in a browser context, and the browser test file [is essentially just a for loop](https://github.com/dfellis/queue-flow/blob/master/test/test-browser.js#L6) that uses the exports of the nodeunit tests and runs them through tape like this:

    var tape = require('tape');
    var tests = require('./test');
    
    for(var key in tests) {
        tape(key, tests[key]);
    }

Then you get the advantages of more legible (color-coded, compact) test results along with compatibility with the browser and any Perl-derived test automation tools. :)"
2013-04-07 01:46:56;Grep wrapper for node;good job on the README
2013-04-06 06:33:15;LevelDB - Node.js of Databases;"Seems cool, but your title makes little sense.I thought that was mongodb. It's also web scale.That's very cool.  But what are the advantages of LevelDB over doing something similar yourself in Node, like this?

    fs = require 'fs'

    S4 = () ->
       (((1+Math.random())*0x10000)|0).toString(16).substring(1)

    guid = () ->
       S4()+S4()+""-""+S4()+""-""+S4()+""-""+S4()+""-""+S4()+S4()+S4()

    saving = {}

    toSave = {}

    delay = (ms, func) -> setTimeout func, ms

    fname = (id) ->
      console.log 'id is ' + id
      console.log 'fname (id) is ' + __dirname + '/data/' + id + '.json'
      return __dirname + '/data/' + id + '.json'

    get = (id, callback) ->  
      if toSave[id]?
        callback toSave[id]
      else
        fs.exists fname(id), (exists) ->
          if not exists
            callback ''
          else
            fs.readFile fname(id), (err, str) ->
              if err?
                console.log 'Error reading data:'
                console.log err
              else
                callback JSON.parse(str)  

    save = (id) ->
      fs.writeFile fname(id), JSON.stringify(toSave[id]), (err) ->
        if err?
          console.log 'Error saving data:'
          console.log err    
        delete saving[id]

    update = (id, data) ->
      toSave[id] = data
      if not saving[id]?
        saving[id] = true
        delay 15000, ->    
          save id

    exports.update = update
    exports.get = get
    exports.guid = guid
As someone who knows next to nothing about dbs: is this thing to mongo as sqlite is to mysql?I've been using leveldb for a few days. 

My biggest problem is not understanding how to ""search"" for a key or get a range of keys.LevelDB is supported in UeberDB if you want to make sure dipping your toe in doesn't hurt."
2013-04-16 00:25:38;The node.js Community is Quietly Changing the Face of Open Source;"I'd argue that the rapid development of packages in Node is due to two main factors (not the ones listed in the article):

1.  NPM coming out extremely quickly relative to when Node.js came out.  People having an immediate way of knowing _where_ to get packages (rather than install from source) made it also significantly easier for developers to have a centralized area where to publish.

2.  Most importantly, people **already knew JavaScript ahead of time**.  Since a lot of developers had at least worked with front-end web development in one aspect or another, there was no need to learn another language to start making libraries.  A few purely front-end developers I knew even started to experiment with server-side work purely due to Node.js.I'd also add that being 18-22 years, the Ruby, Python, and Linux communities had a much longer type to evolve and develop into the extremely powerful and useful platforms that they are today. Best Practices and Patterns have come a long way.

Node does a lot of unique things, don't get me wrong, but most of it's work was cut out for it by the time it came on the scene in 2009. 
So many of the modules available simply mimic what has come before them, including MVC (Express), Python-like compiler (CoffeeScript), Linux/Unix mimicking libraries (mkdirp, grep, etc.), and so much more."
2013-04-15 18:45:59;PumbleDB is the NOSQL Key-Value server for Node.js;"Its written in node.js, which is kinda nice but doesn't offer any particular advantage to node.js clients. Saying its 'for node' is a bit confusing.

Just noticed in your git repo, you have .DS_Store appearing. You might want to add .DS_Store to your .gitignore

Sounds a lot like CouchDB.Wouldn't it also be an idea to be able to connect with a little socket client and fetch data that way too, it would be faster right? (Please correct me if I'm wrong about net vs http, I would like to know).> PumbleDB is the NOSQL Key-Value server for Node.js.

No offense, but I find this phrasing a bit silly.  Just because it's written *in* Node.js doesn't mean it's an especially good match for a Node.js project (much less that it ***THE*** choice), and the docs focus on a HTTP interface, which is even more confusing.  Is this a key-value store for Node.js apps, or a server-side key-value store for client-side JS?  The title indicates the former, but the docs seem to assume the latter.

(Also, using an HTTP GET to do a PUT seems problematic.)

I think it might help if you focused a bit more on who exactly would want to use this project, and why they'd want to use it instead of existing alternatives.  Redis is fast, stable, powerful, and very widely deployed; why would I use PumbleDB over Redis?  CouchDB is fast, stable, powerful, has an incredible feature set, a great REST interface, and accepts arbitrary attachments; why would I use PumbleDB over CouchDB?  MongoDB is really easy for Node developers to get started with, and is stupidly popular; why would I use PumbleDB over MongoDB?  Are there any projects that actually use PumbleDB?  If so, what are they, how are they using PumbleDB, and why are they using it instead of an existing data store?

Not trying to be mean; I'm legitimately curious.  :)memcached?"
2013-04-14 07:53:15;Things I wish I knew about MongoDB a year ago | Thought it was useful since MongoDB is often used with Nodejs;
2013-04-12 18:19:06;Contest for the best nodewar (a programming game revolving around writing genetic code for spaceships) species!;"current btc conversion puts it at 1 btc = 110 dollars.

That's a nice prize.My question is how much will a torque of say 1/10th max rotate the ship in one step?  Seems like that needs to be defined or you would need to test to see what it is.  

But that's not really the hard part.  The hard part is factoring in the gravity.  And then factoring in the shards if you can even predict how things are going to split....Does the ""Close Editor"" button not actually save your species?  Chrome crashed and none of my changes had been saved, even though I'd been editing it and keeping it up to date as I went along.  That's rather silly."
2013-04-12 15:52:42;Learn Backbone.js Completely | Tutorials;Right now I'm running into a problem trying to add nested models and nested attributes to models. The problem gets more complicated because I'm not sure if I want to store the model with an ID or as a JSON string in the original model.
2013-04-23 21:50:56;anyone got a sample app with coffee script that will re-compile cs to js when the cs changes?;"Check out http://gruntjs.com/
watch and the coffeescript contrib should be able to do what you want.You dont need any js files for the server. just run coffee app.coffee 
You can also make a bash run script that does coffee -c public/*.coffee then coffee server.coffeeIf you end up not using grunt for some reason, [this](https://github.com/harvesthq/chosen) plugin just uses a basic cakefile configuration to compile on changes.This could help, a single page app tutorial with a web frontend (backbone or angular) written with coffeescript and assembled with Brunch (which whatch file changes): https://gelnior.wordpress.com/2012/04/28/how-to-quickly-start-a-single-page-application-with-node-js/Codekit, Livereload

what i do with two panes in tmux:
coffee -cb --watch app.coffee
supervisor app.js

coffee will compile on change, supervisor reloads node on change of the js (when coffee is done compiling). at the same time I run testem in another pane and have a 1.6 second timeout set in Livereload (until supervisor is done restarting) to reload the page in the browser.

works pretty well.I'm a big fan of using middleman to bring a lot of different nice tools under one roof. It provides automatic reloading of code, markup, and css from their respective initial formats such as coffeescript, slim, and sass.

That said, it's Ruby.
http://middlemanapp.com/"
2013-04-22 19:19:58;Show /node/: Real Time Todos with Backbone and Socket.IO;"Made this over the weekend. The backend is Express and MongoDB. The core of the application is really just these two files:
 
 
https://github.com/nickbarth/Todo-App/blob/master/app/todos/controller.js
 
 
https://github.com/nickbarth/Todo-App/blob/master/public/assets/javascripts/application.js
 
 
The back story was my friend is big a Meteor/Derby guy, so I did up a ""real time application"" in plain Backbone and Socket.IO so I could bug him about it a bit. I'd love to hear any feedback you guys have.Check out the etherpad plugin ep_tasklist"
2013-04-21 23:06:46;express-debug for developing apps in express 3.x;Interesting tool. Question though - why not use something such as cheerio to inject the toolbar in?
2013-04-20 11:52:37;SeriousJS (very alpha) - An alternative to Coffee-Script with an emphasis on managing larger projects and debugging;"> Won't compile with Coffee-Script, despite making complete visual sense.

Author needs to learn about [line continuations](https://github.com/jashkenas/coffee-script/issues/966). Just like Ruby. I think any whitespace aware language will have them. 

> The generated code's line numbers don't match up with the source. This makes debugging pretty difficult sometimes

I think this was addressed in 1.6, wasn't it? 

> Functions are lambdas:

>  (a, b) -> a + b


I don't see how coffee doesn't have this already: 

> coffee> f = (a,b) -> a+b

>[Function]

>coffee> f(2,5)

>7

>coffee> 
"
2013-04-20 10:07:28;Painless MongoDB driver interface with Promises.;i do love promised based libraries, and especially libraries that support callbacks and promises, but when there is something as good as mongoose it would be difficult to get me to switch. plus, if you use a good repository pattern for all your database logic it isn't that big a deal to just construct your own promises, it is a bit repetitive though. Mongolian in CoffeeScript is cleaner.
2013-04-30 18:51:25;how should I use browserify with asynch loading of some of my js files?;"RequireJS?

I've also been using browserify which is good too, but do async, I just made a global function async_require(filename, callback) to load other browserify packages. A bit messy perhaps, depending on how you will use it, but it suits my use so far.Have your browserify `main` modules expose themselves as an AMD module.

Something like

    // for browserified CJS modules, `require` comes from the immediate closure wrapper
    var dep1 = require(""dep1"");
    var dep2 = require(""dep2"");
    // grab the global require from the global scope, provided by your AMD loader
    var amrequire = window.require;
    var amdefine = window.define;
    var MyModule = //....
    // do stuff
    module.exports = MyModule;

    amdefine(""MyModule"", [""asyncdep3""] function(dep3) {
       // do stuff with dep3
       return module.exports;
    });

Honestly, unless your JS source is huge, it might be less trouble to just bake everything into a single browserified JS file."
2013-04-30 16:50:41;Why you should use Node.js for CPU-bound tasks;"That was a really good read, thank you!Great post. Thank you.You lost me at ""run it on the client"".  Doesn't that defeat the purpose? How do you know that your client is capable of handling the javascript or that it's even a web browser at all? Why didn't you use https://github.com/audreyt/node-webworker-threads

Also I'm not sure you mentioned Cluster did you?  Not that it would work as well as threads for this."
2013-04-29 22:31:56;.jshintrc: Always use triple equals?;Ah, `eqeqeq`!
2013-04-29 12:07:37;I you like Q and promises, you might like my server/client wrapper for socket.io which basically wraps socket.io calls into promises;"Sorry about mispelling ""If"".
Also since yesterday AngularJS version of client library is included. I know the implementation is very rough and there are probably some bugs, but that is why I share it-to get any type of feedback."
2013-04-29 12:03:23;Ghost: a Node.js Blogging platform;">An open source blogging platform
 
>Ghost is Open Source, and it's all yours

>We want to build Ghost to be a self-sustaining open source project. 

>With your support we can work hard to finish the first complete release of Ghost and get it out into the world

Any link to the source?Good lord those birds are annoying.So basically it's Tumblr if Tumblr weren't a company?I think it looks great. Backed.I'm not a blogger so I can't really say but do you think that most bloggers/journalists/etc. would want to learn Markdown in order to write their articles?I've built my own CMS/LMS and a blog, and have used wordpress, honestly it isn't that hard to make a blog.  If you want to create a cool free CMS, write the code, put it on github, grow a community to help code, that is the point of open source, why do you need our money? If you want it to be popular and matter, then one of the most important things is how do the plugins work?

Also, will there be widgets, and how will they work?

Also, what if I want single page app functionality?

I think the idea of making it JUST a blog is a cool idea, but if you have plugins and it becomes popular, then with the Node.js software ecosystem, there will probably be like 4 plugins that make it into an operating system within a year..

Personally I think that we could really use a Node-based operating system with plugins and widgets.

http://vimeo.com/43784316
You have an idea for an open source project, you ask for money on kickstarter, and people actually give it to you!?!

I dont know which way is up anymore."
2013-05-06 03:15:17;concat-stream no working as expected;you gotta .toString your buffer before you give it to qs. also github issues are a better place for reporting bugshas your code been refactored at all with the new streams introduced in node 0.10?
2013-05-04 20:01:34;Kerouac - Express-inspired static site generator;"You know what? I like it. 

I was actually trying to build a static-site generator with a gui (hate writing markdown in a text editor). It was all going well until I realized that building something to manage different page routes would be kind of more than I wanted to take on for a silly side project. 

I like this approach a lot. 
[deleted]"
2013-05-04 19:47:21;Cron jobs made easy with Node;"Were cron jobs ever not easy?I dont really see the point of it. 

Maybe if you're using shared hosting and are unable to set cron jobs for whatever reason. But then they're going to run as the node user anyway, which limits it a bitThis is reasonably cool.  But.

I would not be happy with an application that had it's own scheduler.  One would be okay.  Two a headache and a dozen ... 

Cron exists to eliminate such problems.  Need to halt something?  It's all in one convenient location.

Still doesn't explain why you wouldn't want to rely on *nix cron jobs.

> Recently I had to built a job that runs every 10 minutes and exactly on the minute - 8:00, 8:10, 8:20 etc until the end of times.

That...is what crond is made for.  So what if you get ""second"" precision - unless you're on an overloaded system (which will screw up node-cron as well, node's event loop doesn't take priority over kernel scheduling) the kernel will call it at the top of the minute anyways.  I don't think I would use this to replace unix crons, but for experimentation purposes it's quicker to setup and iterate on. after things looks good I'll create a unix cron. at least that's what I imagined. not sure if it's the best development flow but i'll give it a try.What does this add over setInterval()? "
2013-05-03 16:58:36;I had some trouble getting an SSH workspace set up with Cloud9 IDE while using nvm. Here's how I fixed it.;
2013-05-03 14:49:37;my project to learn/play with node.js: swarm-host (redis dashboard with socket.io);great, I've been looking for a redis dashboard and was suprised that there was none written in node!
2013-05-14 19:31:11;After 20 days there is finally new release of Node- 0.11.2;"I'd really like to see them fix the crypto library (it's ridiculously slow, doesn't operate like a typical key library and they misuse the DH name - which irks me nomenclature-wise - key generation of a 4096 bit key can take upwards of 3 minutes whereas ursa does it in seconds on the same machine) and the node-gyp build system on Windows (it requires destroying any preexisting install of VC++2010 and distros, installing VC++2010Express, then the Win7.1SDK, then a patch for the compilers when simply changing it to work with mingw or cygwin would be suitable).

Really though, just decent core library support would be nice (like a crypto library that is useable in a PKI system).  Still, the cluster support they are focusing on should be cool."
2013-05-14 13:56:06;"How to calculate the current CPU load with Node.js; without using any external modules or OS specific calls. Feedback wanted!";"For those that don't give a crap about windows compat - use the builtin  [`os.loadavg()`](http://nodejs.org/api/os.html#os_os_loadavg)I like [icholy's revision](https://gist.github.com/icholy/5579685) a little bit more, it cleans up the formatting a bit for readability and utilizes the functional programming technique reduce in order to calculate the total tick.

Nice job though."
2013-05-12 10:15:29;Problem with npm and Socket.io on windows;"I had no issues at all getting Node, Socket.io, and npm working on a Windows 7 machine - both client and server code worked without issue, even though I did get some kind of error message when originally installing Socket.io.

I have also had zero other issues developing for Node on Windows.

I know this doesn't help solve the issue, but it does provide evidence that your issues are likely solvable.> I even tried using an old ubuntu laptop and copying the successful socket.io download I get from that in to my project but it still doesn't work.

You can't just copy it, you have to install it. Part of the installation is compiling the native parts with a C compiler. On your ubuntu laptop, try using npm to install socket.io (don't just copy it) and see what happens. If you compiled node yourself, it should just work. If it doesn't, you may need to install build-essential.I resolved my issues with running socket.io on windows by installing latest Visual studio(free version will suffice) and windows sdk. Maybe having python 2.7 installed is also not a bad idea. Then run the NPM commands NOT in node.js command prompt, but in windows sdk command prompt or visual studio command prompt.Since you're just starting, consider this hard-earned advice: ubuntu vm. You're likely going to deploy to linux in the end, so starting there seems smart. You can still edit files in windows if you like. There *is* a certain amount of friction to developing node apps in windows. I use vmplanet's ubuntu 12.04 LTS vm. "
2013-05-09 12:04:28;Starting with Node and Web Sockets;"I've found that using Express, Socket.io and Express.io (an express based framework made especially for socket based applications) is the best way to go.

It's easy to understand how everything works together which, in turn, enables you to start hacking away without having to do a lot of setup.What should we be using instead of an ID?"
2013-05-09 11:36:02;Deploy a multiroom chat on cloudControl (node.js + socket.io);
2013-05-21 20:42:26;RPC over WebSockets with Node.js and Streams API;"Now.js is not being maintained anymore but I don't see any reason not to use it.  Still works last time I tried and still the simplest API.   Also uses socket.io so there are fallbacks if websockets aren't available.

https://github.com/Flotype/now

If anyone knows of any specific reason why now isn't being maintained anymore, especially if there is some technical issue, please let me know.  I have been using it a lot and it works fine, but seems like most people are doing it a different way (usually a way that is a little bit more complicated)."
2013-05-21 12:02:23;Essential packages and general advice for devs new to Node;"I've been meaning to write a blog post on this for a while. Here's a short list off the top of my head. I'll focus on modules not a part of the standard Node distribution.

**Modules:**

[Socket.io](http://socket.io/) - Amazing module for managing consistent event-based socket connections. Go get it now!

[Async.js](https://github.com/caolan/async/) - Excellent module for async/concurrent execution without callback hell, and throws in some functional programming paradigms to boot

[Underscore](http://underscorejs.org/) - Provides a seriously useful set of convenience methods and functional programming functions. Looks it up, your life will be easier and your code will be cleaner.

[Request](https://github.com/mikeal/request) - the standard for easy http requests

[Mongoose](http://mongoosejs.com/) - An elegant ORM for MongoDB in Node.js

[MongoJS](https://github.com/gett/mongojs) - fairly simple, straightforward MongoDB communications from Node.js

[node-validator](https://github.com/chriso/node-validator) - popular module for string/input validation

[Everyauth](http://everyauth.com/) - Authentication framework that tightly integrates with Express.

[Passport](http://passportjs.org/) - Simple authentication framework, also drops easily into Express.

[Nodemailer](https://github.com/andris9/Nodemailer) - When you need to send email from Node.js

[Winston](https://github.com/flatiron/winston) - the preeminent logger for Node

[node-supervisor](https://github.com/isaacs/node-supervisor) - Refresh your node app as files change for faster development and testing
 

**Frameworks:**

[Express](http://expressjs.com/) - this is the standard web application framework for Node

[Sails.js](http://sailsjs.org/) - this is a fairly new framework, with Express underneath. It has some very interesting ideas though with integration of socket.io and a new approach to its ORM, and I've been enjoying it greatly. 

[Geddy](http://geddyjs.org/) - Another MVC web framework. I've not used it much, but I'm told its fairly mature and worth a look.


These are my go-to tools, but there's probably a ton more out there. I'll try to update this list if people provide some suggestions I've forgotten. **First read a few good books on JavaScript**

I recommend: JavaScript: The Definitive Guide

**Answer these questions**

 * What is the scoping of varables in javascript
 * What is variable hoisting, and how will it bite you
 * How does prototype based inheritance work?

**Things to understand and ponder about**

 * If NodeJS does not have threads then how does it schedule which operations occur next?

**Packages I use a lot**

 * express
 * optimist
 * colors
 * jade
 * cjade
 * node-dev
 * async
 * pegjs
 * redis
 * mysql 
 * request
 * tracer 
 * winston
 * passportjs

**Easy way to create a new package.json to manage your dependencies**

>  echo ""{}"" > package.json

>  npm install PACKAGE --save

**Install a package globally so the binaries are in your path**

> sudo npm install PACKAGE --global

**Create a new express application from scratch**
(After installing express globally)

> express -s myapp

**Use node-dev to for development**

> sudo npm install node-dev --global

then instead of running node

> node-dev app.js

Node-dev will restart your project when it detects a change to one of the source files in the project, makes development with express much easier.

**Things I don't have good answers for**

 * ORM / Persistence - I've tried all of the premier ORMs  for NodeJS and I dislike all of them, but generally I dislike ORMs. 


It would be nice to also write what kind of things you wan't to build. Node.js is being used in numerous ways-from robotics to desktop applications. I guess you wan't to use it in a standard way most people use it-for webapps. For this, I must advise you to try Expressjs framework, fiddling with socket.io is definately fun, Mongoose is also a good productivity booster when you use MongoDB."
2013-05-21 11:10:08;Continuous deployement with Github, Travis and Heroku for Node.js;Can't speak to this CI setup, but having any CI setup is near essential to a good development environment. Even if you are working completely by yourself still have one in place. 
2013-05-20 22:40:12;Quality analysis on Node.js projects with Mocha, Istanbul and Sonar;Any improvements would be welcome!
2013-05-20 19:09:58;hookify - a tiny library to add pre and post middleware to everything;
2013-05-28 18:11:04;Simple module for loading JSON into redis for testing;Note: async.forEach is deprecated, its now async.each
2013-05-28 17:10:32;Conflicted about use of Node;"Why not pitch this as a potential R&D project to your management team? If Node has great performance -- done. If not, maybe node wasn't the best choice anyway. Put together a simple CRUD site on one model in ASP.NET MVC and Node and see which one gives you the best performance. 

Also consider the potential savings if you need to scale the site; using IIS as a webserver might be more expensive in the long run. 

> rational part of my brain says its unethical

Surely 'unethical' wasn't the word you meant to use there. 

Sorry for the many edits, but one more: consider how many devs under 30 are using MS tech. Very few in my estimation (source: I'm a former MS dev, most of the people I see at Node meetups are under 40, the opposite for MS meetups). If this is a site you expect to be around for many years then you may have a hard time finding devs to work on it in 10 years. I use [tedious](https://npmjs.org/package/tedious) with connection pools for querying our various MsSQL databases.What are you talking about unethical? Do you want to be able to recruit good developers?  Then you should do it in Node and it will be another thing you can brag about.  You should take a look at AngularJS also.  The way I look at it is I dont really like Ruby, and.. is it really ethical for anyone to start a new application now in PHP? For God's sake man.  Especially when you already know Node.

If you think Node doesnt fit nicely for your project then you should learn more about Node.  Its a big advantage in any web project.i'd say, build the interface in ruby/python/php/java, and rebuild it on your own time in node as a personal project if you have time. scratch both itches.The chance of encountering another programmer who knows javascript is pretty likely. Also, if you pull any random programmer off the street who is worth a damn, it doesnt matter so much what languages/technologies they've been using lately. They should be able to extend the metaphors they've learned and apply them elsewhere. The widely used production programming languages arent so different- sometimes you have to say ""hm, how do I use feature x in this language?"" And then in a few moments the internet tells you and you know. Ok, maybe if you were making this post on /r/haskell... but I'd say go for it man. Node might be more interesting than the Rails stack to you, but you also say that this is just a CRUD interface. Doesn't sound super interesting to me. Something like Rails is made to build out what your'e describing with arguably less overhead than any other framework. Why not just bang this out in Rails and do an *actual* interesting project in Node?

Then you're the guy or girl that builds the needed stuff really quickly that lasts a long time because the company has no trouble getting new developers to work on it, and who also does super cool projects on the side that push your company's tech in new directions.If you have the option to port from MSSQL to PostgreSQL you should definitely go for it, the any-db module for node is very good with PostgreSQL (not certain if it works with MSSQL, it might).  I think the easy of having everything in one language far outweighs anything PHP, Ruby, Python, Java, Perl or the rest ever brought to the table, plus it's much more robust.  Development of web apps with node is so much quicker and cleaner than adding another language into the mix it's ridiculous, if node handled the client-side-javascript, html and css for me I'd use it for that too - but limiting it to just javascript, html and css is a huge perk in my opinion.

TL;DR: Release < 1.0?  Bah, the major web-based companies have already begun using it.I'd say go for it.  Consider, though, that Node's sweet spot is creating API's.  I'd achitect your web interface as a SPA that simply calls API methods on your Node server.  If you want page rendering to still happen on the server, I'd have your webserver sill call the same APIs a SPA would."
2013-05-27 04:35:22;NodeJS hate;"I looked at your comments in the other thread. You posted a quickie one liner and the other guy replied with a good explanation of why node might not be good for that particular developer. I didn't see any hate at all. Can you post the said ""hate"" here so that we can understand what it is that they hated?What is that technology that doesn't have haters?"
2013-05-26 09:31:01;Template for vanilla Node.js Website or Web Service;">solving a problem Node doesn't have

Isn't that the premise of a lot of kinds of abstraction?

Like Request doesn't seem to me to ""solve a problem"" so much as just take an existing way of doing things and speeding it up a bit.> When newcomers ask about writing a website or a Web Service they are usualy being told to use express. The problem with express is it uses middleware/Connect. middleware was a hack invented while solving a problem Node doesn't have. The problem that WSGI solves, which is creating a common interface for writing websites or frameworks that are used by web servers (such as Gunicorn in python or Thin in Ruby). Node doesn't even have those web servers since it comes with a built-in server as part of it's http library.

I think middleware in Express is probably the best abstraction I've seen in any framework I used so far. It allows me to create small building blocks which gives me fast development and is easy to understand.

>  It's mostly just not a very useful approach for handling the kinds of things you need a webserver to do - serving static files, parsing POST data, parsing cookies, routing, auth. 

You don't say why it isn't a good approach for middleware. I find an array of functions that works on a set of data very straight forward, functional and easy to test.

     stack(req, res, [ formParser, cookieParser, Router, Auth ]);

> Also no test frameworks or control flow library.

This works perfect for trivial stuff like your [example](https://github.com/oren/node-website-template/blob/master/routes/home.js). I would love to see an example where a route needs to grab a user from the database, validate post data, store the data inside a database and then render a page without using control flow.

With middleware it would look something like this:

    app.get('/',
            db.user('id'),
            data.validate,
            db.save,
            general.render('view'));

Creating your own generic middleware is easy so you can reuse most of them in other routes. Which means you can unit test them in one place and reuse them everywhere.

> No frameworks

I love the anti-framework movement. Most of those guys end up with something that looks like framework but is either shitty none tested custom code or a bunch of modules pulled together to create an anti-framework framework. A good example of this is the [npmjs](https://github.com/isaacs/npm-www) website. "
2013-05-25 18:33:59;Can a MEAN (MongoDB, ExpressJS, AngularJS, Node.js) stack be used to create anything a more common stack would?;"I have nothing to add, except that I think the name of this stack is hilarious, and I hope it becomes a thing.Yes, there's no reason why not.

Express is a bit lighter than rails, but it still has all of the essentials you would look for in a web framework.

See http://expressjs.com/applications.html for sites built with it.You seem to look at it wrong, figure out what you want to build then research and decide what tools will do the job most efficiently for you. I don't personally think there's a mean for such stack. Just use plain Node.js with a few nice packages from NPM to do exactly the needed job without having the overhead of a full framework.

There's thousands of very nice packages on NPM super easy to use and everything. Sure it's going to be a little more research and learning but the result will be something very strong, modulable and fast as fuck.

I built a few projects using this technique always delivered astonishing performance (in comparison to all PHP projects I did in the past, yes it's faster with nginx and a few caching tricks but it's just too painful in comparison to how easy it is to make a Node.js app run).

That's my two cents though, that MEAN stack is full of very nice tools I love express.js and Mongo.js is so easy to get started with.

Hope this helps."
2013-06-04 17:34:38;Custom constructors for Mongoose models;Why not submit this to mongoose as a PR? I'm sure they are open to any new hooks
2013-06-03 14:09:58;My first proper app in node - a playlist service to help small groups play music they all like. Feedback welcome :-);"I only looked at the server code so I'll only comment on that.

Put the static middleware right under the favicon. It's only a small optimization but it makes no sense that the request goes through the bodyParser/router/... when you are returning a static file.

Now that you have your app you can start abstracting your middleware to make it more reusable.

A good example is res.render. (also works for res.send, res.redirect, ...) 

    function render (view) {
      return function (req, res) {
         res.render(view);
      }
    }

In your route you can use it this:

    app.get('/playlist', playlistData, render('playlist'));


Next you could abstract the playlistData middleware into something you can reuse for all data. 

    app.get('/playlist', data.find(Song, { id: 'params.id' }), render('playlist'));

If you do this for a while you'll notice that you'll have a basic set of middleware which you can reuse to quickly build CRUD apps. 

I would suggest to not over abstract things either because to much abstraction leads to pain as well. For example the render middleware in my case came from being annoyed by having to check if the correct view was returned in all my middleware unit tests. Having one render middleware means I only have to unit test it in one place.

Here's an example file of one of my apps: https://gist.github.com/Enome/6641fc2ae25fc48dc3ba All the data., validation., auth. and general. middleware is reused throughout the entire app.


    "
2013-05-30 18:42:56;Disconnecting a socket.io client socket server-side;This is quite the problem indeed - I've not been too happy with socket.io's state of...quality, I guess.  Redis bugs among other things are quite irritating to run into.That's a pretty serious change
2013-05-29 02:38:35;Blog post about node.js frameworks and why Big is awesome;"I'm sorry, but this seems awful. 

 * Your motivating example is disingenuous as it shows all the code to start the app, not just the wrapper.
 * big requires a lot more boilerplate
 * you are not solving any problems, just adding more complexity
 * you're going against all existing standards for requiring modules instead of going with the grainThe problem with a system like this is finding integration points. If I wanted to do something the framework doesn't support I don't even know where I would start looking for a spot to add it myself. I don't see any support for anything related to websockets so I know I would hit that problem pretty quick. How do I login with facebook? How about twitter? How do I cache in redis? How do I distribute work between servers? How about syncing models? I like the idea but I think a lot of devs aren't comfortable with all-encompassingHow are database indices and nonstandard, non CRUD queries handled. 

I like the concept a lot as my api code is a bit of a disaster. That being said, it seems like this enforces lots of constraints on structure. "
2013-06-08 02:12:48;BlagJS: A simple blogging engine for node.js;"No screenshots/documentation? I'd like to check it out but I don't really want to read all your source code...Trying to get a blogpost-view (e.g. http://blagjs.herokuapp.com/blog/post/testpage), I see nothing and getting the following stacktrace:

    Uncaught ReferenceError: mdEditInit is not defined 

@ post.js:66

edit: ah, direct link works (still error in console), but not from the frontpage to a blogpost.Very good, I made a blog template myself last year (shameless plug http://github.com/jawerty/node2blog). The only problem I have is the lack of docs, hard to distribute without lending information."
2013-06-07 17:20:00;Trying to understand how it's done. (Parse.com Cloud Code);Maybe they are adding it to req.session?
2013-06-07 15:05:12;deAMDify - mix AMD and Node modules with browserify;
2013-06-06 22:27:41;How can I get a consistent timestamp in node.js and/or MongoDB/Mongoose?;"Ask your host to run ntp and resync.if time precision is indeed that critical to you then perhaps you need dedicated hardware that you can synchronize time across all servers (twitter has to do this for their snowflake ID generator).

a worse approach: perhaps 1 dedicated server is needed to serve out time?

very hard to tell unless you describe what you're doing. maybe a different design wouldn't cause you this problem at all.Use node-timeWhy not use the toUTCString() function?

    console.log((new Date()).toUTCString())"
2013-06-06 20:28:53;How to debug node?;"I use [WebStorm](http://www.jetbrains.com/webstorm/) as my IDE and it has the best debugger for Node that I've used so far. I have no complaints, especially since they just upgraded to WebStorm 6.I use node-inspector several times a week. It seems fine to me. I'd prefer to have a lower-friction debugger like Rails has (but lacking an ide in the rails debugger makes it time consuming) but I'm fine with node-inspector. It is surprising that it's been that long since an update. 

I'm missing something here: the ""this one"" that you link _is_ node-inspector. Errm, what? I think node-inspector should still work. There are also numerous forks that might help with problems or improve your experience.

Like this one that is very active: https://github.com/strongloop/node-inspectornode-inspector still works fine, but you can also use an IDE like [Light Table](http://www.lighttable.com/) or the self-hosted version of [cloud9](https://github.com/ajaxorg/cloud9/).I wrote up an answer [here](http://www.reddit.com/r/node/comments/1emi8d/connect_to_running_app_from_console/ca1rc2s ), and included some scripts that make it easier to use node-inspector.eclipse has plug-in to let debug and step through a node project. Though WebStorm is great, eclipse is free."
2013-06-17 21:55:24;A simple MySQL crud wrapper.;"    //Copyright 2012 ERAS/Educational Research and Services
    //Reproduction of this material strictly prohibited.
    //Written by Ryan Lee

I know licensing can be confusing, but that's not open source. http://opensource.org/licenses

edit: i see there's an MIT license in the readme. but still, this should be changed in crud.js

otherwise, could be handy for prototyping or to help others learn (because it's short). good luck!This is a short hand for simple CRUD commands for node-msyql.

It is my first open source project and I would appreciate any feedback.Why 'load' & not 'read'?"
2013-06-17 16:43:18;DAE find the whole 'instantiate over here, assume it's instantiated over there' in AngularJS a bit annoying?;"I find it a little annoying, but far less annoying than doing javascript development 10 years ago.That is just the nature of javascript and including libraries. If it makes you feel any better, I would recommend wrapping your code in a IIFE (also helps protect your code against wayward misbehaving external libs):

    // AppController.js
    (function(window, angular, undefined) {
      angular.module( 'TheApp', ['ngResource'] );
      // ...
    })(window, angular);

...in fact if you are using require this should be similar to how you are using angular already...are you not using closures with require.js?Isn't the angular object the only global you have to use? You can chain modules definitions afterwards."
2013-06-16 00:48:12;Writing an AngularJS App with Socket.IO (was looking for some Node.js+Angular.js tutorials, was not disappointed at all. This stuff looks amazing);If you're looking for easy socket.io/angular/express integration you should take a look at [sails](https://github.com/balderdashy/sails). It's pretty awesome.yes, I also tried this seed and can also recommend to try sails.
2013-06-14 21:59:02;Test your node-minimatch globs in the browser with ease;sorry, what?
2013-06-13 21:49:11;[Socket.io] Client connects to server but unable to send/receive events.;"Have you tried using different ports?  I run a website which depends on socket.io, and some people have reported issues connecting when I ran it on certain ports.

http://websocketstest.com might be of use.Have you tried using wireshark to eavesdrop on the connection?Can you post the code to a Gist or something?  Have you tried connecting via a node repl to the socket.io server and seeing if you can send or broadcast a message that the server receives?  

Are you using HTTPS or WSS?  If so make sure you use secure:true as an option when setting up the client. Are you running node behind a proxy? I had a similar bug when I improperly configured nginx proxy.

In my case the socket.io debug log showed the client connected but past that the socket was totally dead.

If you are running nginx make sure you have the [latest release](http://wiki.nginx.org/Install). I followed [Chris Lea guide](https://chrislea.com/2013/02/23/proxying-websockets-with-nginx/) to get me up and running. "
2013-06-23 22:09:10;Introducing Pandacodium - A 48-hour realtime web apps hackathon;Looks awesome. I've been working on a real-time web game for several months now and would love to participate... unfortunately I'll be at a conference on those dates.Sounds awesome. I'm pretty green but would help a team with basics, docs, testing. Anyone running a team?Sounds awesome, I'll be looking for a team in my town. 
2013-06-20 10:38:00;Add test coverage to your Node.js projects;"What's with all of these code coverage articles surrounding that crappy istanbul library?

Just do this:

    npm install jscoverage

Then in your test file:

    var jscoverage = require('jscoverage');
    jscoverage.enableCoverage(true);
    var myLib = jscoverage.require(module, '../path/to/my/lib');

    // Tests go here, just like normal, no preprocessing needed

    jscoverage.coverageDetail();
    // Prints a file-by-file, line-by-line, color-coded coverage report

You can even access the jscoverage internals with the ``global._$jscoverage`` variable, and find out not just that everything was covered, but how many times each line was run, and then send that information to [coveralls.io](https://coveralls.io/) with the ``coveralls`` library and track the history of your coverage over time.

I haven't made any blog post about jscoverage because I find that library *that simple* to use, but I'm starting to think I should."
2013-06-20 05:55:20;The World's Simplest Dynamic Image Service;This is an excellent tutorial. As someone who started learning node yesterday, such a simple yet powerful application is a great demo of why I should keep learning.Can u please tell which theme / colorscheme r u using for syntax highlighting? 
2013-06-19 17:01:50;Generate fancy impress.js presentations using Markdown!;I'm all about open source and contribution, but how is this better/different than [mdpress](https://github.com/egonSchiele/mdpress)?Full on javascript, count me in!
2013-06-19 16:24:47;what's up with the $ in front of variables?;"It's just a convention some people use. '$' is just as valid a character in a variable name as 'a' or '_'. It carries no special meaning in the language syntax itself. I like using it as a convention sometimes, for example I've always felt that

    var $foo = $('.foo')

was a good mnemonic for knowing which vars are cached jQuery instances.As others have stated, it's just a convention so it's immediately obvious what objects are coming from AngularJS. If you see $scope or $http, you know that that is an AngularJS object right away.

I like it because I believe it makes code more readable.I see it quite a bit in clientside javascript like

    var $element = $('.foo');

Or something like that to denote it's a jquery object, but I haven't run into it in node[deleted]$ is a useful character to denote separation. It has the benefit of being a symbol that you would never use unintentionally and short enough to type easily.

For instance when I need an empty namespace inside of a populated namespace for user variables or a cache I will use $:{}"
2013-07-02 03:45:57;Pandacodium real-time webapp hackathon. Looking for a team.;"How about me? I've used Node for about five or six projects, and I write JavaScript (and CoffeeScript and ClojureScript) for my work and my own projects, so I can really get work done fast with it. Check [my GitHub](https://github.com/zfogg)!i can help with browser stuff and ui if nothing elsebut how can we build real time application if time isn't even real?!^[citation ^needed]I'll join you!  I have quite a bit of experience in node and node related things. I've done tons of hackathons, not  cross country though!  Count me in. Definitely interested. As long as we build something onto nodejs I'm in. My php and ruby are rusty at best unfortunately.Last night the team field was vulnerable to XSS, now you can't use `<` or `>` unless you put two `>>` :)... but then you can't access your team :(Sounds very cool. How many people can be to a team?I hope this doesn't take away from your post but I made a [similar post](http://www.reddit.com/r/web_design/comments/1hj6b1/any_frontend_wizards_feel_like_teaming_up_for/) in /r/web_design after seeing this. 
I linked back here, but if you want to look for some front-end people or whatnot feel free to post a comment over there. 

If I can't get a team together and you happen to want *another* node developer (with moderate design experience) I'd definitely like to team up!"
2013-07-01 20:02:54;assure: Promises/A+ micro library;"Looks good! You should either allow the end-user to specify an asynchronizer, or smartly detect an asynchronizer based on environment. For example (not super-well-tested):

    var _async,
        timers;
    
    if(typeof setImmediate !== 'undefined') { // If we have setImmediate, use it (IE10+)
        _async = setImmediate;
    } else if(typeof process !== 'undefined') { // If we're in nodejs 0.11+, use their timers module.
        timers = require('timers');
        
        if(timers && timers.setImmediate) {
            console.log(""using timers.setImmediate""); // If timers has setImmediate, use that (Node 0.11+)
            _async = timers.setImmediate;
        } else {
            console.log(""using process.nextTick""); // Otherwise, use nextTick
            _async = process.nextTick;
        }
    } else {
        console.log(""falling back to setTimeout"")
        _async = setTimeout; // There's nothing better *sigh* use setTimeout
    }

`setTimeout` is the slowest of the batch, and some environments have faster options available to them. You should have a way to take advantage of that if possible.

Also, what's the impetus for tracking parent/child nodes? Seems like unnecessary bookkeeping, but maybe I'm not imagining the right use case.

Also also, [here's a completely different implementation](https://github.com/nhusher/gui-presentations/blob/master/promises/promise.js) I whipped up for a recent talk I did on promises.What qualifies this as micro?"
2013-06-27 15:05:13;Binding machine learning and node.js;
2013-06-26 20:00:18;A Rubyist tryst with Nodejs, SockJS & BDD with websockets;
2013-06-26 19:44:42;An Introduction to Node's New Streams;Finally, the new streams API. When I started writing Node.js code a year ago I stumbled into the exact same problems that streams2 is supposed to fix. I ended up [sort-of writing my own thing which works similarly to streams2](https://github.com/phusion/zangetsu/blob/master/lib/zangetsu/socket_input_wrapper.js). Glad I can ditch all that code now and make my codebase smaller.
2013-07-09 18:24:20;LIGHTNING MEMORY-MAPPED DATABASE (Node wrapper);How's it compare to NeDB?I think you left your caps lock on.
2013-07-09 06:47:23;Firebird Node.js Example with AngularJS;
2013-07-09 01:07:14;Neat forever replacement - pm2;Why hello. This looks pretty useful. It's a bit rough around the edges (can't stop/restart an application by name, the logs command can't filter by a particular app, some strangeness occurs with long-running dashboards, etc), but it works.
2013-07-06 00:45:49;Tools and Strategies for node.js Development on GitHub;"Thanks for pointing out badge.fury.io for NPM version badges; but you don't need to pay for a dependency status badge in Node.js, [david-dm.org](https://david-dm.org/) will do that for free.

Also, beyond just running your tests, if you have code coverage results for your tests, you can hook your github and travis-ci accounts together on [coveralls.io](https://coveralls.io/) and get a code coverage badge to put in your readme, too. :)The recommendation to use Travis is awesome. That's because Travis itself is awesome. Sometimes I'm too lazy to run the unit tests myself because of ""nah this small change can't possibly break anything"" thoughts, and because my test suite takes 15 minutes to fully run. Travis has reduced my need to run the tests myself, and I *know* that I will be reminded if anything breaks, which gives me a big peace of mind."
2013-07-05 14:01:14;Norch- a search engine for node.js;"Looks cool!  I'm doing a search project with angular/node as well, although with Solr on the backend which certainly does not fulfill your ""requires minimal configuration to set up"" requirement.

I'll definitely be tracking progress on this project.  I assume you plan to keep going with it?"
2013-07-16 15:02:43;[Help] Problem outputting array onto page with Jade;"Why are you storing `lcs` into `items` in the first place?  Use it directly, first of all.

Also, move the res.render call INTO your callback there."
2013-07-16 13:22:30;Writing a Command Line Utility using Node [x-post from /r/javacript];"* `eval`, really?  
* Using `process.argv` straight?

node has a number of modules and builtins that will do you far more good than trying to NIH from a basic skeleton application.  Keep it DRY.

First - instead of eval, VM it with the [VM builtin](http://nodejs.org/api/vm.html).

Second, don't use `process.argv` straight. Be lazy and let someone else do the work for you. Either use npm packages `commander` or `nconf` to handle commandline parameters for you. It'll save you a lot of work and make the end product much friendlier to work with.This is a cross post from /r/javascript, I basically wrote this post on my blog about how to write a command line utility using node"
2013-07-16 01:36:41;Does anyone know when the fix for npm update working with git dependency urls is going into stable?;Have you tried asking on the appropriate mailing lists or in the issue itself?
2013-07-15 18:05:03;Firebird, Angularjs, Node and Socket.IO - Part 1;
2013-07-15 05:56:04;How do you update one-to-many relationships in Node.js?;why are you cross posting from SO? -1 
2013-07-23 19:21:11;Know your source code: a full async testing library in 250 lines;"Can you tell me what the benefits are over something like mocha or jasmine?

Thanks"
2013-07-22 12:17:59;I've written a Node CLI so now what?;"Just posted my second post about Nodenow work on something that is more useful ;)Shouldn't you at least credit the responses to your first one and the suggestions they provided as the bulk of your research for this second article?"
2013-07-20 17:57:20;My Thoughts on Function Optimization in JS/Node;These 'writing javascript for performance' articles give me confidence that the engines running our javascript are going to keep improving substantially in the near future.
2013-07-20 16:55:49;Node-Firebird group is created for discussions about asynchronous Firebird client for Node.js;
2013-07-20 01:30:32;New prizes announced for Pandacodium real-time hackathon!;
2013-07-30 06:34:29;express-path: easy route mapping for Express;"Is there anyway to define middleware in the routes?

e.g.

    app.post('/articles', auth.requiresLogin, articles.create)

This is how I would usually define which pages require authentication.I'm new to node and currently working on my first project where this module would be handy. However I can't use it as it is, since I use additional middleware on my routes, for example to validate forms using [express-form](https://github.com/freewil/express-form). Example:

app.post('/path', form(...), controller);

One suggestion for the code style: You should avoid using tabs for indention, since tab widths can be set differently in each editor/environment and that will break the indention. Look at your code in github, to see how the indentation is messed up, making the code difficult to read:

https://github.com/hyubs/express-path/blob/master/lib/express-path.js[deleted]"
2013-07-29 20:03:23;glance - A disposable static web server;"Awesome, I love the idea of a simple one command file server. Node just makes it better. I have been using `""python -m SimpleHTTPServer""` for way too long.

Are you the author?This is an awesome little tool. Glad to find something else to help make testing/debugging easier. "
2013-07-29 18:51:43;wack - An ack implementation in node;
2013-07-29 18:39:49;tik - A command line key/value store in node on top of LevelDB;If I had a dime for every new key/value store...
2013-07-26 16:17:46;Evaluation of using Node to build large, non-trivial web applications;"I currently work on a rather large application in Node. Is is a great technology, but there are a few limitations:

- Be prepared to implement substantial parts of the application that would normally be framework code. We use Express.js, but it provides nowhere near the level of functionality of, say, Rails. This is fine in a way, as it allows us to make our app exactly the way we want.
- Have a good test suite, and run it very frequently. We don't, and it bites us in the ass regurlarly.
- Avoid global variables at all costs. We have a few for core parts of the app that were written when the team was still new to Node, and Oh my God, what a pain. They can and will break your code in subtle ways, often very late in the development process.
- The two previous points become VERY important when working with a dynamic language (Javascript), because most ""typing"" errors will happen at runtime (like ""Error: Object [object] has no function 'whatever'"").

As I said, Node is a great technology, and can be successfully used in a large project. Take your architecture seriously, though.Don't make large monolithic applications.  Stitch together small, well-defined, testable modules, and don't be afraid to refactor and sub-divide.LinkedIn uses node for thei mobile app:
http://venturebeat.com/2011/08/16/linkedin-node/I don't have any reference for it, but I have a good friend who works for Walmart labs and they use Node.js for their mobile application. 

I would recommend what @elite_killerX is saying as well. Spend your time ramping up in JS and it's oddities and you'll save yourself many headaches down the road. Things like 'this' and closures are powerful idioms if you are aware how they work. If not, you'll be hosing your code almost daily!

EDIT: [Found something here.](http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/)I'll throw in my 2 cents here; I've just been working on a large project to pull down tens of thousands of documents on from a web server, process and massage them, query some information for each document (up to a few dozen times), mix it all up, and store it back to a database server (mongo db).

Observations:

* I'm a huge node fan and love writing node code. It's just a total hoot.
* TBH, t's been more of a struggle than I had hoped.  I'm constantly running out of memory, hitting network socket limits (I try to fire off hundreds of requests at a time, but never can — I have to limit things to maybe 100 at a time).  I've tried inserting timeouts, reducing loads, and otherwise doing things to give the system a chance to breathe and catch up, but ...
* Basically I've started splitting things out into manageable bite-sized tasks.  my queue now fetches the documents in one process, saves to temp file, then another process comes along, processes them, another queries info, and another correlates and saves to db.

It's changing a lot and still a bit immature with missing features and wacky errors, but I'm still comfortable using it for RESTful API servers.  

I'm currently working on a fairly large Cloud Server Management tool in Node.js - and I'm fairly new to Node, coming from a C# Software background, there are things that I really love about the event driven way of Node. It often seems elegant and easy. With that being said, I had a lot of trouble wrapping my head around the ""single thread"" approach that Node has, e.g. the fact that you can't expect Node to serve a specific instance of a module to each new connection, if you store user-changes at runtime, they are global (since it's single threaded) - this is something Im still trying to find the ""best practice way"" of dealing with, like if you need a dynamic number of instances of a module.I've done a few non-trivial apps in Node and I've generally enjoyed it. It is very important to keep up-to-date tests.

Tools that have really helped me in the process:

* [Node-inspector](https://github.com/node-inspector/node-inspector)
* [TraceGL (great debugging / trace tool, not free)](http://trace.gl)
* [synchronize.js](http://alexeypetrushin.github.io/synchronize/docs/index.html)
* [lodash](http://lodash.com)

The callback pyramid is a very real thing and flow control can be very complicated without some sort of control library. Some people will swear by Q, Async, Step, etc. You can also just use named functions in the `function funcName() syntax`, which is hoisted. However I ran into serious problems in keeping my program reading top-to-bottom; and in more complicated flows, like payments, where failures and branches are common, it got really bad.

Fibers are a great way to keep your node programs sane and synchronous like any other web language. I can't say enough good things about them. Some people like to complain that it reduces code reuse - yeah, you can't move Fiber code into the browser - but I don't think that's anywhere near as much of a big deal as some people say. You can't use `app.get`, `fs`, `qs`, `process`, etc., in the browser. Generally, when I share code between browser and Node, it's small utility libs, e.g. parsing output from external APIs.

In any case Node is a great choice but make your async decision now. It will be much harder to switch in the future. I believe sync.js has the best syntax to date - it doesn't involve any transpiler hacks like IcedCoffeeScript, which a good choice if you like CS. But just like with vanilla CoffeeScript, you are going to want to use source maps, which AFAIK don't get along with node-inspector. And let's be honest, the language isn't that good for non-trivial apps or anything beyond configuration.

Edit: Just a bit on how brilliant it is, using synchronize.js with express: A big complaint is the sync.fiber(function(){ ... }) wrapper. Well, middleware to the rescue:

    app.use(function(req, res, next){
      sync.fiber(next)
    })

    app.get('/', function(req, res){
      var data = fs.readFile(__filename, 'utf8') // this is normally async, thanks synchronize
      res.send(data, {'Content-Type': 'text/plain'})
    })


Node.js is very powerful and extremely flexible. This flexibility unfortunately means that you have to do more work! Node is great for adding realtime features to existing websites/apps. If you want to build an app from scratch entirely with Node - Then you'll need to use a framework like Express or one of the single-page frameworks like Meteor (https://www.meteor.com/), or one I created - Nombo (http://nombo.io/)... or a bunch of others: http://nodeframework.com/

I would not recommend building an app in raw Node.js - there are just too many things to consider. Use a framework."
2013-08-06 20:57:45;Do Jakefiles automatically use `node ...` so that commands can refer to project-local binaries?;"I'm not sure about Jake/Cake, but hopefully we get an `npm exec` analogous to `bundle exec`, in which case it doesn't matter.
"
2013-08-06 02:52:14;Any open source SMS framework for Nodejs?;If you're looking for a service to handle sending/receiving SMS, I'd recommend [Twilio](http://www.twilio.com). They also have an official [module](https://npmjs.org/package/twilio).I'm confused, do those actually send SMS without fees or something or are they just APIs for services?
2013-08-05 22:23:37;net-sim: Simulate network conditions (latency/packet loss) for testing;
2013-08-05 22:22:59;pinger - A dead simple asynchronous ping module;"This requires elevated privileges whereas the standard `ping` utility does not. I wonder what the difference is between the two programs.

e: I guess the obvious thing is that one is in C and the other is in Node."
2013-08-05 19:14:38;What's the closest Node.js equivalent to Rakefiles?;"I think the most popular tool for doing much of the same stuff is [Grunt.js](http://gruntjs.com/). It has a ton of plugins already, and at least in my opinion, it's a lot easier to customise than rake ever was.I used Jake in the beginning but in the end I've moved to Cakefile when I switched to CoffeeScript.
Btw, can anyone recommend a synchronous library for node? Writing async tasks for console is a nightmare...Grunt is the most popular, however you should also check out [shelljs](https://github.com/arturadib/shelljs)If you don't dislike CoffeeScript, the Cake is the closest thing to it. It's almost directly based on Rake.

But why not just use Rake? I know it's Ruby, but I believe Ruby is better suited for shell tasks. There are lots and lots of features in Ruby that makes this so, e.g. some of the Perl-isms that it inherited.[grunt-exec](https://github.com/jharding/grunt-exec) can bridge the shell command gap with grunt.  Failing that, plain ol' Makefiles work well.What are you even doing in your makefiles that warrants such complexity that a few entries in package.json ""scripts"" field pointing to bash and nodes scripts won't suffice? I can't even imagine what you could possibly be doing but already my advice would be to not do so many things in the first place.Jakefiles or Cakefiles."
2013-08-13 15:35:19;Network event emitter - eventcast. Emit and receive messages over the network just as you would with regular event emitters.;
2013-08-13 08:23:05;Is anyone using Strongloop node in production?;"Dave from the StrongOps team here. The StrongOps console provides metrics similar to Nodetime (which also utilizes monkey-patching) and also includes additional data like eventloop monitoring, cluster support and slowest request mapping. We are focused on providing ongoing metrics for production services, while DTrace is useful in providing development insight. 

We are constantly looking for new and creative ways to provide data and love input from our users. For example, in our current sl-node release, we provide a native add-on to provide more in-depth data.I'm actually curious if anyone uses StrongOps (used to be NodeFly before StrongLoop bought them). I can say I've tried it before but wasn't all that impressed by the information it was providing (as compared to something like nodetime).http://techcrunch.com/2013/09/18/strongloop-raises-8m-for-mobile-app-platform-built-on-node-js/"
2013-08-13 07:34:28;Demo: Rick roll every media device in your house with nodecast;
2013-08-13 07:32:51;nodecast: A library that lets you control TVs, ChromeCast, and more;Is there a demo video anywhere that shows it off?Hmm. I can't get it to work. I can run the Rick roll script, it finds my chromecast and says it started the video, but my chromecast does nothing.
2013-08-13 06:19:27;How do I use an HTTP connection as a simple duplex socket?;Can't you use Websockets? Socket.IO?
2013-08-20 11:55:32;Why The Hell Would I Ever Use Node.js?;"I guess I'm using node all wrong. I've found little pain with it working with a RDBMS. It's no different than Rails or PHP or Java. Toss in a parametrized query string and move on. Not sure what's the big deal with that. 

I'm also using it for some heavy batch process jobs. I found it much easier to distribute load and tune the job using NodeJs and modules like async and smaller workers. I don't necessarily agree you need to avoid all CPU intensive things. Just be smart about it. You'll run into the same problems on any platform if your not smart about it. Writing it in some other language isn't going to be magically faster than Node if you don't take the basics into account.Like, seriously, why wouldn't you use Node for ""server-side web application w/ a relational db behind""? What kind of advice is that? I mean if Rails is your thing, use Rails. Rails is very good at being Rails. However, if you prefer to work with something lightweight, Node.js + Express + SQL is a perfectly fine option.I used node.js to make a smaller webapp that ran uploaded files together with user specified settings through a separate executable file on the server and returned the result to the user.  
I don't know if node.js is the ideal option for this, but it was easy to get websockets working with socket.io to give the user instant feedback from the executable running on the server. I'm also very comfortable with javascript and I enjoyed working with node.js and got up and running fairly quickly.I've been building a game server with Pomelo, which invalidates a lot of these negatives because it's designed to scale with multiple servers and load balancing. I'm doing it as a hobby so have next to no traffic but it seems like a very solid architecture. Own a business, starting up, or just want to convince your client, boss or the stakeholders why Node.js is the right way to go? Are you sure you are making the right choice, or need a supporting evidence? Lots has been written about Node.js, but people tell me they couldn't find it summarized in one place, so here it is - the good, the bad and the ugly of Node.js - if you fit in, just use it!I'm just about to start a new project and that's the question I'm making myself!"
2013-08-20 00:25:03;What's your favorite Node framework and why?;"My understanding, Express isn't supposed to be the one kitchen sink to rule them all solution. It was meant to be good at handling HTTP requests and helping you handle them.

I'd imagine the author's intention was that if you want further functionality, there are other packages that probably solve what you're looking for. I've done rails, I've done ASP.net web forms, the kitchen sink solution is a frustrating path to go down.

At least consider researching low coupling, modular designed software. Here's the author's post on such a topic: http://tjholowaychuk.com/post/27984551477/componentsSails.js is pretty exciting. Made a sample app very fast with many out-of-the-box features that are well done. Relevant SO post: 

[which NodeJS MVC framework currently has the best mix of maturity and ease of use?](http://stackoverflow.com/questions/9744798/which-nodejs-mvc-framework-currently-has-the-best-mix-of-maturity-and-ease-of-us)No [Meteor](http://www.meteor.com/) fans here? I've been having fun with it. Still needs Angular.js support as well as many other things, but so far it's been pretty seamless and almost frighteningly powerful. Never has so much power been granted to a single ""command + S"" from your text editor...I tend to stick to express, but [Hapi](http://spumko.github.io/) looks to be a new interesting framework.tj, the author of express, is working on a new framework: https://github.com/koajs/koa

this uses generators so you use callbacks less and error handling is much easier. it also replaces the `(req, res, next)` signature with a `this` context parameter and just a `next` callback.I'm currently playing around with writing something that uses Restify as the server-side backend. I'm writing a single-page app, so all of my webapp is served up as static HTML, CSS and Javascript and I'm then making REST calls from the Javascript to my backend that Restify handles really quite nicely."
2013-08-18 18:38:57;Bootable - easy application initialization for Node.js;What's the use case for this? Initialising applications has never been a difficult thing in my experience.
2013-08-17 10:35:05;koa - Expressive middleware for node.js using generators via co to make writing web applications and REST APIs more enjoyable.;"Amusing how he's using the hell out of language features he loudly condemns.

https://github.com/koajs/koa/blob/9e167c5ed9c2411723a444ff28b2ccb23817de88/lib/context.js#L47- https://twitter.com/tjholowaychuk/status/233016756564795392"
2013-08-17 05:29:33;producer-consumer problems in node server?;"Correct. No concurrency or memory issues to worry about in node. All of your code runs in a single thread, in a callback or not.The confusion about I/O being async is simply something that happens under the hood – your node process keeps accepting and handling network traffic even if you're busy calculating an enormous fibonacci number in the main thread. However your interaction with that I/O will only ever be in the main loop – it creates an ""illusion"" of single threadedness in that sense."
2013-08-27 18:50:23;Heroku API Node.js Client (feedback);"I've done a little bit of work on a Node.js client for the Heroku API recently, and I thought I'd ask r/node for some feedback.

Basically, a client provides functions that return proxies to certain resources in the Heroku API, so

    var app = heroku.apps('my-app');


returns an object that proxies requests to `/apps/my-app`, such as the app's collaborators endpoint (`/apps/my-app/collaborators`):


    // Get a proxy to `/apps/my-app/collaborators`, then list
    // the collaborators:
    app.collaborators().list();

I'm curious if you find this approach confusing, totally wrong, etc. and how I could do this potentially better.

Thanks!"
2013-08-27 17:07:47;Concurrent, Promises/A+ with Scala Awesomeness;"Still not convinced that you *have* to `nextTick` or `setImmediate` every call you make. If you can do all of the processing in a single tick, you get far higher throughput, [as you can see here in a benchmark I wrote on the performance of different implementations of `map` (and one hand-written `for` loop for the sobering comparison)](https://github.com/dfellis/map-showdown).

Now, obviously if performance really matters, you're going to hand write things and not reach for a helper library, but as a library writer we should still try to optimize as well as possible because:

1. Being a library author, the code will be used in more places so the effort is amortized more than application-specific code.
2. The faster the underlying library, the less often you'll feel the need to eschew the abstraction, so you'll be doing less custom work, as well."
2013-08-26 19:59:03;Reliability / downtime issues with Nodejitsu?;"Hi there! Nodejitsu DevOps engineer here! What issues are you seeing? We rolled out our [new infrastructure lately](https://blog.nodejitsu.com/major-new-features), so you might be still seeing some hiccups.

If you're more comfortable with discussing this over email, shoot me a line at maciej at nodejitsu.com.

Let me know, thanks!
I have two apps running on Nodejitsu and haven't noticed any slowdowns/failures in a long while (at least since the last announced maintenance which was a couple weeks ago)We've been hearing a lot of complaints as well.  You can check their status here : https://status.nodejitsu.com/ 
I have tried Nodejitsu and found it very slow. It was the only PaaS that offered websocket support at the time however websockets on Nodejitsu was slower than XML-long polling on Heroku. Now I'm running on a VPS and am happy with it."
2013-08-26 15:33:26;noodle is a node server and module which clients can use to query data from web documents.;Looks good, btw npm- & git method instructions is in need of a switch at http://noodlejs.com/reference/ :) (if you have any relations to the site/module)
2013-08-26 14:55:19;Norch is changing its name to Forage ...because of Urban Dictionary.;
2013-09-03 15:01:57;Finally found a flat JSON -> deep object converter - Treeize;
2013-09-02 22:23:38;I need a project... what would you make if you had the time?;"A site that solicits project ideas for developers.What itches do you have to scratch? Those make the best projects. Perhaps a support library for other applications.A clock. [ba dum psht]

But seriously check out /r/somebodymakethisDistributed notification application.  Dispatch notifications to multiple devices - receive it on one though, you only see it once.

Would have to work with notify-send (linux), growl or whatever on os x, and whatever the hell windows uses (or something similar that's third party).Id love a nice easy centralized repository for receiving application log messages similar to GreyLog with a couple more user friendly touches. Write a few blog posts explaining alternate node-centric solutions to some of the higher-numbered problems at http://projecteuler.netA distributed supervisord so you can manage processes across multiple machines, ensuring each one is running on at least one server. Automatic failover, limiting certain processes to certain servers, stopping a process running more than once, automatic redistributing based on system load. There's lots to do there.A large scale database and API for arguments in the Argument Interchange Format to help people discuss and decide things in the future.A PhoneGap plugin for Ouya's controller API to enable Ouya game development using PhoneGap. (Not exactly a Node.js project, but it's at the top of my will-get-around-this-when-time-ceases-to-be-scarce list.)My list right now:

1. lob.com api client
2. brookstone rover 2.0 control client
3. papa johns (or dominoes) api client (reversed via wireshark) "
2013-09-02 12:32:09;Meteor, Derby, Sails etc... How mature are they for production? Security? Fallback?;"Meteor, Derby, & Sails are all pre 1.0 releases - and their developers know the deal before announcing a 1.0. Until that time, experiment with them, have fun with them, but *do not* launch a production app on them.

I'm the creator of [HabitRPG](https://habitrpg.com/) - we just spent the last ~2mo. migrating off Derby onto Angular (not live yet). Derby was a fantastic bootstrapper, getting us off the ground in record time. But it had so many debilitating bugs, most which didn't manifest until the database grew past a starter size. We've lost many users as a result, and have seen some pretty inflammatory social media. 

\>=0.5.x has made leaps and bounds in improvements, and looks very promising. It had architectural requirements rendering it incompatible with our current setup, so we couldn't upgrade - but if you're experimenting with these three frameworks (not for production!), don't write off Derby based on my previous paragraph till you've tried >=0.5.x. They teamed up with titan developers to rewrite the framework from scratch, replacing most of their real-time db code with [ShareJS](https://github.com/share/ShareJS). It's a totally different beast now.

The most mature of these three is Meteor. It also breaks the most Node.js rules. Eg, last I checked (could be different now) they provided NPM by wrapping modules in some proprietary driver. They exposed server-side pages via Phantom snapshots of client renders. Stuff like that, stuff that makes you feel gross as a Node developer - but in the end, all that's moot as Meteor *worked* the best of these, is the most widely used of them, with a very vibrant community and developer mindshare (and heck, the financing to keep it up for a spell!). So of these three, explore Meteor first.

They all have a promising future, and keep your finger on their pulses. Again - NOT. PRODUCTION. Also, add Firebase to your list. [angularFire](https://github.com/firebase/angularFire) to be specific.

Ok. Now, since I'm telling you ""not production"" - what to use in prod? My recommendation is Angular + Express + Mongoose. Simple, common stack, with a lot of experience in the wild. But it's not just battle-hardness that's important: one of my biggest regrets when we were in-it-deep with Derby was that we were maintaining an API separately from our app code. You hear it all the time, make your website the primary consumer of your API - eat your own dog food. What happened is Derby sort of bypasses the middleman in the client<->server<->database communication. This is what gives it it's magic, and makes it so sexy - but if anyone else wants to use your data, you now have to go and separately build and API to expose it. We were maintaining two separate projects! We didn't think we'd get to the point where people *really* needed our API, but now we have over 15 API consumers and a few unofficial mobile apps using our data. Once we switched over to Angular, we were able to give the API it's deserved attention, adding tons of missing routes, fixing bugs (since now we were the consumers experiencing them), etc. The time Derby saved us in nixing the middleman, we lost in maintaining an API. 

Oh, and here's a big one: we literally copy-pasted our Angular code into PhoneGap and released our [official mobile app](https://play.google.com/store/apps/details?id=com.ocdevel.habitrpg). We're now maintaining a shared repository of code between mobile & web that makes developing the two projects *so* much faster. Angular + PhoneGap isn't the solution for everyone (some are griping about our clunky non-nativeness), but it's the solution for us where (1) we need to release on multiple platforms, but we're too broke to build multiple natives; (2) our app code (controllers & services anyway) are identical to our web code, so can be maintained centrally - perfect use case for PhoneGap. You can't do that with the three frameworks mentioned. People have theorized that it's possible, but I theorize they're wrong. Those frameworks' client app is a build of a running server instance, has a required socket connection to that instance, and thereby can't handle offline usage. Someone disprove me, but IMO it's a non-option.

Finally, since switching to Angular we've received an enormous amount of contributors compared to our Derby days. People either know Angular (or Backbone or Ember), or they've been meaning to learn it. They don't want to learn one of these niche frameworks no one knows about (save Meteor, well known). We've had a surge of highly-experienced open source devs come in and sweep the Github issues - a tangible contrast in numbers. That alone settles the argument, if you ask me.

So, real-time frameworks! Promising future. Fun playground. Not yet.I've had a lot of experience with Meteor over the past few months and I've come to a few conclusions on production-readiness. As /u/lefnire points out, Meteor is by far the closest to production-capable, however it isn't production ready for one reason: Meteor does not scale. This provides several problems when getting more than a few dozen people using your site simultaneously. In the [roadmap](https://trello.com/board/meteor-roadmap/508721606e02bb9d570016ae) provided by /u/arx707, scalability is definitely planned for version 1.0. Until then, I've had to do major amounts of efficiency fixes to get meteor apps working in production. Otherwise my customers complain of really long loading times, and generally unresponsive apps.

As far as getting Meteor ready for large scale apps, I have been doing fine with the combo of [Page.js](http://visionmedia.github.io/page.js/) and custom collection models that look a lot like Backbone's. I have made apps with many, many of different parts with zero consequence. Just means staying way more organized."
2013-09-01 16:17:43;Good nodejs async practices / libraries?;"There are 3 basic tactics you can employ which are detailed in more depth at [callbackhell.com](http://callbackhell.com/):

* use named functions with explicit parameters where appropriate instead of always using nested anonymous functions
* keep your code shallow
* modularize functionality out into separate files with `require()` and `module.exports`. This makes your code much more sane, reusable, and easier to move around.

In addition to these general-purpose javascript approaches, here are some node-specific tricks you can employ (or if you use browserify, you can use them in the browser too!):

* event emitters - when multiple separate code paths need to be triggered from the same set of events
* streams - when you have a continuous stream of data or could possibly have a continuous stream of data.

For an example of how you can use streams to flatten code, consider serving up a file from disk. You could write:

    var http = require('http');
    var fs = require('fs');
    var server = http.createServer(function (req, res) {
        fs.readFile('file.txt', function (err, src) {
            res.end(src);
        });
    });
    server.listen(8000);

but it's less nesting to use `fs.createReadStream()` instead and your program will be much more memory-efficient for large files and handle backpressure much better for slow connections:

    var http = require('http');
    var fs = require('fs');
    var server = http.createServer(function (req, res) {
        fs.createReadStream('file.txt').pipe(res);
    });
    server.listen(8000);

There are lots of tiny tricks like this that can add up to very clean code in the aggregate without having to rely on broad abstractions like promises or async.Check out [async](https://github.com/caolan/async). Can't live without it.I think going forward it'd be good to use Promises, since they're 99% certain to be a part of ES6. That's my plan going forward. Martin F discusses [them](http://martinfowler.com/bliki/JavascriptPromise.html) here. I find the common `doStuff(handleError, handleSuccess) ` is too easy to screw up (what was the order again?).  

But for the moment I just write my code like so: 

 
    // define error handler function 
    
    // define success handler function 
    
    // call async function, pass in error and success functions

I find it to be easy enough to read and doesn't require a third party library. As a for instance, I tried to use a 3rd party lib for mongodb async handling and found that the library was making an odd choice that was screwing up my code. Honestly I think you're better off differentiating things in your code that are not async from those that are sync in very obvious way -- 3rd party libraries often want to make sync and async code look the same. Also see [Q](https://npmjs.org/package/q)Check out [streamline.js](https://github.com/Sage/streamlinejs).  It lets you write your code in synchronous style and then compiles it into async style.  Fantastic library.Take a look at CoffeeScript and even better ToffeeScript[deleted]"
2013-08-31 14:14:33;Dropzone : a simple drag 'n drop peer-to-peer filesharing application based on NodeJS and Node-webkit.;"not bad, although i would not call this peer to peer, since the file has to physically write itself to the server.

ideally, for it to be peer to peer, you would use html5 storage api's, that way you can pipe it straight to a node websocket and out the other end.

still though, nicely done :D....why are you committing a zip file?[deleted]"
2013-09-07 20:52:07;Node via SocketStream help;"Sounds like you have some serious gaps in your Javascript knowledge. You should really consider going [here](http://www.reddit.com/r/learnjavascript). I wouldn't post this again though as it's far too broad with too many concerns.

Pro-tips:

* Don't bother with XML if you don't have to, especially when dealing with Javascript. JSON is a lot easier (imo) to work with and is far less redundant.
* Don't make global variables if you don't have to. Maybe instead you should have some sort of Map module which loads the rooms then you can request rooms from there. Depends on how you want to do it.
* When you say you're using SocketStream, what are you really trying to accomplish? Do you have a front-end (i.e. something built with HTML) for all of this? If you're doing a text-based adventure you probably don't need to do any sort of socket work unless you're making some kind of online text adventure.
* General tip: your question doesn't have anything to do with how to use SocketStream nor is it anything Node.js specific so you really shouldn't post it on /r/node. 
* If you're trying to get help on using a particular library, read their documentation. If what you're using has poor documentation then you can likely find something that suits your needs that's easier to use, especially when you're doing something this simple.
* If you need Javascript specific help (i.e. how do you convert `arguments` into an array? how do closures work? etc.), you might try /r/learnjavascript if you couldn't already find it through Google, StackOverflow, etc.

99% of programming is figuring out how to do things yourself. That usually means figuring out *exactly* what your problem is, searching for information regarding that issue since you likely aren't the first one to have it, then piecing together the information you've gathered. No one will just say ""oh? you want to build a game? type in x, y, and z."" Not to say that it isn't good to ask for help. Everyone asks for help and that's why we have an awesome community. But you need to ask the right questions.

In all seriousness, good luck with your game.

**TL;DR** Your JS knowledge seems lacking. Consult the Almighty Google and figure out exactly what you're trying to accomplish."
2013-09-07 20:19:35;Can node really be used for high-data volume sites?;"Edit: thanks for the upvotes here, I'm new to node so it's nice to see that I do actually get it. 

I feel like there's a fundamental misunderstanding going on here. So we've got this website that needs to serve a lot of data to a lot of people, yeah? Let's say it's sending out detailed GIS data for example. Where does the data come from? It's going to be in files or in a database, I'd assume. So here's the scenario: 

(anyone correct me if I'm wrong here) 

    web request comes in, /get/map/12345 
    
    web server finds a handler for the request (blocked) 
    
    server executes handler (blocked) 
    
    handler makes a call to file io or db (blocked) 

    [unblocked]

At this point the thread is unblocked. The server will go back to a waiting state. New GETs that come in will be handled in the same way. When the io or db call is complete, node will build the response and send it back. The server spends a lot of time waiting for asynch calls to come back or waiting for new calls to come in. 

The limiting factor in this scenario will probably be the database, which is easy to improve via NOSQL sharding. 

The only way I can see that it would be blocked a lot of the time is if the data needed to be heavily processed before it's sent back. If that's the case I think you'd use a parallel processing library and farm that processing out to other node processes. 

This SO post may help: http://stackoverflow.com/questions/4631774/coordinating-parallel-execution-in-node-js
Pass your tight loops through the event system. http://nodejs.org/api/process.html#process_process_nexttick_callback

As for sending large files, they can be read in chunks async and sent to the client the same way.Ok, so /u/brotherwayne seems to have covered most of it. As with anything you use, if you max out a core, you must be built to use multiple cores. This is a fact of life.

With something like PHP this is done by having many fastcgi processes, something like 3 or 4 times as many as you have cores. While one php process is blocked waiting (meaning that PHP process is doing nothing at all) for something like a remote database request another different process may be utilizing that core. You rely on the CPU to handle doing multiple requests with the same core.

In node when you are waiting on something like a network IO request, be that an response, database call, whatever, the event queue moves on to the next task because that IO call is currently out of nodes hands. When the IO request finishes, be that in failure or in success, that event is added to the end of the queue. This means that if you are sending 10mb to someone on a really slow connection, you can be handling someone elses request.

You still of course run into the same bottlenecks any other solution will, when you run out of disk io, or your database server gets loaded down, of course you can't respond to anything because you can't get your data.

Also, do not use forking too much, its both still experimental and extremely costly. As /u/brotherwayne suggested, you would be better farming it to a secondary process using some form of queue.

I would suggest you build any app you expect to scale with having multiple processing running in mind. The Clustering module (which handles forking child processes) is still considered experimental, which makes that less than ideal. Also, if you have to scale larger than one server, you will need this anyway.

I realize I rambled here, feel free to ask questions.

tl;dr: yes, node is incredibly suited for high volume uses.I'm not a nodejs expert, but i believe that ""high-data volume"" and ""single-process"" don't go together well, in any programming language.

I try to write my workers structured so i can fork as many of them as i need for required load, but that works just for some scenarios.


Good question about writing big data to a http response, would like to hear someones opinion about it.Is this guy intentionally trolling? 
Better not risk it.[removed]"
2013-09-07 01:14:37;Question concerning node and events;"What you're asking is vague, so an update might help.

events are low-level -- they're no magic bullet for what you're trying to do. You could make your app use named events, so you can build in smaller pieces and wire them together with event bindings. It's certainly a pattern that works.

What's going to bite you is defining how your server works -- if it's HTTP, making workable protocol on top of HTTP, if it's raw socket, making a protocol that carries the commands you want and their responses.It sounds like you need to figure out how you want the client to communicate with the server. An easy solution to this would be to use [WebSockets](https://github.com/einaros/ws) (here's an implementation that uses Node.js). This will allow you to create a direct connection between your server and client. How you want to format your messages is up to you.

To give you a brief understanding of events, they're just a set of callbacks that are called at different times. This would be a very simple event emitter:

    function MyEmitter() {
        this.handlers = {};
    }
    
    MyEmitter.prototype.on = function(event, handler) {
        if (!this.handlers[event]) {
            this.handlers[event] = [];
        }
        this.handlers[event].push(handler);
    };
    
    MyEmitter.prototype.emit = function(event, data) {
        var handlers = this.handlers[event];
        if (!handlers) {
            return;
        }
    
        for (var i = 0, len = handlers.length; i < len; i++) {
            handlers[i](data);
        }
    };

As you can (hopefully) see, events are merely a way of delegating work and alerting other bits of code about changes in another bit of code. They have nothing* to do with client-server communication.

*At least not at the level which you're currently concerned with."
2013-09-06 23:26:58;Do Not Use bodyParser with Express.js;"For most of my apps, the only data I really ever need from a POST is going to be in json format so the json middleware is enough for me.

But I can't even remember the last time I've seen ANY of the example apps or tutorials that people post on here and in /r/webdev for express use anything other than bodyParser. Random - Even though the guy who maintains express, and many other projects, must be EXTREMELY busy, I once dropped him an e-mail and he responded same day. Back when I e-mailed him I was a bit of a newb and didn't expect a response at all. I know it's a bind of a grand assertion to make... but if someone like that answers an e-mail from some random newb (which was obvious based on my question) I'm gonna go ahead and assume he's a great guy.,I've seen /tmp directories getting out of hand in a variety of environments, this problem is common and isn't confined to Express.  It's a good idea to have some sort of scheduled/active maintenance of /tmp to ensure it doesn't get out of hand.

What are the options here?  At the last place I worked they had a cron job that ran to clean up old files.  Is there not a better way to do this?  Maybe a file system driver for fuse that could do this transparently would be cool - but probably needless complicates things.

Out of interest, what's your solution?  Presumably clean up the temp files properly if a move doesn't take place.  Have you made a merge request?The article author does have a point about TJ being super busy. He has pretty much abandoned Kue. Now that he is working on Koa I wonder if he will stop working on express. I pointed out this aaaages ago on GitHub:

https://github.com/visionmedia/express/issues/1673

And since then, there is a plan in the works to change the default behaviour of the bodyParser:

https://github.com/senchalabs/connect/issues/871

However, as TJ rightly points out, this is a fairly standard way of operating; it's just that it should have been made clearer in the documentation and examples.Very good tot know. This gives me a good excuse to dump bodyParser. I never liked that it parsed the request body prematurely based on the content type of the request. This can cause major headaches when you want to stream data directly to somewhere else. If the bodyparser is enabled and the user sends a json file, the bodyparser will use the request body to parse the json. Once the request had reached an endpoint (app.post) the endpoint cannot get to its data anymore.

The alternatives for multipart also sound much better, since they're streamable. Maybe that should become the standard for express?Is this really a vulnerability? I think it's working as designed.

It looks like he's basically saying the problem is in node formidable, which is a module that handles forms and **file uploads**. The temp files that he's seeing are most likely the uploaded files. Probably why the maintainer hasn't responded.

Edit: File handling is not within the scope of Formidable, its scope is to handle forms and uploads. The maintainer has no clue how you want to handle the files and doesn't care.

Basically it seems like this post is complaining that this module has an open output pipe that's leaking because it's not connected to a kitchen sink when the pipe could also be used for a water fountain.I'm not half as disappointed that there's a vulnerability in there as I am with the amount of people giving TJ nonconstructive feedback/neckbeardrage on Twitter.Its a temp file in a temp directory.  So what if he doesn't delete it?

After ALL of this time has ANYONE else ever actually had a security problem related to that?  No.

Its not a security problem.  If you have a bunch of people uploading files then you may need a cron to delete temp files.  So what.

That's not a security vulnerability or a reason to stop using bodyParser.  If someone floods your server with enough data to eat your entire hard disk then you have a problem regardless of temp files."
2013-09-06 20:10:36;asynchronous file downloader;set http maxSockets to Infinity to allow more parallel requests. you can just require 'fixnode' and it will do it for you
2013-09-17 15:55:20;Help a Node n00b: Getting hierarchical data from redis with node.js;"The async of it is throwing you, ain't it :D  Let's see...
Mind if I use promises?  I think better with those.

    function getFromRedis(nodeName){
      var ret=new promise();  //however you chose to make a promise (See Promises/A+ spec)
          client  //this is the redis client
              .hmget(nodeName,function(err,val){  //hmget gets the hash named nodeName
                                          if (err) ret.reject(err);
                                          else {
                                               var constructedObject={};  //this is our returned object
                                               var dependents=[];
                                               //OK, now lets identify hash keys which are names of other hashes.  
                                               //any key which ends in _hash sound good?
                                               keysEndingInHashRegEx=/\_hash$/;
                                              for (var k in val){  //iterate the keys in val
                                                   if (keysEndingInHashRegEx.test(k))
                                                        {
                                                           dependents.push(getFromRedis(val[k])  //if it's a hash name, recursively call getFromRedis.
                                                                                .then(function(subVal){  //this .then is chained off of the getFromRedis call above
                                                                                          constructedObject[k.replace(keysEndingInHashRegEx,"""")]=subVal;  //we strip               
                                                                                                                                                    //off the part the regex matched 
                                                                                                                                                    //(foo_hash becomes foo)
                                                                                          return subVal;
                                                                                         })  
                                                                                   );                             //It returns a promise, which we push into an array.
                                                         }
                                                    else
                                                         {
                                                             constructedObject[k]=val[k];
                                                         }
                                                  }  //end for loop
                                                  //at this point, we've got a constructedObject whose keys match returned hash, and a dependents array that contains the
                                                  //promises waiting to resolved for the child hashes
                                                  $when.all(dependents)   //$when is a helper library for promises.  $when.all resolves when all the 
                                                                                   //promises in the passed array 
                                                                                   //resolve.  If that array is empty, all() resolves on the nextTick
                                                           .then(function(){ret.resolve(constructedObject);},ret.reject.bind(ret));  //we bind ret reject here to bubble 
                                                                                                                                                             //errors on up

                                          });  //that was the hmget call, which ties into our promise 'ret' declared above, so we return that.
        return ret;
    }

    getFromRedis(""root"").then(function(val){console.log(val)},function(err){console.log(err);})  //recursively fetch from redis starting at 'root'



                     Consider tame.js to help with the async flow. "
2013-09-14 16:23:14;Just launched! 100% javascript (client and server) multiplayer game;"Really nice job. Great artwork and very well put together.Could you tell us a little about your tech decisions? Such as, did you use any libraries [client-side] like Backbone or jQuery?

We'd love to see the source ;)you should post this to r/webgamesthis is *just excellent* 

if you don't mind sharing, what kind of team did you have and how long have you been working on this?

congrats, I wish ye wellAwesome game! Been playing for a while now and it's polished a lot. Really nice.

I always love games based on HTML, especially multiplayer, and there aren't much of them around. Nice job being one of the first doing this.Just played through the tutorial, and I love it.it's a really good game, i signed up and have been doing the challenges

you can tell a lot of attention went into thisLook very polish. Would love to know what is your conversion rate for real money players.Wow it is really well done! I just did the tutorial and it feels amazing. Waiting for the confirmation email.Reading some of your posts in this thread is in incredibly insightful. I've done very little web based work before and the number of components and different technologies to get your game working baffles me. 

HTML, CSS3, Coffeescript, Backbone, JQuery, Node, Amazon Cloudfront, MongoDB, 0mq. How did managing all these different components work for you?

I'm learning Node at the moment for the purpose of making a web game in JS, but just seeing all of the things you are using makes this task seem quite daunting. 

Any advice/comments? Thanks !"
2013-09-14 13:01:13;What's the best way to get a response to get the browser to delete a cookie?;http://en.wikipedia.org/wiki/HTTP_cookie, the Expires and Max-Age section.
2013-09-14 10:56:41;i wrote my first node.js app, feedback welcome;"* Add `node_modules/` to your .gitignore, there's no need to commit all of that, as anybody interested in your project will just run `npm install` to get your dependent packages.
* For future reference, `npm init` is a neat way to generate a `package.json` file :)
* Nothing wrong with writing your own CRUD interfaces at all, but TJ also published [express-resource](https://github.com/visionmedia/express-resource) which takes a bit of the work out of doing that

Other than those, this looks a far sight better than *my* first node project!Not specific to node, but since this project is hosted on Github, always include a readme.md or readme.txt file with a brief a description of what the project does. That's usually a polite way to introduce people to your project rather than having them git clone and figure out what do to with it.A couple things I would like to see:

1. Split the routing information into a separate file and require that file
2. All your anonymous, inline functions should be named. For example: `app.get('/book', function (req, res) {` could be `app.get('/book', function getBooks (req, res) {`
3. Speaking of inline functions, you might want to break them out and just leave them as defined functions that get called by `app.get('/book', getBooks);`
4. You can combine routes by using the optional `?` modifier on your route definition. For example, you can do:

>
    app.get('/book/:id?', function handleBookRequest (req, res) {  
      if (req.params.id) {  
        getBook (req.params.id, function handleBook (error, book) { ... } );
      } else { 
        getBooks ( function handleBooks (error, books) { ... } );
      }
    })"
2013-09-14 04:56:10;Issuing installing Node.js on Ubuntu...;"Have you tried running:

    ./configure --without-snapshot

sometimes with ARM devices snapshot causes issues. To figure out what is actually being run when you type `node` at the shell, execute `which node`.  On my system this is `/usr/local/bin/node` because I compiled node from source and installed it to that directory.

I haven't tried on a chromebook, but I compiled node from source on my ARM-based Raspberry Pi by downloading the latest stable source from the website and executing `./configure` followed by `make`.  I installed it with `make install`.

Assuming you tried a fresh compile, the only other thing I can think of is that perhaps you're missing a library that it depends on.The files you see when you type which are just the binary. Which may be linked against shared libraries that are having compatibility issues or who knows what. What you want to do here is remove the package with APT, then purge the rest of the cruff from your OS. Once you have done that, download the latest st able release and build from source. Everything should be fine.

Ballpark quick example:
    apt-get remove <anything you installed>
    sudo updatedb
    locate node
        - delete those files (after you make sure it's only stuff you want gone)
    locate npm
        - delete those files
    wget http://nodejs.org/dist/v0.10.18/node-v0.10.18.tar.gz
        - extract (tar xvzf) cd in there, ./configure && make && sudo make install

You might need to install build-essential with APT or task sel to compile from source."
2013-09-24 14:28:24;JSHint equivalent for Java?;Shouldn't this be in /r/java ?Sounds like you should be using an IDE like eclipse.
2013-09-23 17:23:21;Cabin: node.js static site generator powered by Grunt;"nice. I started a very similar project a few weeks ago - maybe I'll just check your code and join forces ;)Have you considered using [Prism](http://prismjs.com/) to remove the Python/Pygments dependency?Is this better than assemble?"
2013-09-21 07:40:40;Well written api servers with node & expressjs;Check my post here: http://www.reddit.com/r/node/comments/1mn580/selfdocumenting_rest_api_framework_for_nodejs/I'm not sure if this is exactly what you want, but there's [restify](http://mcavage.me/node-restify/)
2013-09-20 22:54:52;Best Twitter/Google authentication library?;"Try

>app.use(passport.initialize());

>app.use(passport.session());Passport is your best option.  Please try again.If you are having trouble with middlewares, there's a *very* high probability that your middlewares are in the wrong order. [This](https://gist.github.com/jorgeguberte/6653573) is what i have, and it works well. Maybe helps..."
2013-09-20 18:38:16;node-modules.com - a clever search engine for node modules (and a paradigm shift?);Paradigm shift? How's that?reminds me of http://npmsearch.com/
2013-10-01 02:10:04;NodeBB v0.0.7 Released!;"the demo site feels insanely fast!After my past scathing reviews of this, I'm glad to see there's been an effort to turn the project around and make some significant progress. Code quality has been improving when I last checked up on the codebase, for sure.Someone posted a javascript injection on one of your threads :(.You should really fix the link in the blog post ([try.nodebb.org](http://try.nodebb.org)).

That being said, this looks pretty cool.I kinda wish there were more docs though....Goddamnit, *redis is not a database*, now repeat!"
2013-09-30 20:30:29;Hyena - Mongoose for SQL;Now I just need a civet for postgres.
2013-09-30 19:11:46;A simple SQL wrapper for node.js?;"[Sequelize?](http://sequelizejs.com/documentation)

[node-orm2?](https://github.com/dresende/node-orm2)I've never found any of these systems to work as well as straight SQL does. Anytime you get past simple queries and a dead simple schema it gets painful. If your database is in 3rd normal form and anything more than your basic ""blog"" example that everyone uses, you'll have multiple joins, stored procedures, etc that these sort of SQL wrappers don't handle. You'll end up fighting the wrapper more than working with your data model.

I don't really know what is so difficult about spinning up a Linux VM, ""apt-get install postgres-server"" and going from there. I prefer to lay solid ground work early so I'm not having to make changes (e.g. switching from sqlite to postgres) later on.I would recommend you avoid any sort of special library that will build (or not) database tables for you as you go, since that library, no matter how amazingly intelligent it is, will probably get it wrong. If you do this, you're likely in for pain at the worst possible times. 

I would recommend you instead use a layered approach to your problem. Create a module to represent all of your input and output to and from your database (or any other persistence mechanism you may later choose to use). For the sake of discussion, we'll call this module a ""repository"". Give it a set of methods that accept input objects and/or return data objects (probably via callback). Structure this API any way you like for your code to use, but ultimately hide everything database related inside the repository, with the possible exception of configuration settings. 

The point is the rest of your system doesn't know anything about databases -- all it knows is that [data goes in and data comes out](http://i.imgur.com/Iw95xfO.jpg). When you're finally ready to actually persist your data -- when your functionality is proven and you're ready to integrate -- then you can start worrying about how to persist your data, and the rest of your system doesn't care where you put it.  JugglingDB handles SQL databases (Postgres, MySQL, SQLite) as well as some NoSQL databases (MongoDB, Redis).Hyena is the best right now https://github.com/plus3network/hyena"
2013-09-30 19:06:55;Sanitizing user input for Mongoose and web app;"Don't eval() the user input. Take a look at https://github.com/chriso/node-validator
especially the xss() and  xss(true)  methods, for stuff that will be going back to the client. "
2013-09-29 02:58:38;try-parse: A simple utility library for dealing with process.env and bad APIs;
2013-10-08 23:20:37;Sequelize with Express and Postgres example?;"There actually is an article on the Sequelize website about using it with Express and Postgres on Heroku. Its very Heroku oriented, but in the end you will have an app that works with Sequelize, Postgres and Express: http://sequelizejs.com/heroku

PS: Yes, I need to make that guide less heroku oriented respectively write another one.The sequelize repo on GitHub has many examples ranging from the simple to intermediate. Woah I've been looking for something like this for a while now!

How is it compared to other SQL ORM like Bookshelf and JugglingDB?

Website is looking complete, this is great! I was about to start developing a use SQL based project for a client but almost had to go back to PHP for it. Glad I'll be able to use a complete ORM with Node!

[sorry for the unrelated comment]"
2013-10-08 15:16:11;Seraphim - Better alternative to nconf;"The project will probably be better received if you add some docs. I have no idea what a configuration guard is.v0.0.1 released!https://github.com/gagle/node-seraphim

Why?

nconf cons:  
- Single instance: third-party modules cannot use it (shouldn't)  
- It reads the entire process.env object: it pollutes the object with keys that you don't need.  
- It forces you to use the ""optimist"" module to parse the cli options.  
- Cannot relocate the argv options, they are always in the first deep level.  
- It reads the files synchronously.  
- Can only parse .json files.  
- Unmaintained.

seraphim pros:  
- Multiple instances.  
- process.env is not read, it depends on the user.  
- The cli options are not read, it depends on the user, so you can use any cli parser.  
- It reads the files asynchronously.  
- Can parse any extension.  
- Incredible awesome api and easy to use.

Example

https://github.com/gagle/node-seraphim/blob/master/t.js

Whould you buy it?"
2013-10-08 07:26:04;Groupon moves from RoR to Node;The fact that they rewrote it from a monolithic app into SOA is the real story and the reason for any improvements.  Code language/framework is largely irrelevant when you're only dealing with 800 req/s.It sounds like they have a Java back-end, or another language, that handles the business logic/data access and exposes a RESTful API to the Node servers, is that correct?[deleted]
2013-10-07 21:09:13;Node.js and the new web front-end;[deleted]
2013-10-07 12:37:49;Testing With Mocha, Sinon.js & Mocking Request;Very helpful. I went through this recently and found it to be a bit difficult, so more help is a good thing. 
2013-10-15 16:13:57;Targeted Twitter Bots - The Next 20 Minutes;Instead of constantly grabbing followers/ids, why not userstreams?
2013-10-15 08:33:07;Draw image into your terminal, rendering is more clear;"Having a hard time seeing why this would ever need sudo.

Is phantom trying to bind some lower ports or something?what are some productive use cases for this?"
2013-10-14 03:40:42;“Grunt” your way to frontend performance optimization;Just started using Grunt over the weekend, and it feels like I'm falling in love with JavaScript all over again.I don't do much front end work at all, mostly back end services and grunt is one of my most used tools in my toolbox. I use it to run jshint and mocha tests as a got pre-commit hook for starters. I'm still not sold on grunt as a tool, but the community behind it seems worth it. All of those pre-made tasks sitting there for you to use--sounds pretty awesome.You should x-post this in /r/LearnJavaScript...
2013-10-13 19:20:22;Splitting a big website into smaller sites;"I like this model a lot. It's typically referred to as a Service Oriented Architectur (SOA).

The two biggest benefits I've found is (1) if one of the pieces die, only that piece is broken; and (2) teams can work more independently of each other.Splitting modules in a website into self-containing packages is a nice idea. But is HTTP the optimal way for these packages to communicate? Seems like there would be much faster options, not to mention the idea of running them in the same process anyway."
2013-10-13 12:45:31;Termy — Programmatically send OS X notifications in Node.js;"Has this been tested within node-webkit at all?Very cool.

I run a couple of node scripts as cron jobs on my machine for various tasks and this might be a good way of notifying myself they failed."
2013-10-21 23:28:20;Performance Comparison Between Node.js and Java EE;Regarding a statement you made in the article: JavaScript is not, generally speaking, interpreted these days.  V8 gets compiled to native code.It's pretty obvious that node will be faster in the most simple request/response case.To me the results are close enough that I am wondering if it might come down to the specific implementation of the driver libraries.  Also I am wondering if you might get more performance by using node clustering or webworker-threads.
2013-10-21 14:52:40;Handling errors in Node.js;"Author here! Let me know if you have any questions or suggestions.Open page, looking for interesting discussion on error handling in Node.js.

See code examples in coffeescript.

Close page and go back to work."
2013-10-21 11:48:02;Using optimist to get args from stdin.on 'data';"I think it goes without saying that parsing input over stdin is not the use case intended for the optimize library.  However, it is possible to parse arbitrary arrays of ""options"": https://github.com/substack/node-optimist#parseargs.  This will require that you do some preprocessing to split options from stdin into an array, but it should work...Sure, you can use the [parse method](https://github.com/substack/node-optimist#methods) to parse any data with optimist. For example:

    process.stdin.on('data', function(data) {
        var argv = optimist.parse(data.split(' '));
        // Do stuff with argv
    });"
2013-10-21 08:26:14;Oracle Apex Database connection;"Seen anything on the SF help docs? I'm curious too.This might be of help: https://npmjs.org/package/oracle

Looks like there will be a bit of setup. Never dealt with any oracle db before (Nor would I want to!) so this is about as far as I go. "
2013-10-21 03:43:38;Handling AJAX calls with Node.js and Express (scraping Craigslist);
2013-10-29 15:00:05;Stay up-to-date with Node.js packages using npm-onupdate service;
2013-10-29 05:18:00;Lightweight Job Scheduling Library for Node.js;Nice.
2013-10-28 16:32:00;Weatherme - a command line tool to show weather from forecast.io;I've never been more glad that I decided to install and learn node. :/It's annoying that forecast.io doesn't allow city, state as input. I still miss google's weather api. :-(Nice job man.Probably a useful app to use with GeekToolThat's fucking awesome.
2013-10-28 09:34:12;Run a node instance in a sandbox?;"Maybe the tool you're looking for is chroot.Why not a [LXC](https://en.wikipedia.org/wiki/LXC) or specifically [docker](http://docker.io)? Sounds like you would want to jail/contain the applications, or, if truly trying to keep them separate, you could just run them in different VMs.I had the same question, so I am working on a new hosting service built on Docker that will have a control panel for name-based virtual hosting/managing Docker containers and support Node.js (and anything else you can run in a Docker container, which is anything).  I am also thinking of supporting Dokku.  I am thinking of calling my service 'oic'.. just because I already registered the domain.

But that will be a month or two before it is ready.

https://medium.com/code-adventures/438bce155dcb Node.js Deployments with Docker, Dokku, & Digital Ocean  -- this looks like a good approach.

Actually if you search there are a few services for Docker that are out already, like Orchard.I spin up new a new Linux VM (or more) for each project. You can prevent them from accessing eachother's files by running them as different users. But if you want to completely isolate them then I'd go with u/drunkcatsdgaf 's answer."
2013-10-24 12:05:56;Security in Node.js : webdev;"eval is evil, etc. how about something actually informative, instead of beating that same damn dead horse? If someone doesn't get that eval is bloody dangerous, they're not going to get that at this point.

Cover a better topic."
2013-11-05 12:31:31;ELI5 Yeoman, Grunt, Bower and Backbone.;"* yeoman - not an MVC framework, it's a project generator. It's designed to help you start a project quicker. You tell it which base to start from and then it figures out the rest. You can create your own templates. 

* grunt - not an MVC framework. It's a modular task runner. There are tasks for things like minifying javascript, etc. Kind of like `make` on crack. 

* bower - not an MVC framework. It's a 'package manager for the web'. Basically it makes it easier to add front-end javascript libraries to your project and update them later. It's kind of like npm, but for js that runs in the browser. 

* backbone - an MVC framework. It usually runs in the web browser. 

5 minutes of looking at the project page for each should tell you what you need to know. 
 


Yeah, the environment is very different than PHP. So let me give you a rundown:

* Yeoman - it's a generator that allows you to start a project from scratch. There are templates and all kinds of things for it. The workflow works kind of like this: `yo`, pick which installed template you want to use, and yeoman downloads and unzips all the required stuff. You're ready to go. Basically a scaffolding/boilerplate creator
* Grunt - does all kinds of tasks for you. A ""rake"" for Node AND non-node projects. You can setup commands for Grunt to minify CSS files, compile LESS, run a Jekyll server and other stuff like that. It's node-based isn't necessarily only for node projects. You need to setup the tasks manually but Grunt provides a whole library of plugins that you can use. There are even image processors. It can also ""watch"" files for you so whenever you update a LESS file, it will recompile it. Or whenever you add a new image, it will ""smush"" it.
* Bower - a package manager. You set dependencies in a package.json file, then use ""bower install"" and it install the packages. This is primarily for front-end stuff. The packages get installed into a bower_components folder in your project. You can also update dependencies and do all kinds of things. It's like composer but for the front-end.
* Backbone and Express. Okay, so this is a little bit more complicated.

So Express IS an MVC framework for Node. It's very malleable in that you can have varied folder structures and everything else. Hell, you can even skip the views altogether and write up an API for the back end. Anyways, this is in Node, a backend.

Backbone is a front-end MVC framework. It's use with Node because well, here's the point of Node (or one of): You can use the same language and structure in the backend and front end. It blurs the lines of ""end"". So you can wire up an ExpressJS app, send over data to the front where Backbone captures it and behaves in a similar way as Express.

What can you do with this? Single Page Apps. An api on the backend can provide all the data while backbone consumes it in the front end to create the app. ExpressJS routes will allow you to define api routes for everything, work out all the logic etc. And then Backbone can take over on the front.

The confusing part is that you're thinking in the terms of ""back end"" and ""front end"". You're a PHP developer, thus ""back end"". Working with Node means that you can move from the front to back without switching environments, languages, and (to some extent) the libraries you use. I don't have any new answers to have that haven't been said already, but just wanted to say that I love this post.  I've been a programmer for about 10 years, but stepping back and looking at the state of the javascript ecosystem is pretty ridiculous.  I would be extremely confused as new to javascript, wading through the sea of terminology and (silly) library names.

In general, there seems to be an attitude in the node/js world towards minimal, modular design (similar but not as extreme as UNIX philosophy).  This is generally a great thing! it lets you pick and choose your toolbox from an ocean of libraries, and it lends itself well to the rapid style of javascript programming.  But it does make things REALLY confusing if you're new to it.1st learn Git

2nd learn Node + Express

3rd read about the top 20-60 NPMs

4th know that everything is built with these toolsNot trying to be a dick... but... if you can't do basic research on such things, Node is not for you. Every thing you do will require it. The Node ecosystem is still new and in constant change.Yeoman uses grunt. I would not advise you to use yeoman if you are not already used to grunt. Yeah, Yeoman is very nice tool for maybe a hackaton, where one guy can show and teach others how to use it and what it does under the hood, but if you are just starting by yourself I would advise you to learn first how to work grunt and after that you can either start using Yeoman confidently or create your own grunt config."
2013-11-04 20:52:12;looking for suggestions for headless page testing;"We use [zombie](http://zombie.labnotes.org) with mocha and it has served us pretty well.I found zombie to be unusable.  Even the canonical example at the top of their home page didn't work.  Selectors were hit or miss.  A real shame, as I needed exactly what it advertised for a project.Maybe try [CasperJS](http://casperjs.org)Have you looked into PhantomJS?You can run real browsers on linux with xvfb-run. Just do:

    xvfb-run google-chrome http://example.com

to load http://example.com headlessly. From there you can just use document.querySelector() and create a websocket stream to get data out of it and talking to a node server."
2013-11-04 03:25:16;Help with Node-powered Arduino Dumbwaiter;"So this should be a really simple system.
Here's your client (let's assume that this is called index.html):

    <html>  
        <head>  
            <script type='text/javascript' src='js/jquery.js'></script>  
        </head>  
        <body>  
            <div>  
                <div id='up'><img src='up.png'/></div>  
                <div id='down'><img src='down.png'/></div>  
            </div>  
            <script type-='text/javascript'>  
                $('#up').click(function(){  
                    $.ajax('http://something.no-ip.com/up');  
                });  
                $('#down').click(function(){  
                    $.ajax('http://something.no-ip.com/down');  
                });  
            </script>  
        </body>  
    </html>

Here's your server (let's assume this is called server.js):  

    var express = require(""express""),
        app     = express(),
        port    = 80;

    var arduino = require('duino'),
        board = new arduino.Board();

    app.get('/', function(req, res){ res.sendfile('index.html'); });

    app.get('up', function(req, res){
        //some stuff with arduino or board
        res.send(200);
    });

    app.get('down', function(req, res){
        //some stuff with arduino or board
        res.send(200);
    });

    app.listen(port);

Put these two files in the same folder, run ""npm install --save duino"", fill in the 'up' and 'down' functions on the server, and run ""sudo node server"" (the "".js"" is optional). After that, you should be able to connect to 192.168.0.__ and test it out. You'll notice in the example that I wrote about no-ip.com. This will be a simple way for you to not have to worry about changing the code every time the IP of your server changes (and if you do port forwarding, you'll be able to control this thing from anywhere in the world =P). If you download the no-ip client, you'll never have to worry about it again and it's free. edit: Also, you might want to add a password parameter. =P Let me know if you're not sure how to do that.

edit: ""res.send(200);"" should go at the end of the handlers so that the client doesn't have to timeout each request.I forgot I also wanted to give you a quick rundown on npm. You'll love it. Basically, when you go to make this project, you'll want to ""cd"" into the folder in terminal or command prompt or what have you and run ""npm install duino"". From that point on, you'll be able to write ""require('duino')"" in your files in order to use what that package provides (could be anything, depending on who made the module/package).

One of the nicer features of npm is that you can instead write ""npm install --save duino"". This will make a file called ""package.json"" and save ""duino"" inside it. So when you want to run this thing on your server machine, you can just push it onto the server and write ""npm install"" and npm will take a look at package.json and automatically install everything it sees listed. For you, for now, it's only one thing - but it's a great feature to be aware of.Johnny Five might be easier than Duino, I would recommend using it

https://github.com/rwaldron/johnny-five"
2013-11-04 01:32:15;Lorem ipsum Database Generation (MongoDB);
2013-11-03 23:53:10;How can I mock `fs.read()`?;"https://github.com/mfncooper/mockery

    var mockery = require('mockery');
    
    mockery.enable();

    var fsMock = {
        read: function (fd, buffer, offset, length, position, callback) {
            var b = new Buffer('hello world!', 'utf8');
            callback(null, 12, b);
        }
    };
    
    mockery.registerMock('fs', fsMock);

Something like that?Chai-fs? http://chaijs.com/plugins/chai-fsmockery or sinonjs i would imagine are good starting points.Just curios, why is this question being down voted ? Take a look at **rewire**: https://github.com/jhnns/rewire

    var rewire   = require(""rewire""),
        myModule = rewire(""../lib/myModule.js"");

    myModule.__set__(""fs"", {
        readFile: function(path, encoding, cb) {
            cb(null, ""Success!"");
        }
    });"
2013-11-12 16:04:57;Ever needed, like, 1500 pictures of cats? Introducing: imgur-sucker;yes.. cats... thats what its intended for...I'll admit I'm drink at a company Christmas party but fuck yeah this is worth the upvote.
2013-11-12 13:24:55;Our entry for the 2013 node knockout: Stream from your webcam using GIF in (almost) real time (x-post from /r/javascript);Simply awesome.  Good luck!
2013-11-12 09:58:29;genoset-norovirus: Detect stomach flu immunity in a genome (genome.js);Is GQL what GenomeCompiler uses or is it somehow compatible with that?
2013-11-12 08:08:23;hookdoc - beautiful and collaborative documentation;
2013-11-12 02:14:03;Our Node Knockout Submission using WebRTC #BrokenTele;
2013-11-19 20:11:43;Modella: Lightweight, extendable models for client or server;"For a second I thought this was linking to my https://github.com/dawnerd/Modalla repo. Amazing what one letter will do.

That said Modella looks pretty useful. Going to give it a shot this weekend."
2013-11-19 02:52:36;bakkerthehacker's radical AMQP library;
2013-11-18 21:31:33;The new version of Forage, a search server for node.js, has now been released.;
2013-11-18 13:58:57;Eventual Consistency with CloudTypes.;
2013-11-17 22:38:52;Unified Logging with Node.js and Syslog;
2013-11-26 22:54:12;Creating Desktop Applications With node-webkit;
2013-11-26 21:22:00;Vitalsigns: Powerful and customizable application health monitoring;
2013-11-26 19:33:14;Advanced NPM download statistics;This is a service that provides detailed download counts by day, week and month for every package on npm (node.js package manager).What happened on in October 2012? (searching with no input)Ah, you got a new domain! I've been using your site for months now.
2013-11-26 15:55:06;npm is the most important thing keeping the node community together. If it goes, we go. Please help nodejitsu scale npm.;"I want to donate, but I'd rather Paypal, Amazon or Bitcoin the money over instead of giving you my credit card info directly.isn't nodejitsu a company? as well as joyent?I am really running on fumes to get my startup off the ground but this is such a critical system that I donated $7 anyway.

One question I have is, with the db growing so fast, don't they now need to put out an official alternative to full-copy private registries?  Like incorporate something like Kappa or the like into npm.  Or maybe someone could make a Docker container set up for that.How about being transparent about the cost of hosting npm's registry? I'm happy to donate servers, bandwidth, and even time.If you want to donate with paypal here are the instructions:

-----
We can accept paypal, but our process is not optimized for it.  Here are the steps you need to take:

1) paypal your donation to info@nodejitsu.com

If you would like to receive the love package for your donation, the following extra steps are necessary:

2) Go to nodejitsu.com and setup an account (select sandbox if you don't want hosting)
3) from the email you used to signup with nodejitsu, write an email to scalenpm@nodejitsu.com with your nodejitsu username, donation amount to paypal, donation date and address. 

We’ll follow up with you after the drive to coordinate on getting you your stuff :)
-------please add PayPal donation like everyone elseI find this rather strange. I hadn't even considered that node could have this kind of vulnerability.Wow what a bunchy of cranky, selfish assholes this thread has attracted. These things aren't free, even if it is a ""company"" running it. Throw a couple of bucks at them already! And you give your credit card number to plenty of people you don't know on a regular basis already. Are you seriously going to use that as an excuse?"
2013-11-26 09:21:32;Node.js at PayPal;"Glad to see some 1 to 1 comparisons in performance for an actual application that has scalability in mind for once instead of just simple To-Do examples.

I am very curious as to exactly where/why the performance tradeoff happens.

Very glad to see NodeJS in production at large companies as a viable platform for large scale applications. Definitely going to use this as leverage for rollout/trials here.

Also for those wanting to use their Kraken.JS they mention in the blog post, it's already out and available here: http://krakenjs.com/"
2013-12-03 19:31:23;Backpressure and Unbounded Concurrency in Node.js;"ugh. i've run into this category of problem before, and I just thank the gods of the internet that I'm not going to be doing anything in the foreseeable future where this will become a problem.

it's really really important to know about this stuff when shit goes to hell and you are completely blindsided though.

this was a useful and informative article."
2013-12-03 14:40:54;Insto - hosted realtime framework for node;If I wanted to implement my own Insto cluster, is the source provided for the server-side magic as well?
2013-12-03 12:07:35;turtle.io vs nginx - can turtle.io replace nginx in your node stack?;"I don't even need to see benchmarks to say, hell no, it cannot outperform nginx. Not even friggin' close. Features though? Couldn't say.

Edit:// That said, if it DID beat nginx, you did something wrong.Whats wrong with just using iptables to route port 80 to 3000? It can't outperform, but it can come very close to matching the transaction/s throughput with close to 3x the concurrent load. This isn't about synthetic benchmarks, but real world usage.

Iptables, if setup poorly can absolutely cripple your throughput.

One thing I didn't touch on in that thread, and will here for readers, is that when you ""stack"" turtle.io servers you get a really nice, free & automatic cache strategy due to the extra effort of decorating all relevant headers automatically for you.

The response body from turtle.io is arguably ""complete""; nginx, apache, etc. can't make that claim because the response bodies rely on the ""discovery"" behaviour of a RESTful design."
2013-12-03 10:12:19;ChildProcess.fork - how to let your applications talk to each other;
2013-12-02 01:10:51;Server-side array storage;"if it has a slim chance of getting modified, why not use memcached?...why not write that into your query?

Are you actually using a database engine of some sort? Because conditional exclusion is a regular feature across most (if not all) major databases, SQL or not.  All you're really doing is making things worse, really, assuming that your reads/writes are as bad of a problem as you imply.  If it's that bad, use redis for a caching layer on top of things instead of trying to hack around it with node's own operations (especially since, if I recall correctly, redis can drop things out of storage if given a specific lifespan).Need to know more about your use case. If it was a SPA, you could just use a setTimeout on the client to remove the element from your UI when it expired.

It sounds a bit like you're looking to notify all your subscribed users that a post is expired via some kind of persistent connection (please not socketio). If that's the case I would use a data structure like:

{
  item: {
    yourdataandstuff...
    _timer: setTimeout(notifyExpired('item'), numberofmstoexpiry)
  }
}

Each time a timed post is requested, check your local cache to see if you already have it:

post = localCache[req.params.post]
if (post) return res.send(post)

If you don't, fetch it from the db and cache it:

db.getPost(req.params.post, function(post) {
  localCache[post.name] = post
  timeToExpiry = new Date(post.expiry).getTime() - new Date().getTime()
  localCache[post.name]._timer = setTimeout(notifyExpired(post.name), timeToExpiry)
}

That way you don't need to poll anything, the event just fires when it's time. Of course you'll need to rebuild the state if your process goes down.a couple thoughts:
-i don't recall if it's built into mongoose or mongo but record expiry is built in somewhere in that stack
-when you load a page just query for posts whose start and end times (saved as two separate dates) encompass current time.  don't worry about DB.  1K concurrent connections is not crazy
-index your start and end times
-you don't need to min the JSON because mongo/mongoose allows you to select what fields are returned.  minimizes wire traffic.  absolutely don't store the min.Sounds like the perfect use case for something that was posted earlier this week/month: https://github.com/kwhitley/apicacheWhy do you store the ""minimized version"" instead of storing the full object? That way you don't need to read DB at all.

And every N minutes run a routine that deletes all the obsolete items?Maybe, but if you're using levelup for a DB, you might just run into that it does it better than you do.This is what caching layers that store shit in redis or memcache are for.

you build a local cache with expires set 
you hit redis until it is missing and query the DB when required.

Additionally if you use postgres as your DB of choice (for more reasons than just this) you can get notifications back from the DB when other systems hit it and use that to invalidate the cache.Thanks for so many reply guys! Unfortunately I am required to use Mongo as per assignment requirements otherwise I'd be using in my way to learning Postgre or mySQL instead, heh.

For now I just left it at
 
    setInterval(function(){
       EventSchema.find(function(err,found){
           async.each(found, scheduler , err){///error checking goes here}
      });}, queryInterval );
    // scheduler is my Date checking function 
    // queryInterval is set at 2 minutes..

which shouldn't be that bad anyways. 1 query every 2 minutes. For now there's no need to optimize something that doesn't need to be optimized yet. I will also look into MongoDB shell scripting and see if I could implement that Date elimination logic directly in there.

Cheers! "
2013-12-10 09:40:23;Continuously deploy Node apps with GitHub, Travis and Heroku;I wrote one of these for myself using a node subserver listening for a github commit hook and Ansible.Ah perfect timing, I need to deploy some node.js stuff, will give Heroku a try.
2013-12-09 22:44:56;Hardware-accelerated CRC-32 for Node.js;why not use an Int32Array?
2013-12-09 22:05:17;"Is it possible to ""scrape"" a javascript object from a website?";"Try looking in to phantomjs.  It can be used as a web browser within nodejs.  You can use it to execute a pag.es javascript with itI wrote up a gist for you:
https://gist.github.com/notjrbauer/7884321

You don't really need vm here; however it's pretty handy if you plan on scraping JSON in the future.

Also, I'd recommend cheerio.js over jsdom.
Make sure it's permitted to scrape the site, you don't want them to send you a cease and desist letter or changing the way that jsonItems is loaded and have it break your site.Check this out: 

http://www.russellbeattie.com/blog/you-dont-need-to-use-jquery-to-scrape-html-pages-with-nodejs-and-jsdom

Basically, make the request to the page needed and then you have a simulated dom to work with. I have done this in the past with different technology.
there's many ways to do it, but my favorite is [node.io](http://node.io/), which is a pretty neat library for various io jobs, that has built-in support for cheerio.

you could also use phantomjs or one of it's wrappers like casperjs, which runs a full headless browser to get the same done, but it's generally better to try and reduce moving parts.
"
2013-12-09 18:22:07;FFlip - Advanced Feature Flipping for Node.js;
2013-12-09 14:13:03;The Problem with PayPal's Node vs Java Benchmarks;"I can't really say much about the benchmarks but I think the general point of the PayPal blog post was that it was better for them to work with node in all aspects: code size, development time and benchmarks.> Again, though… really? 1.8 pages/sec for a single user in Java, and 3.3 in Node.js? That’s just insanely, absurdly low if that amount of latency is really blamed on the application and the container running it. If the API calls that it depends on aren’t slow, I’d like to see many hundreds of pages per second, if not thousands or even more. Someone needs to explain this much more thoroughly. The only thing worse than a benchmark is a benchmark that shows an unexplained result.

He's right here -- it seems like they left out a k somewhere in their graph. The graph says node is doing 25 pages/sec with 25 connected users. That seems pretty bleh. TLDR: The JVM will kick Node's ass six ways from Sunday in raw performance but somehow PayPal managed to make Node faster by being bad.

If they just would have said, ""Node is a pleasure to develop and it's fast enough for us so we are switching to it"" then we would still be taking them seriously.  But I don't know a single developer that thinks V8 can outrun the JVM.
"
2013-12-17 21:04:20;bank: A simple.com API client for accessing card info and transactions;Unit tests?I really appreciate wearefractal's effort !
2013-12-12 09:00:09;spotcrime: API wrapper for getting crimes by lat/lon and radius;
2013-12-11 17:26:50;minimalistic generator of npm packages;"It does npm init, and based on package.json generates files, publishes project to github. 

Also typing 'yo n' is two times shorter than 'npm init'. Hope someone finds it useful :).[deleted]"
2013-12-24 20:38:02;See where in the World Tweets are happening;"I thought little blips would be popping up as tweets happened in real-time.

It would also be neat to change the colour of the geographic region based on its percentage of worldwide tweets over the last 5 mins.

Cool idea.

edit: just did a search - now the map markers are showing up - but they're biiiiig. 

edit2: I can vertically scroll the map past its boundaries - found this on stackoverflow: http://stackoverflow.com/questions/16700770/leaflet-js-setmaxbounds-ignores-southern-bound

There's a 404 showing up for this: http://www.jg-technologies.net/socket.io/1/?t=1387982126932

Maybe add mouse-wheel event capture and tie it to zoom.

The boundarie around uzbekistan (I think) is black, all others aren't.

It's not working for me. In my network tab (on Chrome) I am getting this http://i.imgur.com/tXkna1c.png. It seems to me that I am not connecting to the websocket server properly (for some reason)."
2013-12-24 04:14:13;Generate HTML forms from mongodb table;"Sounds like a fun and useful project. I would be interested in collaborating on it or just provide some feedback. Although the mentioned module seems to be just perfect. Let me know if it doesnt pan out!By generation do you mean scaffolding or dynamic form generation on the fly?

There is also formage https://github.com/Empeeric/formage
"
2013-12-24 03:15:41;Are there any standard / best practices for how to structure your controllers?;"After working on a large ""MEAN"" (or in my case, CEKN? with CouchDB, Express, Knockout.js and Node) project, I've come to really dislike the structure we have for it and plan on moving to a more modular structure.

We started out doing the `require(module)(app)` passing of logic which sounded like great idea at the onset but after a couple years of supporting it, it becomes very unwieldy for a new person to jump into and easily understand and/or write tests for independent pieces. Instead, writing a simple test for a small piece of logic requires passing a parent object back and forth from file to file, module to module, mutating the state in sometimes unpredictable ways.

I've been toying with using the strengths of NPM more and more as we've begun diagramming out our next iteration of the applications. Looking at the way people have written some of the most popular node modules gives a really good indication of how powerful this method is.

All API functions will be built up from individual pieces, and each individual module logic has it's own dedicated tests to keep them as close to 1:1 code tests to functional logic. If a module needs something else to allow it to run, it should be `require()`'d in a reverse manner from what you're suggesting.

Rather than require(module)(app) passing, the module should return usable data that the parent can use and then implemented and built upon in the parent.

As a simple example:

    // file of API/User/modulePiece
    var database = require('../../database.js');
    module.exports = function(config) {
        /* 
            configuration to set up the returned
            function if needed but keep this at
            an absolute minimum
        */

        // this could be a promise or returned 
        // function or anything that pleases you
        return function(req, res, next){ 
        /* 
           if any piece of this relies on another 
           module we would require() it up top 
           our goal is to keep this file as 
           manageable as possible

           We pass objects and functions UP the 
           require chain rather then back inside 
           child modules. If something like a 
           database controller is needed here,
           we can require() it up top and use it
           since it's already been configured
           in a parent module.
        */
        };
    }

The above would be something relating to a larger whole of a subsection of the API.

If we had an API with a User subsection, each piece of the User part of the API would have it's own file which is then required by the User parent and then finally returned up to the API as a whole. The `../User/index.js` file could simply be piecing together the whole User API to return to the parent. Anything that then requires the User api can use it.

From there in the core app.js file, you can simply apply the User API by calling `var User = require('./User');` and then `app.use(User);`

Your config would be `var expressConfig = require('./config');` which would return something you can use for `app.use(expressConfig);`, keeping the logic easy to understand rather than manipulating the `app` logic and passing it down to some sort of configuration mutation.

I also would *strongly* recommend you sort out your test suite before you even begin coding a single line of a new application. Going back to fill in missing unit tests rather than a more TDD workflow is rough, especially once you're facing deadlines and the general mentality is [**we'll do it live! fuck it!**](http://stream1.gifsoup.com/view5/2479799/we-ll-do-it-live-o.gif)I put everything in one directory.  

When that directory gets crowded, I try to find some like things I can move into a different directory.  For my last node.js app, one of those directories ended up being an ""endpoints"" directory where all those files took the express.js app as input and attach http endpoints.I dislike the idea of having ""controllers,"" ""models,"" and ""views"" directories. Instead, I prefer a modularized approach where code for a specific feature is grouped into a module.  However, if I were going to have ""controllers"" or ""services"" directories, I would do it like you propose, I think.I think modularization of controllers is added complexity.  It's not what people expect and the gain seems minimal.  I personally prefer the structure that krakenjs creates.I just run Yeoman and let it do the work.  Standards will always vary workplace to workplace.I have a pretty similar structure, and include views/templates in the plugin (modules) directory as well.  I do not like the master view, controller and models directory as it doesn't flow well with how we develop.  Adding modules to a new site is a snap as well.  Git pull or just copy a single directory.[deleted]Stop calling them controllers. That's another pattern in a galaxy far, far away (The galaxy of local GUI apps). Making them into a single thing is part of the organizational problem.

Some of this is routing code -- organizing URLs and requests into useful structure.

Some of this is business logic, I'm sure. 

Some of this is going to fall out into logical structures if you start making modules of functional groups.

Sometimes the right answer is to expose the app to each module and let them register URLs -- that's a very HTTP way to think of it.

Or you could separate the routing and start making a more CRUD-style set of modules that know nothing of HTTP. 

What the right answer is depends on your app -- how much HTML-rendering code you've got, how much request processing you do."
2013-12-23 22:01:42;Handy tool to help with editing package.json dependencies.;
2013-12-23 19:56:08;Experiments with Koa and Javascript Generators | Steven Sanderson;"Thanks. This is a much better explanation of why Koa is great than Koa's own site.Can't wait for node to support generators in the stable release.

However, I would choose bluebird [1] over Q. Q is slow as hell [2].



1. https://github.com/petkaantonov/bluebird
2. http://spion.github.io/posts/why-i-am-switching-to-promises.htmlI can't wait for node 0.12 so I can start playing around with generators and coroutines in production code.Thank you so much, great explanation!"
2013-12-30 12:24:44;I created a web crawler. What do you think?;"I created a multipurpose web crawler for personal use. After over 2 months of work it feels like it’s stable and has enough features to (perhaps) be useful to other people as well. 

I’m not a full time Node programmer but I hope it’s relatively easy to read and modify it. 

Please let me know what do you think. You should write up a brief example that's vaguely useful, like fetching all the reddit front page links, as is it's a bit vague. 

Also FYI, what you're calling ""jQuery syntax"" is actually CSS Selector syntax. You need to be more specific in your package.json dependency versions: using `""*""` is very bad practice (it will break very soon when a module pushes a major/minor update). Look at the package.json's on some libraries you use (and the npm manual) to see how to improve it (likely using tilde + semver `""~1.2.3""`)mad props dudeI've been playing with it for the last hour ! Looks cool ! What do you use it for ? I've been wanting to implement something like [scrapy](https://github.com/scrapy/scrapy) on node.

You've provided an interesting approach. How easy is it to swap out CouchDB with something else? Looks like you're using CouchDB for messaging/queue *and* document storage? I guess theoretically the ""saver"" job can use any backend database to store documents."
2013-12-29 12:41:27;Please recommend a framework for a mobile app backend REST API;"Why not pick the best-of-breed solution for each of those points and just make what you need?  I'd probably just use express with passport and [sequelize](http://sequelizejs.com/) (IF I had the same requirements as you -- I rarely use orms though).  

I have no idea why web frameworks still try to tackle database support.  That just smells of bad design and coupling to me. Break it up. 

Use a good ORM (... or don't, because I don't think they actually limit complexity much -- write a good data access layer for your app)

Restify is a great HTTP-layer server.

Unit tests, use tap or tape (or mocha)

File uploads, use formidable (unless they upload via PUT, in which case `req.pipe(fs.openWriteStream(...))`. File downloads, use `fs.createReadStream(...).pipe(res)`.

And passport for login, since you're going all OAuth2.If you prefer large frameworks, check [Kraken](http://krakenjs.com/).I <3 sails.pineapple [deleted]"
2013-12-28 16:32:12;Show Reddit: Check out an ephemeral photo sharing web app I built entirely using node!;No error, but no functionality on iOS 7 Safari.Awesome, working fine on android :) what's the code to access a devices camera?So this is like that quick pic sharing site that got hacked and had the entire database of images taken leaked on the internet?
2013-12-28 11:29:00;Convenient HTTP/HTTPS route proxy for cross-domain request, request forward;Neat, but I feel like this would be more useful as express middleware.
2013-12-27 23:39:36;how do i login to reddit with node?;"Try using [passport-reddit]( https://npmjs.org/package/passport-reddit). I've worked on reddit with node before and my problem with logging in was stemming from the fact that you need to keep the cookies you get from logging in. I ended up using [restler](https://github.com/danwrong/restler) for the GET/POST requests and being sure to use the jar feature to maintain cookies.Just 2 quick things that might help you...

Is the account you're trying to login new? It needs to have some karma in order to perform as a bot, otherwise you have a very low rate limit. 

Did you use rereddit? Here is the code for a bot I wrote, maybe you find it helpful: https://github.com/JonnyBurger/chinchilla/blob/master/config/reddit.js"
2014-01-07 18:08:39;Getting started with Node.JS;"What the fuck did I just read?  Absolutely no relevant information on actually starting using Node.js.

And the dude's glove.  Wat."
2014-01-07 16:37:37;Poor Man's Firebase: LevelDB, REST, and WebSockets;"Poor man's? Seems like this should be the way to go. Maybe it's just me but I'm not a fan of outsourcing my infrastructure if I can help it.I dunno, I always thought of Firebase as the poor man's CouchDB.  Either way, it does sort of raise the question...

...why not CouchDB?"
2014-01-06 19:30:26;Echos - A simple node.js echo server and client;I don't... Why? 
2014-01-05 16:39:32;TFTP client (and soon tftp server) in pure javascript;"Hey people, thx for your support. Thanks to you I appeared in a Node Weekly email which gave to me a little more popularity.

I want to inform that I've almost finished the tftp server. I've done some quickly benchmarks and surprisingly my node server is a little faster (I still need to optimize things) than other tftp servers written with static languages and compiled specifically for windows."
2014-01-05 13:13:48;I created an online anonymous multi-user one-on-one chat system (similar to Omegle) with some cool advanced features. Best of all, it's open source.;"It doesn't work in iOS7. Can't send a messageWhat are the ""advanced features""?Nicely done, good job.ah the dream of just being able to use a websocket library rather than primus/socket.io/engine.io/socksjs!Looks cool ! 
You already have several users !!! 
The website is very clean, but it really looks bootstrapy :) ! Customize it !
You don't have a domain name yet ?

Nice work though ! I will take a look at the source code on github !"
2014-01-14 20:06:58;NPM is down again. Why hasn't npm moved to a fully distributed model?;"This happens way too damn muchThey're working on it: https://npm.nodejitsu.com/
Edit: another link to read: http://blog.nodejs.org/2013/11/26/npm-post-mortem/What I'd *like* is a way to store a number of registries in the npm config, so that if a call to registry.npmjs.org failed, it could automatically fall back to registry.npmjs.eu (or vice versa for the devs across the pond).they're too busy writing articles and going to conferences...I spent so much time today trying to figure out the ""could not parse JSON"" messages as we migrate from PHP to npm.... this causes our CI to grind to a halt and causes me unease with the migration...Saw him talk at NodeSummit, obviously npm is needing to scale. I agree with you it's time to take it distributed.We need deflate/gzip support in couch, or throw connect.compress() in front of it. It's ridiculous transferring that much plain-text without it.

Public mirrors and the like would be nice too.. I'd imagine most of the load is just fetching packages, if even short term they hosted the couchdb instance as the authority, and then the tarballs could be fetched from any number of public mirrors, they already have a check-sum to ensure integrity.

$0.02"
2014-01-14 10:27:13;Schema-Inspector - A powerful tool to validate and sanitize JS objects;"Does this tool have any restriction ? 
I pasted some JSON code from a working app and got this error message : 
    missing } after property list

The JSON code validates OK on JSONlint, what did I do wrong ?

Is this compatible with the already somewhat established [JSON Schema](http://json-schema.org/)?How does this compare with
https://github.com/josdejong/ducktypeI'm sorry but schemas are pure bullshit in Javascript. The author of this ""thing"" totally misunderstood JavaScript."
2014-01-13 21:35:12;"""MongoDB for Node.js Developers"" begins today";Cross-posting from a sub I help mod, /r/LearnJavaScript.I learned of this from a posting in one of the other programming subs and I'm glad I did. They are doing a really good job giving the basics and getting you started so far. I'm looking forward to the future weeks.
2014-01-13 19:56:50;NodeUp Podcast: Docker;Pretty good, thank you.
2014-01-13 19:52:13;Open Source Node.js Interpreter for iOS;Source Code: https://github.com/node-app/InterpreterIt's a JavaScript interpreter. Node.js is not the language. So it's a Node.js-enabled JavaScript interpreter. Or a Node.js REPL if you wish.
2014-01-21 21:37:12;Simple hosted private npm and registry.nodejitsu.com;"So $100/month for 25 private packages on what is essentially a private proxy to a set of npm mirrors?

Seems a bit steep for companies that would benefit from not having to spin up a server for this (i.e. small teams or startups) and a bit constrained for companies that wouldn't mind the price tag.

On GitHub $100 buys you 50 private repos. And I wouldn't exactly consider GitHub cheap compared to running your own GitLab instance."
2014-01-21 17:01:34;Flow control helpers for bluebird promises;"I mostly wrote this library so I could write code like this:

    frobnicate()
    .then(tee(guard(
        seq(embiggen, rasterize, saveToDisk),
        handleAllTheErrors
    )))
    .then(doOtherThings);

This is equivalent to:

    frobnicate()
    .then(function(frobnicatedData) {
        Promise.cast(frobnicatedData)
        .then(embiggen)
        .then(rasterize)
        .then(saveToDisk)
        .catch(handleAllTheErrors)
        .return(frobnicatedData);
    })
    .then(doOtherThings);

You could simplify `Promise.cast(frobnicatedData).then(embiggen)` to `embiggen(frobnicatedData)`, but then you have to assume `embiggen` returns a promise and never throws an exception (i.e. it won't work if `embiggen` is synchronous).

I think it makes the flow a bit more readable by avoiding unnecessary `.return` and `.cast` calls and inline function expressions.

EDIT: I originally wrote the library for Q. If there's any interest I'll backport the functions I've added since."
2014-01-21 16:58:28;Phusion Passenger: Node.js WebSocket demo;Can anyone ELI5 why this is really useful?
2014-01-21 16:48:17;A deep dive into the performance optimizations coming to Node v0.12 by Ben Noordhuis;
2014-01-21 15:34:22;node-noobcrypt: Providing easy methods for public key encryption. Please contribute!;From a security perspective, how does this (based on URSA/OpenSSL) compare to [Node-Sodium](https://github.com/paixaop/node-sodium) and  [Js-Nacl](https://github.com/tonyg/js-nacl)?Maybe fix your dependencies a bit more `~1.2.3` instead of `*` ?I updated my module and removed the stream-buffers dependency. I wrote my own routines to split strings. Additionally the byte-calculations are now correct and without flaws! :)
2014-01-28 16:24:31;Current & former Node.js project leads discuss what's next.;I've missed a few episodes. I hope they finally talk about moving to version 1.
2014-01-28 07:07:06;Sublime text packages for node ?;[deleted]
2014-01-28 06:04:19;Hapi.js 2.0 Features Presentation;What is happening here? I clicked through it, see code come and go but why?Here is the talk video to go with the slides [Video](http://www.youtube.com/watch?v=B3u0XkbhleA)Wow, really amazing. Making me want to try it out instead of going full-speed ahead with Restify.
2014-01-27 17:16:08;base12: An example 12 factor web app;
2014-01-26 21:44:24;First module, for type checking. Check it out.;"Cool, I did something similar for a school course. 

https://github.com/vastus/hautala.js/blob/master/1-tyyppiturvallisuus/typeUtils.js

Your code doesn't seem to handle the edge case of creating a number with the constructor function, but I only glanced at it because I'm with mobile. Maybe I will contribute something. "
2014-02-04 17:25:47;Node.js in Hungary - a community in the making;Jó tudni, hogy van ilyen csoportosulás, eddig nem is tudtam róla. :D
2014-02-04 07:25:03;"""Unicorns in Node"" or ""When does the cluster module mater?""";"Citation needed on the ~2x workers per core. Even node's docs on cluster say one per core, which seems to make more sense to me (though I have very little experience with any clustering). 

Seems to me that if each core can do one thing at a time, having multiple workers per core won't speed anything up. "
2014-02-04 05:18:11;Getting started with Node, Express, MongoDB;"I made it up to the word coffeescript. sighGreat stuff!There's one thing I don't get - why use mongo for relational data? are there any advantages over mysql? The main advantages like map/reduce and sharding won't matter if we're talking about a simple blog or something similar. The only one that I can think of is easier queries but honestly I think people should learn at least the basics of how SQL works.

Disclaimer: I'm not a db guru so I'd like someone with insight to comment on this. thanksEasy to follow intro post. Good work!Very clear and informative!Awesome intro post!Nice introduction. For anyone interested in building on this, checkout TutsPlus course on Express. By far the best resource I've ever used...it's available on YouTube. http://www.youtube.com/watch?v=eD2I0zAjM5gThanks guys, yea I should've not done it in Coffee, I'm sowwy"
2014-02-03 17:54:00;Ugh. What is the best way to deploy from Linux to Windows?;"Convince them using the monetary angle. Windows costs money to run production servers, which is a big reason why nobody runs Windows on prod servers unless it is required (ie. .NET-based)Our dev team is forced to deploy to Windows servers quite a bit. We make it VERY clear to our overlords that node is NOT going to perform well on Windows. (at one point we had them sign an agreement stating performance could NOT be a factor in what constituted a ""completed"" application).

With that said, we use Jenkins CI for deployment to staging and production. We have it setup to poll Bitbucket and build the master branch of most projects. Jenkins pulls down the branch, runs the grunt tasks and then deploys. We also have it hooked into Hip Chat too to notify us of build status. Most of our production windows boxes are running Apache so we're seeing a performance hit. It'll be interesting to try Apache 2.4's non-blocking model and see if this helps. IIS would also be fun to try.

I'm with the other commenters here though. There is a point where you have to be the one to say, ""I'm sorry, you just can't put that engine in that vehicle... I know you're comfortable with the Honda Civic body style and chassis, but a V8 just won't fit""Why are they wanting to use Windows as the server? Have they actually given any kind of justification for it?

I would try to dissuade them from using Windows as the server if at all possible. It's a really bad idea and you should try and get that across.I've done a fair amount of tinkering with Node on Windows. Coming from a *nix background myself, I noticed several quirks.

You have to install some dependencies on Windows that on Linux you get for free. Specifically:

- Install python 2.7.6 (not 3.x, that doesn't work). [Download that here](http://www.python.org/download/releases/2.7.6).
- Add python to your PATH. [Instructions for that are here](http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7).
- Install Visual Studio (payware) or Visual Studio Express for Windows Desktop (registerware): [Download that here](http://www.visualstudio.com/downloads/download-visual-studio-vs).

That stuff is needed for Node modules which depend on Python or C++ compilers.

Other quirks I've noticed:

- Symlink behavior on Windows is different.
- Get used to running anything filesystem related through [path.normalize](http://nodejs.org/api/path.html#path_path_normalize_p).
- Running apps from the root directory (e.g. C:\) rather than the home directory can lead to some weird permission problems, even for admin users.

Other than that things seemed to work the same as Linux.

Edit to add: I agree with the other posters that production servers on Windows is *not* recommended. I just want to note that it can be done, even if it's not really a good idea.Install a Linux VM.Some things are built to run on windows, like .NET and other windows server languages. Node is not one of those things. I would talk to your client about it, and tell them that you are not comfortable deploying a production Node environment on a Windows platform. It was built on unix, for unix. Also, regarding your other comment, you do have the clout to tell them you are using Linux. They hired you to develop this project for them, and as you said, they have little to no experience with web applications. Linux.I just went through hell and back trying to get my node app running on windows. The best experience seems to be with iisnode plugin for iis. But the documentation is lacking and overall I was having a bad time.

I ended up hosting on Heroku and it's been heaven so far. hopefully i'm able to gather some knowledge from the other posts and maybe learn something.Its your job to handle the technical requirements.  If they can't understand or accept them then you will need to move on to the next project.  So I suggest securing payment for the current balance in full immediately and if they can't accept your technical advice then fire the client.

If your client wants to maintain the relationship with the other organization then that company will need to acquire Linux capabilities.  I recommend Ubuntu server.[deleted]"
2014-02-03 01:49:32;When do I use fs.open();"You'd call fs.open() if you want to perform several actions on that file.  Methods like fs.readFile() are simply shortcuts that also prevent forgetting to close the file. (Especially less obvious cases like try/catch.)  But you wouldn't want to constantly reopen and reclose the same file if you're working on it.

If you look at the documentation (http://nodejs.org/api/fs.html), the first argument for fs.read() says *fd* while the first argument for fs.readFile() is *filename*.  The *fd* stands for ""file descriptor"" which is the object returned by fs.open().  Filename is simply a string.

Additionally, fs.readFile() reads the entire file.  If the file is large, you might only want specific parts.  For that, you'd use fs.read().

Hope that helps!
open is for when you want to do non-trivial operations -- like seek, read a few blocks, seek, read a few different blocks, close.

Use createReadStream when you want to read the file, but process it in parts.

Use readFile when you want the whole thing atomically.

"
2014-02-09 17:27:25;Quick question..working through CasperJS documentation;"> sample.js

Can I see the code for this? That will help. "
2014-02-09 13:25:18;Node.js Certification;"Certifiwhat?Kind of doubt there's an official certification for it when it hasn't even hit the 1.0.0 mark.oh god i hope not.
Even if there were any, don't bother. Certifications are largely meaningless. Sure, there are instances where they can be useful, but in reality they are not any kind of assurance that the certification holder will meet any kind of real world standards.

EG: if you are in the on-site developer outsourcing business in the Microsoft world, some certifications are helpful or necessary depending on your clients. That said, I've worked along side a plenty of people with various Microsoft certifications that were still horrible at their jobs.

**certifications are in no way, shape, or form, an alternative to thorough interviews! even if you are hiring contractors, interview them.**Node.js Programmer Certification..."
2014-02-09 10:54:32;7 Minimal Node.js Web Frameworks;Quit spamming your awful posts.But I need at least a dozen. What can I do with only seven?did not know about total.js.  Looks intriguing!  Not very old but will keep an eye out.  Dug that they have a wide examples repo
2014-02-09 03:00:23;Learning Node - made a very simple mock API tool with Node, Express and a JSON file;"Obviously this is a very simple example - while I know JavaScript, I'm still learning Node's paradigm.  

When the /api endpoint is requested, it will load a JSON file containing an array of JSON objects containing a URL pattern and a JSON chunk.  The app checks the URL against the parameter passed, and if a match is found, return the JSON for that object.

Thinking about ways to extend it, first probably add a front end to generate the JSON file, to add or delete objects from it.  I installed it, but when I 
    
    curl -i -H ""Accept: application/json"" http://localhost:3000/api/test

I always get 

    ""error"": ""Cannot read the apiroutes.json file.""

Looks like there is something wrong with the path"
2014-02-08 22:11:05;Steve Yegge describes “Rails in Javascript”, one year before Ryan Dahl released Node.js in May 2009;"That was interesting - definitely ahead of its time. I don't think this would ever have become that popular though, as rhino is nowhere near the speed of V8, and it doesn't sound like this used async IO, which is where Node shines.

I had to laugh at this quote, with the benefit of hindsight:
> ""Maybe the answer is you wait for everyone to upgrade to IE7 or IE8 then CSS works the way it's supposed to across browsers.""Non-blocking I/O is the more notable strength of NodeJS. JavaScript just happened to be a good language to use for this because of its evented nature.Flash Media Server was doing (partially) evented server-side JavaScript way before 2009, with video streaming, sockets, peer-2-peer rendezvous services and a many fancy features.I'm very new to node but I remember hearing somewhere that javascript on the server isn't really anything new its just never had any of the traction that node does so it has never stuck. Someone else who has been around the block longer please correct me if I'm wrong. "
2014-02-18 22:08:58;What are your favorite examples of well written and well structured node apps on github?;"Check anything written by substack. Small modules that do one thing and do it well. None are frameworks, instead they can be combined to solve complex problems. The other end of the spectrum is express.js which is the largest in size and is still succesful due to good design.[kraken](http://krakenjs.com) seems to be trying to be that example. Refactoring existing apps into something sane takes quite a bit of time and effort though.Someone got *real* pissed at this question.This isn't exactly what you are looking for but I'm finding it helpful - it's basically a 'starter' kit for node apps -  
https://github.com/sahat/hackathon-starter"
2014-02-18 21:47:26;Foursquare venues module with add/edit/get/search and categories;
2014-02-18 14:27:07;HOw to install node on amazon ec2 using rhel, centos, scientific linux. RUn Hello node.;
2014-02-18 09:45:23;Tool for managing js events;
2014-02-18 00:06:53;Create a bunch of objects from multiple CSVs... How to store them?;"How many thousands?  How big are the objects?  What do you need them for?  How long do you need them?

Check out [node-csv](http://www.adaltas.com/projects/node-csv/); it's got built-in functionality for pretty much any use case.  If you're only working with a few thousand medium-to-small objects, throw them in an array and call it a day."
2014-02-25 04:34:27;pattern-emitter: Node event emitters with support for regular expressions;"Hoped to share a small module I made this past weekend. I wanted to be able to use patterns with events to simplify a pretty edge use-case, but most implementations I found weren't that consistent with EventEmitter. They either had differences in behaviour when emitting events (error, newListener, removeListener), exception handling, lack of domain support, etc. So this is an attempt at keeping things consistent with lib/events.js without full on copy-paste.

Hopefully someone else finds some use out of it! :)Like this? https://github.com/missinglink/regexemitter"
2014-02-24 20:41:54;What are the go-to opensource node.js projects on github for beginners to learn from?;"[Hackathon Starter](https://github.com/sahat/hackathon-starter) is pretty nice to start a project with.Don't know if it's the best beginner project but this was pretty simple to jump in and contribute some bug fixes/features to https://github.com/remy/nodemonYou might want to try out this [web framework](https://github.com/kethinov/roosevelt) I made which basically takes Express and beats it into submission.

I made it basically so that people new to Node trying to get started just making regular websites don't have to deal with the dozens (or hundreds) of lines of boilerplate that is typically necessary to bootstrap a simple site.

I wanted to make something pretty newbie proof and I'm looking for feedback from everyone, but especially from beginners who might otherwise be overwhelmed by the complexity of building webapps with Node.Kinda depends on what you want to do with node.  There's plenty of tutorials on setting up Express if you are interested in some exposure in using node for serving/generating a website. And there's a bunch of node/web sockets chat clients on GitHub. But there far more to node than as a server. I think a lot if the power of node comes from the tooling aspects - stuff like npm and bower for package management, grunt and gulp for task runners/server side tools like minification, linting, cdnifying, Oauth, sass/less processing, Yeoman, etc.  And then there's testing/assertion libraries and headless web browsers. Stuff like mocha, chai, jasmine, phantom.js.  And HTML templating with Jade. And then how JavaScript concepts like promises and modules can be leveraged. 

I think a lot of people don't realize what node offers beyond Express. Express is a great starting point but I think npm is really important - not just package management in package.json but how to modularize code and how middleware adds tons of power to using node. Pick some npm modules that do stuff you are interested in or may have seen as front end libs (like underscore or require). 

I've been using [nodeschool.io](http://nodeschool.io/) to get some basic practice in node, express.js and others.

It's a pretty fun starting point, but if you're past that then I just [searched github for project descriptions containing the word 'node' and sorted by 'most starred' descending](https://github.com/search?o=desc&q=node+in%3Adescription&ref=cmdform&s=stars&type=Repositories) to produce a few candidates:

* [cloud9](https://github.com/ajaxorg/cloud9) - The modern IDE built on Node, JavaScript and HTML5. This is the OSS component of the broader service option at c9.io

* [TermKit](https://github.com/unconed/TermKit) - Experimental Terminal platform built on WebKit + node.jsI will have to check these projects out.  I am looking for the same thing as a beginner.  I can think I could help with documentation and little bugs...get more involved as my skill set grows over time. For me it was installing express, jade and having fun with them. Things kind of fall into place when you explore those frameworks.Maybe you can take a look at [pullup.io](http://pullup.io). Tell me if you find something interesting to do, maybe we can make it together (I'm also a beginner). 

Edit : Fixed the link"
2014-02-24 14:36:50;Understanding Node Generators;"Every article on generators should include a piece about a `spawn` function, something that basically runs the generator again and again until it's returns ""done"".

In other words, code like this ""just works"":

    var fs = thunkify.all( require( 'fs' ) ); // changes function signature

    spawn( function *(){
        var foo = yield fs.readFile( 'foo.txt' )
          , bar = yield getSomeAsyncDBValue
          ;
    } );

The best library for node that does this is [co](https://github.com/visionmedia/co)I guess I'm being dense, but what is the advantage of generators over callbacks?  A little more straightforward syntax?Seems like a decent overview. Though, there's nothing `node` specific about it."
2014-02-23 23:37:39;Manpages And Node Modules;"Interesting mobile strategy ;) http://i.imgur.com/M0aGjmY.jpg"
2014-02-22 23:24:44;NodeJS Sessions;"To solve the problem, you must:

* generate a URL that maps to the player, the URL should have an id that maps to the player in your data store
* you need to add the new route to express, e.g.:

    app.get('/'+userPath, function(req, res) {
        res.send(userContent);
    });

* And in the callback shown, send the user specific content
I'm not a fan of these questions, StackOverflow is a much better place to receive answers from.

That being said, I have an implementation you could use.

`req.param('userId', function(req, res, next, userId) { /* Find the user based on userId, then assign it to req.user or whatever */ });`

Then later on in your route:

`req.get('someurl/:userId', function(req, res, next) {  if( !req.user ) { return next(); }  });`

A basic idea for that.  If you put it on StackOverflow I can answer with more complete code."
2014-03-04 15:10:40;Noob installation issues.;"I am using Node.js under windows without any cygwin crap. I mean ok, Cygwin might be useful, but you certainly don't need it for Node. The article you followed is 4 years old. Windows was not supported at that time. Fortunately for us, it is since ver 0.6.0 I think.

I will write you a simple step by step guide:

1. visit http://nodejs.org/

2. download msi file.

3. run it

4. click through it without changing anything

5. run command prompt

6. enter node -v and you should see the version of node you currently have


If you want to have git, you don't want to compile anything. Just download latest release from: http://git-scm.com/ and install it. 

Both of these can't take more than 5 minutes. Seriously, how can anyone mess this up?Those articles are from 2010. So maybe not everything is outdated, but the Windows compatibility and install procedure certainly is. No more cygwin needed at all.

First you go to the [node.js](http://nodejs.org/) homepage and click the big ""Install"" button. Install it.

Then you go to the [Git download page](http://git-scm.com/downloads) and click the install button there, and install that.

Now you have node and git! Appropriate items have been added to your path, so it should work in cmd or powershell. Or you can run the special shell wrappers, ""Node.js Command Prompt"" and ""Git Shell"" (these items will be in your start menu).

And then you delete cygwin. Because you don't need it.Take it from someone who started down this road: **get a Linux VM**, use that instead, don't bother with Windows for node development. You'll just run into more friction with windows as time goes on. Most open source developers don't test their stuff on Windows and if you run into issues you'll have more trouble solving those issues. Now _most_ of the time that won't matter, but there are tools out there that need to be compiled for your platform and I ran into issues with that several times on Windows. You shouldn't need to compile git to install node. Have you tried just running the windows installer? http://nodejs.org/download/have you tried the .msi installer [on the node site?](http://nodejs.org/) that tutorial is from when you had to install manually.[deleted]Others have answered this rather well, but I wanted to add a few things for when you get deeper into Node on Windows. 

First, most of us want to use node.js as a web server or RESTful web service. You may not, node is certainly not ony for web servers, but the vast majority of us end up running with node listening on a port. When that happens, you'll have some interesting trouble, which is that node typically only runs within the confines of a console window. This will cause serious deployment and administration issues. Linux users do not suffer this as much, since they can run any ole thing as a daemon, but Windows requires special considerations for shell-less applications. Specifically, you want to run node as a Windows service. Unfortunately, node doesn't do this out of the box. 

Most of us get around this by using the [Non-Sucking Service Manager](http://nssm.cc/) to run the node process as a windows service. 

There are also two npm packages that purport to do this via npm, but I haven't tried them:

https://www.npmjs.org/package/node-windows

https://www.npmjs.org/package/windows-service

You may find that one of these resources works best for you. 

Update: I nearly forgot to mention that there is another option. I neglected to mention it because I have tried it and sincerely dislike how it works. You may disagree however, so I will mention it. There is a project, iisnode, that is designed to enable hosting node from within IIS:

https://github.com/tjanczuk/iisnodeYou can get a VPS from Digital Ocean for $5 or $10.  I recommend that.  Or install Linux Mint.  I'm just not a fan of Windows and I think sooner than later you will want a Linux box on the internet.  Ubuntu is the most convenient distro.Yikes, just use Linux.

    Yum install nodejs

Boom, done"
2014-03-02 16:33:37;Sample application using NodeJS/Express and Firebird SQL;
2014-03-01 18:06:25;My first attempt at Neuro Network Learning in NodeJS: The Fish Tank; What is your end goal for this?  I see you have some express templates in place
2014-03-01 17:34:44;NPM not reporting the latest version of my packages, what gives?;"Tangentially related - I got some SELF_SIGNED_CERT errors yesterday , do you know what's causing them?

**EDIT:** To answer my own question (and if anyone sees this thread and is wondering the same thing) - http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-moreThis may be a stupid question but did you update your package.json file? I've noticed the way npm caches things, when you publish a new version, it doesn't always seem to update the local cache. Did you try from another machine or after clearing cache and $HOME/tmp? 

or `npm install <package>@latest` <- if that works then the ""latest"" tag was updated and perhaps your package.json's version is asking for something else.

Although it's entirely possible there is an issue in npm/registry, always good to check your side first.
https://www.npmjs.org/doc/misc/semver.html
"
2014-03-01 10:23:33;A Few Thoughts on a Node.js Foundation;"So the gist of this blog post is:

""A foundation could make node.js better, it could also make it worse...""

Uhh, ok, thanks for the insight."
2014-03-11 21:31:02;Automatically loading Grunt tasks with matchdep;matchdep is good but it does magic. When you want to remove a dependency, you have to compare the ```package.json``` and the tasks that are declared on ```Gruntfile.js```.
2014-03-11 19:39:41;How can I write, generate, and upload docs for Node.js code?;"This is something I've been thinking about a lot -- and I think a lot of the lack of great tools is actually showing off a problem: Documentation attached to individual functions in an API isn't a great way to understand something, and that goes double for Javascript where the mere idea of a 'class' or 'module' is more abstract than something that has nominated those concepts as syntax.

The public API is the documentation in my book -- writing good examples, good prose documentation can't really be cut short. It has to be a goal on its own.

I practice 'README driven development' -- I break my modules up into describable pieces, write down what they should do and how they should work, roughly, then do that. Repeat.

I take a lot of inspiration from the form of unix man pages -- terse use description and summary at the top, then details going down. I need to do this more, actually. If it gets unwieldy, the module is too big. 

NPM's website will in fact show a README quite well, modulo differences between their markdown to HTML conversion and Github flavored markdown, so there's that baked in.

What are your motivations for documenting? Who is your audience? What's the durability and detail requirement for your documentation?README.md

npm will pick up your README.md and display it on your module's page on npmjs.org. Github and Bitbucket will both do the same.I guess I fall into the README.md crowd. If a module does too many things to fit into a single README, that's a good indicator I should split it up into multiple, more specialised modules.I have tried [jsdoc](https://github.com/jsdoc3/jsdoc) a little while ago, works rather well. Also, [this question on SO](http://stackoverflow.com/questions/3818875/is-there-a-way-to-generate-javascript-api-documentation-like-the-google-closure) just for reference. I am not sure if any of those libraries are still supported though. Check out [JSDoc](https://github.com/jsdoc3/jsdoc)Write guide/prose docs with Sphinx and you can have readthedocs.org build and host them via a commit hook."
2014-03-11 18:27:31;question on how to use node-canvas well;"You could try using [Nodetiles](https://github.com/nodetiles/nodetiles-core) which can dynamically generate slippy-map tiles (and uses node-canvas underneath). You'd have to write your own data connector (it's pretty easy), but that would help with some of your scaling problems (since it'll decompose the image into a series of small tiles).

Let me know if you need help (I'm one of the nodetile maintainers).

Another alternative: rather than using node-canvas, have canvas draw the image on the front-end and socket-io only pushes the change-state (this is probably a better implementation... as cool as I think Nodetiles is)."
2014-03-11 18:05:14;10 Habits of a Happy Node Hacker;"> use a locally installed copy of mocha

Yeah, because that's what I want to have to deal with. A thousand goddamn copies of mocha, one for each project, instead of relying what I installed in `~/node_modules/.bin/` and have accessible via `$PATH`. 

\>:("
2014-03-11 15:44:40;Hello World in Node.js is broken;"Missing unused includes is sometimes easy too ;)Actually *actually*, it isn't async in the first place; it's single threaded code.  But that means that we'd need to redefine async or come up with a new term to define it if we wanted to be accurate about what's going on.

True async would also mean we'd have proper parallelism as a first class citizen."
2014-03-18 18:06:15;Getting Started with Node.js for Windows;"Useless article. If you're going to cover node on windows, cover the steps to getting the deps for native module compilation working. That is by far the most trying part.  The stuff covered here is just the usual stuff that any other node.js tutorial will cover.

Why does windows have to always be a bloody pain about toolchains. Ugh.Previously I would just virtualize Linux to develop on node. That changed when I started using webstorm. Takes care of any painful Windows obstacles. :D"
2014-03-17 20:47:43;Check out the API implementation for my latest project using Node and Express;"I'm not sure I understand the purpose of loading new express apps/sub apps. Do you mind explaining the benefits of this?My attempt to resolve some of these 
issues:

https://github.com/celer/hopjs

It's a declarative RESTful framework for express, which is: self documenting, has client side generators for JS, Android, and iOS.

And provides a number of plugins for things like caching, etc.  "
2014-03-17 11:28:25;When will ES6 class syntax be coming to node?;"I believe it depends more on V8 than the node team. [deleted]Today with Traceur or TypeScript.

Or with a SweetJS macro.. that is pretty badass too.[Here](https://code.google.com/p/v8/issues/list?can=2&q=label%3AHarmony&colspec=ID+Type+Status+Priority+Owner+Summary+HW+OS+Area+Stars&x=priority&y=owner&cells=tiles) is the issues list for V8 harmony features, a quick search shows nothing involving the class syntax. A quick look at the [Node.js Changelog](http://nodejs.org/changelog.html) shows node is currently using V8 3.14.5.9. I'm not sure how fast the node team normally tracks V8, and I doubt harmony features are too big of a priority right now, but the issue tracker is worth watching.

**Edit:** You can check what harmony features are available in your version of node with

    node --v8-options | grep harm

If you are feeling adventurous, you could try to compile node with a newer version of V8 then it is currently using. Things might go up in flames, but then again they might not. Just

    git clone https://github.com/joyent/node.git node
    cd node
    rm -rf deps/v8
    git clone http://github.com/v8/v8.git deps/v8 # Change this to get the version you want

    ./configure
    make
    make installYou can use some ES6 features now; http://h3manth.com/new/blog/2013/es6-on-nodejs/[deleted]ES6 isn't being finalized until December 2014 iirc."
2014-03-17 06:52:05;Manipulating JSON in Node?;No need for an NPM, just use the regular JavaScript [JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) and [JSON.Stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).Here's an example. Sorry if there are mistakes, this is off the cuff: https://gist.github.com/jclem/9651178A month or two ago I looked for one for a while and never really found anything that fit. There are a bunch for YML and other stuff, you're probably better off writing your own.
2014-03-17 00:23:04;My weekend hack project: nenv - A simple virtual environment manager for Node;Yay for code, but why? I can't think of why I would want all the things in whatever repo I'm in available on PATH. That's what -g is for.Okay, so why would I use this instead of [nodeenv](https://github.com/ekalinin/nodeenv) if I actually want virtual environments?this is one way to do it.  In my opinion the correct way to do this is how grunt handles it: global executables just delegate to local dependencies in node_modules/.bin/.  the downside is that this requires you to be in an NPM aware project, and it obviously requires support at the module level. 
2014-03-25 22:40:05;Boilerplate for static site generation;
2014-03-25 22:01:26;Capturing stdout via child_process live (help would be appreciated!);"Node buffers the stdout streams and flushes at its own discretion. The output arrives as chunks of unspecified size (but always in-order). 

The size and boundaries of these chunks is not directly related to how many (or how large) console.log() you do (although large writes might trigger a flush sooner). 

If you need to do work on individual lines you'll have to buffer+split yourself.

Also node is notoriously bad with child_process and stdio on Windows. For example this bug was open for ages: https://github.com/joyent/node/issues/3584 but was recently fixed, I believe it is in a recent node 0.11.x.

I have no idea why it could be out of order; I've seen a lot of crappy windows CLI behaviour but re-ordering of streams never happend (so far). Did you try [all options](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) of spawn()? Did you use the `stdio` option correctly?I have never tried this, but you may want to look into using the third argument of child_process.spawn, options. One of the options (stdio) will let you provide your own stream implementation for stdout through which you could implement much finer grained control over the buffering of the output. This might do what you need, it might not.

Check out http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options and http://nodejs.org/api/stream.html#stream_class_stream_writable_1 for a lot more details."
2014-03-25 15:38:22;How-to map backend data relations for your devices and apps with LoopBack - the open source, Node.js powered API server;"Looks good, it may well be the solution for something I'm mulling over at the moment, its an off topic question here but...
What tool did you draw this architecture diagram in?
http://docs.strongloop.com/download/attachments/589861/loopback-architecture.png?version=1&modificationDate=1386093526000&api=v2"
2014-03-25 12:04:07;Writing cross-platform Node.js;"Whitle this article is interesting, it only gives pretty basic information about compatibility. Furthermore, node.js is not *perfectly* cross-platform compatible: for example, I lately ran into [this bug](https://github.com/joyent/node/issues/5587), which is really annoying and makes my app incompatible with Windows.> If you define scripts to be run in your package.json you will find that Windows will choke if you use ./ and rely on a Node.js shebang.

Mocha uses ./ and shebang, and I was able to use it on Windows just fine. What am I missing?

https://github.com/visionmedia/mocha/blob/master/package.json

https://github.com/visionmedia/mocha/blob/master/bin/mochaAlso important: don't use `make` and Makefile's in your build scripts! 

So many module that cannot be tested on vanilla windows; we can't even begin to test and fix their path concatenation errors. It is stupid, as it is a solved problem by now, npm is full of build systems in every flavour. 

Do not use platform specific external commands in a cross platform capable ecosystem. It is stupid and violates what the platform is trying to do.

I have this discussion many times, it get old fast. Some of the hardliners still come up with ""use cygwin"" which is ridiculous or `git bash` which is okayish but should not be needed."
2014-03-25 04:56:19;Help with DMX and node.js;Solved here for the curious: https://gist.github.com/evantahler/9755268
2014-04-01 18:58:28;Continuous Deployment for node.js apps from Bitbucket to Modulus;There's also https://travis-ci.org, but I'm pretty sure they only work with Github.
2014-04-01 17:47:13;A Web-Based Profiler for Node;If there's a gold rush, start selling shovels...
2014-04-01 08:00:00;Gulp vs. Grunt: Node.js Automation Tools Showdown;"My 2 cents...

Just use Gulp unless you find that you can't get Gulp to do something you need to do.

Just use Grunt unless you find it too slow or the configuration process to unwieldy.

I've used both and both are good. Most of all just pick a tool and start working :)"
2014-03-31 23:46:29;npm Help;Check your path, e.g. echo $PATH. You may have an old version of Node.js in your path. If you are on Unix or OS X, try: which node
2014-03-31 18:56:11;Introducing early version of Fourchette: test PR against a fork of your Heroku app;
2014-04-07 22:47:11;Trying to hire an experienced node developer in the Boston area. Serious inquiries and tips for finding a developer are welcome.;"Your problem is your pitch, not node.  You can find someone to work with just about any tech stack, and you're in fucking Boston.

How much money are you offering?  Equity?  Have you demonstrated that your idea is viable?  Are you funded?

It sounds like neither you nor your co-founder are technical people.  That's going to be a big red flag, unless you're *really* good at the business side.  You posted on craigslist, so you aren't.

Anybody who meets your requirements is going to have their pick of offers.  Why should they choose you?When I search on Indeed for people with Node.js in Boston, MA quite a few come up.

I don't really believe that its hard to find Node.js developers.

But since you say you are a startup, I bet I can guess what the problem is.

You need a Node.js developer who is willing to work for equity only or for a below market wage.

I just don't believe that you would have a problem if you offered a competitive wage, and I have seen a lot of posts like this.  They always turn out to be looking for someone essentially to work for free.

Or, you and the other guy have the ""big idea"" and are happy to provide equity to the ""coder"" who implements it, but are only willing to part with a small percentage of the ownership.  Which is much less than the person making your great ""vision"" a reality would deserve.Curious - what ARE your requirements, anyways? Perhaps you're not incentivizing the right way? Are you asking for too *much* experience (note node's age - it's rather young in comparison to other langs).> I don't want to give out too much information like this but we're looking to build a new application combining elements of socially driven sites like reddit and e-commerce sites like amazon or ebay. We've done a good deal of groundwork scheming out the idea and have some visuals and product requirements in place. Now we're looking to hit the ground running and build this thing.

Honestly, this is a huge red flag. What this tells me is you think the idea is worth something (spoiler alert, its not), that idea is probably bland based on the buzzwordy nature, and you don't have enough technical experience to know what the pitfalls of what you're doing.

Very few experienced developers are going to read that pitch and not run away very fast.Is there a particular reason you need it to be backended in Node? If you are really having that difficult a time finding a Node developer, you could be in an even more difficult time if that lone developer moves along? 

That being said, it is normal nowadays to find the best talent that meets your actual needs and to discount their location as an ancillary need. There may not be your ideal developer around Boston, but they do exist somewhere.

Good luck!Going to a local meetup is probably a good bet.

http://www.meetup.com/Node-js-in-the-wild/

That being said, locking down to node is really going to limit your options.I've been working on something like this myself using node on the back end. I have a good chunk of the back end and the front end done. I wonder how many people are working on this now that Y Combinator has had it on their list for like 5 years.I know a couple people who are ""ok"" at node.js who are starting to look (not first language, but they know node and know programming..more important in my opinion)... I can't recruit from within until this weekend, but if you send me any info you might want me to forward, I *might* be able to get you in touch with people who can quickly ramp up to your needs.

Also, just curious... Are you working with anyone?  The problem for developers right now is that the market is *booming*.  I just found a new job (start monday), but was so bombarded with interviews I had my way about salary and job choice.  Seven interviews in 2 days.  Two weeks of total search time.

That means, when we enter the market, we leave fast.  You have to have a huge value-add, and be on the prowl for a developer.  Node.js is also newer (while it was a bonus skill I had, the job I was hired for additionally includes both Rails and Python and cared more about those two..was willing to train on Node if I lacked it)

One of the start-ups I interviewed with was really excited to get me, but could not meet my salary requirements.  The kind of developer you want to rely on in a startup is not cheap.  You're either going to have to give great equity with a high likelihood of that being profitable... or you're going to have to pay for the skills.

"
2014-04-07 15:58:24;Free Beginner Friendly Books for Learning Node.js;
2014-04-07 05:12:19;take a refreshing gulp instead, getting started;Cool write-up. But these gulp tutorials all feel so limited. Surely there must be more to build files then minifing and concatting and other source transforms?
2014-04-07 02:00:28;How do I configure for different environments in express 4?;"I believe you're supposed to just use an if statement.
That's basically what app.config was anyway.[deleted]You can check https://github.com/aredo/express4-bootstrap-starter 
Its booostrap nodejs apps with ExpressJS 4.
And i have been integrate user login and signup with passportjs"
2014-04-06 19:47:24;Can't import Javascript? (function is not defined);Does the nodejs app know how to serve the .js file the way it does the index.html?  In firebug, does it have a network tab, that shows which resources it was able to get?
2014-04-15 20:43:11;Running Node App with Forever as non root?;"Use PM2 instead of forever.  PM2 has to run as root though too for 80.

you might want to check this out:
http://apple.stackexchange.com/questions/37418/how-can-i-open-port-80-so-a-non-root-process-can-bind-to-itProbably not exactly what you want,  but I use pm2 to run node scripts. I don't know all your details here, but there's a few things to keep in mind when running as non-root:

1. What's your current working directory? I remember forever would throw up errors because it would try to look for $(cwd)/.foreverignore and get an error because it wasn't allowed to do so. I forget if sudo inherits your cwd or not, you'll need to check that. It could be that it's trying to read/write files at your root filesystem and throwing a fit.
2. What's the www-data user allowed to do? It looks like it's trying to write to stdout and being denied, which is pretty weird. Try giving it a path to write a log file out to instead, see what that does.
3. When you use `forever start` it will detach/fork/daemonize/whatever your process. If you just skip `start` it will stay attached to your console, so try that out and see what it does.
4. Along with your working directory and daemonizing - if you do daemonize, I'm pretty sure forever writes some files out to keep track of everything, so again - check your working directory, look at what options you need for using a pidfile, logs, etc. It could be that you're forking and detaching from everything, then trying to open up stdout and being denied for some reason.Look into just running a systemd or upstart service script. I like deploying this way because I can restart, stop, start, or check the status of the node app with a simple command `service nodeapp restart`. And if my server has to restart for upgrades or maintenance, then my node app is automatically started up with the system. I also still get logs and live refresh (change a line and node restarts the app) benefits."
2014-04-15 20:32:30;Send a daily email to a distro based on a web scrape that changes daily?;"You'll need promises (or callbacks) to do what you want to do. They allow you to force workflow to javascript. 

I'm not a node pro but you'd need to do something along these lines:

Asynchronously run your two queries and when they're both complete combine the results to become your message body. If you aren't sure how to do this you can use jQuery.when().

Your setMessageBody would use either a promise or callback to implement the creation of the email after you've formatted the message body.

The email creation function would use either a promise or callback to then get your list of email accounts and then loop through the result sending the email to each address.

Separate your ideas into modules where each module only performs a single function, then link them together using promises/callbacks.

Ok I've got most of it sorted. 

The final piece of the puzzle is how would I get Nodemailer to, instead of using text in the plaintext/html section, use something stored in a variable? I'm not sure if Nodemailer is equipped to do that, or if it's just a matter of calling the variable in the text field instead of putting ""stuff here""."
2014-04-15 19:04:38;Google Cast and Node;https://developers.google.com/cast/No, because the node has nothing to do with chrome. Both Chrome and node use the v8 engine but that does not mean that they are compatible to each other. Chrome did add cast support on top of Chrome, not on top of v8. You could try to read the JavaScript source of the Cast extension and try to port the code to node, but it is likely to fail, because the extension probably uses some sort of token that makes it harder. Also, it is possible that the extension uses JavaScript APIs that are available in chrome, but not in node.
2014-04-15 14:28:02;NodeMailer Problems;"I ran in to some issues with NodeMailer recently where I was getting a connection to a windows based SMTP relay server on my local network.

The relay is set up to only take forwards from certain IPs and the machine I was testing on wasn't in the list. The behavior I was experiencing was that the client would get a connection and then an immediate end.

The _onEnd handler for the simplesmtp library that NodeMailer uses does not really seem to have a case for handling this behavior and did not throw a connection refused or timeout error.

I ended up adding a block to the _onEnd event handler in the SMTPClient class for the simplesmtp library, where if the connection stage === ""connect"", then I raise an error. This helped me as I was in the same boat as you before that, as I didn't know where it was broken.

You can see my changes below.

    /**
     * <p>'end' listener for the socket</p>
     *
     * @event
     */
    SMTPClient.prototype._onEnd = function(){
        // See if we had a dump out without a connection.
        // This is a connection failure.
        if (this.stage === ""connect"") {
            return this._onError(new Error(""Server immediately terminated connection.""), false);
        }
    
        this.stage = ""end"";
    
        this._destroy();
    };
    
I'm not sure if that helps. But, you could do something similar. You can throw a couple of console.log(s) into the simplesmtp.SMTPClient class to see what's happening.The sendmail code im using is

smtpTransport.sendMail(mailOptions, function(error, response){
	console.log(""Sending..."");
	    if(error){
	        console.log(error);
	    }else{
	        console.log(""Message sent: "" + response.message);
	    }
	});

The console.log(""sending..."") never gets called and i get no error.

I'm so confused..."
2014-04-15 09:21:05;Restoring files from a running Node.js process;Wish I saw this a few months ago.
2014-04-22 23:12:50;Question about clustering in a different module;"Not cluster. Its job is very specific. 

Look at child_process.fork and the resulting object's send method. It sounds like async.queue within your module could be what you want. You set it up to run the given function n times with a concurrency equal to the number of cores available (or some other number)"
2014-04-22 19:52:08;Mongoose findbyidandupdate Best Practice?;"be careful not to just splat the post data into your db, you should really check it first.

I would just build up an object you want to insert then $set it.I wouldn't ignore the err variable. I usually do something like 

    if (err) {
      return res.status(500).json(err);
    }
"
2014-04-22 19:52:06;This is not Sublime, it's SubLAME (X-Post /r/nodewebkit);"Just like that, have you seen brackets? It's an Adobe-sponsored text editor, quite similar to yours. It also uses CodeMirror. http://brackets.io/
It's got quite big, 12k commits."
2014-04-22 08:17:04;Google Distance Matrix API for Node.js;"This is really great, I have a little info dashboard project this would be perfect for :)

Just curious, is there a similar api for transit stop times?  I'd really love to be able to query how many minutes until the next bus arrives at a give stop.Sweet! I will definitely be on the lookout for a hackday project where I can incorporate this."
2014-04-22 02:15:09;raw.js - a WIP API wrapper for reddit, written in Node.js;"I was unhappy with the existing Node.js API libraries, so I figured I'd make my own.

It's still in very early stages. You can't get any listings or anything yet, but it does support OAuth2 authentication (as a web app, an installed app, or a script) and all modposts and identity methods.Very cool, was about time somebody picked this up. 

If you want to open source it and follow node/npm conventions then Git might work a little better then Mercurial.

And most npm stuff is hosted Github although that shouldn't matter too much.what's this got over Snoocore?"
2014-04-29 23:54:50;Production with no indication of traffic estimates;"How long is a piece of string? Spin up a drone with your app on it, then throw some traffic at it with something like ApacheBench. See how it performs and add a margin for error.

Most importantly, though, make sure your app is horizontally scalable. If you can respond to more traffic by just adding more drones, you're fine.

Also, make sure your app handles scaling down as well as scaling up. If that's the case, you can launch with 10x what you expect to need, then just shut most of it down after a few hours. This is the joy of hourly billing.

An excellent book is Scalable Internet Architectures by Theo Schlossnagle. "
2014-04-29 22:38:46;Having Angular.js minification issues? This module can be the silver bullet! (hint: it's not ngmin);
2014-04-29 16:28:02;Comparing Express, Restify, hapi and LoopBack for building RESTful APIs;"By default I won't trust comparison articles written or published by the owners of one of the objects being discussed.

StrongLoop compares their product to other players and finds their own product to be most amazing? What a surprise. Oh, and we can conveniently order commercial support, what a coincidence.Can anyone explain this line from the loopback setup example?

    var app = module.exports = loopback();

Why not just var app = loopback();?  Why would the app.js export anything?Oh look another ~~blog article~~ advertisement link ~~from~~ circlejerking strongloop. I was interested until I saw the bias at the end. I almost forgot I was on their website until I hit that point."
2014-04-29 14:26:53;filepreviews-node: generate image previews and metadata from almost any kind of file;
2014-04-28 19:05:38;PencilBlue, a full stack online publishing platform built in Node;"Just saw your launching tomorrow in Chapel Hill and RSVP'd.  Hopefully I'll wake up and see you there!  Looks pretty cool and a little more useful than ghost for building someone a node-based CMS-heavy siteWow good job, looks like a very neat project. Just a recommendation from a design perspective: I'd reduce the font-weight from all of the paragraph text on the page. The images and layout look great, but the typography looks a bit cheap.

Overall, looks awesome though. I'll definitely be checking it out."
2014-05-06 19:59:13;Proxying Riak as Levelup (to use lev with Riak);
2014-05-06 16:40:08;Schedule regular jobs with Node.js and agenda;"If you're using Heroku i can recommend the Heroku Scheduler add-on, it's free and is basically a cron job that runs a command.

For me i run a node file that creates job in a job queue and let my workers handle the rest.I had a hell of a time getting regular cron to run my script. I eventually used [node-cron](https://github.com/ncb000gt/node-cron) (I wasn't aware of agenda at the time) and it works fine. Just another possibility for anyone needing to schedule jobs."
2014-05-06 15:45:30;Generators in Node.js: Common Misconceptions and Three Good Use Cases;Service Unavailable
2014-05-05 23:02:09;Config-less markdown static site generator;
2014-05-05 21:28:33;MagiConsole - manage your projects' console output easily with namespaces and log levels;
2014-05-13 23:36:27;require-from - Test private functions without making a separate module;cool thanks for sharing. I was wondering what would be the best way to test private functions
2014-05-13 23:23:18;Promises: which library do you use?;"You are missing bluebird - fast (!), clean, and generally compatible with the ES6 spec promises: https://github.com/petkaantonov/bluebird/blob/master/API.mdANother vote for bluebird. It's the fastest for node. Extremely optimised, excellent documentation in their github wiki.We've been using [bluebird](https://github.com/petkaantonov/bluebird) for a few months and have been happy with it. I haven't tried either of the libraries you mentioned so I don't have much for comparison.RSVP is a good library. It is pretty close to the ES6 spec. But if that's the direction you want to go, just use the ES6 polyfill for promises and don't worry about learning it twice. Another for [bluebird](https://github.com/petkaantonov/bluebird). Though for our usage, we switched from Q because of memory usage more than just performance.

as for your question: the problem with defer is that you are creating extra objects/references and can sometimes not do what you expect. (I had an example at one point but a failed to document it).

However here is an example of how to do both with bluebird:
    
    var Promise = require(""bluebird"");
    function defer() {
        var defer = Promise.defer();
        defer.resolve(""foo"");
        return defer.promise;
    }

    function promise() {
        return new Promise(resolve, reject) {
            resolve(""foo"");
        });
    }

Worth noting, the function passed to `new Promise(...)` is executed syncronously, the resolve and reject functions are safe to use in whatever scope, and have no need to be called on any object. 

A more complicated example:
[Q/Queue](https://github.com/kriskowal/q/blob/v1/queue.js) vs [promise-fifo](https://github.com/mastercactapus/node-promise-fifo/blob/master/lib/promise-fifo.js)

There are some additional differences as I was challenging myself to make it without creating additional closures. However they largely do the same thing, using `.defer()` and `new Promise(...)` respectively.I found [this article](http://calvinmetcalf.com/post/85041743853/comparing-promise-libraries) to be very informative. It includes some [benchmarks](https://gist.github.com/calvinmetcalf/b5ed2a3ab44125aa6228).

TLDR; bluebird> It doesn't really show the 'proper' way to write a function that returns a promise.

If you are writing functions that create promises in node, you are doing it wrong. That's a lot of useless plumbing code that can be completely automated. **Never** create promises yourself in application code - use automatic wrappers for callback APIs (known as 'promisification', or 'denodeification')I use bluebird and [pimp](https://github.com/zeusdeux/pimp). Q is the only one I've used (and its little brother $q in Angular). I've been hearing good things about bluebird, though.You might also be interested in [co](https://github.com/visionmedia/co).Javascript doesn't have hashes, only objects. How would a function know that it was passed an object who's properties are all promises vs an array like object which has non-promise values?

I'm interested in your use case. It sounds like it's outside the A+ spec, but I'd love to hear more. What would the resulting promise resolve with? How would notifications be passed back? Do errors work the same? If you have a CodePen or something it would be cool to see some source. What about good old jQuery? http://api.jquery.com/category/deferred-object/"
2014-05-13 23:08:51;how to deploy node.js ?;"I use nginx as a reverse proxy. Each node application has its own port, say 3001. Then I proxy example.com -> localhost:3001. You do it very similarly in Apache (as you said you run PHP systems), nginx is just more suited for proxying as it was designed very lightweight, with speed in mind. You could use either apache or nginx to handle reverse proxying. If you are only going to run a single app on the IP (through 80 and 443) you could use [iptables to forward your traffic.](https://help.ubuntu.com/community/IptablesHowTo)If I understand correctly you have routes set up as:

* 111.111.111.111:80 -> apache -> phpApp
* 222.222.222.222:3000 -> njsApp

And what you want is:

* 111.111.111.111:80 -> apache -> phpApp
* 222.222.222.222:80 -> njsApp

If this is what you're after, you'll have a conflict on port 80 as both node & apache are listening on port 80. To resolve this, you need to proxy access to your node app through apache using a virtual host, such that you end up with:

* 111.111.111.111:80 -> apache -> phpApp
* 222.222.222.222:80 -> apache -> njsApp

Apache will catch all incoming traffic, look at the requested ip address & any that are for 111.111.111.111 it will redirect to localhost:3000 (which is where your njsApp is now listening). I'm rusty on vhosts in apache so please google for better examples, but I think something like this is what you're after:

    # Your php app:
    <VirtualHost 111.111.111.111:80>
        
        # Your normal php host stuff here
        
    </VirtualHost>
    
    # Your node app:
    <VirtualHost 222.222.222.222:80>
        
        ProxyRequests off
        
        <Proxy *>
            
            Order deny,allow
            Allow from all
            
        </Proxy>
        
        <Location />
            
            ProxyPass http://localhost:3000/
            ProxyPassReverse http://localhost:3000/
            
        </Location>
        
    </VirtualHost>

Keep in mind that by doing this you're losing the non-blocking interface that node provides (apache will still block the thread until the node app returns) so if this is anything but a development project I'd look at spinning up a dedicated host for your node app or something similar.

Hope this helps a little!
Welcome to node :)

*edit
As DVWLD says, this situation is usually dealt with by routing per domain rather than by IP address, which would look something like:

    <VirtualHost *:80>
        
        ServerName phpapp.com
        ServerAlias www.phpapp.com

        # etc...There was just a nice article posted on reddit about this today: http://www.reddit.com/r/node/comments/25q06g/nodejs_performance_tip_of_the_week_scaling_apps/chjy6q0You assign a domain to that IP with DNS."
2014-05-13 18:37:30;Macchiato - Turn your living room into a coffee shop (My first node-project).;I would love some feedback, especially regarding best practices in node.Wish I had some Sonos speakers to try this out, but thanks for introducing me to Coffitivity!
2014-05-13 12:51:09;Help modelling a MongoDB store;"Denormalizing your data is very important when working with a document store like Mongo, as the traditional table-joinTable-table structure from the relational world doesnt work so well when applied to most NoSQL technologies.

I'm going to throw out a completely different suggestion here. Based on the data structure you listed above, you would probably see great benefit from utilizing a graph database, like Neo4J. It sounds like you're trying to model highly interconnected data, a function where graph databases are second to none. I would certainly avoid postgres for this if you intend to try to scale your platform in any way. The overhead for trying to traverse relationships between users and folders and friends will become far too burdensome from a performance standpoint.

In a graph database, you have nodes and relationships, both of which can have an infinite number of properties. Your user would be a node, your folder would be a node, and the association between them would be a relationship. You could simply create new relationships between users and folders to specify the ownership or sharing of a folder, and you can create relationships between users to define a friendship between them. There's much more to graphs than that, but that would be my thousand-foot-view suggestion.

I work with Neo4J and I am also building the technology solution for a startup using the MEAN stack. Like /u/ciny mentioned, don't pick a tool because its the ""in"" thing and all the cool kids are doing it. Pick a tool because its the right one for the right job.>My first instinct when writing up a schema is to abstract everything into different tables with relations/joins, but as I've been led to believe this is the wrong way with Mongo. 

if you need relational data then go with a relational database. I HATE the MEAN stack - not because it would be bad, but because everyone is using it even if it doesn't fit the project because it's cool or something. if your projects makes more sense with RDBMS then go for it and forget the hype.I think you should read the top answer here if you definitely want to stay with mongodb: http://stackoverflow.com/questions/4839881/how-to-organise-a-many-to-many-relationship-in-mongodb First and foremost make sure you know the differences between SQL and NoSQL databases.

Each has strong points relating to a particular area, and trade-offs in other areas. Picking the right tool for the job is essential.

Modelling data in NoSQL databases is very different to modelling data in SQL databases. 

Once you understand how to model data to fit into the NoSQL methodology, you will be able to decide which tool is the right one for the job at hand.

There is an excellent write up on the mongodb site which goes through how to effectively model data in NoSQL databases [here](http://docs.mongodb.org/manual/data-modeling/). "
2014-05-20 19:36:40;Get full stack trace in async Node.js code with this module;
2014-05-20 18:10:38;Release the Kraken: Paypal Experience Using Node.js;
2014-05-20 17:18:51;Announcing the LoopBack Android SDK 1.3 with user authentication and cloud storage support including Amazon, Rackspace, OpenStack and Azure;
2014-05-19 19:32:22;Send emails using Dust templates with Dustmail.js;
2014-05-19 15:49:47;Agenda - Light-weight job scheduling for Node;"Can anyone compare Agenda to something like [node-cron](https://github.com/ncb000gt/node-cron) (which is the only such scheduler I am familiar with)?ive been looking for a scheduling library to assist with building a nodejs powered raspberry pi sprinkler system.

Would you have any interest in contributing to the scheduling component of my project that im about to start?Looks very nice! Clean interface.  One issue that I didn't see addressed - suppose you have a task that needs to run unique to each user in your app.  You currently seem to have job locking (batching might be another way to think of it) on name alone.  However, calling define() for each job / user pair with its own unique name seems bloaty and hard to manage e.g.  adding users. 

Is this use case already addressed? Any plans to? 

And a related question - if a job is scheduled while its lock is held, is the job still scheduled to run when the lock is released, or is the schedule request thrown away?  For some time-based batching algorithms it is useful when the job runs again when the lock is released. I've been using agenda for a while and it's definitely the best scheduling library out there. Great to see it's being maintained!"
2014-05-27 17:46:20;Winston (logging) replacement/alternative;"Bristol: https://github.com/TomFrost/Bristol

I was never a fan of Winston, because the idea to NOT separate the string formatter from the string writer seemed insane to me. Bunyan gets a lot of love too, but it's JSON-only, and if your log aggregator of choice does better with a different format (our use case is Splunk), you're SOL.

So my company sponsored the development of Bristol, and it's gotten good reviews whenever I mention it in talks. See the top of the readme for the feature needs that inspired it.I am using console.log for logs. Why should i use a logger library ? Is there an advantage of using these libraries ?Ugh I'm using winston pretty heavily. Hadn't noticed that it was going stale. https://github.com/nlf/bucker. Pretty basic, but it supports sending logs to [Logstash](http://logstash.net/), which can send to pretty much every other storage option out there.I'm a big fan of node-bunyan. I use it for all my logging (in production) without issue. You can easily add streams to send your logs to files, service or where ever. We use it to format our streams as Logstash compatible docs and send them to Elasticsearch to use with Kibana for analysis. WolverineJS: https://github.com/talyssonoc/wolverinejs

Supports custom levels, log to stdout/streams/files, show the stack trace when logging an error, show the file/line where the log was called.I am fan of bunyan but the guys from express broke their logger out into https://github.com/expressjs/morganThanks for the list. I started using Winston a couple weeks ago, and have not been happy. It has recent commits -- are you sure winston is dead/dying? Why do you say it is about dead? Seems to be updated recently. I just started using Winston."
2014-05-27 15:45:26;"TL;DR? Not anymore! Summarize web-articles with demo / app / API for my module node-sumuparticles";"Might want to find a better name. It is difficult for me not to see ""sumu particles"".

Even the node-summary guy got it wrong, the bottom of [this readme](https://github.com/jbrooksuk/node-summary) under ""Forks"" has a typo, ""node-sumparticles"".I really wish automated article summarizers actually produced something worth reading. The key words method just doesn't seem to work. Here's an example (the first article I tried):

http://www.bbc.co.uk/news/uk-politics-27583545

The results were:

> Cameron urges EU leaders to listen to voters' concerns

>Following UKIP's victory in the European elections, some politicians say it was a 'protest vote' but UKIP leader Nigel Farage disagrees claiming the result is an ""earthquake"" in British politics.

>**When sending us pictures, video or eyewitness accounts at no time should you endanger yourself or others, take any unnecessary risks or infringe any laws.**

That final paragraph is not part of the story at all. I'd be really interested if anyone knows of a better method for summarizing articles."
2014-05-27 06:17:27;An Introduction To Node.js And MongoDB;"I'm happy to see they've removed ""detailed"" from the title.Why you no express?"
2014-05-26 20:19:41;Debugging Techniques in Sails.js;
2014-05-26 09:02:18;"dottie.js - manipulate javascript objects ""safely""";"It doesn't describe in the Readme why this is ""safer"" than usually manipulating object values - am I missing something?

The Transform method looks cool though.Ember does this, too, with `Ember.Object`. Pretty useful. I did something similar with a project called [SteelToe](https://github.com/jclem/steeltoe) a while back. The concept is called autovivification, and comes from Perl."
2014-06-03 22:16:30;How to use plurals stored in locale files with i18n-node;
2014-06-03 21:29:48;Why do we need node?;"It's a very different ecosystem than .net and PHP, for one.

Not tied to Microsoft platforms like .net. Tied to just Javascript as a language though.

A tiny runtime with most modules outside the core. This fosters innovation. Generally there are lots of modules with simple interfaces in common rather than large silos of tools that need glue written. 

Asynchrony not an afterthought. This means threads and shared memory are not the default way to do IO tasks. 

IO focused rather than computation focused. For network apps this is largely fantastic. 

Sharing a language with browsers gives interesting opportunities for reuse of what you've written and some new architecture designs. 

Doesn't have deeply broken error handling like PHP. Also more my opinion: a much better and more consistent language than PHP. Less unfriendly to functional programming than PHP.

Most of all? Modules. Oh the number of open source modules available. The package manager is different. It's managed to navigate a huge problem space and elegantly solve a few problems that no other system has. It makes a huge difference. The main reasons I think you might want Node:

1. Less context switching while coding. If you use MongoDB, all the code you write could be in the same language. No more SQL, PHP/Java/Ruby, XML, and JavaScript switching all day long.

2. Node has been shown to run faster than the other technologies out there, but it is single threaded and may have some drawbacks at scale vs a JVM.

3. There are convenience methods that make some things much easier to do, especially at the socket level. Five lines of NodeJS could be equivalent to 100+ lines of Java or .Net.Node is much more than just a web server. It's easy to write pretty much any kind of socket server in node. Through the amazing npm ecosystem, almost any protocol you can think of it accessible through a single command. Since everything runs under a single thread, these servers can talk to each other unencumbered in real time. Try that in PHP.the main reason I got in to node was that I was writing a lot of JavaScript on the front end and something else on the backend. Everybody knows that. But after doing some node stuff for a while I realised I didn't need apache or microsoft IIS. I'm still digesting this."
2014-06-03 20:04:44;V8 just got iterators for Map and Set!;when do I see this in the wild?
2014-06-03 10:57:23;Writing command-line utilities with Node.js;
2014-06-03 07:14:44;npm-service - remote npm installs;
2014-06-10 21:20:46;Podcast: Socket.io v1.0 with Guillermo Rauch;
2014-06-10 18:28:38;SocketCluster Realime Engine benchmark with 42K concurrent users;
2014-06-10 17:44:39;Introducing vtop — A Terminal Activity Monitor in Node.js using Braille Unicode Chars for Charting;
2014-06-10 15:37:45;Why are there two node.js subreddits?;"No idea. Just like I don't know why /r/javascript's sidebar is linking to things like /r/php and /r/forhire, but not to any node.js subreddit.

Mods do strange things.Disklike... They should combine. I'm just finding out about /r/nodejs today.One request, one response

*ducks*This one has more users and actually has some content in sidebar. The other has (in my opinion) the better name. :)

I think it's mostly a matter of getting the mods to agree and then actively shifting traffic from one of the subreddits to the other.
We're the People's Front of Judea.There is no reason to have two at all.  Guess it's down to the respective mods to figure things out between them.It was the same with /r/web_design and /r/webdesign for a long time. Their going to merge at some point, so the question is why the mods are delaying the inevitable.everybody wants to be a mod...We should create a /r/theonetruenodejssubreddit."
2014-06-10 00:25:08;Idiot proof free deployment for node mongo?;"[Heroku](https://heroku.com/) is pretty straight forward and [the docs page](https://devcenter.heroku.com/articles/getting-started-with-nodejs) is pretty short/straight forward.+1 on /u/electric_creamsicle 's suggestion on Heroku. In terms of Mongo, I'd suggest [MongoLab](https://mongolab.com/welcome/), it has a pretty generous free plan.Like others have said, Heroku is pretty straight forward. Just be aware that Heroku is gonna charge you for any extras that you'd normally get for free (like scheduled jobs) and it doesn't scale super well (price wise) as traffic goes up.

I second MongoLab and MongoHQ for a DB provider. Both have free tiers that should be plenty of storage.

I just wanted to throw out another option, that isn't really ""idiot proof"",  but it's what I usually do to deploy my node apps. Heroku just runs Amazon EC2 instances under the hood for their dynos, and it's not that difficult to setup your own EC2 instance to run your node app. This blog post does a pretty decent job of explaining the process of provisioning, deploying your application to, and setting up port forwarding to deploy a node app to EC2: http://www.bennadel.com/blog/2321-how-i-got-node-js-running-on-a-linux-micro-instance-using-amazon-ec2.htm

You can't beat Heroku for convenience, but doing it yourself isn't much tougher :)I'd recommend taking a look at Azure. You can have up to 10 Azure Websites for free, and you can also deploy MongoLab instances for free through the Azure portal. 

Here is a quick walkthrough of how to deploy a Node app using git to Azure Websites: http://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/

There is one thing in the document which is incorrect. It states you need the Azure SDK for node, but you do not. Just Node and git for those instructions. I deploy to Azure Websites from my Macbook Pro without the SDK all the time. 

update: Here is a tutorial walking you through setting up mongolab and node and deploying on Azure.

http://blog.mongolab.com/2013/02/node-js-and-mongolab-on-windows-azure/nodejitsu and mongohqhttps://www.andrewmunsell.com/blog/dokku-tutorial-digital-ocean

Dokku is self-hosted mini heroku. Has lots of plugins like mongo, and pretty easy.I have the perfect solution for you: http://modulus.io it has a simple CLI for managing your deployment and also does MongoDB storage in house.

I have http://plnkr.co hosted with them and its fantastic."
2014-06-15 23:03:43;Using Express 4.x Router Instead of express-namespace;" Haven't used Express 4.0 yet. I noticed in the example, two separate Routers are assigned to '/forum'.

Does that matter? Is it just going to match up to the URI anyway?"
2014-06-15 04:44:15;socket.io live audio jam application - very fun;Feel free to check out the source code (https://github.com/rsahai91/WhatsGroovy) and throw it a star :) !Really awesome. Fun on a touch device, too. Very fun! What was the inspiration for this idea?
2014-06-14 05:27:00;Creating a simple REST API with Vatican.js;
2014-06-13 23:00:00;Requiring Interdependent Node.js Modules;Its quite a bit easier to just not assign to `module.exports` - extend it instead.  The described method will fail as soon as you want non-functions attached to `module.exports`, since it is dependent on the function-hoisting behavior.
2014-06-13 22:22:14;Use Node, Mocha and Nock to Test Code That Uses HTTP APIs;Another reason we need to merge these subs. No good reason for this to be in my feed twice. You can just return a Promise from a mocha test function instead of writing code with .fail(done) 
2014-06-24 16:50:47;Node.js Reading List;
2014-06-24 15:42:20;Presentation on Node.js;"If you can't answer those questions for your organization, this might be a bad idea unless you think your company will pay for real training.  In my experience, pitching a new technology to co-workers is an uphill battle unless either you are in a position of authority and can mandate it, or, they're already very interested in that tech.

Less pessimistic edit: If you have the freedom, the more you use that technology for your projects, the better chance you have of it catching on; just remember you're making yourself the spokesperson, so make sure your code is readable, tested, etc...Here is a pretty good **[summary](http://refcardz.dzone.com/refcardz/nodejs-building-scalability)** of Node.js.  
  
Node.js is great for delivering a lot of real-time data that requires a lot of updating. It is not great if the application requires a lot of computation, because it is single-threaded and it will just block anything else from happening while it is computing.  
  
One of the biggest challenges is probably understanding how to deal with the asynchronous nature of Node. The linear flow of execution in other languages seems much easier to follow.  
  
Unless you have an actual need for real-time applications, I would probably go with another language. Don't choose Node just because you are bored with PHP.1. No context switch when writing web apps like in other languages. Javascript is quite nice language when you strip away the DOM and other browser specifics.
2. Harder to write when you are not used to functions as first class citizens.
3. At the very beginning quite hard, but learning curve is very small-node module system is simple and yet powerful.

4. The original presentation was given to people who used PHP or other languages, so even if it is a bit dated, I think it can still get the message through. Here: https://www.youtube.com/watch?v=ztspvPYybIY

5. Any typical web projects. I would even use it when building a desktop app-using node-webkit framework. I would not use it probably only for scientific computation and 3D games obviously.
 Look no further ! This is what you are looking for : http://nodeguide.com/convincing_the_boss.htmlNode.js is like a web browser running on the server with a nice module loading system, a core set of modules, a popular package management system (npm). If a developer is comfortable writing JavaScript for the browser, then that developer should have no problem becoming comfortable and productive in Node.js.

A huge advantage of Node.js is that it is really easy to get started since Node.js is very easy to install and running JavaScript code doesn't require any pre-compilation. It is also very easy to deploy a Node.js application (although scaling it requires some additional research and planning). Performance is good for a dynamic language since V8 has been heavily optimized.

The main disadvantage that I see is that error handling can be tough with asynchronous code.

Just make sure you use the write tool for the job. Node.js may not be the best solution for building a complex back-end API and connecting to DBs. I think Node.js works best if you using it only to make HTTP service calls to get data and use something else to build the back-end service layer."
2014-06-24 14:49:26;Tutorial: HTML Audio Capture streaming to Node.js (no browser extensions);
2014-06-24 12:29:00;Redemption from Callback Hell;"I skipped around in this trying to find something that wasn't a retrofitted code snippet. Was the conclusion just ""use promises""?50 minute video? Don't got time for that. What's the gist? Why doesn't someone write a concise blog post to go go along with these kinds of videos?
"
2014-06-24 07:28:23;actionhero v9.0.0;
2014-07-01 11:52:32;[VIDEO] Basic Templatizing in PencilBlue;"Or, you know, Use Jade, or Handlebars like any sane OSS developer would, if they wanted people to actually contribute. Those two modules alone have had more dev time and eyeballs looking at them then your entire CMS. This entire thing is filled with pointless reinvention of wheels.

**I'll copy paste my reply from another thread.**

[Things like this makes me think this will quickly fade away into obscurity.](https://github.com/pencilblue/pencilblue/blob/master/include/http/request_handler.js) 

Express.js does routing way better, they have invested a ton of time getting it right and a ton of people know it. You are going to have a hard time getting contributors due to reinventing the wheel everywhere.

[What is this? You wrote your own ORM/DAO?](https://github.com/pencilblue/pencilblue/tree/master/include/dao)

Why? What possible reason, if you were going to tie yourself to Mongo, wouldn't you just use Mongoose, at least you would have real models? What does yours do that Mongoose cant? You expect people to use this to write plugins?

[I spent a few minutes trying to figure out how you were handling your passwords, gave up on that when I didn't see ""bcrypt"" in your package.json. That pretty much tells me right there you aren't handling them properly.](https://github.com/pencilblue/pencilblue/blob/master/include/model/create_document.js)

So you spent however long rewriting bog standard node.js packages, that everyone knows how to use, in favor of your own stuff. You aren't following best practices hashing passwords. You have stuff hard coded in everywhere. I could go on and on.

You guys are obviously pretty talented developers, and your marketing and social media push is pretty impressive. I just wish you would have spent less time rewriting stuff that **giants** already wrote two years ago, and more time building **your** system.

(I'm using a throwaway, as I'm not trying to start a flamewar, I'm a pretty prolific poster here, and elsewhere. And no that wasn't an appeal to authority, take my opinion with a piece of poop.)[deleted]"
2014-07-01 07:46:55;What do you use for integration testing?;"Zombie.js or Casper.js?It sounds like Cucumber is what you're after. The original is implemented in Ruby, but I believe there's a Node.js version.I use [wd](https://github.com/admc/wd) with mocha and chai. It's a selenium webdriver adapter, so it can drive any browser, but I have it drive phantomjs by default. If you look at the [example](https://github.com/admc/wd#q-promises--chaining) they have using it with q, it's pretty close to what you're looking for. But since it's asynchronous, it's a little different, and I think your code would look something like this:

    browser.init({browserName: 'phantomjs'})
    .get('http://example.com/#sites')
      .elementByCss('button#new_page').click()
      .elementByCss('input#page_name').should.eventually.exist()

 I've found it pretty nice to work with, and you can define custom methods if the existing webdriver methods seem too verbose. There is a sync version, but I haven't used it, so I'm not sure how stable it is.

  Grab a saucelabs free account. They have good selenium testing.Cucumber + webdriver.io, there is also nightwatch.js but it lacks mobile support.

I use Java + Selenium + Cucumber + Hamcrest ... Java is way better for making tests because its easier to build a big software system with it.I'm not sure if I'm just going on a completely wrong direction but... You could just use Selenium. I'm pretty sure someone wrote connectivity with JS.I like mocha and chai.

here's an article I found on testing single page apps with mocha driven tests. there are many others.

http://backbone-testing.com/
"
2014-07-01 03:55:18;Unchained: A simple MVC framework based on Express;"The [Model](https://github.com/robgibbons/unchained/blob/master/models/index.js) bit of MVC is quite lacking also no tests.also, this looks like backend MVC most applications have moved the burden on to the user for SPAs. Seems unnecessary. Creating routes and directing requests through middle ware and routers in express is pretty easy as is, and if you're just making a back end api and letting the client handle routes on its end, there's no need for muddling up your views.

It's kinda crazy how many 'frameworks' are coming out nowadays. Im new to the development world so maybe it's always been this way, but it seems like people really like to reinvent the wheel and tell the world about it now that npm exists and is so easy to publish to. "
2014-06-30 20:30:21;Using streams to download a video and convert it to MP3;You should try fs.createWriteStream, so the request becomes streamed to a file-system interface, then pipe that into avoncv
2014-06-30 17:56:54;CLI for capturing responsive website screenshots;"Ohhhh exactly what I needed! 

Thanks! very cool module ! Webshot
http://nodejsmodules.org/pkg/webshot"
2014-07-08 21:15:27;Clean & efficient namespacing/routing in express 4;"I think it's better to keep your API in plurals.  Instead of:

    /api/person  

You can use:

    /api/people

This way you can fetch all people, or a specific person:

    GET /api/people  <= Returns list of all people
    GET /api/people/:id <= Gets specific person[Here](http://bulkan-evcimen.com/using_express_router_instead_of_express_namespace.html) is an article that I wrote a little while back. "
2014-07-08 18:48:00;NPM: Why You Should Never “npm-unpublish”;"What I don't understand, why the hell was this module removed in first place? So somebody thought it shouldn't be a plugin, that's nice but so what? npm is a free space so if somebody makes it and it gets use then why the whiny complaints? And why did the dev fold on it? Bad stuff.While I agree that at all costs you should never do this, preventing users from deleting their packages seems like a bad idea to me.

I can't fathom a case where I would delete a package from npm, but if for whatever reason I wanted that code out of there and couldn't delete the module, I would just overwrite old versions with empty files. Which could have even worse effects than the module just being gone.
"
2014-07-08 14:18:40;Yeoman vs CodeKit vs Lineman;Haven't heard about workflow wrappers, but they look helpful. I'll check em out
2014-07-08 14:15:48;hitboxplayswow - a twitch plays pokemon style project I am working on.;
2014-07-08 13:26:29;New to node - stuck on this wierd JSON error when querying mongodb;"&gt; The response I get from a console.log of the first function listed: here

Where? Seems the link was forgotten or something. 

Also, you're assigning 'list' to a cursor for the find statement. I think you may want a callback instead. 

```

users.find({ username: req.body.user}, function(err, user) { 
  console.log(user);
});

```

What Mongo driver are you using? "
2014-07-15 21:36:46;Node.js Cheatsheet on v0.12;
2014-07-15 20:43:19;5 Most Depended-upon NPM Packages;
2014-07-15 18:26:25;How We Replicated NPM into Orchestrate;
2014-07-15 16:32:19;SSL/TLS with a self signed cert for a Node + Restify API.. Help!;"> My understanding of rejectUnauthorized is that for clients that do not have my my certificate (my server.crt), the server will reject them.

rejectUnauthorized is for https *requests* via the https builtin.  The server does not have this parameter.  

http://nodejs.org/api/https.html#https_https_request_options_callback

https://github.com/joyent/node/blob/v0.10/lib/https.js

---

So, basically you need to add your certificate, the crt to something within the mobile application itself (or the device's cert store) so that it's trusted by default.  I'm not too well read on android itself though, so that might not be possible - in which case, you need to shell out for a cert from some CA.

Further, you'll want to cert pin in your mobile application so that only your certificate is going to be trusted for that application. MITM is bad, mkay.Oh, I've done this. Basically what we did was to pin the CA's cert in the Android app, and override the SSL validation checks for that app's connections to only permit certificates with a matching fingerprint. Nginx handles our SSL in front of Node, but it should work equally well in your case. Getting the pinning to work was by far the most annoying part of the process, and you'll have to forgive me but I can't seem to find the code for it now.Silly question, but how does an SSL certificate prevent others from connecting? Isn't it better to let your web server (like nginx or apache) handle SSL? You DO have have a web server sitting IN FRONT of node, right?"
2014-07-15 13:21:53;Migrating your WordPress Blog to PencilBlue;
2014-07-22 20:27:36;Node.js Tools for Visual Studio Beta 2 (edit/debug/isense/profile/debug on linux/... available (free/oss);
2014-07-22 20:19:24;How can I use grunt-exec with arbitrary subsets of shell commands?;"Here's a full Gruntfile that I just made for a project. It will jshint, concatenate, annotate (for angular dependency injection minification), minify, and sourcemap javascript. It will compile scss files and copy a variety of files to a dist/ directory. It also has a watch task which listens for file changes and performs tasks depending on type. When possible I would search for a grunt module to do a specific task instead of using exec.

    module.exports = function (grunt) {

    // modules ------------------------------------------------------------------

        grunt.loadNpmTasks('grunt-contrib-jshint');
        grunt.loadNpmTasks('grunt-contrib-concat');
        grunt.loadNpmTasks('grunt-ng-annotate');
        grunt.loadNpmTasks('grunt-contrib-uglify');
        grunt.loadNpmTasks('grunt-contrib-sass');
        grunt.loadNpmTasks('grunt-contrib-watch');
        grunt.loadNpmTasks('grunt-contrib-copy');

    // config -------------------------------------------------------------------

        grunt.initConfig({

        // linting --------------------------------------------------------------

            jshint: {
                all: [
                    'Gruntfile.js',
                    'src/app.js',
                    'src/controllers/*.js',
                    'src/directives/*.js',
                    'src/services/*.js'
                ],
                options: {
                    loopfunc: true
                },
            },

        // concatenation --------------------------------------------------------

            concat: {
                dist: {
                    src: [
                        'src/js/libs/angular.js',
                        'src/js/libs/*.js',
                        'src/js/app.js',
                        'src/js/routes.js',
                        'src/js/controllers/*.js',
                        'src/js/directives/*.js',
                        'src/js/services/*.js'
                    ],
                    dest: 'dist/app.js'
                }
            },

        // angular DI annotation ------------------------------------------------

            ngAnnotate: {
                all: {
                    files: {
                        'dist/app.js' : ['dist/app.js']
                    }
                }
            },

        // minification ---------------------------------------------------------

            uglify: {
                my_target: {
                    options: {
                        sourceMap: true
                    },
                    files: {
                        'dist/app.min.js' : ['dist/app.js']
                    }
                }
            },

        // sass -----------------------------------------------------------------

            sass: {
                dist: {
                    options: {
                        style: 'compressed'
                    },
                    files: {
                        'dist/main.css' : 'src/css/main.scss'
                    }
                }
            },

        // copy -----------------------------------------------------------------

            copy: {
                main: {
                    files: [
                        {
                            cwd: 'src/views',
                            src: '**/*',
                            dest: 'dist/views',
                            expand: true
                        },
                        {
                            cwd: 'src/assets',
                            src: '**/*',
                            dest: 'dist/assets',
                            expand: true
                        },
                        {
                            src: 'src/index.html',
                            dest: 'dist/index.html',
                            expand: false
                        }
                    ]
                },
                production: {
                    files: [
                        {
                            cwd: 'dist',
                            src: '**/*',
                            dest: '/var/www',
                            expand: true
                        }
                    ]
                }
            },

        // watch ----------------------------------------------------------------

            watch: {
                js: {
                    files: 'src/js/**/*.js',
                    tasks: ['build', 'copy']
                },
                css: {
                    files: 'src/css/**/*.scss',
                    tasks: ['sass', 'copy'],
                    options: {
                        livereload: true
                    }
                },
                html: {
                    files: 'src/views/**/*',
                    tasks: ['copy']
                }
            }

        });

    // tasks --------------------------------------------------------------------

        grunt.registerTask('default', ['watch']);
        grunt.registerTask('production', ['copy:production']);
        grunt.registerTask('build', ['jshint', 'concat', 'ngAnnotate', 'uglify']);

    };Setup yur targets `grunt.initConfig()` amd add a bunch of aliasses, like:

    grunt.registerTask('lint', ['jshint', 'csslint']);

You don't need an alias for only jshint, just call `grunt jshint` (it will use the name of the config values)

Also your `npm test` should call grunt, not the other way around, so create an alias like:

    grunt.registerTask('test', ['lint', 'mocha']); 

And set `grunt test` in package.json as test script.

Also it is a bit weird to use too much shell commands in grunt, the whole idea is to not use shell commands but grunt plugins. This would make your gruntfile cross-platform portable and free some weird version issues. If you're just going to use shell command then stick to Make."
2014-07-22 04:22:49;Example node system build using micro-service architecture;"I'm busy putting some finishing touches on my own library: [Waif](http://github.com/wayfin/waif).

It became obvious that it was a desirable architecture, but it is a bit of a chicken and egg situation. What we really needed is the smallest possible thing that could get us started in that direction.

So I figured out a lightweight wrapper around [express](http://expressjs.org) on server side, and [request](http://github.com/mikeal/request) on the consumer side.

It's all just connect/express middleware, so you could set up any [passportjs](http://passportjs.org) based middleware on any of your endpoints or services as you need.

I'm making use of the fact that express, or rather node's http.createServer/net.createServer can listen on unix domain sockets, so I just mount everything over HTTP. I figured I would use a MQTT/HTTP broker like [Ponte](http://github.com/eclipse/ponte) to pass it over a message queue. 

I also think I could trick a lot of the services into running on the browser if i only made a moderately convincing compatibility layer using with [ware](http://github.com/segmentio/ware), [response](http://github.com/mikeal/response) and some other tricks of the trade.

We pushed our first services into production using [longshoreman](http://longshoreman.io) today. So we should be ready to take it public properly soon. We have maybe a dozen services to open as well, and once we start talking about the [Famo.us](http://famo.us) front-end work we are doing, we'll be able to give a complete picture of what is involved.My vision of micro service architecture is multiple apps dedicated to specific tasks that communicates each other. For the inter communication you can use Redis with his pub sub system or Axon https://github.com/visionmedia/axon (the req/rep is very interesting). To manage all this process fleet you can use https://github.com/Unitech/pm2, it permits you to declare all process and variables via JSON, to manage fragmentally each process and a programmatic interface is available.Yeah checkout https://github.com/sharelatex/sharelatex the web project is a touch big but there are still quite a few services working together. There are about 4-5 other smaller apis we have not open sourced yet."
2014-07-21 13:10:14;Running PencilBlue on Heroku and MongoHQ;"Maybe I am missing something, but I seem to get a database error.
2014-07-24T07:24:21.028806+00:00 app[web.1]: SystemStartup: Log Level is: info
2014-07-24T07:24:21.769807+00:00 app[web.1]:
2014-07-24T07:24:21.771464+00:00 app[web.1]:           throw error;
2014-07-24T07:24:21.771604+00:00 app[web.1]:                 ^
2014-07-24T07:24:21.770685+00:00 app[web.1]: /app/node_modules/node-promise/prom
ise.js:199
2014-07-24T07:24:21.776992+00:00 app[web.1]: MongoError: auth fails
2014-07-24T07:24:21.776998+00:00 app[web.1]:     at Object.toError (/app/node_mo
dules/mongodb/lib/mongodb/utils.js:110:11)
2014-07-24T07:24:21.777000+00:00 app[web.1]:     at /app/node_modules/mongodb/li
b/mongodb/auth/mongodb_cr.js:34:33
2014-07-24T07:24:21.777011+00:00 app[web.1]:     at /app/node_modules/mongodb/li
b/mongodb/db.js:1670:9
2014-07-24T07:24:21.777012+00:00 app[web.1]:     at Server.Base._callHandler (/a
pp/node_modules/mongodb/lib/mongodb/connection/base.js:382:41)
2014-07-24T07:24:21.777014+00:00 app[web.1]:     at /app/node_modules/mongodb/li
b/mongodb/connection/server.js:472:18
2014-07-24T07:24:21.777033+00:00 app[web.1]:     at MongoReply.parseBody (/app/n
ode_modules/mongodb/lib/mongodb/responses/mongo_reply.js:68:5)
2014-07-24T07:24:21.777035+00:00 app[web.1]:     at null.<anonymous> (/app/node_
modules/mongodb/lib/mongodb/connection/server.js:430:20)
2014-07-24T07:24:21.777036+00:00 app[web.1]:     at emit (events.js:95:17)
2014-07-24T07:24:21.777038+00:00 app[web.1]:     at null.<anonymous> (/app/node_
modules/mongodb/lib/mongodb/connection/connection_pool.js:191:13)
2014-07-24T07:24:21.777039+00:00 app[web.1]:     at emit (events.js:98:17)
2014-07-24T07:24:22.205190+00:00 app[web.1]: SystemStartup: Override file [/app/
config.json] will be applied.
2014-07-24T07:24:22.209093+00:00 app[web.1]: SystemStartup: Log Level is: info
2014-07-24T07:24:22.883038+00:00 app[web.1]: /app/node_modules/node-promise/prom
ise.js:199
2014-07-24T07:24:22.882559+00:00 app[web.1]:
2014-07-24T07:24:22.883317+00:00 app[web.1]:           throw error;
2014-07-24T07:24:22.883368+00:00 app[web.1]:                 ^
2014-07-24T07:24:22.885980+00:00 app[web.1]: MongoError: auth fails
2014-07-24T07:24:22.885984+00:00 app[web.1]:     at Object.toError (/app/node_mo
dules/mongodb/lib/mongodb/utils.js:110:11)
2014-07-24T07:24:22.885985+00:00 app[web.1]:     at /app/node_modules/mongodb/li
b/mongodb/auth/mongodb_cr.js:34:33
2014-07-24T07:24:22.885987+00:00 app[web.1]:     at /app/node_modules/mongodb/li
b/mongodb/db.js:1670:9
2014-07-24T07:24:22.885989+00:00 app[web.1]:     at Server.Base._callHandler (/a

Any ideas?"
2014-07-21 02:33:13;Tough-cookie;
2014-07-29 20:18:34;Strongloop just bought Express.;"Since TJ was leaving this is a good thing, means there will still be a person managing Express. StrongLoop, I like what you do, please do not fuck this up.

**edit** I was misinformed about how the Express project works. Readers: please read the replies below.[TJ seems to have a pretty reasonable response to all of this](https://github.com/strongloop/express/issues/2264#issuecomment-50567002)Seems to me this was a wasted opportunity for a call to action. I read this and thought maybe it's time to give back to express, but didn't see any requests for help. What needs done?Strongloop seems more concerned about branding & ownership than the Express community & maintainers. This is a shoddy first move, hopefully things improve from here.Well, time to get Hapi for me.Oh well, what did Express do for me? Nothing. 

Routing? Pff... 

Connect I love you![deleted]Well, their LoopBack framework is something I really like. I'm looking forward to see their contribution in Express.From a strongloop perspective, a very good grab, imagine all those nodejs tuts using express, still its appalling for those who have contributed (those who have done more than a couple of prs). 

Its a shame i see this kind of things in OSS.

Strongloop: Raise or Fold, your turn."
2014-07-29 20:02:31;Binpress Podcast Episode 4: Julian Lam of NodeBB;
2014-07-29 06:56:40;Understanding Node Generators;"Nice, easy to understand post. Thanks.

One question you didn't cover: ""Why would I use generators?"" 

What's the ideal use-case for them?This seems like a very handy way to deal with sequence-specific code without directly writing synchronous code. For instance if I have several processes that *have* to be run in a specific order and where Nodes asynchronous nature might generate faulty results in the event one process takes longer to complete than another. Something like calculating a total before committing it to an account. I could insert a generator to yield-next my way through those steps and then return to my asynchronous flow. "
2014-07-29 04:20:47;Function parameter list parser;
2014-07-28 21:01:52;express.js vs sails.js;"Just a quick note: Sails is built on top of Express. In other words, it is Express with added features and configuration.Hapi (http://hapijs.com) is worth a look as well...We built [Coursetto](https://coursetto.com) in express, switched to sails for two months, then switch back to express. The socket startup stuff screwed with testing on any watch comand and the ORM just didn't get the job done.Hey guys- I answered a similar question here:
http://www.quora.com/Should-one-learn-Express-js-or-Sails-js?share=1

tldr; it's like rails vs Sinatra: choose what's best for you.So, I kind of like frameworks. They're interesting. However, frameworks that are easiest to use are also the most opinionated. Frameworks kind of have to make assumptions about what's going on to make things work.

For example, sails / waterline has taken a while to get associations built. Bookshelfjs (a pretty decent ORM) has assumptions about how you model join tables that require me to build views in postgres in order to make relations work. There's no real point to my preferences vs somebody else's. 

Work on modeling your data, see what fits. For me: I'm currently using express with KnexJS, because I (a) wanted to figure it out myself and (2) didn't want to worry too much about fitting my data model to framework opinions that I didn't agree with.

Now that my application is growing in maturity, I'm personally looking at different frameworks and ORMs to see what fits best in order to help performance and expansion; I don't want to end up with a pile of spaghetti code or half-baked versions of existing framework solutions.

My plan is to not just ask reddit but to go ahead and spend a day working with sails (glad to hear 0.10 is going live soon) and hapi as potential replacements for my express API server. I'll figure out what is easiest to maintain, test, and run. My theory: they'll both work pretty well but one or the other will be more fun to work with."
2014-08-05 22:30:22;ExpressJS + AngularJS SEO Solution;"Nice! But one problem, it would be very easy for a malicious client to inject arbitrary html into the cache. I've seen using PhantomJS recommended, to generate the page server-side if it hasn't been cached yet. This would remove the need to trust the end user to not mess with the HTML.Why do people do this? Its simple enough just to do it right and allow pages to load with proper data in them and just enhance them with angular afterwards.

Basic example: 

    js:
    res.render('myPage', {myData: pageData});

    jade:
    body(ng-contoller=""myController as myScope"") 
      h2(ng-bind=""myScope.title"") #{mydata.title} 

lib updated!"
2014-08-05 19:59:40;Caching with Hapi;"Could

    if (err) {
        next(err);
    } else {
        next(null, JSON.parse(payload));
    }

be simplified as

    next(err, JSON.parse(payload));

It seems to work just fine. Is there a problem with doing it that way?"
2014-08-04 22:22:21;Super lightweight API with MongoDB support?;"If all you're doing is an API between Angular and Mongo I'd recommend rolling your own in Restify.I originally built on the MEAN stack but have moved to hapi.js.

You say that you want something light weight. Although hapi itself might not be considered 'light weight'. Getting things up and running is very easy. Many of the tough decisions have already been made for you.I'm also a Django guy. I tried doing this a few months ago with numerous frameworks and ultimately gave up. Be prepared for all the little things about Django that you take for granted not being here. For me, it wasn't worth the extra effort. Node has some value, but for me it's not a good replacement for Django - two totally different use cases.MEAN.io actually has a decent amount of middleware and add-ons (authentication, schemas, modeling, etc) that you don't necessarily need. It's a boilerplate, but it's by no means the bare-bones of the stack.

You can still be working within the MEAN stack without MEAN.io or MEAN.js. Just install the pure MEAN stack (Mongo, Express, Angular, Node) and build out only what you need from there.

It might be a slower prototyping process, but I can guarantee it will be lightweight."
2014-08-04 18:08:03;Build a Twitter Bot With Node.js | Mark Rabey;I've been building a bot with twit have you noticed any issues with stream events not firing? 
2014-08-04 18:03:30;Postgres Upsert (Update or Insert) in GER using Knex.js;I really don't understand why anyone uses Q anymore. Bluebird is many times faster. 
2014-08-12 18:35:35;Branching inside a promise;"Just splice it up in different functions ;)

    initThis().then(function(result) {

      if (condition) {
        return branchA();
      } else {
        return branchB();
      }

    });

If there is something that needs to happen after _either_ branchA or branchB is resolved, you can just add another then clause to your main promise chain, otherwise you can just continue from the branchA or branchB functions to do whatever you need. Nothing special about that.

And this way you can still have one main `catch` clause.When you encounter a block(the { ... }) in synchronous code, it can be abstracted as the start of a new promise chain that is returned when using promises

e.g. this synchronous code:

    ...
    bla();
    if (cond)
    {
      performA1();
      performA2();
    }
    else
    {
      performB();
    }
    bla2();
    ...

turns into this with promises:

    bla()
      .then(function(){
        if (cond)
        {
          return performA1()
            .then(function(){
              return performA2();
            }
        }
        else
        {
          return performB();
        }
      })
      .then(function(){
        return bla2();
      });"
2014-08-12 18:14:32;Build a Node API Client: REST Principles;Not to diminish this article, but every REST tutorial for node seems to exclude one important feature: how to properly secure it an use tokens for authentication. Anyone have any solid tutorial/articles about this? I'm aware of the libraries that support it, just not a practical application of them or a walkthrough of implementation.
2014-08-12 09:54:23;What's your node.js development machine?;"That's a very vague question.

I'm developing node stuff on my regular Linux notebook. I usually run servers, databases and such in [Vagrant](http://www.vagrantup.com/) or [Docker](https://docker.com/whatisdocker/) to avoid creating implicit dependencies on packages I happen to have installed locally.Usually a MacBook Pro, but lately I've been using my $130 chromebook.Macbook Pro

Vim

iTerm2

VirtualBox for Ubuntu VMs (testing deploys)Macbook ProUbuntu 14.04 on a Dell XPS 15, vim for my editor.

OSX 10.10 on a 2014 13"" Macbook Pro, sublime text for my editor.

Contemplated a Chromebook for a cheapo mobile dev station but haven't yet pulled the trigger. The Mac is really light but I don't care for osx, esp for my own personal hacking. Go figure.Windows desktop with sometimes Vagrant (but not always because node is awesome like that)MBP, IntelliJ or Webstorm, Vagrant, Virtual Box, Chef, and an image of the OS I'm using in production. Lately it's been CentOS but not by choice.macbook pro + macbook air. All development done with VIM.MacBook Air [Cloud 9](https://c9.io/) (which is essentially an Ubuntu VM accessible through the browser)LXDE spin of Fedora and a cloud instance on Digital Ocean.

Sublime Text 2 on my Fedora laptop

VIM on my cloud instance (with TMUX)An old Dell Vostro with Ubuntu 14.04Kubuntu 14.04 on a Asus UX31 and Webstorm for large projects otherwise Sublime Text. Considering the Lenovo X1 Carbon for an upgrade, any experiences?Lenovo PC running Windows 7.
Lubuntu 14.04 with WebStorm running in VirtualBox on a Windows 8.1 host. Nothing beats a good Sager laptop.13in macbook pro
sublime text/webstormasm.jsA refurbished i5 laptop I got at Fry's, two years ago, running Linux Mint.

Before that I had a Sager, and a MacBook before that. Looking back, they were both total wastes of money when they were primarily used for web dev. 13 inch macbook air, i7, 8GB / 512 sshd + thunderbolt display.Currently Lenovo notebook running Arch Linux.  Moving to 13"" Air in the next few weeks.

Some tools: Sublime Text, WebStorm, Gulp, Vagrant, and Docker.An Asus B50A notebook with Ubuntu 14.04 and WebStorm. I'm considering moving the development machine to a VirtualBox host on my PC.Whatever I want. [Nitrous.IO](https://www.nitrous.io/join/5zwhHAsxi3c?utm_source=nitrous.io&utm_medium=copypaste&utm_campaign=referral)^^[[non-ref]](http://www.nitrous.io/) is awesome.A win7 machine.13 inch MacBook Pro running Windows 7, just so I have Notepad++.I installed OSX on my pc for the sweet dev environment, not interested in buying an imac with laptop hardware or paying $3k+ for the trashcan.

OSX runs better and is actually more stable than Windows ever was.Two VM's:
- one CentOS for development with sublime, git sharing with team members (via central repo), opera and firefox
- one WinDoze for testing (rarely) for multi-platform support
"
2014-08-12 08:40:26;Better errors with VError Node.js module;Try printing a `null` value and see if it is still awesome.
2014-08-11 23:07:36;Is there an easy way to freeze an npm dependency graph?;"Look into shrinkwrap
https://www.npmjs.org/doc/cli/npm-shrinkwrap.html
"
2014-08-19 21:32:59;Dear CEO (of a NodeJS-Powered Corporation);"Its been out for five years.  That is a long time in high tech.  Its not a brand new technology anymore.  You can easily run into deployment problems with any language or platform.  You can't blame Node anymore.

> Access to a node core contributor is absolutely essential. This is not a luxury.

BS.  You are just trying to make an excuse for a deployment problem.  The issue is programmers and managers don't understand the basic nature of software systems which is that they are brittle.  Unless (and sometimes regardless) you have invested a lot of time into redunancy and availability, you can expect some significant issues.

First of all, did they really need to do that upgrade immediately? No.  Everyone is running something like supervisord or forever or PM2, including those people.  So if someone wanted to take advantage of that memory issue their servers would have restarted automatically.  

Secondly, was a 'node core contributor' really the only person who could have possibly diagnosed that issue?  Of course not.  Did they need to change Node to work around it?  No, they said they changed their own code.  And they were using floating point timeouts or something, which is just bad luck for them -- hardly anyone ever does that.

Technology and systems in general are complicated and brittle.  You just have to keep iterating on making your infrastructure more resiliant and also refining your understanding of how it works.

Well, there are some aspects of the way Node works that make it more susceptible to these types of problems unless you provide for them, but that isn't related to how mature the technology is.  Starting with just the fact that your server is persistent and stays running, rather than having something like one-off or pooled handler processes or threads in PHP or another system.

Almost sounds like they had a hard time getting that 'core contributor' hired and are now using an incident to justify it.  

Basically, please don't involve Node.js in your political issues."
2014-08-19 20:13:24;JSIST is happening in Istanbul this year, who's going?;This is belated but I'm an event organizer for the event and was able to confirm a discount just now with the code REDDIT20 for 20TL off any ticket if it helps anyone! Originally I was working on arranging a group or student discount but hopefully this general one will help more people.
2014-08-19 17:29:20;Build a Node API Client - Part 2: Encapsulation, Resources, & Architecture;
2014-08-19 17:00:05;Subscribe to your daily portion of Node.js news :);"Since I've noticed that all popular Node.js facebook pages are dead, I decided to create a new one and am committing myself to deliver news about Node.js on a daily basis. If you want to be up to date, like it!

Let me know what you would like to see there either here or through FB.

Enjoy!
"
2014-08-19 14:29:01;Where can I find Advanced Nodejs Tutorials;"[Nodeschool](nodeschool.io)Did you try googling ""node.js production""?

This is the start of a multipart series
http://blog.argteam.com/coding/hardening-nodejs-production-process-supervisor/Pedro Teixeira is working on [a book](https://leanpub.com/nodejspatterns) about larger-scale patterns in Node.js. e.g queueing, RPC, monitoring, persistence, authentication. He's previously written a couple of popular books on node.I got to the same point, and eventually you just have to start reading code. Tutorials can only take you so far. Start looking for interesting projects on github, or cool NPM packages then just work through the code and reference the docs if you dont understand how/why they did something. You'll learn way more this way.If you want to interop between C# and node, take a look at edge.js - http://tjanczuk.github.io/edge/"
2014-08-26 21:04:57;Basic/stupid question on document and subdocument creation with Mongoose / MongoDB;"Assuming your code is (something) like this: 

    var n_subdoc;

    subdoc.findOne({'name'}: req.body.subdoc_name}, function(err, doc {
        n_subdoc = doc;
    });

    console.log(n_subdoc);

It says undefined because the function call `function(err, doc {})` happens after console.log() happens. ""Some time in the future""(TM). 

The correct way to use the variable n_subdoc would be to do it inside the function (callback) passed to findOne.Fellow python guy here. You're falling into the relational database trap that I did when I first started playing with Mongo and Node.

Given that your subdocument is so simple, only three fields, why don't you just embed it into the larger doc?

    {
        name: String,
        person: String,
        method: String,
        type: String,
        subdoc: {
            name: String,
            country: String,
            description: String
        }
    }

or even flatten it:

    {
        name: String,
        person: String,
        method: String,
        type: String,
        other_name: String,
        country: String,
        description: String
    }

If there's a legit reason to do this, then you need to get or created the sub doc, then save the main doc. Something like:

    var _sd = new SubDoc({ whatever })
    _sd.save(function(err, sd){
        if (!err) {
            var _md = new MainDoc({ subdoc: sd, whatever })
            _md.save(function(err, md) {
                if (!err) {
                    res.send(md)
                }
            })
        }
    })

but obviously less shitty :/"
2014-08-26 19:07:47;Why #node.js IRC channel it's not in the canonical links?;
2014-08-26 17:09:32;CoffeeScript 1.8.0 is out;
2014-08-26 16:10:15;Cluster-Aware Scheduler recommendations for Node?;I have been using agenda: https://github.com/rschmukler/agenda
2014-08-26 14:28:17;Any direction or tips for building a Node.js CLI;"Take a look at:

https://github.com/visionmedia/commander.js

and 

http://nodejs.org/api/repl.htmlOptimist is pretty sick
https://www.npmjs.org/package/optimistI would suggest you have a look at both commander.js by tj (mentioned already) and [docopt](http://docopt.org). Oh and if you're a substack fan then there is also [minimist](https://github.com/substack/minimist) that he uses for his projects.

I personally like docopts *currently*. "
2014-09-02 22:35:35;Writing NodeJS Data Models for NoSQL;
2014-09-02 08:57:17;Any py2exe equivalent for Node?;"Maybe JXCore ? http://jxcore.com/turn-node-applications-into-executablesNever used, but looks promising https://github.com/trueinteractions/tint2I'm a bit late to this game but I've been using [node-windows](https://github.com/coreybutler/node-windows). I needed a ""bit more"" so I had to use this [node-windows fork](https://github.com/arthurblake/node-windows). This module allows me to create an exe and setup a Windows service. It's a bit clunky at first but once you get the deployment right, it's pretty dang smooth.I haven't seen anything that handles native modules.I think atom-shell allows you to use native modules.tidekit if it ever gets out of development hell.If you used py2exe, then you'll know that Python binary distributions are huge as well. That's the price you pay for a dynamically typed, interpreted language, and Node/JS is no different. Whatever option you choose, a hello world binary will still take up tens of MBs.I wouldn't really call node-webkit a fork. It uses node and chromium. If you're app needs a web-based UI, node-webkit is probably one of the best things to use.

Another thing to consider is creating a chrome app. I've seen a lot of chrome apps that end up using a node process as a server to support the app. I'm not certain whether the user has to have node installed or whether the chrome app can just supply a binary."
2014-09-02 08:32:14;Introducing Event Starter Kit;
2014-09-01 17:40:29;Streaming directly into Postgres with Hapi.js and pg-copy-stream;
2014-09-01 12:33:20;EvilText - static site, blog and wiki generator.;So how does creating blog posts work?
2014-09-09 18:27:31;Generate random JSON based on a v4 JSON schema;
2014-09-09 16:27:49;The Problem With API Authentication in Express;"I don't get what the advantage is to splitting up username and password, vs having one big key? Saying that ""it's easier to brute force"" doesn't make sense since you could just make the key longer. Like, having a 10 character username and 10 character password is exactly as easy to brute force as having a 20 character key.Hm, a ~~blog post~~ sales pitch from StormPath about Node.Can anyone give a brief explanation of why you'd base64 encode the ID and secret instead of just sending the actual string?Read article.

Still not sure what is the Problem With API Authentication in Express?Doesn't even touch on oauth scopes - a shame, really.Great read. Love the part about best practices in generating API keys."
2014-09-09 09:31:47;Setting up a HTTPS dev workflow on OSX;"Thanks for this. Or, you could use something like https://pagekite.net/Total rookie question. I've got DNSmasq working with python's SimpleHTTPServer and then checked it with my own simple node server and everything seems peachy. Where do I store the bash script to generate the certificates? I attempted to store it the demo folder I set up for this but I got a permission denied.

edit:  `chmod +x ssl_cert_gen.sh` .. duhYou list the first command as:

    brew install homebrew"
2014-09-08 21:57:10;Monitoring child processes in the command line created by node?;ps -ef | grep node?
2014-09-08 21:23:28;Node and CSV exports;"You want streams!

NodeJS is good at streams, and streams are good for this. The point of streams is to be able to deal with transforming really large datasets without needing to load the whole dataset into memory. Also, since handling the chunks is asynchronous the server can deal with multiple requests at once without huge delays.

You could roll your own thing really easily with something like through2. Alternatively, node-csv already has a streaming implementation. If that'll work for your use case, all the better:

https://github.com/wdavidw/node-csv#pipe-examplenode-csv should work fine. If you are worried about crashing the site just put it on a separate instance and then set up a job queue. Wish I'd found node-csv sooner, thanks!Spawn a child process."
2014-09-16 21:25:12;How to scale a meteor.js app;Has Mongo stopped sucking yet? It used to be really bad at performance + safety.
2014-09-16 21:01:16;gcloud - idiomatic client for Google Cloud services;
2014-09-16 19:21:09;Why I changed my mind about Node.js;"Easy of development comes at a cost, and that generally means giving up maintainability.

It probably doesn't matter if you're not buying a lot, but you're buying things on credit in hopes your future state makes it easier to afford in the future.

Paypal's numbers have always seemed really suspect to me. It's probably because they developed a legacy spring app, rather than something to take advantage of non-blocking io."
2014-09-16 19:20:27;Why didn't npm use module namespacing?;"https://github.com/npm/npm/issues/798 Funnily enough, in later versions of NPM, you can use `""module"": ""username/module""` as a shorthand for Github git dependencies.  Add `""module"": ""username/module#v1.2.3""` for any branch or tag in the repo.Great question, especially on smaller modules that get abandoned.From a user perspective, the current system seems way better.  Think about places where name clashes happen - everyone after the first person just gets creative about it.  This leads to names that are far more memorable.  Some examples of what I mean:

- Would you rather remember that you use the `promise` library made by `petkaantonov`, or that its called `bluebird`?
- How about the faster `underscore` library by `lodash`, or the module name `lodash`?  Okay, bad example.
- Do you really prefer `michaelficarra/coffee-script` to `coffee-script-redux`?

And its just obviously easier for the first module to claim the name - did you know that `async` is maintained by `caolan`, that `underscore` was written by `jashkenas`, or that `promise` is owned by `then`?  All things you would have to know when installing those modules, of course.Because it was easier.

They're working on getting orgs and what not into npm especially since they need that for better enterprise support."
2014-09-16 15:43:49;"Mongoose, how should I handle the error ""version error no matching document found""?";
2014-09-23 22:42:49;Connect *TO* node.js via ODBC;"Yes: Use the MySQL ODBC driver, and implement a server in node using the mysql2 library.

It's actually a really interesting way to connect. We used it as a test to connect mysql to memcache -- so mysql can connect to the other mysql server via federation and then make ""queries"" to memcache.Nope."
2014-09-23 16:33:46;Brewfactory: full-stack homebrew with IoT;
2014-09-23 15:37:57;NPM v2;"Notable changes:

* npm run-script passes arguments to script
* dependencies in package.json can now point to local directoriesScoped packages are great. We were already using them during the npm 2 alphas for some of our products.

Implementing a custom registry is actually not hard at all, but does take some effort reading through NPM code to find out what exactly is required."
2014-09-23 15:30:50;Continuous Deployment of Node.js Applications;Great article, can't wait for the next about hosting.
2014-09-23 13:28:22;prefill again when redirected in sails;
2014-09-30 18:57:00;I recently wrote a Sublime plugin for managing require statements in Node. It has definitely improved my workflow. Let me know what you think!;Does exactly what it promises.  Thank you!
2014-09-30 10:18:06;NodeJS-P2P - A P2P demo app I built in Node JS;nice, I was working on something similar some weeks ago, but P2A I would say: On one side the browser, on the other an Arduino device. The repo would be: https://github.com/mulderp/nunchuck-j5
2014-09-30 00:19:48;Is it already worth to give Derby.js or Meteor a shot for an app for production?;I think if you're drawn to socket.io and express, you should check out SailsJS. sailsjs.orgLook at sailjs if you must. I still think writing your own is far better. Meteor is nowhere near production rdy based on my work with it. Security and meteor is a joke.I second the recommendation of building your own using socket.io.  It's not difficult and there's less cruft to worry about.count the stars on github
2014-09-29 22:47:53;3 Essential Sublime Text Plugins for Node & JavaScript Developers;"Had a look a the plugins I have installed.  

I'm using SublimeLinter instead of that js-hint plugin. I can't remember the details, but I found it better than the plugin you linked. https://github.com/SublimeLinter/SublimeLinter-for-ST2

I'm also using EditorConfig - https://github.com/sindresorhus/editorconfig-sublime

I've tried various others but nothing has stuck (I'm not including themes and syntax highlighting).  What Sublime's theme is using?whenever i see something like this I feel bad for not actively working on JsFormat much anymore. it works pretty well, but it could still use a little love. "
2014-09-29 17:35:53;Need help with my latest Heroku build.;Heroku must provide some kind of application log, start by checking that.
2014-10-07 20:35:53;NodeBB Announces Plugin & Theme Contest for 2014, with almost $5000 worth of prizes!;"What's it like trying to make a nodeBB theme? Same level as WordPress?C-can I get a shiny gold star sticker? ;-;"
2014-10-07 15:00:05;Changing a variable for all clients;"It's pretty easy to do.

In your client side JS:

    var socket = io.connect('http://localhost');
    
    socket.on('changeGenre', function (newGenre) {
        // I'm assuming that you just want to change the value of the `genre` global variable
        // You'll have to put your own genre-changing code in here instead

        genre = newGenre;
    });

    $(""#button"").click(function () {
        // Similarly, I assume you've already changed the value of `genre` variable and the button press just notifies the server about it

        socket.emit('newGenre', genre);
    });

In your node.js app:

    var io = require('socket.io').listen(80);
   
    io.sockets.on('connection', function (socket) {
        socket.on('newGenre', function (newGenre) {
            // This call will send the selected genre received from the client that clicked the button to all remaining clients

            socket.broadcast.emit('changeGenre', newGenre);
        });
    });"
2014-10-07 09:19:03;chaining API vs promises;"The thing is, you'd muddy the intent of the code for future maintainers.  Promises are about sequencing (possibly) asynchronous events.  Do this *then* do that, *then* do this.  Chaining is about preserving a context, and doesn't really have an opinion on when things in the chain happen relative to each other.   With
   Message(""text"")
       .send(""server1"",Log)
       .send(""server2"",Log)
I'd read that (because I'm used to Promises) as ""send this Message to those two servers simultaneously if possible, and callback Log as each responds.""

With the second one, I have to double take, and make sure we didn't really mean ""send to server1, when that responds Log, *then* send to server2...""  It makes it ambiguous.  Although /u/cwmma's response is the correct way to do this, I really want to discourage you from taking this path. If you do build a chainable api that also optionally returns promises, you will be creating a reading nightmare for future implementors. 

For example, imagine coming across this line of code:

    Message('foo').send(""server1"", cb).then(function() { console.log(""message sent"") })

Which callback should be fired and in what order?  Or should that throw an error like ""Object #<Method> has no method 'then'""?
well promise has just two methods(then, catch), so if you don't plan to have those two methods on you API, there is no problem in putting it in ""this"" object before returning it in the send function.
Problem is on the second ""send"" call-because there you would have to get the object containing the API which would require you to write your own promise implementation. I would not advise to do this just to get a nice looking fluent API.on an unrelated note, don't use Object.create like that do

    function Message(text) {
        if (!(this instanceof Message)){
           return new Message(text);
        }
        this.text = text;
    }
    
Actually what you are describing is 'method chaining'. API Chaining was created by Owen Rubel, original team member of Amazon, and recently presented at SpringOne 2014 and APIDays Berlin. It allows client to set state, declare method and required data for each link in chain, and it uses an I/O monad within an handlerInterceptor so only one request is used and following links in chain do not have to create NEW REQUEST with each call.

http://www.slideshare.net/bobdobbes/api-abstraction-api-chainingreturn this if they pass a callback, a promise if they don't."
2014-10-06 17:11:56;html file not showing up;You have to end the response inside the fs.read callback as it is a asynchronous operation. When you call response.end() immediately after fs.read the nothing has been written into the output stream yet.
2014-10-06 16:19:02;Feathers 1.0 - Let your applications fly!;"I think this is great! This makes it much easier to create any CRUD web app. Which is neat, but I also think this is not enough. I want more features-like mongoose has, but on straight on the frontend. I would like to be able to get a callback only when newly created object matches some query. And so on and so forth. I am going straight for my shameless plug, so feel free to downvote this onto oblivion or you know-try this one out: https://github.com/capaj/MoonridgeNormally I'm a fan of small modules which do one thing well. Feathers seems to do a good job balancing being capable of lots of functionality while remaining modular. I would love to hear others thoughts on this framework.Not sure how this is beneficial over just using vanilla Express and socket.io. Also I don't like how you need to use their MongoDB module. I prefer to choose between Mongoose and Mongoskin. I think using Express or even Koa will give you more flexibility in the end but I'm sure people will be happy to have an all in one solution. Waiting for people to use the MFAN Stack :DWhat's the advantage/disadvantage with this over sails.js?I am not so sure that having a realtime global TODO list example on the front page is the greatest idea in the world. Granted the node community is meant to be nice, but it's been made very easy to vandalise that page.Urge to smack for even *mentioning* SHA1 hashing for passwords is rising rapidly. Encouraging poor coding practices is unacceptable.

At the very least, ***SALT THAT SHIT!*** &#3232;_&#3232;

^^\**storms* ^^*back* ^^*off* ^^*to* ^^*/r/netsec**"
2014-10-14 21:58:38;how to deploy a socket.io , video streaming app;
2014-10-14 19:48:22;npm passes 100,000 modules;[deleted]quantity > qualitySadly, I imagine there's probably 15,000 web frameworks on there all reinventing the same wheel with *slightly* different designs. :\There is strength in numbers. That's what open source is all about. NPM, like GitHub, democratizes open source participation. That's a good thing.I would like to see the number of modules with less than 10 downloads or even less than 100 downloads. This would give a pointer to the amount of junk modules. [deleted]
2014-10-14 19:23:05;How do you close an http response connection?;res.end() I believeIt's not like tcp, all you have to do is response.end
2014-10-14 16:57:38;Node.js Cluster - Boost Node App Performance & Stability with Clustering;Nice video. Isn't this basically what [PM2](https://github.com/Unitech/pm2) does to any node application?
2014-10-14 16:56:20;Convert videos into animated GIFs using Node, Libav, Imagemagick and Twilio.;
2014-10-21 15:25:05;Static Blogging with Metalsmith;"Good post.

> But because metalsmith.json is JSON, it can’t contain functions.

Very important to note that you can also do it with JS, not only with a JSON config. Which I personally found way more powerful and easier to use.

So you have a `start.js` file or whatever and you run Metalsmith from there. According to Metalsmith's API of course.

But the point is that you are NOT limited by JSON in this case."
2014-10-21 08:08:10;Building Apps with Node.js;"[deleted]Is this kind of elitism normal with node.js devs, or is it just this subreddit? I've only started to dip my toe into node but am platform agnostic (use Linux/Windows/OS X at work) so I don't give a shit about fanboy affiliations, thanks for the link wdpttt.
Fuck Microsoft in they're moldy asses, this kind of shit is why I unsubscribed from /r/programmingI wouldn't recommend learning node from microshit.

Their only purpose is to  shill visual studio/azure anyway."
2014-10-21 02:54:57;Training a neural network to learn several image filters - Synaptic;
2014-10-20 23:14:33;NPM 2.0 and how it helps avoiding global dependencies;"> To make it a bit nicer npm provides a nifty feature, when setting up custom scripts. It puts ./node_modules/.bin in the PATH environment, when it executes the script.

I believe this already worked for a while. The nice thing about this is it works cross-platform too, while the other solution (using `""grunt"" : ""./node_modules/.bin/grunt""`) breaks on windows (because the bin scripts have an extension there).now if only a lot of packages wouldn't have global state..."
2014-10-20 22:35:37;Express4 cookie-based session help;"I think there might be a few things you can check out. I'm running on express: ~4.0.0 and express-session: ~1.0.2

My sessions are setup as folllows:

    var session = require('express-session');
    // ...
    app.use(session({
        secret: 'mySecret',
        cookie: {
          path: '/',
          httpOnly: true,
          secure: false,
          maxAge: 3600000 * 24
        }
    }));


Then in my routes where I want to set a session value I have:

    req.session.key = value;

When I want to check the value:

    if(!req.session.key) {
        return res.json(401, {message: ""Please sign in.""});
    }

If I want to sign the user out:

    req.session.destory(function(error) {...});
    // OR
    delete req.session.key;

Not too sure which one officially is supported. Take a look into the unset section [here](https://github.com/expressjs/session#options).

Your cookie will look something like [this](http://i.imgur.com/p3SkyJb.png)

Hope that helps!If the only purpose of your session cookies is authentication, I would [highly recommend switching to tokens](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/).

Tokens, unlike cookies, are

* **Cross-domain/cross-origin compatible.** They can be used to authenticate from anywhere, and are ideal for mobile apps (iOS, Android). You would also not need to protect against CSRF.
* **Stateless**. No need for server-side session storage, tokens contain all user data within themselves. At scale, this also means better performance."
2014-10-28 21:18:38;express: console logging in debug mode?;"I've used flatiron winston for many projects and it provides log levels. Additionally, there is a lot of flexibility in what data to log and where to pipe the logs.

https://github.com/flatiron/winstonI use bunyan, but... any logging framework would do, really. That's like a basic feature."
2014-10-28 21:10:47;how to download unpublished package?;"https://github.com/miksago/node-websocket-server

Are you sure you want it, though? It's pretty ancient and was probably unpublished for a reason.You can download packages by having a github link in you package.json file. Check the example here http://browsenpm.org/package.json

The github of the project  is this one: https://github.com/miksago/node-websocket-server

So adding something like this to your package.json file should work:

""websocket-server"" : ""git@github.com:miksago/node-websocket-server.git"",

The project hasn't been updated in 4 years, so probably not the best idea to use it. Good luck."
2014-10-28 19:37:31;problem with installing libraries on mac;You should start with pasting output here. How did you install Node? What Versions of Node/Npm do you have installed?Do you have Xcode installed. Some modules require libraries in the xcode developer tools to build the module
2014-10-28 19:05:45;Handy.js - The Web Application Template for Node.Js;Does anybody know of other alternatives to this? It's not that this isn't great, just wondering what else is out there.Sorry but anything that promotes using jade is worthless.
2014-10-28 17:16:52;Using DevOps Tools to Monitor a Polytunnel;Polytunnels are best way to protect the plants and vegetables from the pesticides and harsh weather.
2014-11-04 21:14:26;Cloud host for a low traffic app?;"heroku has free options and is cool if you dont need persistent storage, I'd recommend openshift as well.If you've never done anything with amazon before, you can get a year of their lowest tier for free. Personally, I do a bunch of my experiments on digital ocean droplets; you can do a *lot* with a properly-configured micro droplet, and they're only $5 a month.All of our stuff is run on [Modulus](http://modulus.io). Pretty similar to heroku, but Node-specific with persistent storage and MongoDB. I think they give you like a month free, and then its cheap, like $14/month. That one servo handles spikes of traffic alright too.

I like heroku, but it can be annoying for low traffic sites because if they don't get traffic for a while then they put it to sleep. Then it can take a while to load again when they start it back up. Plus they tend to drag their feet with Node support.I recommend heroku. 

As a note about heroku auto sleeping once dyno, there is a way around that. Sign up for the NewRelic free plan, and have it do health checks by sending requests to /. This happens a few times a minute usually, and will keep your dyno alive. Not technically allowed, but who are they to tell me I cant have a health check run against my server?Amazon EC2. t2 micro, 1 year free, its good as hell.I have instances on both DigitalOcean ($5/month) and Linode ($10/month). The other day I came across a company called [CloudAtCost](http://www.cloudatcost.com/). I didn't buy any server space, but the thought of paying once and having my instance ""forever"" is appealing, especially a such a low price.

The Dokku droplet on DigitalOcean closely mimics the feel of deploying to Heroku (Pretty sure Dokku actually uses open-sourced Heroku build-packs to identify and deploy apps), and is a lot more configurable (you have ssh access, dns, and a 512mb/20Gb server, sky's the limit)

If you just have a low traffic application and want room to expand it in the future (or add more apps?), I'd probably side with DigitalOcean or Linode just because of all the ""extra"" you get over something like Heroku (though there is the added nature of having to install your database stuff and configure DNS, and everything else that an app server requires)."
2014-11-04 20:50:50;"I feel like a file upload form is an open door to being hacked from the inside, how can I filter incoming files so ""bad ones"" don't make it through?";"The file is mostly harmless unless you also give them a way of executing the file on your server remotely. It's just a bunch of bytes in a file.It's also my understanding that you're supposed to run your web server as a user that has the absolute minimal privileges, meaning that it couldn't execute the file even if it was a virus and for some reason your web server executed files (which it obviously shouldn't)As said, a file is harmless unless it has a way of being executed, OR if the file triggers and exploits a bug in some software that process it.

A classic way of screwing up file uploads was to serve uploaded files from a directory where the web server had script execution turned on. i.e. sometimes you could upload a PHP file with the extension .php, and when you tried to download it again from the server, the server would execute it instead.
"
2014-11-04 18:31:39;setImmediate vs process.nextTick vs setTimeout;"libuv (node 10) goes in this order:

- run timers
- run idle
- run prepare
- run pending
- check for I/O, block for ""timeout""
- run check
- run closing handles

setTimeout places it in a timer queue, however no possible way to know if it will be executed within the timeout specified.  I/O, etc can take priority.

setImmediate seems to run in the ""run check"" portion, so it should be executed in the next tick but post I/O timeouts? 

process.nextTick i'd imagine would run in the run idle/timeout portion prior to I/O timeouts.

So process.nextTick should go first, then setImmediate, and lazily potentially, setTimeout.so strictly speaking process.nextTick is a 'microtask', which is a concept that comes up in regards to promises, a good over view on the differences between a micro and macro task is [here](https://github.com/YuzuJS/setImmediate#macrotasks-and-microtasks). 

So back to the article, you likely don't want to be doing setImmediate like that unless you explicitly want to pause for io to happen. Promises end up having to make things async in a similar manner and just using setImmediate would kill performance, I ended up writing a [microtask library](https://github.com/calvinmetcalf/immediate) explicitly for cases where you need to do heavy recursive async calls and you can't afford high latency.I think you may have meant async.eachSeries instead of async.each? 

I think I would consider this a bug in async, but I'm not sure the author would agree.  The argument would be that you shouldn't be using an asynchronous library for synchronous task, or if you're mixing and matching tasks you should manually make them conform to deferring the callback (as you do in your article).  "
2014-11-04 09:56:44;Does anybody know how to use a variable in client side javascript.;"You can encode it in script tags.

    script.
        var title = ""#{title}"";

It will then be available to scripts on the front-end.

[Here is a similar SO question with more information.](http://stackoverflow.com/questions/8698534/how-to-pass-variable-from-jade-template-file-to-a-script-file)Recommendation: Use Handlebars instead of jade"
2014-11-04 09:50:37;SpiderTrap built using ExpressJs;"I'm curious as to why you built this? What's your motivation?built a google-index-hash-crawler a few years ago. on the first day google index about 30k sites, on the next few days a few k more and 2 weeks later only a few hundred were left.

tl;dr: not very long until only a few sites remain. but it will not be blocked completely, just cleaned from now and thenAfter 3days of putting the site online. google has index more than 100k pages. Let see what happens next"
2014-11-11 21:55:42;[request] Writing a front-end with Node running things?;"    var http = require('http');
    var exec = require('child_process').exec;

    var server = http.createServer(function(req, res) {
      exec('echo hai', function(err){
        if (err) {
          res.writeHead(500);
          return res.end('fail');
        }
        res.end('done');
      });
    }).listen(3000);


^ Those are all the things you need to know in order to make a web server that will run processes in response to requests.

It is, however, pretty simplistic. Once you start needing to add things like different responses for different routes and methods, you need to start adding more code.

That ""more code"" is what things like express aim to streamline for you.

If you're fresh to node, it's best to wrap your head around just how simple things are before letting them get more complicated with libraries and frameworks. Let yourself run up against the barriers that frameworks are there to help you overcome, otherwise you'll end up using a bigger hammer than you need.If you want node to act as your frontend http server, look into Express. Its almost the defacto npm module for this.

Personally I don't like Express that much, and prefer to serve my frontend from a dedicated httpd, in a more conventional scripting language such as PHP (leaving node for the things it excels at such as socket support and backend API).
www.codeschool.com has a bunch of classes that would be relevant. There are some on node too. 

I've personally been reading non-stop on angular lately for making single page applications. I'd highly recommend learning it. It might seem like overkill for a tiny site but it's very good at small sites.

Google mentions they have ~1500 angular apps in house, so I imagine they're using it for little helper tools just like this."
2014-11-11 18:18:32;Espresso.js – React Meets Backbone for a Minimal MVC;I'm surprised this isn't /u/raganwald
2014-11-11 17:05:43;Phonestagram - Fun with Photo Filters Using MMS, Node, Hapi and CamanJS;
2014-11-11 12:13:00;Open source node projects to learn from;"I'm a newbie, so I can't vouch for the quality of the unit testing, code organization, and static code analysis, but here are some good open source Node projects:  
  
https://ghost.org/  
https://github.com/TryGhost/Ghost  
  
https://pencilblue.org/  
https://github.com/pencilblue/pencilblue  
  
http://gruntjs.com/  
https://github.com/gruntjs/grunt  

https://www.nodebb.org/  
https://github.com/NodeBB/NodeBB  
  
To tell you the truth, I find these to be confusing the way they are organized. I prefer the MVC architecture that they describe in [**Getting MEAN with Mongo, Express, Angular, and Node**](http://www.manning.com/sholmes/) by Simon Holmes (http://www.fullstacktraining.com/) and **MEAN Web Development** by Amos Haviv (who developed mean.io and now mean.js). I thought Holmes' book was better at explaining how all the Node pieces of the puzzle fit together, but Haviv's book does a good job of describing testing and automation using Grunt (at a newbie level anyway. It's not advanced testing by any means). I highly recommend both books, even if you are not interested in AngularJS.  
  
Edit:  
  
http://mean.io/  
https://github.com/linnovate/mean  
  
http://meanjs.org/  
https://github.com/meanjs/mean  
  
https://github.com/simonholmes/getting-MEAN  I like substack's style. It's what I've adopted across all my node projects. I particularly like that it's very modular. This makes it easy to spin out independent modules and simple to unit test.Michael Jackson's mach web server is an excellent example of good node practices: https://github.com/mjackson/machEvery project coded by TJ Holowaychuck. Such as Express, Connect etc etc. That's what I did. The code is elegant and well written.Dunno if it's a great example for best practices, but I have the entire source to http://mash.li up on github.

http://github.com/chipersoft/mash.liIf you want to learn how to use node, you should look at the node source code itself. If you're writing an npm module, you should look at the npm source code.

I don't see how a ""random project"" will help here."
2014-11-11 07:37:32;Projects on Github that use Node?;"I've got a small encrypted chat system that was my first node project - it's pretty well commented and fairly easy to configure.

https://github.com/jkingsman/FreeStepJust did a small telnet server at http://github.com/shakefu/shootingstarI write a bunch of stuff in node.

http://github.com/davidbanham/r/netsec's [TrainerRed](https://github.com/damianb/trainerred) project is on github as well. Boilerplate app using Express.js with Passport.js for authentication, Mongoose for ORM, SWIG for templates. It might be a good start point for you.

https://github.com/diki/nodejs-passport-boilerplatehttps://github.com/SalvationDevelopment/cms-nickserv an alternative nickserv for unrealircd logs a user in based on a wordpress installation. https://github.com/SalvationDevelopment/YGOPro-Support-System a yugioh simulator launcher Im working on.Part of the reason that you don't find a ""do it this way"" is that node had less of a culture of doing things only one way. With small modules you have the freedom to rework over time as you learn what's right for your use. 

Check out `ghost`, `kappa`, `abraxas`, and `haraka`. Four very different ""applications"" of node. My first project is a magnet search engine for terminal.
I'm shooting for peerflix integration soon.

[https://github.com/roecrew/magsearch](https://github.com/roecrew/magsearch)github.com/sharelatex we have a load of nodejs projects which are open source and actually used in production not dead open source rubbish"
2014-11-18 19:03:37;Update your PhoneGap app over-the-air;This is something that has been very useful for my team at work, so I was asked to open-source it. We use this to ship our browserified app to our users many times a day. I shared this on /r/javascript yesterday and got a good response, so I'm hoping that many of you find it useful too.
2014-11-18 18:22:21;API Gateway Node.js/Express;"The most popular options, as @muggafugga mentioned, are HAPI, Restify, and probably Express (for more generic stuff). Restify is sorta awesome as it's SPECIFICALLY designed for building REST APIs.

I'd give that a go if I were you -- it also comes with some nice tools for building an API client as well.

One of my coworkers wrote a post on it a while ago (like a beginner tutorial) you might find useful: https://stormpath.com/blog/build-api-restify-stormpath/I try to avoid building things from scratch. Check out HAPI, Restify and LoopBack which are REST API frameworks. I personally like LoopBack the most.swagger is kinda nice. the 2.0 spec is still in development though, but mostly useable. Apigee's a127 ties into swagger by using the swagger-editor. Those two are some options for you. I know the apigee folks did a little video about setting up an API really simply using their tools.  

edit: urls:

 - [swagger](http://swagger.io/)  
 - [a127](https://github.com/apigee-127/a127)What is your backend store? The other answers have given really good general purpose api frameworks, but depending on what you're trying to do, you might be able to get away with something lighter.By ""API Gateway"" I guess you mean it will expose an API and will also bridge into some other system. And inside the gateway you might want to implement key checking, caching, or request routing. 

Apigee-127 is designed for specifically that use case. 

The other packages recommended here (restify, loop back, etc)  seem to be frameworks for building Apis in Nodejs. Apigee 127 is designed for that, and for building gateways as well. "
2014-11-18 18:10:48;MSBuild expecting .exe for output on TFS build server;"Eddited the main post, but here is the solution:

We solved our issue by changingg teh WebApplication.targets file to disable file copying. On line 24 of the .targets file, we changed the line:
<Disable_CopyWebApplication Condition=""'$(Disable_CopyWebApplication)' == ''"">False</Disable_CopyWebApplication>
to be
<Disable_CopyWebApplication Condition=""'$(Disable_CopyWebApplication)' == ''"">True</Disable_CopyWebApplication>
Not the most elegant solution, but it worked. We probably should be either specifying that value in the project files, or making a custom .targets file, but hey, it worked."
2014-11-18 12:19:46;ES6 arrow functions make testing of nested object property existence a breeze;Note: This technique will absolutely kill performance.Why you wouldn't go with hasOwnProperty is beyond me. Plus, as mentioned by /u/phpnode, it's in a try/catch, the perf will be *terrible*.
2014-11-18 12:16:06;Finding memory leaks in a big app;"This video might help, it's really recent: https://www.youtube.com/watch?v=tF0dt6TYmOU (Memory Profile for mere mortals - Nodevember)JSDom or possibly any virtual browser environment needs window.close() called when work with the virtual webpage is done. This is the one persistent node memory leak that I am aware of.

Are you forgetting an exit procedure or relying on GC when dealing with an interactive environment?Just to update - I think i've been following the wrong thread so far today, tomorrow I am going old school with some good old fashioned managed load testing (I would have done this earlier, but I thought I had figured it out).

This profiling stuff is very interesting, but at the moment seems a bit too specific (I don't want to riddle my app with this kind of thing!). However, if I can narrow it down to which API request is causing me issues, then I think profiling is definitely the way to go.I am also interested in learning what others would do in this situation. +1.I added New Relic, and was able to profile each API request individually (it takes some finagling) this helped me find what processes were taking too long. Memory mgmt wasn't my problem though."
2014-11-25 21:33:35;SocketCluster API docs are out;"This is certainly interesting, but this comment in the getting started section is a bit disingenuous:

>It removes the limitations of having to run your Node.js server as a single thread

First, NodeJS is not truly single-threaded, as IO operations are completed in alternate threads when done asynchronously as intended. And second, launching multiple worker processes in such a way as to take advantage a systems available cores and make ""your backend resilient by automatically recovering from worker crashes"" is exactly the intent of the provided Cluster and Domain modules. 

Achieving such resilience and optimal throughput is actually quite easy. Take for example this code from the [Cluster documentation](http://nodejs.org/api/cluster.html):


    var cluster = require('cluster');
    var http = require('http');
    var numCPUs = require('os').cpus().length;
    
    if (cluster.isMaster) {
      // Fork workers.
      for (var i = 0; i < numCPUs; i++) {
        cluster.fork();
      }
    
      cluster.on('exit', function(worker, code, signal) {
        console.log('worker ' + worker.process.pid + ' died');
      });
    } else {
      // Workers can share any TCP connection
      // In this case its a HTTP server
      http.createServer(function(req, res) {
        res.writeHead(200);
        res.end(""hello world\n"");
      }).listen(8000);
    }
    
In addition the documentation (actually in that same sentence) mentions aggregation of errors to a central log, but I'm not seeing any details about how that works. What transport is used? Is this configurable? Aside from scaling on a single machine to take advantage of multiple cores, how ready is this to scale across a cluster of machines, i.e. a group of EC2 instances? "
2014-11-25 18:27:27;cheerio-repl - A Node JS REPL for interacting with live Cheerio DOM and test your Cheerio statements.;
2014-11-25 16:47:48;Generate documentation for you node.js app with this package;Would be great to see a function call graph as an option too. 
2014-11-25 16:21:42;Object declaration and immediate shorthand if statement crashing my app;"var foo = { bar: 123 };  <--- you didn't put a semicolon there.Look up automatic semicolon insertion (ASI) in JavaScript and your syntax error will make sense.Wow, why have I never come across this before? I have been writing things in the same way for years and never found this to be a problem. "
2014-11-25 13:47:54;NearForm's Building Production Node.js Systems, a course with Richard Rodger on Dec 1st – 2nd at Skills Matter;
2014-12-02 19:03:30;How to implement sessions in Node.js;"I'm curious as to the pros and cons of session/cookies versus using JSON web tokens. Anyone have some insight?You posted this right when I needed it. Well documented, easy to follow tut. Thanks!If you're using express, [express-session](https://www.npmjs.org/package/express-session) is a really good session libraryI have the greatest respect for people who take the time to write tutorials like this one, but I can't help but point out that storing the actual session data inside the cookie is [bad practice](http://wonko.com/post/why-you-probably-shouldnt-use-cookies-to-store-session-data).

It may be slightly more complex to set up, but using a server-side session store and only tracking the user's session ID in the cookie is the better way to go.Nice article, but I think I noticed some mistakes. Firstly the secret key seemed to contain an apostrophe, so it terminated the string early: 

     secret: 'eg[isfd-8yF9-7w2315df'{}+Ijsli;;to8',

Secondly you seen to have used the equality operator in this line instead of assignment? Surely this isn't what you meant:

     req.session.user == user;"
2014-12-02 17:29:35;Koajs Quick-start Guide [Screencast];
2014-12-02 16:15:17;Let's imagine rebuilding GitHub in NodeJS, what software/server setup would you use?;"If you would use the same setup as GitHub but for NodeJS it would look something like this:

* Load balancers using [ldirectord](http://www.vergenet.net/linux/ldirectord/). Two or more, one is active and the others are waiting to take over.

* Front-end servers running nginx sending the request to [Phusion Passenger](https://www.phusionpassenger.com/). This basically replaced Unicorn

* Database servers with master-slave replication using for instance [DRDB](http://www.drbd.org/)

* File server pairs, one in each pair is active and the other is waiting to take over. Using for instance [DRDB](http://www.drbd.org/).

* Each of the inactive file servers is running [memcached](http://memcached.org/)

* Somethings to replace the HAProxy, Ernie, Chimney and Smoke stuff (not sure what yet)I've participated in a very successful (read: get crazy spikes of traffic during sportsball) Amazon OpsWorks deployment.  If you don't mind Chef, it can be a great tool for server provisioning, load balancing, etc.  Since we're already there, grab CloudFront for the CDN.

Cassandra can be a real pain in the arse database, but there's no denying that it works well under heavy load.

On the topic of node specifically, I'm really starting to enjoy [Hapi](http://hapijs.com/) though I'm a little miffed I started using it ~1 month before a major update (version 8.0)... shouldn't be too bad of an upgrade, though.

Actually, the parts that I'm enjoying the most are by the Hapi team, such as [Joi](https://github.com/hapijs/joi) for both request and response validation (the response validation is a great way to establish an API contract) and [Boom](https://github.com/hapijs/boom) for consistent error message generation across the whole 4xx-5xx spectrum.

I need to do some profiling still to see what kind of impact Joi has on performance, but given as that it's by the Walmart team, who loves to brag about their uptime during Black Friday madness, I've got some high hopes.

I'd be using Express, likely, but a lot of small apps.

I'd be making them into a coherent system with a message queue in the background, and making a lot of things into services. I'd probably use `gearman`, or maybe `rabbitmq` or `0mq`.

I'd likely use git repos for as much data storage as I can, because the write-once replicability is delightful, and just as a hedge so that it's in a format that's simple enough and robust enough to be used by end users, and it would enable some interesting tooling.

Data architecture is one of the most interesting pieces. Git is a massive content-addressable store, but garbage collected, since branches are discarded by deletions and force pushes. That presents some challenges, but the replication one can build is fantastic with this model. I'd take it and run with it deeply.

I'd build the ability to push rolling deploys -- maybe something like `pushover` under the hood, something like `seaport` to help organize it. As a git-focused project, I'd expect to be spending some time helping to maintain the libraries that do interesting things with the git protocol."
2014-12-02 14:16:27;email-verification: easily verify user signup with MongoDB;
2014-12-02 12:50:27;NodeJs for .NET Developers talk during Codemotion in Milan;
2014-12-09 22:29:27;NPM Website Redesign Launched;I really like the new look![deleted][deleted]Lastpass isn't working on the site anymore for some reason.
2014-12-09 21:12:02;Writing middleware in Koajs [Screencast];Good screencast. I like your site, coming from PHP it reminds me of Jeffrey Way's Laracasts. Keep it up. 
2014-12-09 16:59:31;Making the web faster at eBay with Async Fragments;
2014-12-09 14:25:25;Node and MySQL;"http://sequelizejs.com/

I would use this.  It has built in functions for looping through the results.I think you are getting confused with the idea of async. I have changed your code slightly and replaced your for loop with an async one using the async library. This loop won't block the thread like a standard for loop does.

    var connection = mysql.createConnection({ host : sql_server, user : sql_user, password : sql_pwd, database : sql_DB });
    connection.connect();
    var queryString = ""SELECT Settings.Name, Settings.Value FROM Settings WHERE Settings.Group = 'IRC' ORDER BY  `Settings`.`Key` ASC"";
    var ircSettings = [];

    connection.query(queryString, function(err, rows, fields)
    {
        if (err) throw err;

        async.eachSeries(rows, function(row, callback)
        {
            //Iterated code.
            results.push(row.Value);
            console.log(""Name:"", row.Name, ""Value:"", row.Value);
            callback();
        }, function()
        {
            //Completed loop code.
            console.log(ircSettings.toString());
            connection.end();
            console.log('mysql done');
            console.log(results.toString());
        });
    });
Note that there were a few missing variables in your example but I left them in.You don't usually make node sleep or wait. That's called synchronous programming, and doesn't fit well with how most of the node apis are designed.

If the mysql results are printed too late, it seems like you just run the rest of your code too early...

You can use ""promises"" to emulate traditional, synchronous programming. I like the Q library for that. It makes it a lot easier to do the things that become tricky with plain callback based programming. You need to get a handle on how to manage async stuff in JS.  For example, all your code below the callback should be inside the callback instead.  You're closing the connection before the results come back, but I suppose it still works because that's also async.

Callbacks beyond simple usage can quickly become unmanageable, for obvious reasons.  I highly recommend trying a Promises library (Q is a popular one; I like Bluebird for no particular reason) instead.  Promises help you manage callback hell, but more importantly they help you reason better about async stuff.

With promises it would look something like this:

    var Promise = require(""bluebird"");

    connection.connect();
    var queryString = ""SELECT Settings.Name, Settings.Value FROM Settings WHERE Settings.Group = 'IRC' ORDER BY  `Settings`.`Key` ASC"";
    var ircSettings = [];
    Promise.promisify(connection.query)(queryString)
      .then(function(rows) {
        // Unnecessary with promises
        //if (err) throw err;
        for (var i in rows) {
          results[i] = rows[i].Value;
          console.log('Name: ', rows[i].Name, ' Value: ',rows[i].Value);
        }
        console.log(ircSettings.toString());
        connection.end();
        console.log('mysql done');
        console.log(results.toString());
      })
      .error(function(e) {
        console.warn(""There was some sort of error:"", e);
      });
"
2014-12-09 09:23:17;How to Use NPM as a Build Tool;"Nice. l've been trying this method out lately and it seems to work quite well. The Windows problem quickly reappears when you need to do more complex scripting though. A solution I found for this is to use 'shelljs' ( https://www.npmjs.org/package/shelljs ) to write what are essentially small shell scripts in JS in a cross platform way. 

To invoke commands hidden away in the node's .bin directory, I throw in some 'shelljs-nodecli' ( https://www.npmjs.org/package/shelljs-nodecli ).

Shelljs also a has poor man's Make feature where you can define goals and run them, and have goals invoke other goals.
I remain unconvinced.

Although I accept that it can all be done in npm, I'm not clear on why we're trying, particularly with its cross-platform shortcomings and lack of some features that we need 3rd party tools to make up for.  aren't grunt and gulp build tools?"
2014-12-16 23:30:53;Help with using passport-facebook-token;
2014-12-16 20:30:13;JSON Archetypes: Simple Data Standards;
2014-12-16 18:52:04;Awesomeness & Usefulness for Web Developers #15;
2014-12-16 15:21:32;I was tired of the *seconds* that scp and rsync take to mirror a file system. So I made sicksync.;"Did a smallish writeup here as well: http://joelgriffith.net/announcing-sicksync/. Obviously the git repo contains all the nitty-gritty.It's not node, but people at my company use realsync for this:

https://github.com/DmitryKoterov/dklab_realsync

It's a very similar idea -- use a special protocol for small changes, rsync for big changes. Out of curiosity, since you already use git, why not just git push master server?[duplicity](http://duplicity.nongnu.org/)inotify + rsync would get you 99% of this. Not node though, obviously.Why'd you use `WebSocket` instead a of a normal tcp socket?  The only real advantage to `WebSocket`s is that they're available in browsers."
2014-12-16 14:33:59;Looking forward to learning node further, need ideas for useful projects.;"The project I'm doing right now is building s web chat using node with socket io.You will get the first steps out of the getting started section on the socket io website.In the end there are some suggestions on further improvement like adding user names, user authentication, login/sign up and stuff :)It's pretty basic but you could apply anything from angular to gulp if you'd like to to improve :)This example has been keeping me busy for quite a while :)Sky's the limit. There seems to be an excess of tutorials about writing todo apps and really crappy APIs, you could run through those until you're blue in the face. 

Right now I'm working on a few things. Administration dashboard for one of my VPSs ( generally monitors the server and it's services, as well as giving me some telemetry on my Dokku apps). Distributed computing framework that uses web workers on client side instances (got the idea from a defcon talk about JavaScript botnets and distributed file systems). And some random express middleware that makes it pretty easy to add instrumentation to my administration console thingy. 


And going through talks and books looking for ideas about how to write better JavaScript. I'll usually get an idea or two about how to apply ideas I had from other languages doing that. 


I'm really liking using a module called Seneca for doing message queuing, which is also really coolLearn streams in node"
2014-12-23 21:36:37;Why I chose Node.js over Ruby on Rails;"In a year we'll be having:

Why I chose iojs over Node.jsNot hating here, nor did I read the article - but in the title you're comparing apples and oranges. Node.js is a platform, Ruby is a language, Rails is a framework.I've been using Ruby for many years and love it, still my favorite language to code in. 

But I'm all JS on my current project because RoR (and Ruby in general) apps have a habit of becoming bloated memory leaky monsters in production. Node doesn't have this issue. It really is nice being able to share a language client and server side... And when you couple the leveraging of libraries on both ends, it really becomes ""the average of the best of both worlds"" instead of the 'best of both worlds' or whatever (No, it's not perfect or anything, but it is damn sure convenient using the same language and libs just about everywhere - especially in a world where 'full stack' is becoming a base-level demand).  An example - I am fond of underscore.js as I've been using it on various levels for many years now and when developing on a node/cordova/ionic/angular stack, I can use it EVERYWHERE.  So far, I am digging it... While I won't claim to be a veteran on all (or any) fronts, I've played quite a bit over the years with PHP, Python/Django, Ruby/Rails, .Net and even a little bit of Rust for web-dev - Node.js and the associated semi-unified world of Javascript comprise the stack that I've found the most fun to develop with of the bunch.  While I am certain this won't be anything like the last of 'the last of the best', I am excited to see how this toolset evolves.[deleted]> Firstly, and most importantly for me, I really love Javascript.

There's a sentence I never thought I'd read.[deleted]"
2014-12-23 20:01:21;How to create permission groups with passport?;"Passport deals with authentication only (ie: logged in / not logged in). It is not designed to distinguish groups of users. That's the job of whatever permission scheme you choose.According to the connect-roles module it works fine with Passport.
And it looks the most promising to me

[Passport + Connect Roles](https://github.com/jaredhanson/passport/wiki/Using-Passport-with-Connect-roles)You could always write a module/the code for it yourself ;)"
2014-12-23 19:20:46;Thinky and its Raison d'être!;
2014-12-23 15:16:56;LoadBalancer.js - A lightweight, resilient TCP load balancer for realtime apps with special stickiness;Why would one use something like LoadBalancer.js rather than Haproxy? Haproxy has a great track record, famous stability, and has been around for a long time. Is LoadBalancer.js more configurable in some way?nginx for the job, standard and widely used.We already have [an HTTP server](https://github.com/encharm/http-master), so now it's time for a load balancer, right? Good job.
2014-12-23 00:44:08;What tools do you use to develop Node.js apps?;"WebstormUnfortunately I pretty much avoid windows like the plague. It only gets used if I *have* to use it as I find *nix environments far more efficient. 

I use Atom, which is an open source editor being developed by GitHub. Completely hackable, easy to build plugins for, but already has a great core set of features. It's exciting seeing a project like this being built live rather than hearing about it from behind the closed door.vim + node-inspector EmacsI wrote it in the survey, but debugging node kinda sucks. node-inspector is pretty much your best choice, and it's pretty underwhelming. 

It'd be really cool if you could somehow evaluate promises in the console. Maybe hacking around with it and generators it might be possible. Id never use windows as a target platform for any node app, I don't pay for operating systems when the tech works better on the free ones. I also insist on developing on the target platform to reduce 'it works for me' errors. I'm afraid that leaves you no quarter.I use Webstorm, but I like Visual studio as well-I used it before I changed to Webstorm.

One thing I miss quite a lot(on both IDEs) is being able to install npm dependencies from within the editor.
I just want to be able to write:
    var _ = require('lodash');

Get a squigly line telling me I don't have that installed, then in context menu, I can choose: 'Install lodash'.
This feature alone would make me use VS for my node,js development-at least for quick prototypes.I develop on Windows and deploy to windows, all my staff for my side project/startup are windows users save 3. We mostly use Brackets.io. I use Visual Studio for writting some JS at my day job, and its... horrifying. If you want to cater to JS developers you need to do a few things: 

http://ingorichter.github.io/BracketsExtensionTweetBot/
Read this blog, you need decent git intergration, you can skip emmet, but look into it, beautify is a must VS has no concept of correct spacing in the language which is a pain. JSHint is a must, a must, a complete must. Code folding and automatic detection of flipping through various languages and sub languages. We'll need something like Nodemon.

Also VS is bloody heavy overkill, takes forever to boot and eats memory like Dreamweaver CS3 on steroids. 

People have made alot of arguments about predictive typing tools. Brackets.io has one and its not invasive like VS's Im pretty sure its based on jslint to figure out types. For functions it'll give me the vars I need to type out, their types, and when I type variable names its predictive, not for accuracy but just a list of all the vars in the current language and document. Thats all that is needed. Stop thinking in C#.

Brackets.io was built for JS devs, by JS devs. If Microsoft wants to take ownership in that language spear stop creating conventions and branch that code and improve it then MERGE it back pull an Google Blink, on Adobe. I say this because Microsoft has to much legacy up its butt. 

As far as the 'lights' go read this : http://www.sitepoint.com/sitepoint-smackdown-atom-vs-brackets-vs-light-table-vs-sublime-text/ The most important point being "" The web development community will almost certainly prefer the open JavaScript API plugin architecture ""

Also here are some more stats for you : http://dailyjs.com/files/2014-survey-summary.pdfI use sublime when I work on anything outside of .net; Other than that, it's all CLI tools so an IDE of any kind (like web storm) is a welcome relief.  Visual Studio, on the other hand, is a goddamn blessing!  Looking forward to giving the toolset a try!I prefer command line vim.

The only reason I might switch to IDE is better debugging options especially on cluster. Also the IDE needs to run on all OS' not just windows.  

edit: There is no OS called ""Linus"", there are people called that.I really like some aspects of ntvs but I actually find myself using WebMatrix. I can just point WebMatrix at my project folder and it works. With the ntvs, I need to create/maintain a project. I tend to work on teams that develop on different OS's with different tools, so I generally like the tools which are least intrusive.

Minor nitpick for ntvs:
I use Express 4.0 for a number of my projects and I generally stick to the bin/www model. I haven't looked all that hard to see if it's possible but it's be great if ntvs would pick up my ""start"" command in package.json and run with it.

[Edit:something I was mistaken about]I recently left MS land - used to work in a Microsoft/.NET shop - and now in a full-stack JavaScript shop using Macs. The main thing I miss - a solid debugger. 

For the hate that MS gets at times, Visual Studio is a solid IDE (even if how it currently manages project files is a bit of a pain) - but the server-side debugging tools were pretty ace. want to improve the node experience in visual studio? How about making the source code available so developers can modify it to their own liking?One thing that disappointed me about WebStorm is how poorly it worked on the Surface. I never tried Visual Studio on it, but touch friendly might be a feature to keep in mind.I actually swapped off my vim setup, which I've had for a number of years, for Visual Studio with the Node.js Tools plugin. VS is by far one of the best IDE's out there and with a nice solid debugger for Node.js, it made a lot of sense.

So far my experiences have been mostly positive. However, I've noticed that I can't seem to use the cluster module while debugging. Other than that, it pretty much works exactly as I'd hoped. Probably one of the best JS code completion systems.

That being said, our production env is entirely *nix based so I do still work in vim and do all my profiling on that. [deleted]I work at a big corporation that has a long, serious history with MSFT and am currently trying to develop some internal apps with node and associated frameworks.

I develop on Windows (would actually prefer to use a linux VM but my work machine has embarrassingly low specs) and here is what I use:

- Emacs, Sublime and actually WebMatrix once in a blue moon

- IISnode for almost all of my current projects for SSO reasons (windows credentials are needed for security layer on some apps)

- git-bash (honestly haven't even tried powershell/etc yet)

- chrome developer tools

- I avoid visual studio because of the memory usage - my shitty work laptop can't handle it very well.  I only use it when I have to work on apps built in .NET.
I'm primarily a C# developer, accustomed to Visual Studio. (and liking it)
For the past two years though, I've been working with a very specific tech using a custom ECMA version on top of Rhino and a proprietary cloud as deployment target, with a closed Eclipse plugin as the only provided dev environment. Damn I miss good tooling.  
So, using already a js flavor on the backend, I've started to practice with node.js for side projects. Since I started professional development, I've always been in windows shops, and own only microsoft powered machines so I can easily work remotely with the same toolset when required.  
At the moment, I find developing for node.js on windows painful. Even if webstorm looks great and NTVS looks like it's catching up, the lack of a good command line interface and good command line tools management makes the development harder than it should. Powershell is a good idea, but IMHO not enough thought have been given to the interface. 
I'm currently moving to a setup with a linux vm, where I intend to put webstorm + zsh, and see where it goes, but I'll continue to check on windows and NTVS evolution.Hi Sara,

I have a very Important Question.

I was using Sublime text for my Express.JS development. However, recently I got my hands on Node tools for Visual Studio.

The Problem is when I create a new ExpressJS project on Visual Studio, it installs JADE as its default template engine. I have been using EJS (Embedded JavaScript) as my templating engine from the beginning. I need to run the dependencies command every time a new project is created to replace JADE with EJS. 

Is it possible to change the Templating engine from JADE to EJS by Default in VS?If you guys want to learn Mongodb + expressjs + angularjs + nodejs, then I recommend to go to https://www.udemy.com/realtime-meanstack/?dtcode=GTm68AD2vG8U and enter GETMEAN to get 50% discount![deleted]My development OS is _____ Linus? jQuery a node.js technology? What does that even mean? [deleted]  
 ^^^^^^^^^^^^^^^^0.9439 
 > [What is this?](https://pastebin.com/64GuVi2F/82702)My current preference for developing in node - for my personal projects - is [Codio](http://codio.com). I've found it really easy to use, and it means that I can just jump back into development from any machine and be where I left off, which is great.Visual Studio and NodeJS Tools or IntelliJ 14 depending on the OS I work with. I have to admit, IntelliJ 14 feels slightly better for development than VS.NET because the NodeJS Tools are a bit laggy from time to time. It would be awesome if we could do ""remote debugging"" on client side JavaScript that have been concatenated etc with gulp. Windows 7 + Webstorm + Chrome with Webstorm plugin. Not a day goes by that I don't curse Windows.  

 It's better than Python on Windows though, which is agonizing (yes, I know of Anaconda).Too many unix utilities that I feel helpless without on windows.

Some of my Mozilla buddies have some ideas about typescript.  I was surprised the last time I looked at the shumway repo to find a bunch of TS.

PM me and I'll put you in contact with them.Ubuntu + Sublime Text + Terminal

Everytime I use an IDE I get pretty frustrated with...load time, slow performance, clicking around to find the right tools that I want to use...  I much prefer developing in a text editor and using CLI tools, and I absolutely love Sublime TextKomodo Edit with node-inspector for debugging.

I use VS every day at work (C#) and was excited for VS Community so I could use it at home for side projects.

I tried NTVS and liked the npm integration and the debugger, but the auto-formatting is absolutely horrible. I tried to configure spacing/indention but just gave up. I reset all the settings and just tried to get used to whatever the default was but even that seemed inconsistent and drove me insane/away.

I also liked the deployment integration and profiling, but haven't used them much.Emacs!!!I'm late to the show, but here are my 2cents.

Vim and jslint with Grunt. I use Grunt and Gulp a lot while developing. I run my app on Nodemon and it reruns when I save and I can see where it breaks. I switched to *nix environments entirely for work, since they seem to have a more native environment for developing than Windows. I love Windows for games, but it feels more like a powerful gaming console that I can mod to an developing environment. It's bad to work on, the OS acts as if it is running on a scratched DVD. Mac OS X and Linux give me a more musical-instrument or motorcycle experience. Everything is at hand, all the time. Windows is more like a drum set where the drums are stacked on top of each other and you can only hit one at a time and you have to hold the drumstick with your left hand. 

I know I may come off as a Microsoft hater and a *nix fanboy. But I'll jump between OS's anytime. I hold no faith to anything except making my own ass more comfortable. I use Outlook on my iPhone because to me it IS the best mail app. Using anything else gives me a blood-pressure rise. Same about Excel.

My dream is something like a merge of Visual Studio, Vim, i3wm and CLI. Imagining opening up terminal windows inside VS and running different tasks in each one while I still have insanely good debugger right in front of me and the code navigation and everything is controlled from my keyboard. That's a sunny beach and ice-cream to me.Heyo, I picked up VS Code and while it's not 100% feature complete yet (imo, as an IDE), I'm loving it.  I use VS Code at my new job as my primary Editor, and it works really well so far  (on Mac).

I think the debugger could use some work, but node-inspector has been working just fine to fill in that aspect.  I'll have to think about what other things I'd like to see...   I sent in a few suggestions.One and only, i use sublime for doing all my node js jobs, very satisfy since 2009Filled in your survey, some additional comments:

- The best, but unrealistic, thing you can do is to transform Windows into a Unix-like OS. Seriously.
- The best realistic thing you guys at Microsoft can do is improve Typescript. It's an awesome concept, but unfortunately it doesn't play nice with the Node environment (or with any other plain JS environment for that matter). Google will release AtScript, a superset of Typescript, in about a year. If you don't manage to make Typescript great before Google releases AtScript, then Typescript is (unfortunately) done.
- The second best thing you can do is make Visual Studio available on Linux and OSX. Visual Studio is a great IDE, but Windows is simply not an OS where you should be developing web applications on or for.

I develop Node.js apps on Windows, but to be honest I'm looking to switch to a POSIX operating system for development. When I use Windows it always feels like I have to fight harder and use workarounds to do the same thing I did on OS X. For example, one of the big things holding back development on Windows is that the system processes are incompatible with the Linux environment where the code will most likely be deployed! The Windows command prompt also feels extremely weak compared to a bash terminal. Almost all the software associated with Node.js is POSIX. Anyway, I'm no expert, just a casual Node.js developer at this point, but here is my set up on Windows:

* Sublime Text 3
* Cygwin
* ChromeJust today I was thinking to myself that I'd like to help Microsoft monopolize another segment of the industry. I love giant faceless corporations.

Tell ya what, I'm feeling benevolent. If you guys shut down Typescript and start contributing to Haxe, I'll answer your survey.[deleted]"
2014-12-30 22:06:52;"I'm new to node and I need to build a webapp; I'm looking for some advice.";"Thanks for all the help! As awesome as Meteor is, I think the ""right"" thing to do is to go with express. I can always use Meteor in the future, but being new to node and all, express will give me the building blocks I need for now. I haven't used meteor, I have used express. I'm not much of a web developer but I found express very easy to learn for my limited needs. So my suggestion is that if you want to learn node then go with express. If you need to build a website fast why not use Python and Django while you are coming up to speed with node. From my limited look at meteor it seems like, as you said, it is magic and therefore won't help you learn node. Just my thoughts.I started out with express and it never felt too bare, in fact it felt like I had a better control on things after seeing ruby on rails. I suggest you to look into some basic express and meteor tutorials that are implementing the same thing (for example an online todo list) and choose whichever you like the best. My recommendation would be express.I can't really comment on Meteor, I have heard good things and it's on my list but as of yet I have not used it.

Express I have used a fair amount.  There are lot's of ways to go about it but to learn the most I would use Yo to start off your project.  Even though it adds potentially more than you need, it's still good to see how stuff is organized.  MeanJS is usually the one I end up using.

If you don't care about Angular or Mongo then you could just run the generator and see what you like (folder structure, bower, grunt setup, modules they use for auth, sessions etc) and manually bring those into your own project.

There are a lot of opinions on this subject.You have to main options to choose. They both have benefits and it depends on what you are needing.  

Express:  
The most known and popular. This is great because there are a lot of tutorials and examples to get stuff done. If you are a new programming, having lots and lots of examples is really great. This was my first framework. The router is only okay. If you have two routes that conflict the server still starts and you dont know. So if you have a another middleware that adds a route and overrides one of yours, you wont know. You have to add a lot to get going for a stable and secure application.

Hapi (http://hapijs.com/):  
Not as popular as Express but used by the biggest companies (Walmart, Disney, Paypal, Yahoo, and etc. Excellent router, the server wont start if there is a conflict. Nothing is a middleware unless you want it to be, then it is a plugin. You can have named routes and access them in your views like Django (https://github.com/poeticninja/hapi-named-routes). It has built in cache. Authentication strategies are much simpler (the creator worked on the OAuth project). Security and testable is a primary concern. Server logging is really simple. Not as many examples or tutorials but I did put together a boilerplate to help with this (https://github.com/poeticninja/hapi-ninja). It has many more features and really lets you get to coding. Huge fan of Hapi and would not go back to Express or any other middleware based framework (Sails, Koa, etc).You might consider koajs http://koajs.com
It's written by the creators of express, built from the ground up using Javascript generators, which let's you to ditch callbacks.
My $0.02You can use SocketCluster with Express on the backend and AngularJS on the frontend - That way you can make a single page app which updates in realtime."
2014-12-30 21:36:07;kast - An UDP multicast framework.;
2014-12-30 20:57:56;Error reading file in hubot script;"I am having a tough time following what you are doing exactly. So here's some questions to help narrow it down :)

> And it works awesome except for one thing. We use it to log our IRC channels, and when I try read the latest file, ie, todays - it loads the file nicely. 

So, you were using it fine previously, and you changed something today and it stopped working?

How exactly are you including this script in your hubot? Are you using it as a package (ie it's in `package.json` and `external-scripts.json`), or are you just copying the file into your `scripts` directory?

> However, when I try read any other file, the webserver just spins and spins until it dies with ""no data received""

What do you mean by read any other file? What URLs are you trying to access?

----

Some other things that might help track it down:

* node version: `node --version`
* npm version: `npm --version`
* versions of hubot and other dependencies: `npm ls`

And lastly, any output from your hubot's process. By default, this goes to stdout, but the openvz container might redirect this somewhere for you to reivew?"
2014-12-30 20:53:55;express cannot be found;"Whats does 'npm install' say ?

you have have package.json set up with express in it?"
2014-12-30 20:30:34;Getting started with Selenium Webdriver for node.js;To the author: This is a great tutorial, but only a small fraction of JS devs are familiar/comfortable reading CoffeeScript.
2015-01-06 20:30:00;Why not run on port 80?;"Most people advise against it as it usually implies that you are running as root or another privileged user, which is a security risk.

It also means you arent using a proxy (like nginx) which can cache your static content and handle/scale to more users/connections per second than your node app probably can. Also, using nginx would allow you to horizontally scale your node app, as well as simply using it as a proxy to allow routing to multiple domains and services from one machine. 

Personally, i've always found joy in having control of and writing my own node reverse proxy to handle this, but as nginx perfoms better, that is usually why its advised. Ignore all the rubbish about nginx. A reverse proxy is a good idea, but for totally different reasons.

Running on port 80 isn't bad. Running as root IS bad. Most people that run a server on port 80 run as root, so the two get conflated.

Running as root is bad because we're worried about an attacker finding a way to make our server process run commands for them. If they do that, and it's running as an unprivileged user, there's not that much they can do. If it's running as root, though, the attacker now has the keys to the castle.Many people use like nginx or haproxy to route requests to apps. These sit as a layer between your apps and the wide web. They can take care of the https termination, subdomain routing, redirects and things like that.

Your apps are then safe inside the local cloud (security group or whatever), each exports services on it's own port (high number), you'd likely specify it via process.ENV (for scaling).  The proxy then has configuration to route traffic to the correct app. This means you can run many domains/apps easily.

Besides control it has additional benefits, for example a simple DDOS that could take down your complex application server can sometimes be easily mitigated by having nginx block/eat the requests (it is more specialized, so faster).Ports lower than ~1024 are considered special by the OS and certain access permission restrictions apply.Well if you're going to be running just the one site on that box, then by all means. But if you intend to run multiple web services then they're all going to require their own ports, which throws the whole port 80 thing out of the window and you may as well choose another range and leave port 80 free for other purposes. You'd usually route port 80 on a domain or sub domain to a specific port on the host box.

EDIT: Also unprivileged users usually don't have access to use the lower port range. This can sometimes be an issue depending on the platform you're using. See http://www.w3.org/Daemon/User/Installation/PrivilegedPorts.htmlThere's no *technical* reason not to run on port 80 (or 443 if you use SSL), but doing so typically implies you're not using a reverse proxy, and those are considered a best practice for pretty much any non-trivial application. 
There are numerous reasons not to run on port 80. However the big one is that if your node process is compromised it now has access to run Sudo commands on your server. This should NOT be an issue though with most modern web applications because your database should NOT be located on the same server, and neither should any other important processes. Because of this you can run on port 80.

However, if you are really building to scale you should build your entire app behind a load balancer and then none of this really matters does it? I use Haproxy, some people use Nginx, and some write their own. If you want scale use a load balancer/proxy.everyone should agree that whatever is running on port 80 should not be running as root. other webservers like nginx, apache etc have the proper configuration and/or startup code to bind to port 80 but downgrade their permissions to a secure level. Apparently with node you would have to put together some front end startup code to handle that and it isn't built in to node.  and if you don't know EXACTLY how to handle that its dangerous. So using a reverse proxy ahead of node is the best idea.You shouldn't use your node app as an actual web server.

Put nginx in front of it.

[Related video](https://www.youtube.com/watch?v=FJrs0Ar9asY)dethstrobe,

check out our security guidelines: http://blog.risingstack.com/node-js-security-tips/ - I hope you will have a better understanding after reading this ;)Do not run on port 80. Reverse proxy behind nginx. Security. That's enough said. "
2015-01-06 18:57:10;how to store json data in a database?;"PostgreSQL has had pretty decent JSON support since 9.1, and it's been getting better since then: http://www.postgresql.org/docs/9.4/static/functions-json.html

Adding a JSON field into a relational table can be pretty good approach to a number of tricky scenarios, especially avoiding pivots for settings and the like. Array support in PostgreSQL is also very nice.MongoDB is my goto json storage solution.  Not that it's particulary fast, efficient or, well, good at pretty much anything.  It's just so darn easy to pump json in and out of.  Others have sworn by postgres but i haven't use postgres for this purpose yet.  

If you're going to use MongoDB, then I recommend monk to interface with it.  There's even a koa compatible co-monk package which is really convenient.  [deleted]Couch or Mongo would be my picks for a simple database for JSON objects. [Usergrid](http://usergrid.incubator.apache.org/) works well. It is a turnkey graph database that stores json natively.  [Apigee](http://apigee.com) hosts a multi-tenant version of Usergrid that you can use for free. There is a nodejs SDK for usergrid. 

Also, Apigee offers a downloadable toolkit of open-source stuff that includes usergrid and some other things, called [apigee-127](http://apigee.com/docs/api-services/content/apigee-127).  It's all open source and [available on github](https://github.com/apigee-127). 

Where I work we use sql server, but I just store the json as a string. It's easy to parse it back into an array in just about any language, though not easy to read in the db.After trying most of the SQL and NoSQL database offerings, I would go with Postgres. It really is the most advanced, capable, and flexible solution out there (not to mention agreeable licensing.) Mongo, CouchX, MySQL just don't come close.If you want to stick with SQL, try [PostgreSQL](http://www.postgresql.org/). It's not only the best SQL database you can get for free, it also supports a lot of non-standard data types for its columns -- including JSON.

Otherwise I'd recommend a document database like [RethinkDB](http://rethinkdb.com/) or [ArangoDB](https://www.arangodb.com/). Or if you just want to do what everybody else does (for better or worse), try [MongoDB](http://www.mongodb.com/).

I would recommend against [CouchDB](http://couchdb.apache.org/) unless you really know why you want to use it. It's a great database, but it's probably not a good choice if you are used to being able to perform arbitrary queries.

If you prefer rolling your own and want to stick with node, there's also [LevelDB](http://leveldb.org/), which is ridiculously versatile. And of course, if you really don't care about structure and only need to query datasets by ID, there are specialised key-value stores like [Redis](http://redis.io/).

Full disclosure: I'm a contributor to ArangoDB.Couldn't you just store the JSON as a string?Have you looked into using Orchestrate.io?"
2015-01-06 18:51:47;Is there a rough equivalent of Rails' scaffolding for Express?;"yeoman is capable of doing what you ask but it would depend on you using a generator for a framework that enforces some structure.

One option for that is kraken-js. It's built by PayPal and is a thin layer on top of Express. Additionally, since it enforces a structure, the generator for it has that capability. Check it out (the [main project](https://github.com/krakenjs/kraken-js) and the [generator](https://github.com/krakenjs/generator-kraken)).Check out [Sails.js](http://sailsjs.org/).Try the angular full stack yeoman generator and remove the angular if you don't want to use angular. You can generate restful endpoints which you can access from angular or any other javascript. It also comes with mongodb, but it isn't hard to set it up with postgres or mysqlAnother alternative if you are looking for a rails like experience in node is to use the Geddy framework. http://geddyjs.org/I'm not familiar with rails, but I think you're looking for a shared ORM between server and client. I'm going the angular-resource route since my models are pretty simple for now, but longer run, I'm looking to use something more concrete and structured

I have some past experience with [Breeze.js](http://www.getbreezenow.com/breezejs) and really liked the metadata approach, coupled with full Work in Progress (WiP) client side caching. 

I'll be transitioning once we graduate from our MVP launchYeah, [Express does this](http://expressjs.com/starter/generator.html):

    $ npm install express-generator -g
    $ express -h"
2015-01-06 14:32:26;Serving Content in #koajs with jade [Screencast];
2015-01-06 05:22:58;"Writing a better ""tail""";
2015-01-13 22:07:43;some tiny libraries I use to make webapps;
2015-01-13 21:35:15;Cloudify any node.js function or module with a single line of code;Very cool idea in theory, though I'm still mulling it over trying to connect this to some practical implementations. I'm sure they're there and it's going to be awesome to reach that 'ah-ha!' moment, but it's too new a concept for me to fully appreciate.ELI5? What does it mean to cloudify a function?
2015-01-13 20:27:49;I just created a subreddit to show off great/useful npm modules (or promote your own), I hope you guys find it useful!;
2015-01-13 20:22:28;Can't wait for the io.js release? Try the nightly!;"Is node.js no longer being developed ? 

The last commit to the git repo was on 2nd of october, I haven't been keeping up on the drama got tired of it.Im waiting for this stupid feud to die by it either merging or io.js github server goes down in flames (literal flames)  "
2015-01-13 19:11:27;Looking for feedback on a new OSS (NodeJS based) project;
2015-01-20 19:03:09;Harder, Better, Faster, Stronger Lo-Dash v3. An overview of 3.0.0-pre;I dunno what it is, but util libs like this are just awesome. I don't use like 90% of it, but reading through all of the methods, my brain skips to like some point in time over the past decade+ of work where I would have used it and it makes me happy for no reason.Nice to see Fusion getting applied in js.https://www.youtube.com/watch?v=PsO6ZnUZI0g
2015-01-20 18:19:55;Socket.IO always emits to last connected client;"The problem is that you cachig the socket in a local variable:

var socket = socket;

Use the local variable instead (something like this):

    var express = require('express');
    var app = express();
    var server = require('http').createServer(app);
    var io = require('socket.io').listen(server, { log: false });
    io.sockets.on('connection', function (socket_) {
        socket_.on('dl_me', function (result) {
            downloadTrack(result, result.song_uri, socket_);
        });
    });
    var downloadTrack = function(result, uri, socket_) {
        socket_.emit('gotodownload', {
            id: generated_number
        });
    }    "
2015-01-20 16:05:55;Lightning - open source data visualization server;
2015-01-20 15:38:01;Promise / Generator Performance VS Callbacks;"There's [this post from Oct 2013](http://spion.github.io/posts/why-i-am-switching-to-promises.html) that has graphs comparing the memory usage and speed of callbacks, async, promises, and generators.

Also, bluebird, one of the promises libraries more focused on performance [publishes a benchmark on its repo](https://github.com/petkaantonov/bluebird/tree/master/benchmark)

If you're using promises, it's almost certainly because you're performing IO. It's very unlikely the performance of the promise library itself is going to be a bottleneck. Thanks for that - it was a good read.
However I am wondering how  ES6 node 0.11 promises compare to the rest, rather than separate libraries"
2015-01-20 14:23:26;I can console.log(req.session) but cannot access any of the items;"There's nothing in req.session[0] and req.session[1] because this isn't an array, but an object.   You can access it through req.session.username, req.session.summonername, etc (even req.session._id).  req.session[summonername] won't work because summonername is being used as a variable there -- you could do req.session['summonername'] which is the same thing as req.session.summonername (syntactic sugar).

All that being said, use [bcrypt](https://www.npmjs.com/package/bcrypt) for your passwords, don't salt with a hashing function.Can I also ask why you store the password in your session? It is never a good design to keep something like that hanging around in memory or in disk outside of its normal controlled data store. If you decide to use something like memcache to store sessions then it could get really dangerous as memcache isn't the most secure thing in the world. I could be totally wrong but that is just my observation. In a case where I have data that is behaving unexpectedly I would try a `console.log(typeof myVar)`. If its an `object` that only gives us so much information. At that point it can be helpful to check `console.log(Array.isArray(myVar));` to see if it's an array. If not then try `console.log(Object.keys(myVar));` to reveal all exposed keys."
2015-01-27 21:32:07;Announcing the Official Node.js Connector for the Oracle Database by Oracle;Wow.Better late than never.
2015-01-27 20:04:57;Getting only content of block in express;"FYI most of what you're talking about is a feature of Jade, not Express. That being said, this is how I would do it:

Set up your routes to pass `req.xhr` to the view. So in your `index.js`, add the following route for the FAQ page:

    app.get('/faq', function(req, res) {
        res.render('faq', { xhr: req.xhr });
    });    

Then set up the FAQ view (`faq.jade`) like this:

    extends layout
    
    block content
        p Hello, World    

Lastly, set up the layout view (`layout.jade`) like this:

    if xhr
        block content
    else 
        html
            head
            body
                block content

Here's how it works: when a request for `/faq` comes in, it gets routed to the view `faq.jade` with the variable `xhr` set to whatever `req.xhr` is: `true` if it's an AJAX call, `false` otherwise. When we look at the view (`faq.jade`), the first thing it says to do is `extends layout`. So go to `layout.jade`: If `xhr` is true, it only shows the content. Otherwise, it shows the entire HTML. 

I'm not too great at explaining things, but hopefully that helps."
2015-01-27 19:12:46;Experiances with Hapi or Loopback;"I evaluated both for a project I'm on, and settled on Hapi.  Although Loopback looks nice, we couldn't take advantage of the magic, because we had to plan up-front to have multiple versions of our APIs.

The problem with Looback (which is also where all the magic comes from) is that your external APIs are tightly coupled to the database schema unless you add in workaround code.

On the other hand, Hapi takes the completely opposite approach.  The biggest differentiator between, say, Hapi and Express (and Loopback) is that the definition and configuration of a route are decoupled from the implementation of the route.

As an added side benefit, the integration with Joi means that all of our routes have both request AND response schema validation- once we finalize our V1 routes, we never have to touch the route configuration again, and if any maintenance needs to be done on the implementation logic, we'll get errors if our responses don't match the original ""contract"" (the route response schema defined with Joi).

Yes, Hapi is more work up front, but how everything happens is also relatively more explicit and feels safer for larger projects, or projects that are going to be in active development over a long period of time.We have a production app using express for the core API. We started working on the next iteration and found Hapi thanks to a local js usergroup. While Hapi certainly made a lot of the code less repeated and much more standardized, it was slow, really REALLY slow for a node.js. Our response times went from 14-50ms to 350-600ms while performing the same exact requests, but using the different frameworks.

I can't say the automagic of loopback impresses me. 

Today we've taken a lot of lessons from Hapi, especially building features into an Express framework that work like Hapi. We even use Joi to validate before our primary application performs logic. We found that Express really works best for us, and with some tweaks can have the same config first ideology that Hapi has.As the others have suggested, hapi is more manual and loopback is more magical. If you already have a set database schema, loopback is really nice for removing a lot of the work to interact with the database. But if you are at all unsure, or expect it to need to change, hapi gives you more flexibility. Personally, I prefer the more manual approach, if only to know exactly what the system is doing.hapi is very good, and not opinionated.  loopback has the same insane opinions as express.

easy choice for me.We've built our API using Apigee a127 (https://github.com/apigee-127/a127-documentation/wiki) and it's served us well.  It has some of the magic of loopback but not to much.  We write a ""Document First API"" with swagger and a127. Here is a blog post I wrote about our process: http://appirio.com/category/tech-blog/2014/10/writing-documentation-first-api

You can see our code here: https://github.com/appirio-tech/lc1-challenge-service.  We are working on abstracting out the node modules.
"
2015-01-27 17:34:47;ActiveMQ RESTful API;"So, this is my Python Celery module for node which connects to RabbitMQ -- there's a few bugs, and I've been meaning to rewrite it...however, you might find some inspiration.

https://www.npmjs.com/package/celeryjsWebsockets seem like a good tool to solve this.I'm not quite sure what you're trying to do but usually you want your queue to fill up with messages that your webserver doesn't have capacity to process. You then pop messages off the queue and process them when the resources become available. "
2015-01-27 15:22:11;require on client side (node module gives a dep error);"You need to list jQuery as a dependency for i18next, as it is trying to set itself as a jQuery plugin on the browser side.I don't think i18next is commonjs compatible, which is a requirement for browserify.It seems it's needed to disable jQuery.

Added a config to i18n init (in docs: http://i18next.com/pages/doc_jquery.html)

    setJqueryExt: false

Now I have this config and no errors

    app.use(i18n.handle);

    i18n.init({
        cookieName: 'lang',
        fallbackLng: 'en',
        debug: 'true',
        setJqueryExt: false
    });
"
2015-02-03 20:59:49;Need some advice on picking the right database for timestamped event data.;"If you're looking for a fixed size database you probably want [RRD](http://oss.oetiker.ch/rrdtool/) which automatically compacts and smooths old data.

If you want to keep all data and handle things yourself you could use [leveldb](http://leveldb.org/) which is what InfluxDB uses on the backend."
2015-02-03 19:05:11;An introduction to NoFlo and flow-based programming;"Aren't visual flows for ETL processes quite common? Talend, RapidMiner, Yahoo-Pipes etc.

I think visual programming can work well for processes where you've got a single flow transforming data, but can it be used to write a game? A REST API? A browser?This feels like you could take the concepts of flow based programming and apply them to promises. "
2015-02-03 19:00:02;Need help, node-monkey has stopped working D:;
2015-02-03 18:38:04;Ever wanted to list out the full dependency tree of an NPM package without installing? Here's a bash function to do that.;Updated to better deal with revision ranges.  Assumes latest one available is used.
2015-02-03 18:22:43;Made with Node - The Wall of Rock;Cool!  Can you tell us in a little more detail what's going on?  Looks like you have air-guitaring, and then you're projecting it on the pyramid wall?Awesome to see artistic/event applications of node!
2015-02-10 21:43:36;Nodejitsu bought by GoDaddy;"Yeah, I would have a hard time thinking of a more toxic brand to associate with than GoDaddy.fuck Fuck FUCK **FUCK**.good bye nodejitsu.And so begins a harried rash of cancellations and hosting migrations.Good night sweet princeMight suck if you're a customer of theirs, but otherwise this seems like good news:

> All of Nodejitsu’s private npm registry product will be released as Open Source software as soon as it is ready.Yuck...might else well also host their servers in North Korea while they're at it.In other words, GoDaddy seems to have hired a bunch of Nodejs developers/DevOps/Admins since they seem to not be interested in either their existing customer base, or the existing revenue stream from them or the software that they have developed inhouse ( private npms )

Hopefully the folks at nodejitsu made some money out of the deal.
Guess there were too much prussure from VC's ( or other  stakeholders to make some money fast )

Sucks to be a customer though.$$$$$$$$$I checked the domain and SSL cert 3 times. I was pretty convinced it must be a joke.Glad they no longer host/control the npm registry data.Hahahahahahaaaaa!!never had a justifiable need for nodejitsu, definitely don't know.Maybe GoDaddy sees it as  acquisition to fight SquareSpace.Having some insight into the Website Builder product at Go Daddy... have fun with that.The Nodejitsu and GoDaddy deal will cause some troubles for the PaaS users, that why we thought we might help and offer an easy guide to help you migrate your services go.c66.me/1ygYjfm."
2015-02-10 20:58:12;Microsoft Joins Industry in Move to Create Node.js Foundation;"Microsoft has historically held Javascript back, tormented Web Developers with IE, and made the language generally undebugable with its browser till recently.

This does not bode well."
2015-02-10 20:19:23;MEAN.JS - How to 'lazy load' a database connection once a user event has been triggered.;"I just have a separate module that establishes a connection, and I require it in my main app.js file. I also have an event listener bound to Mongoose's disconnect() event that logs the error and does a process.exit(1);

I do this because there's no point in the application running if the DB is down. I'd rather have Ops look into the issue than have the app up just throwing errors left, right and center.

I'm curious why you're trying to lazy load a connection, though."
2015-02-10 17:35:27;HapiGER is an open source, scalable easy to use recommender system written using node;
2015-02-10 16:56:09;io.js and a node.js Foundation;[deleted]Good, positive steps. Hopefully they can convince Joyent to join them and be open.and then on the bottom of that page: http://i.imgur.com/fVzL8gC.png
2015-02-17 00:04:16;NPM Modules w/ the Highest Page Rank;"Just ran across this list of npm modules ranked by Page Rank (using the dependency graph) - produced by Andrei Kashcha (anvaka)... this is really cool!

Not surprising to see underscore, lodash, request, and asynch at the top."
2015-02-16 22:13:23;Sentiment Tagging With AYLIEN;
2015-02-16 21:46:17;Learnyounode too hard. Anything easier?;"The module one is retarded. Ive written back and forth with one of the devs for it and hes an ass. Where specifically were you stuck at and Ill help you. That exercise in particular is bad, just cheat and look at the answer for it. 


Maybe you should just play to learn for a little bit.  test out small, isolated code examples in node to see what they produce then go back to nodeschool? just break those problems down into smaller steps.  I went the codeschool.com route but I don't think it makes a difference.Can you describe how you're stuck? For me, the challenge of that problem was that it's the first one where you can't write the callback function in line, so that was a little bit of a logistical challenge. What I did is I went back to the previous problem and reorganized my answer. Then it was easy to separate the function that does the directory listing work and the function that displays to console into separate files. Looking at examples (I chose to use examples that didn't solve this exact problem, but either way) helps.  "
2015-02-16 21:42:33;Looking to quickly prototype an API;"http://loopback.io/getting-started/Sails has a --no-front-end option when creating projects.Think I found my answer...

https://github.com/sahat/hackathon-starter"
2015-02-16 21:17:15;Node module for uploading to Archive.org?;
2015-02-24 20:06:29;Why I Do Not Support a Node Foundation;"I've been waiting to hear what Eran Hammer had to say about node / iojs and all that. It's an interesting position to take and not one I disagree with.Personally, I disagree with his argument that adding money in the form of a self sustaining foundation must necessarily be evil.

That foundation will be paying their own salaries, of course, but they will also be a driving force for improving and growing Node.js. Without a foundation to do that, it would likely fall on a single company or nobody at all, and I find either of those outcomes to be less attractive.Mobile:

http://hueniverse.com/2015/02/24/why-i-do-not-support-a-node-foundation/"
2015-02-24 17:04:21;University Project ideas in NodeJS;"> I'd like to build the server and core functionality in Node along with Express, Mongo etc.

You might have more success if you decide on a project first and then choose the right tools for the job.

> Any ideas will help!

When I was a student I worked on a team to build an online course registration system as part of a software engineering course. It's got lots of data (course descriptions, etc), authentication with various access levels (students, professors, registrar, etc), concurrency challenges (ensuring you don't overbook a class, ensuring 2 professors editing a course description don't overwrite each other's changes, etc), constraints (course pre-requisites/co-requisites, class size, etc), etc.

Another interesting school related problem is scheduling. Given a list of rooms of various sizes, a list of classes of various sizes, a list of professors, a list of students, and a list of constraints/rules, come up with a schedule. Add constraints to make it more interesting... class A needs a room with a projector, professor B can only teach 2 classes per day, etc.

Yet another school related problem: roommate compatibility. Say there is a dorm that has 50 two person dorm rooms. Give a survey to each of the 100 students about their interests, area of study, study habits, noise level, activity level, etc. Using their responses, pair the students up based on how compatible they are.

One last school related project: a plagiarism detector for source code. The students would submit their work and it would go through the plagiarism detector. The detector could compare call graphs, parse trees, and use other heuristics (counts of each type of statement, variable names, etc) to determine if the assignment is similar to a previously submitted assignment.Are teachers nowdays giving higher grades to unusual projects rather than projects that are well executed? "
2015-02-24 16:50:13;Packaging node modules for cross system deployment problem;Are you running the same version of Node on both machines?
2015-02-24 16:47:39;Is there an easy, synchronous way to read .csv files into multidimensional arrays in node.js or io.js?;"Belay my request please! I think I'm all set. Here is what I've programmed:

    var fs = require('fs');
    
    var people = [];
    var fileContents = fs.readFileSync('data.csv');
    var lines = fileContents.toString().split('\n');
    
    for (var i = 0; i < lines.length; i++) {
    	people.push(lines[i].toString().split(','));
    }
    
    for (var i = 0; i < lines.length; i++) {
    	for (var j = 0; j < 3; j++) {
    		console.log(people[i][j]);
    	}
    	console.log('\n');
    }"
2015-02-24 15:35:26;Keymetrics/PM2 is officially up and running!;"Very nice tool. Using it for several weeks now, and it became essentiel for usAwesome thanks for your upvotes and your support, we work hard to provide you an awesome product, and it will get much better in the next months! We will also release PM2 in 1.0 with a special feature. Keep updated :)Great news, I'm going to check this out right away !Awesome!I like it when it works. However it's been slowing down drastically for me lately. `pm2 status` will take minutes to respond. With `DEBUG=* pm2 status` it hangs at this point:

      pm2:constants PM2_ROOT_PATH: /home/web/.pm2 +0ms
      pm2:satan [PING PM2] Trying to connect to server +187ms
      axon:sock connect attempt null:/home/web/.pm2/rpc.sock +0ms
      axon:sock connect +9ms
      axon:sock add socket 0 +1ms
      axon:queue flush 0 messages +2ms
      axon:sock closing +1ms
      axon:sock closing 1 connections +0ms
      pm2:satan Daemon alive +19ms
      axon:sock remove socket 0 +1ms
      pm2:satan Launching RPC client on port /home/web/.pm2/rpc.sock undefined +1ms
      axon:sock connect attempt null:/home/web/.pm2/rpc.sock +2ms
      axon:sock connect +1ms
      axon:sock add socket 0 +0ms
      axon:queue flush 0 messages +0ms
      pm2:satan Connected to Daemon +2ms
      pm2:cli Got message from Satan as succesfully connected to PM2, now parsing arguments +5ms
      pm2:satan Calling daemon method pm2:getVersion +1ms

I also just tried signing up for the metrics component. The `pm2 interact` command seemed to work, but the URL it gave me just shows an nginx landing page and my dashboard isn't updating. I love this tool :)Super nice for basic monitoring!"
2015-03-03 22:24:15;Node.js books, which one are up to date?;"I'm reading a good book on the MEAN stack: ""Node.js, MongoDB, and AngularJS Web Development"" 

Granted, it teaches Angular, and not React, but the first 400 pages goes from Node, to MongoDB, to Mongoose, and finally to Express.

""Practical Node.js: Building Real-World Scalable Web Apps"" seems good as well.The best book in my opinion is ""Node.js the right way""I'm acquaintances with David so I always promote his book, The Node Cookbook, second edition. It's actually a pretty solid read. Sorry for not linking it as I'm on mobile.I wasn't able to find any books I really liked. What helped me the most were courses on Linda.com. The majority of their Node courses go right into using Node and Express to build websites which got me on my feet and actually creating things very quickly.Personally I cant recommend any from what I have seen. Some solid general JS books/sites that ignore the DOM for the monster it is and focus on design/programming theory like http://jstherightway.org/ and the http://nodejs.org/api/ as working examples of each module you should try."
2015-03-03 15:00:39;Javascript (Node.js) module performance;"Cool! It'd be interesting if you did version 1 w/ a shared yo function outside the constructor. To see if there's any difference between the prototypical way to make a class vs a create method....or you could just, you know, write the code that is semantically correct for the task at hand until you actually find the way your functions are called to be the bottleneck. E.g. the benchmark assumes that every call to `yo` creates a new ""instance"" of the module. If the module is created once at startup and then `yo` gets called a lot, it might look completely different."
2015-03-03 11:47:23;acl-magic module: a new approach for ACL systems;Please comment if you like or dislike the concepts, approach, implementation. Thank you!
2015-03-03 02:32:08;What are the best practices for running node.js and nginx on an AWS ec2 instance?;"I use /opt. /srv would also be fine. /home is pretty gross

You should create a new user. It should be a member of it's own group. Permissions depend on the directory/file, but generally as locked down as you can get away with.

Not nearly enough information to debug your specific issue with nginx. You may be able to dig yourself out by going here and reading, specifically the entry on directory permissions

http://www.grymoire.com/Unix/Permissions.htmlYou can do this with Elastic Beanstalk, it provides built in nginx load balancing a feast deployment via git.For nginx, turn on debug logging. This will give you more information than you'll ever need: http://nginx.org/en/docs/debugging_log.htmlSomething like this maybe:

     sudo groupadd myweb
     sudo usermod -G myweb nginx
     sudo usermod -G myweb ec2-user
     sudo chgrp -R myweb /opt/myapp
     sudo chmod -R ug+rx /opt/myapp

Basically create a group, put both users in that group, recursively set group and permission for the user and group owner to read and execute. "
2015-03-03 01:02:03;Treeline – Visual API development;"video tl;dr -- Yeah, um, like, we didn't like the jsdoc format and stuff, so um, like, we re-implemented it with JS object things, or whatever, right?New video up on the home page showing how to make a Magic clone in 10 minutes..."
2015-03-10 22:28:03;Lynda node essential training?;"Which medium do you learn best from?  Have you looked into NodeSchool (in the sidebar,) or anything else that's free?  

I also found the mixu book useful when I was starting Node, there may be other good free books by now. http://book.mixu.net/node/ 

There is also a tutorials section in here https://github.com/sindresorhus/awesome-nodejsReally depends on your starting point - beginner/experienced programmer and/or know nothing about node/know something about what node is. And also depends on your desired end-point - do you want to become a back-end developer, front-end developer or both. 

I know when I started, my JavaScript wasn't up to the level of my other programming languages - so the syntax and logic appeared funky - so if you don't have a background in JS, then consider doing a course on that first.

I started at youtube, then took a Udemy course - but to be honest the second-best learning experience was via  mini-projects (e.g., chat app, express REST app, dB integration, ...). The best learning experience is a full-on project :)

I think the Lynda course is a pretty good start, looking at the contents, but you have to sign up for a monthly subscription. Might be good if you follow that up with other Lynda courses - but for one course, I'm not sure it's worth it.

I found this video a good start to understand the purpose and basics of node: https://www.youtube.com/watch?v=L0pjVcIsU6A.

I use the node/express/angular sites, Apress publications (Node, Angular, Express) and StackOverflow as places to get answers for the tougher questions now."
2015-03-10 22:25:49;Personal Search built on Node.js comming along nicely: Information model;
2015-03-10 19:19:25;Tiny Upstart script to keep a Node process alive;Seriously wish I saw this 3 weeks ago. I wanted something even simpler then this, I didn't need to keep my app alive, just run it once a day. All the examples cover these complex scenarios that made me have to pick through all the bloat.This is the same approach described in the Node.JS in action book (http://www.amazon.com/Node-js-Action-Mike-Cantelon/dp/1617290572)
2015-03-10 18:35:38;What would you suggest for a Node website host?;"[deleted]I'm a big fan of Digital Ocean - just finished a migration to them, and it's incredibly snappy. SSD drives everywhere, reliable network, excellent web tools, and well documented. Plus they're quite cheap.I'd stick with Heroku unless you're having problems with it. I've never seen anything wrong with it apart from the price goes up quite quickly once you start adding in Mongo and your own domain and other niceties.Like others have mentioned, Heroku can get quite expensive quickly.  

I tried OpenShift, and unfortunately their instances were limited to 16 (!) concurrent sessions by default.  I don't know enough about hosting/configurations to change that, but neither did their support, so I gave up.

I would recommend modulus.io for managed PaaS node hosting.  They have decent pricing (pay only for what you use), flexible scaling rules, several choices for cloud locations (Amazon, Joyent, Digital Ocean), realtime metrics for all your cloud instances, their own MongoDB service, and probably some other good stuff I'm missing.  Also a $15 free trial which for a small site is about a free month.  Modulus currently does not allow git repo deployment, like Heroku, but instead has a command-line tool you can use to deploy the current working directory.I used webfaction and it worked very good for meDoes anyone have an opinion of hosting at Joyent?I have no complaints about Rackspace.  Chose them years ago simply because Amazon was so damned difficult to get any info about.  Been running solid ever since.I use Windows Azure, which works quite well assuming you are using their websites rather than virtual machines.They start at free, bit end up at about 10-15/month when your trial is up. If you know someone with an MSDN, they have credit towards it that you can leverage.Ultimately, not the cheapest option (like Heroku) but really good from my experience."
2015-03-10 17:16:19;Mikeal Rogers brief statement on the future of io.js and Node;[deleted]
2015-03-17 21:06:19;Site linked on reddit front page shows how NOT to leverage node for scale (hint: openSync);"openSync wouldn't matter in that case. It's just too many file handles open at once for the server itself. ulimit changes would help, likely.Not to mention showing errors in production and apparently running as root.It's even better than that. You think that the person who developed that used openSync, but you're actually incorrect. I found this game a few months back while working on a project: https://github.com/mde/ejs/blob/ca16ee9bb671dfeb935d7831114f7a2c6b792b82/lib/ejs.js#L145

readFileSync is used to load all templates by EJS. 

edit: clarificationCan someone explain what is happening here? I have no experience with this issue, and hope to keep it that way.Remember to set `view cache` on, and also have a proper error handler in express!production errors. newbs."
2015-03-17 19:23:53;workers in iojs: initial implementation;how does this differ from cluster?
2015-03-17 17:50:56;Best framework for an api server?;"i use express + jwt.I use hapi.js for a framework in general, and it does tons of great stuff easily.If you specifically want an API, then you should have a look at [actionhero.js](http://www.actionherojs.com/). It's only purpose is to act as an API server, and includes a tonne of cool features:

* Scheduled tasks
* Task queuing
* Websocket/HTTP connection for every endpoint with no extra configLoopback.js[Sails.js](http://sailsjs.org/#!/)Restify

All the stuff you need for an API, none of the stuff you don't (no templating, etc).

Advantage of being so focused is that you get handy testing tools, dtrace integration, etc.I don't have any 'real world' experience of implementing it yet, but I've been using restify and restify-oauth2 in a personal project recently and have found it very easy to use.Dietjs.comI think it's safe to say there are plenty of tutorials out there for how to accomplish what you are doing. In my experience it's almost difficult to find how to do something in node the moment you step outside of REST servers.

The difficult part is getting someone to agree on what framework to use. Wait 15 minutes and a new one might be released. It's best to grab one and start making code."
2015-03-17 15:02:12;A Laravel inspired simple NodeJs configuration loader and manager which can load configuration values based on the development environment.;"Hey, this was exactly what I was looking for! But after a quick search in npmjs.com I found this:

https://www.npmjs.com/package/config

Looks pretty much the same to me! How do you compare it?

Also, what's the best way to integrate it to an Express app (considering dev & prod enviroments)?What's the difference in this and something like convict?"
2015-03-17 14:03:14;How to debug node.js addons in Visual Studio;
2015-03-24 20:55:07;A 1-1 network pipe that auto discovers other peers using mdns;
2015-03-24 18:22:55;Generating Dynamic pages with Node;"If this is just for a small assignment, you can use jquery Ajax calls, and jquery selectors to insert the result in your page. 

Doing it in pure jquery is fairly lightweight, and it's easily understandable what is going on. It has been shown that it doesn't scale into complex apps well, but if this is just for a proof of concept, it should do nicely. AJAX?Tey using angular.js that is designed to integrate with node so that dynamic content is displayed real time. Have a look at this tutorial on using a mean stack. https://thinkster.io/mean-stack-tutorial/Checkout handlebars or ReactJS server side rendering."
2015-03-24 15:59:47;Node.js Production Checklist;Awesome read. Thanks for posting.
2015-03-24 15:49:29;Getting started with Node.js and Jasmine;
2015-03-24 15:40:13;Playing with PouchDB;"I think pouchdb is the future. Every client (browser) has a local database. Bam, your application works offline and your users have sovereignty and control over their data.

When it's time to tell other users about that data, use replication. You just avoided needing to write any networking code.

It feels very similar to using a backend-as-a-service product. Instead of a complex, proprietary solution it's just a replicating database.I've been looking at this today inside ember-cli. It's definitely the future. Hood.ie for couch/pouch was also interesting, you might want to take a look at that. "
2015-03-31 21:53:17;Non web related node application?;"I use node-webkit to write cross platform desktop software. 
http://nwjs.io/I use node to manipulate midi streams using a modular GUI that allows you to plug pieces of javascript code together. When my system is complete enough for use by others, it's going be suitable for control/manipulation of any kind of real time node streams, such as building the controls for a drones or home automation.I'm apart of a team that used Node to build https://nodecraft.com - The literal only part of that entire project that isn't Node is the customer facing webserver. Our internal API, the network TCP relay, and the game-servers daemon was all built on Node.

I was in a really nasty position when I first got started where I couldn't find a lot of detail on anything but web based tech. atom.io is a good example of a desktop app written in node.popcorn time is built with node-webkitGulp, while not a tool with a GUI, is used a lot.

Atom's been mentioned in another comment but it's the biggest GUI app that's powered by node/iojs that I know of.

I use browserify a lot. It's web related, but it's not a web server.[Johnny-five](https://github.com/rwaldron/johnny-five) lets you control an arduino/another similar device using node.  

Check out [NodeBots](http://nodebots.io/).I am a twitch streamer, and use nodejs to power so many things in the background of my stream. there are bigger streams, and even major competitive event streams that make use of [nodeCG](https://github.com/nodecg/nodecg) 

a video example as to some of what it can do is [here](https://www.youtube.com/watch?v=x9PzBHgN29U)

its pretty powerful. valve and leauge for example will run custom builds of their games during competitive events that spits out certain stats to nodeCG to be displayed on stream.I wrote a crappy IRC bot but it uses Express, so disqualified? https://github.com/neckro/OCTOTROG

(gonna split it into an NPM module real soon now...)I wrote a node module to read the ID3 tags from mp3s. It uses nothing but buffers and the ID3 tag structure to get the tags.

https://www.npmjs.com/package/id3_readerI write all my micro services in node these days - typically these are consuming messages from rabbitmq or exposing some sort of API / webhook interface that the upstream services consume"
2015-03-31 16:20:46;Why does repeat get returned to trampoline as a function in this code?;"Could you provide a complete working example?If you're not getting it, maybe another explanation will help?

https://leanpub.com/javascript-allonge/read#trampolining[This example](http://jsbin.com/navijayeje/1/edit?js,console) should show you that what you've written isn't actually looping through the thunk call part of the trampoline function. I've also given an example of what the true repeat would look like. Let me know if you have any questions."
2015-03-31 13:13:53;Functional UI and Components as Higher Order Functions;
2015-03-31 07:58:08;why I love using nvm;"[deleted]Out of habit I always type 'node'. WIth nvm I can switch seemlessly between io.js and node.js :)`bash: syntax error near unexpected token ':)'`How do you install node? Oh, nvm.How does in compares to ""n""?How'd ya make the gif? :)Great way to communicate this!NVM actually does other stuff that is REALLY COOL when you compare it to say Gems.   
    
That's how it resolves problems. Gems basically says ""I can't resolve this reference to your package/version, so I'm going to change the version of other stuff"". NVM does not.Do we consider this evolution?I don't use nvm because fish shell conflicts, but you can achieve the same result with homebrew http://i.imgur.com/8KlQuFq.gifvAnyone using [nave](https://www.npmjs.com/package/nave)?  I hear it's like nvm but without writing to your `$PATH`.Make io.js the default globally by symlink.

    sudo ln -s /usr/bin/iojs /usr/bin/nodeI'm surprised more people don't use ndenv"
2015-03-31 06:40:59;Made a tutorial on building a pure Node static server to help just learn Node.js in general. Would love to hear a little feedback, since I haven't written much in terms of blogs. :);"hey nice to see another MakerSquare student. Currently attending in Austin..Aiyyeee the link broke because I moved the blog to a /blog.  Here's a new link:
http://blanketwarriors.com/blog/2015/03/26/nodestaticserver/"
2015-04-07 23:14:04;how to make a web request using node.js that gets the response headers only, not the response body?;"Instead of sensing a GET  request to the webserver send a HEAD request.

http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.htmlI'd use axios although any http client will do. https://www.npmjs.com/package/axios

Specifically you're looking for the axios.head method.Use 'HEAD' for the 'method' key in the options object of this method https://nodejs.org/api/http.html#http_http_request_options_callback"
2015-04-07 21:41:37;Today I got from opening nodejs.org for the first time, to this!;"What is this?/r/titlegore 

But I totally agree. I'm still pretty new, but I was very recently in the same boat as you. Good luck on your Node journey! You can PM me if you have any questions and I can try to answer them.Well done! Keep doing those challenges, they are great :)

And yes, node.js is awesome.Congrats!"
2015-04-07 21:24:57;How to secure a (currently) private rest api?;"Okay, obvious points:

1. You should be using SSL
2. Clients need to send *some* token along with each request in order to authenticate themselves.

You can do a standard login (ie, send a username and a password), get a cookie back (ie, a signed token), then include the cookie with any future API requests, yes.  Works fine, maybe a little awkward and not very ""REST-like"", but no big deal.  It's probably the most widely adopted approach.

Or you can use a JWT (ie, a *cool* signed token) instead of a cookie (ie, a *boring* signed token), which is more hip, and *might* be easier to implement with your stack, but is really the exact same thing; you send the server a username and password, it sends you a signed token, and you include the token in future requests.  Main difference is the name of the header you use to send the token to the server.  :)

Or you could just send a username and password with every request (or your ""access key"" and your ""secret key"", if you wanna be all Amazon about it), but that's a bad idea, don't do that.

My view is, if you can easily implement a standard cookie/session approach and it works for you, then do that.  Browsers, CURL, most libraries already support cookies, it's really standard, it works fine.  If your setup doesn't work (because, eg, you really want the login server to be on a completely different domain than the API server for some reason, or you've got CORS issues you can't easily fix), then sure, go with JWT.  Might be a little harder to implement, but it's more flexible.use json web token.  theres a few npm packagesUse https://www.startssl.com/?app=1 for a free SSL certificate!Try http://www.cloudflare.com/ 

You get a free SSL cert, which seems a tad unbelievable but it really works, and it works very well.Thanks guys for all the wonderful input here that just sort of made me look harder into a couple things.Basic auth over https would probably do. 
Also check out passport.js for lots of strategys and tips.hey dude, if you're using expressjs which I guess you might be, that has session middleware that you can plug in, you can then use the familiar patterns you know from your php/mysql

edit: check this out https://github.com/expressjs/sessionIf you want to be really secure, you can set up the api server to act as a certificate authority, and have it issue client certificates for the apps/devices connecting, then instruct it to decline all other connections that aren't accompanied by a certificate issued by the app server.  It's a bit of a pain to get it all set up, but it will provide you with great security. SSL client certificates should be quite easy to implement. I don't know why people are not using this method. You can use **ssl_client_certificate** option in nginx and there will be nothing to implement in your node server. (check **curl -E** to test it)"
2015-04-07 19:04:22;Monkey-patching `request` to output NPM-style coloured logs;
2015-04-07 15:27:27;A comprehensive guide to moving from SQL to RethinkDB;
2015-04-14 17:34:30;When a noob requires jQuery in your backend code.;"It is actually possible to use jQuery in the backend and there are plenty use cases for doing so. It would be a different story if ""noob"" wants to require it for DOM manipulation.lol wut"
2015-04-14 17:11:10;How do you handle camelCase and HTML forms?;"You need to be more clear on what your trying to ask us.  All I can help you with is, you can use .toLowerCase() or .toUpperCase().  Please re-write your question.Html may not be case sensitive, but it does not then follow that it strips out cases (how else, other than through HTML, is this comment, which contains UPPERCASE characters, be represented in HTML?) 

Furthermore, it does not follow further that the browser be blind to case.

Did you try yourself?"
2015-04-14 16:21:10;Oh, the horror!;"[async](https://github.com/caolan/async)Hey look, JavaScript is the new lisp :)))))There are better ways, I Promise!Promises are for noobs, m8.function chaining keeps this from happening. :)Seagulls.So many bad jokes about flights of stairs...That's why I don't use anonymous functions for callbacks. Oh, god.you are doing it wrong.

Just an FYI, V8 can not optimise anonymous methods. So doing that is bad for multiple reasons.../r/shittyprogramming and /r/programminghorror /r/ProgrammerHumorI've seen people in University write code like that. Except it took up the entire ~50 line display. And it was C. I hope the docs include a sincere apology.can you say cyclomatic complexity?Many people would suggest async or similar packages. I personally don't see the callback nature of nodejs as a limitation that we need to work around. It's actually a strength in that it forces you to structure your code into small computational units and to constantly refactor your code base."
2015-04-14 16:06:45;Easily secure your Express app against HTTP Parameter Pollution attacks;Are there any cases in which this has been an avenue of attack?very useful
2015-04-14 15:26:07;What ops platform do you use for Node?;"I just use keymetrics but I just use one small server and its free and I like it lots :D
edit: obviously, cost is not a factor :( I fit the dev plan for any package.Update: I've checked out both keymetrics and newrelic and they're both pretty good. While they're both really easy to setup, newrelic gets you to the data you probably want to see faster. Keymetrics is much more configurable. As a heads up, both are hosted solutions. There seems to be room for another product/package that is easy to install, can be local, and free (open source)."
2015-04-21 17:58:45;Why shouldn't I use syncho + Express to make async continuations easy?;Koa + ES6 generators will probably see more adoption and longevity since that solution doesn't require binary add-ons to node, just a version that  supports generators.
2015-04-21 16:18:17;Killing Windows Tasks from the Command Line;
2015-04-21 16:08:05;Node Needs an Abstraction Layer for JavaScript Engines;"I'm not at all convinced that is a good thing. I think NAN is an unfortunately necessary evil, but evil nonetheless.

 * I've seen a bunch of threads where the V8 and Node.js / IO.js teams have worked very closely together, reinforcing for me that there's a very clean API separation between V8 and the rest of Chrome.

 * In similar vein, parts of Node are performance optimized specifically for running on V8. Maybe this is not a huge deal, but you want to ship with a single recommended engine. So you're doing all this heavy lifting to likely only have the extra supported engines marked as second-grade or even experimental.

 * Abstractions complicate things. This one in particular adds very little in my opinion, for a very large amount of work.

 * This will break current extensions again, whereas the current situation is largely the old non-isolate and new isolate-aware V8 APIs. The former is very quickly dying. (Only there to support Node <0.12)

 * Building an abstraction will indeed increase flexibility on the JS side, and perhaps allow experimenting with new JS language features. But it will *decrease* flexibility on the C++ side, because we have to find the lowest common denominator between a set of JS engines we want to support.

 * NAN has had its own API breakages in the past. So I'm not even convinced we can bridge another big API overhaul in V8 with it, if there ever was another. NAN just patches the current situation for people who want to support legacy Node versions, but if another V8 API overhaul were to happen, it would likely still require work from every module author just the same.I thought they were already doing this with [nan.](https://github.com/iojs/nan)I completely agree. Node would be well off to isolate the upstream calls into an abstraction within their code.  It makes it an order of magnitude easier to switch out modules and keep behavior consistent.

My major beef with node, isn't actually with node, its with V8.  They keep swapping their public API's, and sometimes not changing them but changing the meaning of them (e.g., persistent).   This causes so many headaches downstream.To make things a bit clear, here is a piece of Macro documentation on JXcore's wrapper [is here](https://github.com/jxcore/jxcore/blob/master/doc/native/Macro_Type_System.md)

Perhaps a stable native interface would help to module developers. 

Node.JS needs a core which is independent from an underlying JavaScript engine. Imagine a language framework that has no control over it's compiler. No-body knows for sure how things will be breaking with the next ABI or design update with V8. I'm not blaming them because they are updating their design etc. to make V8 even faster. But if you involve compiler into core this much, you end up breaking again and again. Node needs an abstraction to make it's core modules independent from an underlying engine breakage. 

JXcore's abstraction is not different than V8's separately optimized codes for each CPU archs. Every engine is handled on their own block separately. This sort of abstraction is a normal thing when it comes to node.js big software projects. 

The javascript engine abstraction layers for JXCore and NAN for Node/iojs rely heavily on macros. Although macros work, they are not easy to debug and can lead to very obscure compile errors for developers. Macro based approaches also have the problem of requiring recompilation for each javascript engine upgrade. In an ideal world the javascript abstraction layer should be a thin C++ API. This would allow for binary compatible native node modules that are javascript engine agnostic, as well as pluggable loadable javascript engines at runtime. Such a strategy would allow for simpler migration to other javascript engines like duktape and MuJS."
2015-04-21 15:09:14;Creating PDF's in NodeJS;"Creating PDF's what? 

Seriously, though, I wonder how much of [jsPDF](https://parall.ax/products/jspdf) made it into pdfkitThat was the most half-assed article. You probably could have fit the whole thing in the title of this post."
2015-04-21 14:54:40;npm-tree - Type the exact name of a npm-package and click 'treeify' to get a tree of the module dependencies - bear in mind that this is real slow, as it's scraping (using YQL) the npm-site;"[deleted]My module `npm-dep-chain` can be used for exactly this purpose. You can find a complete tree (recursive) example here: https://github.com/alessioalex/npm-dep-chain/blob/master/examples/ls-tree.js

It's really similar to the `npm ls` command and prints the versions too. Try it out :)No need to scrape the npm website. You can access a public mirror of the registry at https://skimdb.npmjs.com/registry ([here](https://skimdb.npmjs.com/registry/express) is all the info for the express package). Read about it [here](https://docs.npmjs.com/misc/registry).

"
2015-04-28 16:50:59;How to correctly unit test Express server;"These are functional tests, not unit tests. Also given the asynchronous nature of node - building a new server for every request test seems like total overkill, unless you're doing some crazy internal stateful stuff outside of DB/API connections.Hm, is this really the correct way?
Express apps (since 4.0 at least) usually have app.listen() in /bin/www instead of app.js
so require(""app.js"") doesn't start the server and one can pass it into supertest:


var app = require(""app.js"");

var request = require(""supertest"")(app);"
2015-04-28 14:33:18;A NodeJS package to build feeds with getstream.io;"Disclaimer: I am one of the authors of the package and one of the co-founder of GetStream.io

Any feedback on how we integrated getstream.io with NodeJS (and Mongoose for now) is much appreciated!"
2015-04-28 13:34:30;npm API docs on DevDocs (instant search + offline mode);
2015-04-28 08:42:19;Automatic Cache Busting for Your CSS using AST;
2015-04-28 08:26:29;Chnode — Change Node versions in your shell session. Now with smarter matching!;Uhhh, nvm doesn't compile anymore iirc.nvm allows for different versions of Node in different shells. Not sure if it was always like that, but I definitely use it that way now.
2015-05-05 23:14:37;can I make web app that uses both Rails and Node.js;"Yes, but don't. Build the whole thing with node (or rails... but I prefer node)You could build an API in rails, and your chat in node (with something like socket.io)What you're describing is a Service Oriented Architecture. Reading up about those would be a good place to start.I'd just go with node. You can do session sharing between express (serve the page) and socket-io (realtime communication), which might come in handy in the future. Plus SSL from my experience is easier over a single port (hopefully 8080) for all requests.

Express is just as good at serving your pages as rails.

Disclaimer: I used rails for a year and absolutely hated it.I can't think of any articles or books as I've learned a lot of it in practice. I agree with other commenters that having a design in mind is key. 

Example:

User lands on front end html pages hosted by Nginx. 
The user is logged in using an API provided by a rails authentication service. 
Then they are connected to a node/express/socket.io chat application. 

It is usually more complicated than making a single monolithic application. But the benefit of breaking it into smaller pieces is service reuse, scalability and service availability (if they are well designed). Smaller apps are also easier to maintain, test and deploy. 
Have you heard of [Sails](http://sailsjs.org/#!/)? 

> Sails makes it easy to build custom, enterprise-grade Node.js apps. It is designed to emulate the familiar MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with a scalable, service-oriented architecture. It's especially good for building chat, realtime dashboards, or multiplayer games; but you can use it for any web application project - top to bottom.
Of course it is "
2015-05-05 22:02:39;new JSON Perturbance Engine;
2015-05-05 21:53:00;"[Learning] was there ""one thing"" that kinda brought it together for you when learning node?";"If that is truly your concern, I would suggest application driven learning. Just try and make something using node, even if it is something you have done in the past. Be it a calculator, a web scraper...anything. Node is very versatile, and I think the clicking moment for me was creating something as stupid simple as outputting the Fibonacci sequence in triangle format programmatically. It can be anything, but the first step is usually ""now let's make something with it"", and that seems to be where you are at...so make something my friend :)[deleted]Learning more about streaming did it for me.  I'm a shell scripter at heart and to know you can compose functionality in the same way was pretty exciting.  That said, I don't use streaming too too much, yet.  But going through the material...especially the streaming adventure... helped firm up many of the more basic node-isms in my mind.

Oh and running through the Nodeup! episodes really helped me understand some of the less obvious tidbits and what motivates them.

As far as how to learn, I agree that just setting out to build something and slowly following through is a great way to start.  Even if it's not a full stack app, taking a component of an existing app and converting to node will sort of force you to learn some of the core concepts and perhaps even some useful modules.For me it was the [async library](https://github.com/caolan/async).

It's not just the concept of asynchronous programming. I've had plenty of experience with other languages' mechanisms.. but I can say that the async library vastly distilled my understanding into concrete building blocks which were much more digestible.

It was one part having **clear, concise documentation** and one part **simple-but-no-simpler-than-needed object model** that did it for me.Very astute awareness of yourself, that in and of itself is something to be proud of. That being said.... If you need a challenge of something not yet exhibited in the node atmosphere, I can provide that. I guess what I am asking is what do you really want out of this post? I am willing to help and provide knowledge as needed, as a professional software engineer currently working for a big name company I am not at liberty to disclose, but I am able to reveal that they are a node JavaScript house primarily, and I make in the six digits for what I do. "
2015-05-05 18:15:37;Creating Custom Error Objects In Node.js With Error.captureStackTrace();
2015-05-05 17:58:22;Useful resources for building desktop apps with Electron (atom-shell);
2015-05-12 20:57:30;Any Node-Red users? Help with button function;"Check out this page: http://nodered.org/docs/writing-functions.html

The bit you're interested in is the context section, as the context is where you store state information for your nodes. Initialize the variable like in the example, then set the state just like in your code, except you'll use context.state. To send a message out, you'll need to set the msg.payload, then return msg, which is also explained in that tutorial I linked to."
2015-05-12 20:21:25;Temporary fork enables Node.js to optionally use the Chakra JavaScript engine;"I know it isn't appropriate, but I might have just came.Good. This could lead to some cool options for node developers. Microsoft has been proven numerous times in court to use anticompetitive practices.  Their embrace, extend, extinguish policy is well documented.

This company is not interested in progressing technology, only its own monopolies.

I know for a fact that Microsoft paid a 'security firm' to make a Hollywood-style fake con-job 'security breach demo' claiming WebGL had allowed their 'security researcher' to steal user data.  This completely bogus 'demo' was cited by Microsoft shills anonymously editing the WebGL Wikipedia article from IP addresses near MS headquarters making ludicrous claims about WebGL security issues.

"
2015-05-12 20:12:53;Newbie Question About Socket.IO;"Your question basically comes down to `socket.emit` vs `io.emit`

`socket.emit` will send that event and message to *only* that socket.

`io.emit` will send that event and message to *every* socket connected.

So in the example code you posted socket.emit will echo the message back to the same socket connection every time it sends something. This is commonly referred to as an echo server.

In your io.emit example whenever *any* socket sends a message you emit that message to *every* socket connected. This is more akin to a chat room, where clients send messages to the server and the server sends them to all the clients."
2015-05-12 19:24:21;Bringing Node.js to Windows 10 IoT Core;"Getting Node.js to run on Chakra (IE/Edge/Windows' JavaScript engine) is a good sign IMO.While I have no doubt that V8 is a rich, well-engineered virtual environment; I've been waiting for MS to finally make some moves into getting Node.js working ""natively"" on Windows.Chakra and V8 have been trading blows in the last few years for performance. Getting good performance out of low powered hardware seems to be something Microsoft has a knack for (see Windows Phone/Windows Store apps on ARM/Atom tablets) If you're already comfortable with Node.js on Windows and targeting the Raspberry Pi 2 (as niche as that may be) this is really good news!Wow. This is great news for node developers. Our skills just doubled in use cases. Node.js to develop native Windows applications? Who would have though.This seems sorta evil but w.e., I like that that barrier is removed.

> the Chakra JavaScript engine, which is part of the OS on Windows 10 and has been optimized to run efficiently on WoA devices since its inception. 

This point seems odd, does that mean we are programming on the level of C# as far as malleability? We can already get into the windows system pretty well via documented DLLs.

https://msdn.microsoft.com/en-us/library/windows/apps/br211377.aspx 

Im not being negative I think it is cool our skills are becoming more valuable it just strikes me as odd."
2015-05-12 18:16:11;My first website(tool) - need feedback;"Simply regarding responsiveness and other UI issues - firstly, text inputs and drop downs don't seem to have bootstrap styling. The menu on mobile ( blue box with ""hamburger"" icon) sits over the logo on some pages. Some spacing issues between labels and inputs.
"
2015-05-19 22:26:58;@spy decorator: inspired by SinonJS and powered by ES7 decorators;
2015-05-19 20:01:39;"My take on a small, functional node.js cli app; the type annotations are stolen from haskell";[deleted]
2015-05-19 16:48:17;(noob question) - Does Node replace something like WAMP or XAMPP?;"Node itself act as a webserver and server code execution engine, but WAMP is a full stack with Database, Server code engine (PHP), Apache as webserver and a DB administration tool (phpMyAdmin).

Look at the [MEAN](http://mean.io/#!/) stack to find something similar to WAMP in the node way.It isn't really common practice to run Node on port 80.  Typically, people will run Node on 8000 or something, and have an HTTP server like Nginx running on 80 to proxy to Node on 8000.  That's because Nginx runs at a system level and Node runs at a user level and thus does not have access to port 80.

That aside, NodeJS, while capable of doing most of what WAMP or XAMPP does, is *not* a drop in replacement.  NodeJS is a development platform built on top of Chrome's V8 JS engine.  Most obviously, there is not a database included in Node.  Additionally, Node doesn't just work as a webserver out of the box.  You can, however, *write* a webserver with Node.

I also want to mention that a MEAN stack is still not going to replace WAMP/XAMPP.  XAMPP is a self encapsulated, prebuilt container for an out of the box webstack.  NodeJS is more just like a piece of what could be a stack.The most common reason people run MAMP/WAMP is to run php and mysql. If you aren't running php, then there's no good reason to use it. Even if you are, nginx w/ php5-fpm is a better stack in my opinion anyways.

For node in production, you're going to want nginx listening on port 80 and passing (reverse proxying) the requests to node on port 3000 whichever port you want to use. In dev, you can just access node directly at port 3000 or create a host file record to direct myapp.local or whatever to that port. Yes. Node is it's own web server and more. With Node, you don't need to use WAMP, Apache, nginx, etc... at least for development.

Keep in mind stuff like WAMP typically also include databases, etc. So if you need a database then continue to also use WAMP (or run your own database independently).

In a real world production server though, you will want to use a combination of NodeJS and also something like nginx as a proxy for NodeJS's server. This is because you can have multiple NodeJS servers running at the same time, each using a different port of your choosing. Using nginx's as a proxy allows you to map each incoming domain request to the proper NodeJS servers.you can run a web server with Node, but WAMP is more than just a web server.  they are best used together.To replace WAMP/MAMP you'll want to look into Vagrant. "
2015-05-19 15:41:54;ramda-cli, a jq-like tool for processing JSON with functional pipelines;Dope.
2015-05-19 15:20:57;How to handle redirects in Express application with Reverse Proxy;
2015-05-26 20:43:40;React-UI-Builder from UMyProto Team is open source now! Really awesome tool for creating UI on ReactJS;
2015-05-26 20:35:08;Simple Styled Logging [Jethro];"Recently rewrote my almost year long project of standardising node logging within my own apps etc.

Jethro aims to make logs pretty and standard, with next to no work from the developer, the way it should be.

I plan to add loads of plugins (Currently supports express and restify) and transports, such as mysql, file logging, for example.

This is my passion project... and something I use every single day, and I feel like it's finally ready to share with the world...

If you have any feedback, suggestions, anything at all, I'd love to hear it and find ways that I can improve!"
2015-05-26 16:48:17;Node Digest: All Things Server-Side JavaScript;Why did this have 0 votes? How can it possibly be off topic?
2015-05-26 11:19:32;When developing RoR programs, it is possible to change code and see the effect of the change without the need to restart the Ruby interpreter. With Node.js tools like nodemon restart the Node.js process. Is there a way to reload the changed code without restarting Node?;"Thats because Ruby is just loading up all of your scripts, executing them, then exiting.

You can work out a way to hotload code in Nodejs, but it wouldn't really be worth the work for such little benefit."
2015-05-26 07:02:58;CloudBoost.io : One complete database service for your node.js projects.;wouldn't redis hosted on your side defeat the purpose of low-latency access?
2015-06-02 21:52:25;Working on node without Admin Rights;"Although I have not tried it myself, one possibility is to use [**Cloud9**](https://c9.io/). You get one ""premium workspace"" for free. Check out this [**video**](https://www.youtube.com/watch?v=xsdnwifwr5g) that shows you how to work with Cloud9.  
  
It looks pretty cool.You could download the binary then call it with path/to/node yourapp.jsInstall it on a linux virtual?https://nodejs.org/download/ Choose the binaries instead of the installers.Thanks for all the replies! will let you know how I get on :)compile it into another folder and add it to your path."
2015-06-02 18:23:32;Thoughts on using js doc blocks to comment code / methods in node?;"Absolutely.

Only takes a minute or 2 to write sensible documentation for each function.  I will add that sometimes you need to add additional parameters so that JSDoc generates sensible documentation.  Check out their page to get a run down of all the parameters.I use them with [jsdoc-to-markdown](https://www.npmjs.com/package/jsdoc-to-markdown) to generate markdown for github, among other things. You can see some output [here](https://github.com/PaperElectron/Pomegranate)should i say document not comment ~I use them at work, I have plugin for Sublime Text to easily generate the scaffolding and tab through it filling the details. I think it's quite useful in server-side code and also with libraries you can generate the html docs.I use them because we use google closure tools on the other project I work on that effectively adds type checking back into javascript and its just so useful to be able to scan a comment and see the basics of what the function is expecting and what it returns and be able to jump to the definitions of those types.

/**

 * This function takes a language setting and looks it up via API call, etc

 * @param {!xxx.data.LanguageSettings} languageSettings

 * @return {goog.async.Deferred}

 */"
2015-06-02 18:19:44;Helpful world data of each country in JSON formats;It depends how you look at it, but wouldn't that be more useful as one .json, maybe? The Australian capital city should be Canberra :)
2015-06-02 15:59:28;Help: Using Node without global install;"I know that node-webkit bundles the node binaries with the node-webkit application when it is built. I imagine it's the same with Electron, so you shouldn't really need to take care of shipping node for your users.I *think* the users machine would need to be configured so that the $PATH was pointed at the node executable. This could be done with a shell script (with sufficient admin rights).Is installing to a home directory an option?Nix or Windows? You could make a script within the project to start it.

> /path/to/node app.js

Just like you would use node with a global install but instead you explicitly say where the binary is located.https://nodejs.org/download/ Choose the binaries instead of the installers."
2015-06-02 15:19:32;CSS/Images not working?;"Well for those wondering.. You do have to register the Style folder. 

I switched it to /style/style.css and added the following directly to app.js:

    app.use(express.static(__dirname + '/styles'));try going from the root to your css file so something like this:

 <link rel=""stylesheet"" type=""text/css"" href=""/css/style.css""/>

^if the path is correct this should always work. also if your writing your own css don't forget to use a reset like normalizeHm. If I try to navigate to the CSS while the server is on, I get the bad route page... Do I have to declare a route to CSS/Image contents!?"
2015-06-09 20:37:09;Building With Node.js At The New York Times;
2015-06-09 18:40:02;Jet: Realtime Message Bus for the Web [1.0.0];
2015-06-09 17:30:26;Hapi on Steroids - Using Generator Functions with Hapi;There's no really good reason to use `co` for this when you can use `Bluebird.coroutine` as a drop in replacement that's much faster and has a lot more features, see https://github.com/petkaantonov/bluebird/blob/master/API.md#promisecoroutinegeneratorfunction-generatorfunction---function
2015-06-09 17:24:10;npm module patching workflow;"Number 3

1. use [sinopia](https://github.com/rlidwka/sinopia) to host your private modules for free.
2. use [find](http://www.gnu.org/software/findutils/) and [sed](http://www.gnu.org/software/sed/) to change all of the `require` statements with 1 command. use `git` to manage your code so you can easily undo/redo changes."
2015-06-09 12:12:12;Embrace next generation Javascript, today!;
2015-06-16 23:22:40;Where can I find a proficient nodeJS developer to hire for a simple PeerJS project?;"You can start by not calling it a simple project. 

Location, timeframe and other details would probably help as well."
2015-06-16 22:04:24;"Search node modules; new search engine";Misread the title as Search nude models.... Anyway, this is also interesting.   whats wrong with npm search
2015-06-16 18:01:13;Building With Node.js At Netflix;"It baffles me that some blogs don't show the date of the post. Is that intentional as some sort of SEO trick?Well, looks like the future will be JS and Node.Falcor, an asynchronous, multiplexed network transport layer built in pure JS on top of HTTP.

Say that 5 times fast. "
2015-06-16 17:39:34;Generators’ Functions in JavaScript and Asynchronous Code;
2015-06-16 17:37:36;Chalk - Terminal string styling done right;
2015-06-23 20:52:57;I made this. A smarter serve-static with template engine support and caching.;"[deleted]When it comes to template caching: how do you know whether the options provided to the template rendering engine have changed, requiring the template to be re-rendered? Do you serialize the options and store them somewhere as an identifier for the corresponding rendered template?

I've been working on a new rendering engine for a project (to replace the abandoned rendering engine we currently use), and have tried to find a reliable way of caching the rendering of templates. I still don't have a good/scale-able process."
2015-06-23 20:12:18;"Could someone help me to ""browserify"" the Cheerio library, please?";"https://wzrd.in/standalone/cheerio@latestHow are you trying to call cheerio in your web worker? Have you looked at browserifying cheerio with the `--standalone` option? From my understanding, you should then be able to easily import it inside your worker with [importScripts](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Importing_scripts_and_libraries). Also, this might be helpful if you intend to use browserify in your project/webworker: https://github.com/substack/webworkifyJust make a stub JS file that looks like this:

    window.cheerio = require('cheerio');

and Browserify that.  Browserify puts everything in an IIFE so normally you can't access anything from outside the bundled script.Why do you need to use Cheerio? Can't you use JQuery?"
2015-06-23 17:49:09;Looking for a boilerplate for Facebook logins using passport.;"Learn yo shit

https://www.youtube.com/watch?v=twav6O53zIQIf you can structure your app to handle authenticating on the client-side, then this library is pretty easy to work with: 

http://adodson.com/hello.js"
2015-06-23 14:42:55;Is --harmony safe to use in production?;"In io.js the most well-baked [harmony features](https://iojs.org/en/es6.html) are enabled by default, so a good rule of thumb would be to NOT enable anything beyond what's already there.

For node 0.12, it's not so clear cut; it's a slightly older V8 with potentially more bugs. If you want to be conservative, an option would be to enable features more granularly, e.g. `--harmony_generators`. It is behind a wall for a reason. I would not use it.define ""safe"".  Fat arrows still don't completely comply to spec in v8 so your code may break in the future if you rely on `this` bindings, `arguments`, etc.

If you're just talking about stability, and are aware of where things break from spec (and therefore _will_ change in the future), you should be fine.

Personally I run my own code through Babel and leave `--harmony` offDepends on what Harmony features you're planing on using. Generators has been stable for a while now (v8 implementation that is).

Another solution is to just transpile your code through babeljs - which will run on vanilla 0.12.x. This would future-proof your code whilst being able to play with the edge-candy with production tools."
2015-06-23 13:23:53;Debugging Node.js memory leaks;"TIL ""Node.js processes have a memory limit of around 1.4GB."""
2015-06-30 23:44:32;I'm looking for a JSON validator that is faster than JSHint. Any suggestions.;"https://github.com/zaach/jsonlint

Not sure whether it's any quicker than JSHint, but might be since it's more focused.fastest json validator in node: https://github.com/mafintosh/is-my-json-valid

check bottom of readme for benchmarks[deleted]"
2015-06-30 19:47:17;New Generation Build System;"Awesome! Competition is a good thing.gulp. gulp is the next generation build system. stop it now. just stop. j/k

where are all the plugins?Fly is a task automation tool, very much in the same vein of Gulp, Grunt, etc.

Similar to Gulp, Fly favors code _over_ configuration, but aims to provide a *definitive simpler* way to describe and compose tasks.

Fly shuns the stream-based implementation common in other build systems (without losing the metaphor) and favors [promises](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) and [generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) based flow-control via [co-routines](https://github.com/tj/co).

This is how a complete real sample Flyfile looks (compare that to Grunt or Gulp...)

    const paths = {
      scripts: [""client/js/**/*.coffee"", ""!client/external/**/*.coffee""]
    }

    exports.default = function* () {
      yield this.tasks.clear()
      yield this.tasks.scripts()
      yield this.watch(paths.scripts)
    }

    exports.clear = function* () {
      yield this.clear(""build"")
    }

    exports.scripts = function* () {
      yield this
        .source(paths.scripts)
        .coffee()
        .uglify()
        .concat(""all.min.js"")
        .target(""build/js"")
    }"
2015-06-30 19:12:18;Does node 0.12 support ES6 module import syntax?;"No and (personal guess) it won't anytime soon. The important part here is that it's not just a change in syntax but a change in semantics. E.g. the execution order is not guaranteed in ES6 modules and the semantics of ""exports"" (bindings) are different from CommonJS, e.g. when it comes to rebinding. So support for ES6 modules would mean adding support for ES6 modules *in addition* to CommonJS modules, not just a different syntax.

The order would be:

* V8 adds support for ES6 modules
* A module loader spec is finalized and how it relates to server-side JS (e.g. in some people's minds `import 'my-lib'` is supposed to behave like `<img src=""my-lib.png"" />`, no concept of search paths because that wouldn't really work in a browser)
* Support trickles into node and node exposes the feature in meaningful way

If you just want the syntax, you'll soon have `const { x } = require('bar');` which gets you *some* of the niceties or you can use `babel-node` which simulates a subset of ES6 modules on top of CommonJS. But actual support for ES6 modules is still a loooong way out.I think not.

I just tried doing `import 'os'` on the node 0.12.4 console started with the `--harmony` flag, and it throws an error.




    > import 'os'
    SyntaxError: Unexpected string
    at Object.exports.createScript (vm.js:44:10)
    at REPLServer.defaultEval (repl.js:117:23)
    at bound (domain.js:254:14)
    at REPLServer.runBound [as eval] (domain.js:267:12)
    at REPLServer.<anonymous> (repl.js:279:12)
    at REPLServer.emit (events.js:107:17)
    at REPLServer.Interface._onLine (readline.js:214:10)
    at REPLServer.Interface._line (readline.js:553:8)
    at REPLServer.Interface._ttyWrite (readline.js:830:14)
    at ReadStream.onkeypress (readline.js:109:10)
[Check here](https://kangax.github.io/compat-table/es6/) for future reference, import isn't even on the list. I haven't heard of any implementation of import existing (or even in staging process)V8 itself doesn't even support ES6 modules yet, so the 0.x range of node will _never_ support it. A future version (not 1.x-3.x, certainly), now that io.js is merged, will likely support it, but when exactly that will be is unknown.

As others mentioned, babeljs gives you partial support via a transpiler. You can play with that for now. You'll be waiting awhile for ""real"" support though.AFAIK, node doesn't really support any ES6 features at all, even iojs only has minimal support at the moment.

Your best bet is to use babel."
2015-06-30 15:18:47;How best to catch errors;"shouldn't each part handle its exceptions?  also, testing!  I'd personally prefer a generator-based pseudo-synchronous approach like this:

    worker(function*(item) {
      var thing = yield readFile(item)
      try { yield doSomethingAsync(thing) }
      catch(ex) { yield doSomethingElseAsync(thing) }
    })

This requires three things:

 * Enabling generator functions by using iojs, babel, or the --harmony flag (depending on your various needs and circumstances).
 * All of your asynchronous actions must return promises. (You can use an [adapter like this one](https://www.npmjs.com/package/ugly-adapter) if needed.)
 * Using a library such as [co](https://www.npmjs.com/package/co) which runs your generator function and resolves promises across yields for you (this is where the pseudo-synchronous part comes in).

But then, all the error handling will just be automatically wired up for you, with no done() function required at all. The implementation might look like:

    function worker(generator) {
      ...
      co(generator).then(function() {
        // item has been processed, move on to the next one
      }, function(err) {
        // there was an error, print a trace and exit
      })
      ...
    }"
2015-06-30 12:46:04;How to turn my node sql statement in to a loop;"https://github.com/felixge/node-mysql#multiple-statement-queriesWhy not do a union?

    connection.query('SELECT sum(generation) from export_1 UNION SELECT sum(generation) from export_2 UNION SELECT sum(generation) from export_3', [], callback);"
2015-07-07 20:42:03;Error: Access denied;looks like your login credentials are incorrect I'm assuming.
2015-07-07 20:16:23;Storing text with code with a MEAN stack?;"I recommend playing around with a Markdown lib such as [markdown-js](https://github.com/evilstreak/markdown-js).Too simple. Sorry guys.

Change <%=variable%> to <%-variable%> does pretty much what I'm asking it to do. At least for the moment.

Thanks!"
2015-07-07 17:53:51;pjson - Simplest way to access the contents of package.json with TypeScript Support;
2015-07-07 14:15:14;I did my first npm package. Can you tell me what you think?;"Wow i cannot tell you how helpful this is. Do you know how many times I do

    cd ~/Desktop
    mkdir test
    cd test
    npm install someModule
    node
    ....test shit..
    cd ..
    rm -rf test

Where do they get installed? And do they get cleaned up when the REPL terminates?Seems nice! Looks good! Is there a standard for doing module.exports = {...} vs just doing module.exports.start = something and module.exports.getPkgNames = somethingElse. I've always just set properties on exports vs overwriting the function (unless I'm exporting a class).That's actually pretty handy! Does it cache subsequent installs? You might be interested in using something like this: https://github.com/mattdesl/install-if-neededNow that I know what it does, I wish there were an easier way to try out your npm package and then delete the folder I build it in when I'm done.Nice idea! I've taken a quick look at code. Don't understand, why are people in JS using tabs and tabs+spaces combination :)

Anyway, is seams easy to read since you are using `npm` and `repl` modules.Very useful. Starred and upvoted!Why the downvote? :("
2015-07-07 11:27:35;Need some basic advices;"express.js is a framework. If you're asking which frontend framework, that's really not a nodeJS question but either Angular or ReactJS are pretty safe generic choices at the moment.

As for IDE, whatever you write in normally is probably fine. I like vim. Many people like emacs. Sublime Text and Atom both have a lot of fans. Webstorm is apparently great.checkout `angular-fullstack-generator`"
2015-07-14 20:24:20;I've been using Earl Grey for a number of weeks now, really liking it!;Can someone please explain to me why we need ANOTHER of these languages? That is a serious question - other than the fun of creating it, and padding your resume, why? Both are perfectly good reasons to create a language, but are hardly incentives for me to use it.[deleted]By the way, a number of us hang out in the gitter chat room if you want to come by and ask questions: https://gitter.im/breuleux/earl-greyAs an avid coffeescript user I'll keep an eye on thisYou should make the jump to ES6 instead. Its really much more flexible and expressive than a pythonic flavor of JS could be.Oh great. Another white space language.
2015-07-14 17:08:15;Trying to create memes with npm caption - no luck;"Did you install imagemagick?

> To use node-caption, the system it's running on must have imageMagick installed. Here are some ways to do that:

> OSX: brew install imagemagick

> Ubuntu: apt-get install imagemagick

> RedHat and other yummy systems yum install imagemagick"
2015-07-14 06:24:38;RobotJS - Desktop Automation!;"No Windows support yet T.T

I'm definitely interested though. I'd much rather write scripts in JS then AHKHope Windows support can get added soon, looks like it could be very usefulnifty stuff. Roughly a year ago I needed to do some desktop automation and ended up using autohotkey, while still looking for something similar like this, might be time to revisit that script.
  
  
Edit: a word."
2015-07-14 05:32:09;Arduino Node.js RC Car Driven with the HTML5 Gamepad API;Here's the direct link... http://www.webondevices.com/arduino-nodejs-rc-car-driven-with-html5-gamepad-api/
2015-07-14 01:52:27;Muxed 100 000 000 message distributed evenly over 10 000 streams (single socket) using indutny/spdy-transport, worked flawlessly :) Huge ^5 to @indutny :);"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/titlegore] [Muxed 100 000 000 message distributed evenly over 10 000 streams (single socket) using indutny/spdy-transport, worked flawlessly :) Huge \^5 to @indutny :)](https://np.reddit.com/r/titlegore/comments/3d7dvn/muxed_100_000_000_message_distributed_evenly_over/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))*

[](#bot)spdy-transport 1.0.1 released !

https://github.com/indutny/spdy-transport/commit/ef54f9e265638f8961d46a40c1489e05a52627fd"
2015-07-21 19:03:17;HELP: Having issues with NPM. No one on stackoverflow seems to know how to help. Maybe you guys will.;"[deleted]    sudo chmod -R a+w /usr/local/lib/node_modules/

Give yourself write access to node-modules, so you can install stuff without sudo.

The other thing to try is `sudo chown -R $USER ~/.npm`  in case `sudo npm install` created files and dirs owned by root in your user's npm cache.are you out of disk space?  filesystem get remounted read only for some reason?  can you manually create files in that folder?  there's only a few things that can cause permissions errors.how did you install node? via homebrew?truss or strace that bad boy and see what's actually failing.I think it's a permission thing. From what I remember, when npm installs packages, it does it as the user `nobody`. It doesn't do it as `root`. So if there are some directories that npm needs access to that don't have the right permissions setup then it will give permissions errors since user `nobody` can't access that directory.I'm guessing stack overflow told you to install jqueryOne thing you missed in all of this is that npm has a support channel too."
2015-07-21 15:09:57;Serving React and Flux with Hapi and Webpack;Anyone else prefer Browserify over Webpack?
2015-07-21 12:54:01;Giphy.com Node.js API;This isn't the first, but it is the only node module with complete Giphy API support. It is also very well tested!My only gripe about giphy is that when looking for a gif you have to go to the page to see it animated.  Google picks up the thumbnail.  Fucking annoying.This now supports both native promises and callbacks.
2015-07-21 09:28:13;Help. Can I use a node module to run scheduled jobs to access an api?;"You can most likely use whatever OS's job scheduler to launch you node script.I have never used AWS (prefer Digital Ocean VPS's) but I have used the cron module with the request module plenty of times for my scheduled tasks. Essentially, just create a module, require it in the cron job, and call the method you need. I usually set it up so the cron is on a different machine, since I use it for a second set of ""is it up"" tools.The agenda module is cool because you can write it naturally like this:

    var weeklyReport = agenda.schedule('Saturday at noon', 'send email report', {to: 'another-guy@example.com'});
    weeklyReport.repeatEvery('1 week').save();
If you just need a simple queue you can you can use Redis and [Kue](https://github.com/Automattic/kue). It's super simple to setup."
2015-07-21 09:21:59;Listen to a different IP address Nodejs server;"I'm about to KO so if you end up replying I'll be asleep by then but:

Ok assuming you set up your variable `server` correctly:

    server.listen(8000, function() {});
as you can see the second parameter must be a callback not a string.

Now when your running that on your computer the IP is `localhost:8000` or `127.0.0.1:8000`. Now I'm assuming you want to connect from let's say your phone or something what you want to do is get your laptops's ip address:

**I'm a windows user so hopefully you're using windows, but if not just look it up for whatever you're using.**

1.Open Command Prompt
2. Enter the following and press enter:

ipconfig /all | find /i ""Ip""

either next to *IPv4* or *IPv6* you should see your local ip address
now you can connect from your other devices via that ip address which should be something like `192.168.1.10:8000`
Start a server on the server w the ip you want to listen and forward all to your actual server maybe?"
2015-07-28 23:48:23;If this then NodeJs: Extending IFTTT With NodeJS & Webtask.io;Wow.  This is really cool.
2015-07-28 22:54:21;What to use for localization?;"http://formatjs.io/ from Yahoo is also very handy in this department.I use Dust for this. The original maintainer dropped it but Linked In picked it up and they maintain it now: https://github.com/linkedin/dustjs

Its big/complex but it can do whatever you need (as far as I have found).shameless plug. We're working on l20n (http://www.l20n.org) and just released 3.0 recently which we're using in Firefox OS.

The 3.0 does not implement the whole spec yet, but it does a fair chunk so you should be able to use it."
2015-07-28 21:35:37;Web Socket communicate with node.js;"Start with a pure [websocket implementation](https://www.npmjs.com/package/ws) rather than a multi-transport abstraction like socket.io. Learn the actual tech first, not socket.io's version.

The websocket isn't sending many requests, it's sending messages over a consistent connection. You don't need anything else. We maintain per-client websocket connection on every page of a successful site for years without needing any further tech to ease load. You're pre-empting problems you're unlikely to ever face.

The potential for system load is what you do AFTER your server receives a message. If it has to compute something heavy, or correlate multiple other services, _then_ you employ a task system to queue these tasks. When the tasks are complete, the results can be sent to whichever clients need them. Websockets are not a request+response model like HTTP, you're starting on the wrong foot thinking that way and it's leading to your confusion."
2015-07-28 21:11:49;Debugging Node.js Azure Web Apps;
2015-07-28 20:38:42;Switching out callbacks with promises in Mongoose;"/u/eddywashere - Why not just use [promisesaplus](https://promisesaplus.com/) and wrap all the methods in a promise.

    return new Promise(function (resolve, reject) {
            User.findById('123', function(err, user) {
              if (err) {
                return reject(err);
              }
              resolve(user);
            }    
        });

**Note:** You will need to use nodejs with `--harmony` flag
Or better yet, switch out Mongoose entirely and use a relational DB like you'll quickly realise you should have."
2015-08-04 20:51:53;JAWS: The Javascript + AWS Stack;would love to hear from devops folks about this (or generally, about AWS Lambda service).  heartthrob or heartache?How does the latency on a JAWS (or really any aws-lambda system) compare to something like actionhero.js (a server hosted lambda-ish-API framework)?I'm new to node dev/back end dev in general, and don't exactly get what this means just by looking at it. How exactly does this work, what's it doing?As these services have been flowing through my gmail in their newsletters, I've been wondering how feasible this type of setup is. Totally excited to see people exploring it and try my hand at it also!What impresses me is that they can handle modules with c/c++ bindings.
2015-08-04 16:03:07;From Zero to Hero with NodeJS;
2015-08-04 16:02:16;Front end development for Node.js developers;
2015-08-04 15:25:04;Node.js Production Environment - a Step-By-Step Guide for Startups;Dang, it sounds relatively expensive to have all these services.When I clicked on the link I was hoping for a vanilla walk through instead of flavor-of-the-month services.Anyone have a similar article focused on using Digital Ocean, or AWS instead of Heroku? 
2015-08-04 15:09:10;Implementing recaptcha into form;"What error are you getting on Heroku?

You can see your logs with:

    heroku logs --tail --app my-app-name

I don't use express but I would think you want to bind your routes to `app` before the server starts listening:

    recaptcha.init('key', 'secret');

    app.post('/contact/submit', function(req, res) {
      recaptcha.verify(req, function(err) {
        if (err) {
          res.send('failed with error from google:', err);
          return;
        }
        res.send('success');
      });
    });

    app.listen(app.get('port'), function() {
      console.log('server listening on port', app.get('port'));
    }));

Also, check out the `GET '/'` route in the bottom example: https://github.com/pdupavillon/express-recaptcha

You need to pass a recaptcha instance to a form that the user is then going to submit to your `POST /contact/submit` route."
2015-08-11 23:48:07;Node repo is officially io.js;"I'm so lost on this whole IO.js/Node.js stuff. Every time something comes out about either one, I'm just left wondering ""but... I thought... but? ah just screw the whole thing"". The github readme hasn't been updated yet. This has been the plan, the starting point for the next major version of node will be based on the work done by the io.js fork. There is no name change, just the repo and starting point.

Apparently. Yep still confused.

Edit: [Read This](https://github.com/nodejs/node/issues/2327)[deleted]CONFUSEDI'm going to continue to use node.js until morale improves.No blog post or anything as far as I can see. I kinda think the io.js name makes more sense, but going to be hard to stop calling it Node. So no more node.js? MEAI stack just doesn't have the same ring...I think they just haven't got around to change the readme.md yet, because it doesn't really makes sense to host io js on nodejs/node github repo.This is the node.js repo: https://github.com/joyent/nodeNo, node is still node, they are just in the process of finishing the convergence work and eliminating the need for iojs repoif the node repo is officially io.js, why does nodejs.org download page link to the joyent/node repo?We need to wait till the new version of node? Will iojs be doing rapid development? That was one thing I hated about rails...by the time I built my prototype I had already gone through 5 upgrades and then 3.x came out. I gave up at that point and went back to Perl and PHP."
2015-08-11 21:41:56;Do stuff during npm install of my package?;"I wouldn't build anything in like that. Leave it up to the dev to bring in their own config files, it's not difficult.

Instead allow the dev to hand a config file to the library after its been 'required' in. This allows a great deal more flexibility and doesn't enforce unnecessary file system requirements and such.I would suggest creating a ""setup"" key within the ""scripts"" key in package.json which does this for you when you run `npm run setup` .. your 'setup' script could also run the `npm install` for you.maybe https://github.com/serapath/envlocalify ?
You can define a ""preinstall"" run-script to do work prior to installing dependencies. See https://docs.npmjs.com/misc/scripts."
2015-08-11 20:00:30;Keen.io retention charts with Node + Google Sheets;
2015-08-11 18:47:30;I want to port my old PHP web-app to node.js and express.js, but I'm not sure where to start;"Don't port it, rebuild completelyI'm in a similar situation. I used to work with PHP a bit many years ago and when my current employer found out they wanted me to make a web tool for them. What helped me a lot is [this screencast](https://www.youtube.com/playlist?list=PLf8i4fc0zJBzLhOe6FwHpGhBDgqwInJWZ) which goes over setting up a project in [SailsJS](http://sailsjs.org/) which is a very nice (IMHO) Node framework. It goes over some EJS basics, creating controllers, connecting to databases, sessions/authentication with password encryption and many other fundamentals.

I've used much of what I learned in that tutorial to build the tool my employer requested. Just my 2 cents, hope it helps.You don't _have_ to learn React and Node at the same time. And you don't _have_ to use Sails.  Those are just the most popular options these days.  If you only have a month, you don't have to learn all that.  Rendering EJS on the server is still legal and Express is enough for a starting framework.

People might ask you why didn't you use SailsJS and/or React, and you can say you were busy learning Node and ES6.  You can get into that stuff on the next project, or wait a year or two and everyone will be excited about something totally different.

Rethinkdb is the trendiest db.  Postgres is most popular.  You don't have to use a relational database.

People slam Mongo but it works fine for a lot of things.  I made this https://www.npmjs.com/package/login-mongo which seems simpler to me although people mostly use Passport.Im so sick of everyone just saying ""isomorphic react"". 

For something this simple, its *completely unnecessary*. If you're new to node as well, its just another wrench in the spokes. Choose a server framework (like express) and a template engine (ejs is nice to work with) and a db - mysql or postgres is fine for this. Anyone saying to use mongo is silly as this is pretty much entirely relational data as far as I can gather.

Make your routes for the server, serve the files, and be done. Yes, react is a great tool and useful to know and extremely awesome for use with complex apps, but you don't need an app. You're making a site with a simple form submission and some data display. Frameworks/libraries like angular and react are meant for *applications*. You can do it with them for sure, but you'll end up writing more code, and more complex code than is required. 

K.I.S.S.I would use this opportunity to learn react.js. Write it isomorphicaly, so you can render on the server and you should be golden.
You can stick to bootstrap, but I personally would use http://callemall.github.io/material-ui/#/Hey, I've done this rewrites in the past. 


I usually use Postgres, Node, Angular, Express. 

As people have said, Node is great at solving web requests and lightweight things, I avoid compiling templates and things like that in the back end. You want to send only JSON from your node api and create a front end that communicates with it. 

I can help you out with specifics if you pm me, let me knowUse SequelizeJS as an ORM over top of mysql or postgres. You could also potentially look into using keystone.js as a base."
2015-08-11 15:41:44;Wrote a list of tools for JS and Node devs;You should look into Visual Studio Code for node editing/debugging
2015-08-18 19:25:52;IDE for Node?;"A co-worker that uses WebStorm said if you follow [these steps](http://www.ember-cli.com/user-guide/#editors) it will run much faster.

I've been using Sublime mostly. [Visual Studio Code](https://code.visualstudio.com/) runs pretty good on my Linux box; which is where I do my coding.WebStorm has been great for me.  It can definitely eat up memory though, right now it's running on 1.17GB out of my 16.  It hasn't ever been slow for me but I'm also running on OS X so I don't know if that has anything to do with it.Atom -> https://atom.io/after 10+ years in eclipse, for me a large part of the ""joy"" of nodejs is that i can go back to simple tools, like a text editor (emacs) and still be super productive.For a full blown IDE I would try WebStorm. If you want something a little more light, highly recommend Atom, SublimeText or Visual Studio Code.Webstorm recommendation : install Dash plug-in to get external libraries documentations. Works like a charm. Brackets -> http://brackets.ioI use IntelliJ with the NodeJS plugin. It is ok, but I wish its intelli-sense were a little better. Isn't WebStorm essentially the same thing as this?I use sublime text works well for us.Atom looks good  interface but for typing fast it horrible :( , enough atom , enough ! "
2015-08-18 18:11:32;Growing a Beard (or “How I wrote my first useful Node project”);
2015-08-18 17:59:17;Tonic: a better REPL for node.js;"Looks great but I need to be able to run it inside my own network.The demo looks really impressive, but I couldn't get it working, the web inspector keeps throwing:

main.bundle.js?v=0f778e8a47b3:174 WebSocket connection to 'wss://tonicdev.com/' failed: Error in connection establishment: net::ERR_SOCKS_CONNECTION_FAILEDI fucking love it.
If you really aren't going to release the source code, can you figure out a way to connect to private npm/github accounts (oauth)?"
2015-08-18 16:58:20;Posting Errors to Slack;If you do this, make sure to only trigger the bot for serious errors. Otherwise your developers will very quickly start ignoring the firehose of everyday errors with the important ones buried underneath.
2015-08-18 05:44:45;How do I get started with tests and continuous integration?;">what do I even test?

Everything.

Until you know more,  you test everything> what do I even test?

I recommend TDD for figuring out what to test. It will help you know what to test. I don't have time to explain the TDD right now, but if you haven't figured it out by the time I'm off work I can share more on the topic. Just shoot me a message here and I can point you in the right direction and give you examples.I currently don't have much time to explain that to you, but you might find out by having a look into [this github repository](https://github.com/dodekeract/bitwise). Yes, it's from me, but that's not the reason I'm posting it. I post it because it is a quite simple codebase, which is configured for travis-ci, coveralls, inch-ci and codeclimate. That could be a starting point for you. Let me know if you have any questions/issues. Will respond when I have time."
2015-08-25 20:10:00;New to Node, and its workflows. Which is the best framework?;"Best to start with Express. It's minimalistic and easy to start out with.Express for API
Sequelize or equivalent for database

Other useful packages -

forever
js-beautify
bunyan

phantom for front end rendering
This depends highly on what you are building, if you are using nodejs to replace PHP, ASP.Net, or building a web application (working off of HTTP) then I would say Express with connect is the most prolific and easist to find help, but Koa is worth consideration. 

Dont think of it as 'frameworks', you'll end up blocked into a mindset and then a deep hole. Goto https://www.npmjs.com/ and scroll down slowly click each icon, and try to learn about each. Then look through most depended upon modules, and then look up the rivals to all of that stuff that will give you a clear view of the ecosystem.

Its not about selecting a framework and building in its rules and mindset, its about scoping out your project and finding the parts that match. You should never feel hampered.To learn Node, I recommend building an API with Express.js.   
Express is a lightweight framework for building web apps.  I wouldn't necessarily use it for API's since it has other things that's meant for rendering web pages, but it's still a good start. Here's a good tutorial:    
http://scottksmith.com/blog/2014/05/02/building-restful-apis-with-node/     "
2015-08-25 16:19:32;Need some help with Authorization;"either what @moklick said, or alternatively check this out:

https://www.npmjs.com/package/node-oauth2-server

It generates the token for you and there's a few example 'models' here for you to use to save the token in a database: https://github.com/thomseddon/node-oauth2-server/tree/master/examples

In the 'model' you would check the username and password in the 'getUser' function.
Check https://github.com/thomseddon/node-oauth2-server/blob/master/examples/mongodb/model.js#L108 for a mongodb example.

If the user is successfully authenticated you will be given an access_token (along with a few other things), which you can then put in your Authorization header: `Bearer ${access_token}`

You can then protect all your routes using the example middleware:

    app.get('/', app.oauth.authorise(), function (req, res) {
      res.send('Secret area');
    });I work with hapijs + [hapi-auth-jwt2](https://github.com/dwyl/hapi-auth-jwt2) right now and it's really nice. While not proper OAuth, here's a simplified example of how this sort of system often works.

When a valid username/password combo are posted to /oauth, insert a row into your `access_tokens` table that points to that user_id, has a created_at and expires_at timestamp, and contains a random UUID (the actual token). Return the UUID to the client. 

The client now sends the token along with every request.

Write a middleware function that runs before your routes. If the client provides an access_token, see if it exists in your `access_tokens` table and ensure it's not expired. Then load the corresponding user `request.currentUser = database.findUserByAccessToken(token)` for the rest of your middleware/handlers to access.
Download the [Angular-Fullstack](https://github.com/DaftMonk/generator-angular-fullstack) Yeoman Generator and start tearing it apart backwards.. Not only will it help you to understand how everything works and pieces together but it will give you an idea on some of the other requirements for build a web service and organising your project.Few times ago I wrote an article on that. I hope it is useful: 
http://digitalsyncretism.com/blog/token-authentication/
http://digitalsyncretism.com/blog/token-authentication-the-practice/"
2015-08-25 14:18:54;GottaValidate! A promised based object validator.;
2015-08-25 04:13:42;Node Chakra | CodeChat;
2015-08-25 03:30:17;New Mailgun API wrapper (for v3 API);Very nice! I might try writing a nodemailer transport using this sometime soon, instead of just the normal SMTP transport routing through Mailgun. NodeBB's emailer uses the existing mailgun packages, probably not v3. What's the difference between v2 and v3?
2015-09-01 23:48:16;A Node.js Virus - Proof of Concept.;"[Hacksparrow Node.js virus - 1/24/2014](https://github.com/hacksparrow/virus)

> The viral code will copy itself to all .js files under a directory; defaults to the directory the virus.js file resides in. Any infected file, when executed will further scan its directory for uninfected files, and infect them.
> 
> The infected files will sing a song on Fridays, when they are executed. It could be made more fun or dangerous, though.why the completely pointless blog post though? the only interesting thing in that post was the github link... [deleted]"
2015-09-01 23:00:52;Trying to make a reusable screen scraper;
2015-09-01 16:14:20;How are you using Node in your organization?;"We use Node to run an interactive voice response service for large municipalities and states. It integrates telephony, automated voice recognition, database access and an HTTP management portal into a single turnkey system. Node turned out to be a perfect and performant way to glue all these disparate subsystems together quickly and sanely.Current job: not at all.

Previous job: had an express app act as a service to our Java business api. Really liked that app.

I pretty much use node for most personal projects, though.My whole business is built on Node.jswe are a .NET shop. Everyone really likes compiled languages and the tooling around visual studio. Running tests and deployment are super easy with NUnit, Octopus Deploy and Teamcity. However, I'm slipping in grunt deployment scripts whenever something goes on amazon and I'm building an event viewer website for our new logger in sails and angular. Gonna take them a while to officially like anything like that but the ease with which you can develop and get a server going are nice.

Downsides are deployment strategies. We have a build server that runs against changes to master and then octopus deploy has one click publishing and connection string/app setting transforms so the tooling environment needs to get better.I just redid my PHP site in Node and launched it this morning, [playc4.com](http://playc4.com).Our internal management system is built entirely in node and we are splitting it into micro services. A lot of the time if we need fast APIs that need to with stand a high load we use node, as it is quick to write in and responds well under traffic. Also if we are using react and jsx it makes a large amount of sense to use node as opposed to a php compiler. Then obviously npm in most web projects.I work in a big company where paas/online payments IS the core business. We use it for front tier only (user facing sections). All our mid tier and backend still runs c++ and java.Building the company API using Loopback.Running a website on Node along with multiple Web APIs that are used for our Emberjs backend.Just finished a project that utilized multiple twitterbots that work together to tell a story. Whole thing done with node and redis.Gameserver for our new upcoming action rpg browser game. We chose node because setTimeout = MonsterAI, if you know what I mean  :)I'm currently lobbying for hapi, as there are a few legacy systems involved and hapi works really nice with those (one of the many reasons of course I'm lobbying for implementation of hapi). 

Currently however, no usage.[REST APIs,  glue code for image processing servers, CI servers/test runners, automation scripts, build automation (Grunt, JSHint, etc..), JSON processing/conversion, and also universally/isomorphically in the browser using Browserify](http://shelovesmagazine.com/wp-content/uploads/2013/09/all-the-things.jpg).

We even use NPM to manage non-JS dependencies."
2015-09-01 15:33:35;Modelling Symmetrical Friendship Relationships with Bookshelf.js;
2015-09-01 15:18:47;Bash Fiddle = Docker + term.js + Others(HAProxy,MQ etc);
2015-09-08 23:45:40;[X-post] What's the best way of building this?;
2015-09-08 23:34:45;Node.js C or C++?;"It's pretty clearly C++.

See: https://github.com/nodejs/node/blob/master/src/node.cc#L86 (as an example)...libuv library that node uses for async io is written in C. May be he is hinting that. But there is a lot of C++ because of v8 stuff in node. So, its a mixed bag of both C and C++>A lot of places I read say that C and C++ are very different, and that they can't compile the same. 

C++ is essentially a superset of C. A working C program will compile as C++."
2015-09-08 19:21:06;Node v4.0.0 (Stable);"Congratulations to everyone involved, io.js successfully merging back into Node. Everything everyone could have hoped for has been achieved over the last year since node was forked. This is the first stable release that merges node.js with io.js! Some key announcements are:

* Latest version of v8 javascript engine with new ES6 features.
* First-class support for ARM processors.
* Long Term Support (LTS) release cycle.[deleted]    dan@Dans-MacBook-Pro ~/Development> nvm install stable
    ######################################################################## 100.0%
    Checksums empty
    Now using node v4.0.0

(*＾ワ＾*)Been waiting for this for along time.They should seriously consider branding Node 4.0:

**Node 4 All**

Especially in reference to the IoT.The biggest problem I'm seeing is with grunt-sass (node-sass). I can run my API and business logic here but my web build process explodes 17 or 18 different ways.wow how'd we get to 4.0 already, last i checked the version was < 1.`iojs` will exist alongside with `node` and will still be a more experiment branch right?[deleted]"
2015-09-08 18:13:41;Deploying a Rails app + node.js API helper apps, HTTPS config issues;"Node does have support for running an https server, but it has to be built into the app.

Best practice seems to put node apps behind an nginx server. Setting up nginx with ssl/tls is pretty easy, setting it up as a reverse proxy is even easier. nginx then handles all of the connection details (ssl, mapping urls to their appropriate app, etc). You also get extra benefits like good load balancing and graceful updates if you want them. There is also a passenger module for nginx.

You didn't mention OS/distro, so I'll assume a Linux of some sort, in which case getting nginx going is really easy. The nginx website has pretty good docs for getting going, and the example config file has sections for ssl and reverse proxy. It's a lot simpler to configure than Apache, but make sure you don't forget the `;` line/statement terminator.Okay, I have successfully implemented a reverse proxy with Apache and the mod_proxy module. Here's how it is set up:


  - I offset the port that the Rails app makes the API calls to, and make those calls over HTTPS
  - A mod_proxy config block in the site's Apache config catches the calls to the new port with SSL turned on & configured, and does a proxy & reverse proxy to the original port over HTTP


This is partially working, in that the calls are being redirected correctly. However, CartoDB works such that the currently logged-in user's username is appended to the URLs of both the front-end GUI and the API calls; this is how the Rails app and both node apps get the username.

The real question is, how can I catch a URL with an arbitrary subdomain in the mod_proxy config block and pass that through so that the arbitrary subdomain is preserved."
2015-09-08 17:06:25;Building an Instagram Postcard App in Express.js & Node;
2015-09-15 23:05:15;The unified node/io.js release lineage, from 0.8 to 4.0, with v8 and npm versions, plus release dates.;Thanks for sharing. Finally an authoritative resource to point people to who are confused by the version jump form 0.x to 4.0.
2015-09-15 22:23:43;nodejs installer simply won't execute on windows vista?;What are the symptoms?
2015-09-15 20:50:02;lolme: One liners in the command line;
2015-09-15 19:30:26;SpeckJS: Comment Driven Development;Looks fun to use, but isn't this approach a little messy (leaving sometimes huge block of comments in code)?This is a pretty interesting approach. However this + docblock comments (Which I see as providing more useful info) would look kinda messy.
2015-09-15 19:11:59;How to receive a CloudFront URL from S3 bucket instead of the default S3 URL?;"Cloudflare works like a reverse proxy, not an object store. It only caches requests that go through your domain that you set up with Cloudflare.

Since the S3 URL isn't going through Cloudflare, it can't act as a CDN for that content. 

However, what you could do is proxy S3 requests through your domain so that Cloudflare will cache them.

Example (pseudocode):

    router.get('/assets/:id', function(request, response) {
      var id = request.params.id;
      var asset = yield database.getAssetByid(id);

      // Stream the data from S3 to the client
      var stream = createStream(asset.s3Url);
      stream.pipe(response);
    })

I'm not actually sure what Cloudflare's limits are and I can't imagine they have particularly generous allowance on the size and mime-types of blobs they're willing to cache.

Edit: Looks like they'll cache files [up to 512mb](https://support.cloudflare.com/hc/en-us/articles/200394750-What-s-the-maximum-file-size-CloudFlare-will-cache-) and [here's a list](https://support.cloudflare.com/hc/en-us/articles/200172516-What-file-extensions-does-CloudFlare-cache-for-static-content-) of cached asset types by default.

So it looks like they aren't going to cache audio/video for the free tier if that's what you were hoping.

Though, they say they look at file extension and not mime-type, so hey, maybe you can just add `.bmp` to the end of your S3 assets. ;)

And here's a support page regarding streaming content, if that's what you were going for: https://support.cloudflare.com/hc/en-us/articles/200169706-Can-I-use-CloudFlare-with-a-streaming-music-or-video-site- - Doesn't go into much detail though.Just to confirm - you fronting the S3 bucket with CloudFront or CloudFlare? Your title/body conflict each other."
2015-09-22 21:43:21;Encrypt and decrypt content with Nodejs;"Seems to be a pretty old article.. 0.12 has been out for some time now.""Code and decode content with Nodejs""
"
2015-09-22 19:26:44;Are there any CRM solutions that run on nodejs?;"Hi nemeth,
You could probably take a look at this tutorial http://blog.allcountjs.com/post/129298244661/creating-simple-crm-in-10-minutes[Ghost](https://ghost.org/download/) was a kickstarter project that succeeded, I do remember seeing it way back when it first launched. [KeystoneJS](http://keystonejs.com/) is something else that popped up in Google, haven't heard of it up until now. Know that I haven't tried either of these and I also don't know how flexible they are in terms of personal additions/modifications.Hi, Bpm'online CRM has great client UI based on HTML+JS, but i'm not not sure which framework(s) those guys use"
2015-09-22 19:16:32;Node.js Interactive 2015 Conference This December (Portland, Oregon);"* Has anyone already made their arrangements to attend?.. (I'm trying to get there!)
* What would you like to hear?.. are you expecting anything specific?
* Should you have the opportunity to showcase yourself or your work, what would you like to provide?.. (the [deadline](http://events.linuxfoundation.org/events/node-interactive/program/cfp) to submit your proposal is September 24^(th), two days as of this post!)

*I'm not associated with the Node.js Foundation or the Linux Foundation, just an admirer and someone who appreciates all the great software!*"
2015-09-22 19:11:56;Debugging Memory Leaks in Node.js Applications;
2015-09-22 18:34:00;How to run nodejs on webserver?;"node forever is pretty good, easy to use too

https://github.com/foreverjs/foreverLook into [pm2](https://github.com/Unitech/pm2)Just a note, almost everywhere I've read about running node in production suggests running it behind a nginx proxy_pass or something similar.  

I've heard pm2 being highly recommended for keeping the service running.  In the past I used an upstart script in ubuntu similar to this: http://kvz.io/blog/2009/12/15/run-nodejs-as-a-service-on-ubuntu-karmic/nohup node index.js &I'm using systemd for that.i've been using screen sessions"
2015-09-29 23:14:50;Introducing mongo-uri-builder, a NodeJs module to easily create mongodb connection strings using objects;"Nice write-up. But isn't this much the same as the existing module https://www.npmjs.com/package/mongodb-uri ?

(that's the second suggestion npmjs.com gives when you type 'mongo db' in search)
"
2015-09-29 20:45:49;Morris.js Chart Issue...;
2015-09-29 16:33:44;GeoJson, mongoDb and legacy coordinates;Technically there won't be anything preventing you storing [lat,lon] on the geometry. [This is a pretty good read](http://www.macwright.org/2015/03/23/geojson-second-bite.html). Your index is failing on the *interpreted* latitude -97.733514, which is out of bounds. Couldn't you just store an additional lat,lon field in your documents? 
2015-09-29 12:56:59;JXcore brings Node.JS to OpenWrt powered devices (MIPS, ARM, …);Really cool they made it work. Can anyone recommend a low cost device to try this with?
2015-09-29 05:48:26;Otto, the successor to Vagrant - HashiCorp;"I don't want to sound negative, but the blog post promises **a lot** of solutions, and that's a really dangerous path to walk...

> Notice that the Appfile makes no mention of OS, memory, disk space, etc. Otto has built-in knowledge of best practices and picks smart defaults for you. In addition to this, you can see how dependencies are first-class features. Otto will use this information to automatically install and configure dependencies in your development and deployment environments.

How would this even work? If a restaurant wanted a table booking web app, and a company wanted to build a social network, both on Node.js, how would the same configuration apply to both? What happens when you need to scale?

The only way I can imagine they'd work around this would be to bake as many possible use cases into the project from the start, and that's definitely dangerous to do too...

----

This also makes me feel like we're abstracting away yet another layer of our applications. I'm generally for abstracting away tedious work, and so perhaps I'm just nostalgic for wanting to set up my own dev and production environments?Well first I couldn't find a homebrew package. Then when I manually installed the binary I tried to build my project. Tried to compile and run and it threw a bunch of nonsense errors all over the place. 

It really bothers me these out of box solutions. They hide whats really going on and if your application is in anyway a non standard app you're really out of luck. Also, the whole Appfile section explains like 5 different settings in the Appfile. I want to see an Appfile with every possible option and all of them explained in one place. 

'Otto just detects and does all this cool shit for you'  Nah, it didn't. >Notice that the Appfile makes no mention of OS, memory, disk space, etc. Otto has built-in knowledge of best practices and picks smart defaults for you. In addition to this, you can see how dependencies are first-class features. Otto will use this information to automatically install and configure dependencies in your development and deployment environments.

There's no way this will actually work properly.  What I believe they're attempting to do is pick an OS that meets all your package constraints, but what if you end up adding one that can't be satisfied by your current OS after you've been using a box for a while?  I guess it could spawn a new flavor of linux in a VM like you would need to do in vagrant anyway, but I'm skeptical that abstracting out what OS you're on makes sense.

Also, I use vagrant for desktop VMS because I'm lazy and don't feel like figuring out what crazy boilerplate I need to get a shared clipboard.  This seems to kill that use case.  Vagrant is a great learning tool because in a ~80 line file you can see how to properly setup a linux dev server under virtualization.  I'm not sure if this will really matter to anyone, but this is a name collision with another library named Otto

http://square.github.io/otto/Oh there's some clarification here..

>Production-hardened tooling: **Otto uses production-hardened tooling to build development environments (Vagrant)**, launch servers (Terraform), configure services (Consul), and more. Otto builds on tools that powers the world's largest websites. Otto automatically installs and manages all of this tooling, so you don't have to.

Vagrant is still alive and well?I tried this but its been problematic right away (Windows), first you only get `otto.exe` which you might not know what to do with... (isn't an installer).

So I moved it to my repo so I could do commands, first sign it didn't detect the repo type.. So I had to move it to where a `src` and `web` directory was (php project). It detected but assumed it was Node project? on a AWS infrastructure? Wrong for both... (I don't even get the infrastructure part). I am only assuming this because it either saw `node_modules` folder (gulp scss stuff...) or something else.

Then after that I had to go through the process of updating my Vagrant to 1.7.4, then `otto dev` starts. But of course it just installs node 4.1.0 and nothing else. This is a PHP project so not much use.

Not a great start for me, didn't ""detect"" well.."
2015-10-06 21:40:50;Node.js Foundation Welcomes Red Hat as Newest Platinum Member;
2015-10-06 18:23:58;Node JS Help Forums;"Here? I've gotten help on this sub

You could also try the node.js irc channel: http://webchat.freenode.net/?channels=node.js"
2015-10-06 16:58:34;"""Node.js and ES6 Instead of Java – A War Story"" – how we created an Express webapp that now serves 10M unique users a month in 9 weeks";"People laugh. But once you have the speed and power of node at your finger tips, there's no going back.A few questions :

In your video, what would the user have seen if you introduced an error in js? (I imagine your build system breaking somewhere... What happens then?)

How do you address browser compatibility with using ES6 on the frontend? Shims all around? How is that managed?

Did your team come up with the layout or were you given one to start with? 9 weeks for this is amazing even if given the artwork.

Side note :

I noticed you used a .png and that it is 722.9k. [Here it is as .jpg and 142.2k.](http://i.imgur.com/MdFDMmg.jpg) I cant tell too much of a difference, just thought it would help.

This needs to happen more often. Even though I'm an RoR dev and before that I was into Java. I love the idea of using one language through the stack or talking via API to backend(s).This is cool, thanks for the writeup.  I'm in a very similar situation replacing our VB6 based site rendering DLL with krakenJS, it's about 2000% faster last time I compared the page delivery speeds.... I think that's the *fastest* car trading website I have *ever* seen.

I simply was not prepared for the near-instantaneous search results.

I'll have to come back later in the day to see if usage/load affects response time at all.Page is not loading for me. "
2015-10-06 16:33:55;RethinkDB Building Extension Architecture and GraphQL Extension;
2015-10-06 16:20:25;Node.js Test Runner;"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/programming] [Node.js Test Runner \[x-post: r/node\]](https://np.reddit.com/r/programming/comments/3nqew4/nodejs_test_runner_xpost_rnode/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)"
2015-10-13 15:58:50;Publish to Medium via CLI;
2015-10-13 15:17:41;Node School;This is the curriculum I used to begin to familiarize myself with what makes Node and JavaScript unique. It's an amazing resource, one that I recommend over every other online resource, including paid code schools.
2015-10-13 14:30:59;yargs the modern, pirate-themed successor to optimist.;And?  yargs has been around for a while, everyone already knows about it.  This is just useless noise.https://github.com/substack/minimist is what I use
2015-10-13 14:13:28;Can't catch sqlite errors?!;Do you have some sample code we could look at? What library are you trying to use? It's hard to help without more information.
2015-10-13 12:45:55;Node.js Security Checklist;
2015-10-20 23:12:14;Logo iteration;
2015-10-20 18:13:35;Filesystem based Database with server mode;websql or sqlite3
2015-10-20 15:55:47;Building Technical Documentation with Metalsmith;"Author here! Happy to answer any questions about this. If you're curious about learning more, here are additional resources:

https://github.com/lambtron/awesome-metalsmithVery cool! I wish I would have found it a little sooner.  I was needing something like this myself, and ended up hacking something together with mustache, jekyll, and some custom grunt stuff.  I might try this out in the future."
2015-10-20 15:40:18;Attaching a cookie value to all requests;"If I understand middle wear correctly you need to have an authintication step followed by the routes that are available once accessed. You need to check the users cookie to determine authentication, so try setting the cookie like in this example on response login. http://stackoverflow.com/a/11583675/3523968 

As for route authentication this was useful, although it's for an api route the concept can be used for other routes https://scotch.io/tutorials/authenticate-a-node-js-api-with-json-web-tokens.

So your cookie is set and stored for the user. Probably via local storage or memstorage access the cookie when sending a request attach it to the request and then process it via node when it hits the server.

UPDATE:  check out this thread too about how cookies are sent. https://www.reddit.com/r/node/comments/3phf6i/authentication/
I recommend writing a middleware function that essentially does this:

    req.currentUser = database.findUserById(req.cookies.userCookie.id)

Just run the middleware before your routes. Now your routes and templates can do things like ensure `req.currentUser` is defined which means a user is logged in, and they can ensure that `req.currentUser.role === 'ADMIN'` before continuing on with the route.I would use a middleware to decode token, validate with key or sth (user they claim to be) and if match, set req.user to user row"
2015-10-20 14:07:16;viewdiff: tiny electron gui for viewing diffs;Had no idea it was so simple to build with Electron. Good job!
2015-10-27 22:56:06;Help with outputting objects through mustache to html files;
2015-10-27 22:53:20;League of Legends API Wrapper;Neat!  Thanks for this!Can it update your summoner account's rune pages? I didn't see it in the docs... Looking forward to trying this on my next 48 hour LoL API app binge : ) Need these kind things to get to my idea faster and not burn out prematurely from having to wrap everything.
2015-10-27 21:19:51;PHP in Node.js?;"you mean web framework?

if yes then there is alot like expressJs, sailsJs, hapiJs and lot more


Node.js doesn't really work like this, but there's a project called [CGI-Node](http://www.cgi-node.org/) that attempts to make Node work like PHP…

Traditionally, you'll use Node **as** the web server (often with something like Nginx in front of it to serve static files and reverse proxy your server).  This is going to perform a whole lot better, but it's arguably harder to get running with—especially if you're used to PHP.I think there's some fundamental issues with trying to accomplish this.  PHP and node and very different beasts.  As a developer who worked with PHP for a number of years, and for the last year and a half has been node exclusively, I'd say the barrier to entry for node is equal if not less than that of PHP.  Even if you could make the syntax of javascript match PHP, and even if you could abstract all the async stuff out of javascript, why would you want to?  Then you just have a bunch of frustrated PHP devs who think they know node, but don't.While it won't work exactly like you want from PHP, ejs is REALLY close! You can even configure it to use `<? ?`> tags in the view. Plus it uses real javascript (with it's own private scope) to output.

For example you could do:


```<ul>
<? someList.forEach(function(item){ ?>
<li><?= item ?></li>
<? }) ?>
</ul>
```EJS would be the way to make server side generated html files. You wouldn't want to use the same DB hooks as php and things like that, it just wouldn't make sense.

If you really really really want your template files to be named .php
http://expressjs.com/api.html#app.engine

app.engine('php', require('ejs').renderFile);

Then you can use params to render a passed file name out of your views folder, and you can make any necessary database calls for specific files before rendering them.

    app.get('/php/user-data.php', function (req, res) {
        sql(query, function (err, data) {
            res.render('user-data.php', data);
        });
    });

    // Catch-All for php files that don't need external data
    app.get('/php/:view', function (req, res) {
      res.render(req.params.view);
    });

While all of this is possible, I would just let go of the php crutch and learn to embrace the node way of doing things.
"
2015-10-27 16:41:27;What is the most painless way to include token-based auth into an express.js app?;"https://auth0.com/ as a serviceI just implemented basic JWT in a project of mine (api with express, frontend with react) and it has actually been very straightforward. However, I haven't yet dealt with expiring tokens, so maybe that will cause headaches. Look at the node packages by auth0 for JWT.This might be a pretty vague answer, but this is what I ended up doing:


I used passport.js with jsonwebtoken (jwt). On successful login or register, I would sign() a new token with a payload of the userId and pass it back in the response body. I set the token life to 5 mintues.

On each request, I would verify() the token before allowing access to the api. 


I also had an express route at /refreshToken that would provide a new token if it was given a valid, non-expired token. Since my client is built in angular, I had an http response interceptor that would request a new token if it had not been updated in over a minute. That way, I kind of mimicked a session timeout. The plan is to also allow apps to access the service, but they will have non-expiring tokens.You can use JWT or JWT with express. Now you have lots of options. Here are 3 common ones.

1. Trust the token and put an expires value in there which you check at the api

2. Put it in redis with a ttl

3. Put it in mongo with a ttl

Hope that helpsThis might be overkill but check out npm package node-token-sockjs package. 

Gives you token auth, pub sub and an rpc interface. 

https://github.com/azuqua/node-token-sockjs/blob/master/README.mdI use the [auth0/jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) npm package.

Using JWT with [Express](http://expressjs.com/) and [Sequelize](http://docs.sequelizejs.com/en/latest/) we can make one trip to the database to lookup the user and generate a token. That token will be usable across multiple instances of this application as long as the secret key remains the same (Great if you use the [Cluster](https://nodejs.org/api/cluster.html) module). Login might look a little like this (some debugging neccesary):

    var jwt    = require('jsonwebtoken');
    var crypto = require('crypto');

    app.post('/auth/login', function(req, res) {
        var name = req.body.username || req.body.email;
        var pass = req.body.password;

        // Lookup user
        User
        .findOne({where: {username: name}})
        .catch(function(err) {
             res.status(501).end(); // or 503, can't remember atm.
        })
        .then(function(user) {
              // Use the user-specific salt and the attempted password to build a hash.
              crypto.pbkdf2(pass, user.salt, iterations, keylen, function(err, hash) {
                  if(err === null && hash === user.hash) {
                      // profile should != user, or you'll expose private data
                      var profile = { name: user.name };
                      var token = jwt.sign(profile, app.get('secret'));
                      res.status(200).json(token);
                  } else {
                      res.status(401).end();
                  }
              });
        })
    });


And for protecting routes with that token, you could use the [express-jwt](https://github.com/auth0/express-jwt) module by the same group. I think it works out roughly to something like:

    var jwt    = require('jsonwebtoken');
    var ejwt   = require('express-jwt');
    var secret = fs.readFileSync('server/key/pub.key');
    var ensureAuthenticated = ejwt({secret:secret});
    
    app.get('/secure/route', ensureAuthenticated, function(req, res) {
       // if we get this far the token is valid.
    });"
2015-10-27 16:18:31;Applying GitHub's Parallel Code Paths using Node.js in Auth0;
2015-11-03 23:36:04;Using Request module, cheerio and utf8;Use something like https://www.npmjs.com/package/entities to decode html entities into their utf8 equivalents.
2015-11-03 22:16:29;gitwalk: Bulk processing of git repos with Node;
2015-11-03 21:04:48;Deploying a Node.js app to Docker on CoreOS using Deis;Fun tip, Digital Ocean has Dokku dropplets at the ready. I have a couple apps on one and so far so good. 
2015-11-03 20:54:39;C++ Add-ons for Node.js v4;
2015-11-03 19:14:42;Node DB Admin?;"I would recommend you took a look at native GUI tools instead. For MSSQL I've got no recommendations as I'm generally not a Microsoft guy, but for MySQL I'd recommend Sequel Pro for Mac or Heidi SQL for Windows. They're native applications and does (speculatively) the same things.I wrote a simple one but never thought to share it. Given the lack of options out there, maybe I should?which DB?If you're talking about mongo, then one of the best UI management apps is http://robomongo.org/I'm the CTO behind Forest: http://www.forestadmin.com
We are looking for beta testers! Contact me guys :)

Forest admin is a SaaS that provides instantly your customizable admin interface.
2:46 video demo: https://www.youtube.com/watch?v=IPxbrXp6PLI&feature=youtu.be

The installation process takes ~5 minutes.
You can customize the frontend through our WYSIWYG interface (e.g. show/hide collections, rename fields, etc.) per user profile (tech, marketing, sales, etc.).

The NPM package generates an admin API. All the routes are overridable. You can develop your own business logic (e.g. generate invoice, ban user, etc.) and link it to a custom button in Forest.
Our philosophy is to be 100% flexible.

We are able to connect to 3rd party services. For example, we have a Stripe integration that retrieve all the payments, invoices and cards for users. We are able to merge customer data from Stripe to your customer data from your database. Our goal is to have one place to understand all your data (wherever they are).

Your data are safe, requests are made from your browser to your backend without passing through our SaaS ;) Forest never make queries to your backend.Are you looking for an administration such as PhpMyAdmin for Mongo or something to manage your data as WordPress?"
2015-11-10 23:41:58;RanvierMUD: a multi-user dungeon in Javascript, using NodeJS.;"+1 Just for having ""Holy crap there is actually documentation and guides for this thing!""Since you are using js, why YML and not JSON?Great work! Thank you for sharing. I must read all this code asap."
2015-11-10 23:00:25;Mongoose query help;"You could try casting them using bson to actual objectIds, but I haven't had issues in the past with mongoose doing type casting automatically.

    npm install bson
(this is used inside mongoose already, but we're installing it top level to give ourselves easier access)

Then in your code:

    var ObjectId = require('bson').ObjectId;
    idsToIgnoreArray = [
      new ObjectId('5640fe971379b41c2ec14cbe'), 
      new ObjectId('5640fea61379b41c2ec14cbf')
    ];

Also if that doesn't work, make sure that the $nin is actually where the cast error is happening by removing that statement and making sure that the error still returns, as it could be something in your $near statement.This is a linked from mongoose query https://docs.mongodb.org/manual/reference/operator/query/nor/  

You're looking to use the $nor operator."
2015-11-10 22:31:32;express routes error handling;
2015-11-10 18:18:26;Kabuki: new boilerplate for React 0.14 with flux, WebPack and Heroku;Should I have used Gulp instead of Webpack?
2015-11-10 14:52:41;Made a gif showing how to debug Node.js code with Chrome DevTools;This is absolutely amazing. To even think that all this software is open source is baffling to me, honestly.Nice!  A followup to demonstrate step in/over would be cool too :+1:Node inspector is the shit. Is node inspector decent now? Last time I used it, well it wasn't so decent.
2015-11-17 20:33:22;First time with nodejs, need help;"Not a clue bud, but I wish you the best of luck. 

Stick with it, I always learn the most after getting completely stuck and frustrated. What exactly are you trying to achieve? How are you adding this module? Do you have a node server set up? Looking at the woocommerce module, it looks pretty straight forward. Instantiate a woocommerce object and make API calls to your store and display the data/products returned.Well regarding how you know if a module is working or not, if you did an npm install of the module and required it in your file, you'd get an error if it failed to find it.  If you could remove your personal keys and put some sample code online, I'd be happy to look at it for you.Read the documentation right there in the link you provided.

Connect to your WooCommerce instance:

    var WooCommerce = require('woocommerce');
     
    var wooCommerce = new WooCommerce({
      url: 'mystore.com',
      port: 443,
      ssl: true,
      consumerKey: 'ck_123456789abcd',
      secret: 'cs_abcdefg12345'
    });


... and then fetch your products:

    wooCommerce.get('/products', function(err, data, res) {
      console.log(err, data, res);
    });

Which part were you struggling with? I would suggest wrapping the `new WooCommerce` call in a `try..catch` statement and log any exceptions. If you're sure that your url, key, and secret are correct then perhaps it's an issue with the port? If you're not using SSL then you should set `ssl` to false and your `port` to 80.The devDependencies are going to be the testing tools:

Chai - is a Testing Assertion Library
Istanbul - is a Code Coverage Tool
Mocha - is a Testing Library
Nock - is a Testing Tool to Mock HTTP Requests so you can fake test your REST APIs and so forth
Sinon - is a Test Spy 

I've never heard of Sinon but the others are fairly popular libraries that help you test your module and/or app.

"
2015-11-17 19:43:11;I'm trying to make a GroupMe bot. What is a .env local file?;[deleted]were you able to get this to work? I just got my bot running and may be able to walk you through it.
2015-11-17 19:14:15;csurf and helmet;"You can use both, decent examples here 

http://webapplog.com/express-js-security-tips/"
2015-11-17 18:02:28;Introduction to Testing Node.js [video];
2015-11-17 17:35:36;ContainerShip is a Docker container management system implemented in node;
2015-11-24 23:35:45;Build an App with Vue.js: From Authentication to Calling an API --> decent UI work for the node-style JS dev;
2015-11-24 23:32:28;Questions About Cache and React in Node.JS;"1. Redis is your answer here. You can either roll your own Redis instance, or there are various free cloud options out there (RedisLabs) to test the water or use in a low volume manner at no cost. Use this in conjunction with a nice control of flow library like Async to do what you want to do.

2. At a low level you can fiddle about with 'lighter' frameworks like Knockout.js to build up interactivity quickly, or you can start going in with both feet and use React or Angular for a more 'all in' strategy.

3. Up to you. Alot of people have suggested that websockets are the answer to AJAX calls, although once you start scaling up (if that's your plan) you would need to think about the load balancing considerations of using websockets where you'd need to use these with redis pub-sub to stop your clients losing their connections if they are being load balanced around different servers."
2015-11-24 21:41:21;Is there any guides for setting up JSON Web Token Auth with MySQL?;"I basically just followed [this tutorial](https://scotch.io/tutorials/authenticate-a-node-js-api-with-json-web-tokens) and others on the same website but replaced the MongoDB stuff with equivalent SQL queries. It should be pretty simple, as you can follow everything almost exactly, just replacing the database-related stuff as you go along.

*I'd send the code, but it's on my school computer and I'm on Thanksgiving break for the next week.*"
2015-11-24 20:36:11;Securing Your Node.js App;
2015-11-24 19:16:06;having a problem with fs.readfile in nwjs.;"Lines 27-31 execute BEFORE your readfile callback is complete hence keyFile is undefined. You need to move those lines inside the callback.As I said at the end of the post,  when they are inside of the callback,  including the return,  they work,  but the return is empty. 

In the subsequent function showthefile(), keyfile is undefined."
2015-12-01 23:52:15;Avoiding the California DMV with NodeJS;"This is awesome! I take it other states have a completely different API?Your code commenting is really good. I would really ditch https for [node-fetch](https://www.npmjs.com/package/node-fetch) I would swap Q for [bluebird](https://github.com/petkaantonov/bluebird), its incredibly well tested and prevents you from writing such verbose promises. and maybe instead of rolling your own formatdate use momentjs.

Also dont forget the unit tests ;)Wickedok but riddle me this

 why do you have to wait up to a week for a license to be mailed to you!
The Canadian version of DMV (in Ontario) limits access specifically for this reason.[deleted]  
 ^^^^^^^^^^^^^^^^0.2663 
 > [What is this?](https://pastebin.com/64GuVi2F/28839)"
2015-12-01 22:26:01;Looking for a NodeJS developer [PAID];">Payment will be discussed.

Let me guess. 30% once it generates money? "
2015-12-01 22:07:30;[Question] Video Steaming with NodeJS;"I've messed around with projects like this. https://github.com/roman01la/RTVideo
It depends on if you are going to serve recorded videos like, youtube or live webcam video.
There are other projects like, http://simplewebrtc.com, https://easyrtc.com, http://peerjs.com, https://github.com/stephenlb/webrtc-sdk that do more of a ustream.tv or http://chatroulette.com
I'm a fan of EasyRTC myself, it works well. I have much experience with it.
"
2015-12-01 17:51:12;I just published a module to test NODE_ENV variable by using strings/regexp, I would like you to give opinions/suggestions/improvements.;What problem does it try to solve? This will break stuff like envify and dead code elimination, and IMO decrease readability.There's a lot of configuration based libraries out there that achieve a similar thing (i.e. Confidence by the Hapi guys) and imo you could probably avoid doing checks in code on the value of NODE_ENV if something were config-based. Just my thoughts.
2015-12-01 13:36:10;Node.js Architecture;"Just to clarify - do you mean the architecture of building a Node application or Node itself?

At a very high level, Node is basically [libuv](http://docs.libuv.org) bound to the [V8 JavaScript engine](https://developers.google.com/v8/).

The [libuv design documentation](http://docs.libuv.org/en/latest/design.html) is probably what you're looking for if you're curious about how Node's single-threaded event loop is implemented.

For V8 internals, there's a [lot more information here](https://developers.google.com/v8/under_the_hood) about how the JavaScript engine itself is implemented and optimized.Read ""Node.js Design Patterns"". It's one of the best books about node, imo. Additionally you could use node-inspector as debugger to traverse the js side of things.So the way I think about the node ecosystem is that it is largely unstructured. 

First there are the core node libraries which are part of the node.js run time:

https://nodejs.org/api/

These would in someways be analgous to Java class libraries which come with the JDK. 

Then you have NPM packages:

https://www.npmjs.com/

Where there are some popular packages which have their own structure and architecture with a large number of packages around them. There are also many utility packages which have small singular bits of functionality. 

NPM packages are loaded into the node interpreter and made available to the associated run time.

From a design perspective the big difference is that node.js uses asynchronous call backs, which is vast difference between node.js and many non-synchronous languages. Async callbacks can also be implemented using 'Promises'.

This means that node.js has it's own scheduler which runs functions in node.js based upon the various triggers such as the availability of data.   
had [a conversation](https://www.reddit.com/r/node/comments/3svpyd/i_am_not_bad_at_javascript_but_i_find_it_really/cx0ujxc) about this a couple weeks ago. I definitely think that lotsa people would like to know more about internals with help from the experienced."
2015-12-08 23:04:39;Running ES7 with Babel 6;Cool, nice postSo this transpiles on the fly? Is this going to slow down initial loading of all scripts a lot?While I do understand Babel 6 moving to presets, plugins etc I really dislike having my package.json polluted by even more micro-modules. Why?
2015-12-08 21:04:16;Node.js server;"If you are just developing and learning Node, you don't need Apache or nginx....

Node is it's own server. Just install Node.js create a file somewhere like:

    /tmp/server.js


    var http = require('http');
    
    http.createServer(function (request, response) {
      response.writeHead(200, {'Content-Type': 'text/plain'});
      response.end('Hello World\n');
    }).listen(8000);
    
    console.log('Server running at http://127.0.0.1:8000/');


Then run:

    # node server.js


Then visit http://127.0.0.1:8000 in your browser. That's it. It has it's own web server built into it. No Apache or nginx needed.

Once you get further into development and want to maybe run multiple Node servers on a single server instance, THEN you throw something like nginx into the mix, serving as a proxy server between your virtual hosts and your Node servers you have running. That is a later topic you don't need to worry about while learning though.
I run many production Node servers and as you experiment wiht different projects you'll find just running your node app on it's own is a fairly limited approach... the basic formula is...

Nginx, Node (NVM is a great tool for managing Node versions), MongoDB (or your prefered DB) and the final piece of the puzzle to help you run and manage many Node applications on one server is PM2.

"
2015-12-08 19:44:24;Apigee, RisingStack and Yahoo Join the Node.js Foundation;It's like an announcement about node can't go with multiple mentionings of the word enterprise these days...
2015-12-08 16:20:00;CodeLobster PHP Edition - Free PHP IDE;
2015-12-08 15:06:03;What is Node? How does Node work? What is Node good for?;
2015-12-15 23:39:26;Node.js Version Usage in Commercial Projects;This makes me feel so much better. I thought we were so far behind on our node versions in production by still being on 0.10. Pretty crazy to see we're still in the majority.
2015-12-15 20:54:08;Questions about best practices in writing modules;"Options object might work, or setting variables and getting them with something like nconf

Unless your module is synchronous (which it isn't), don't throw errors, either you inherit from EventEmitter and emit an error and return, or you callback with callback(new Error(), null) as per node practices 

Of course you can check the arguments but don't overdo it imo. If they're a string and have content, connect to Dropbox, if it failed callback with the provided error.

Error class is fine.

Tests depends on the code but a few pointers:
it runs on intervals
it can fetch mongo dump
it can connect and transfer to Dropbox (mocked likely)
and check that it callback with the expected errors

Usually you have an index.js and /lib folder. Amount of files is entirely up to you. Think in terms of separation of concern"
2015-12-15 20:41:59;Guess Famous People game built on React Native and Node;
2015-12-15 20:28:17;I switched from PHP to Node recently and want to start working on open source. Suggestions?;"You might want to start by thinking of the most annoying things you've come across while using certain frameworks or open source applications and contribute to those repositories. Alternatively, you could look through the Issues for common JS repositories on GitHub and giving your own feedback or implementing the change.I've always got node projects to work on, and I like to think I'm good at explaining things. What's your experience with programming? Just PHP and JavaScript? Any extra stuff like databases, C++ (for node bindings), or frontend frameworks? Not that it matters I'm just interested. I've been working on a program called [bitbin](https://github.com/bitbinio/bitbin) which is effectively a way to keep large binary files versioned and synced without having to commit them in the repo. Currently, I'm trying to get some of the adapters done but have been really busy as of late, and it's a good project if you're fresh to node as there's a good mix of streams, promises, and connectivity.

I have a huboard setup with a lot of issues that anyone can tackle.I know there are various solutions out there, but how about a light weight/ highly portable charting/graphing/dashboarding library optimized for node?

Pretty much my qualm is that D3 is AMAZING but isn't the quickest method of deployment. I know that there's dozens of lists like of top JS libraries like [this one](http://www.sitepoint.com/15-best-javascript-charting-libraries/) and the other end of the spectrum is a rich client tool with a version of D3 builtin. 

Let's face it, people love charts and graphs, but D3 is a mountain of a learning curve to a non-coder to visualize some data.

I would LOVE an easy tool kit for backfitting any chart type and wire it in to the data set as an after thought. Obviously assuming everything else on the developer's end is constructed correctlyYou can give a help to http://codecept.io which was transitioned from PHP's Codeception as well ) It is an acceptance testing framework built with ES6. We really need help in creating helpers to work with Protractor, Nightmare, or PhantomJS backends."
2015-12-15 19:56:48;Why Microservices Work For Us;
2015-12-22 23:58:32;Real-time diabetes management with Node.js and Microsoft Azure;http://www.nightscout.info
2015-12-22 23:07:09;[Question] Dynamically instantiating classes;"> people using window['classname'] but I don't know if it's the best

What's wrong with doing that?"
2015-12-22 22:19:24;what the node??;.org bruhits like steam.comwe can do a kickstarter https://undeveloped.com/buy-domain/.com/nodejs.com
2015-12-22 18:37:57;Deploy Node on Linux, 2016 edition;Interesting, I'd never seen how to write a .service file.
2015-12-22 15:18:42;What's the best action to take if you need to modify something in node_modules?;"You could npm install it via the URL of your repo. Example: `npm install --save https://github.com/wtfaremyinitials/osa-imessage.git`- Fork the code/branche you like on your own github section
- npm install  yourNameOneGithub/TheRepoName   --save
The other suggestions to install from GitHub are valid, but another option is to publish your own ""scoped"" version of the NPM package. https://docs.npmjs.com/misc/scope

This is especially useful if the package uses CoffeeScript, ES6, etc. where installing from GitHub would get you the sources but not the compiled code.Unless there is a binary involved, I would add it to my projects git repository until the PR is merged and released."
2015-12-29 21:23:53;How to use HTTPS in Node.js using Express 4.X?;"the truth is that you should use a server like nginx in front node and let it deal with https. If you're serious about web development that's usually how it is done.

otherwise you should use node https module and register your express app as an http handler"
2015-12-29 20:53:30;Copy Clicker | Quick and dirty realtime clicker;About 11cps max on a cell phone, but I managed to screw em over for over $1000[deleted]
2015-12-29 20:43:07;Weather in the Terminal (xpost /r/webdev);"Hey it looks really cool!

one comment, why don't you add a screenshot or a sample output, sometimes I don't wanna download a new thing to try it out. 

actually, if you want I can do a PR and get some sweet github karma :P It looks nice.Some of the simplest things are the most awesome. Thanks.You should add configs so you don't need to pass in -c every time if you are not from the USA. 

Also give the speed unit its own flag and add km/h as well as m/s. For example here in Ireland Celsius and km/h would be common but in the UK Celsius and mph would be common.

Linked to this obviously would be more localisation to improve the utility.the -c flag doesn't work on the npm version, works on githubwhere is it"
2015-12-29 15:01:16;Small library I wrote for working with ES6 promises. Critique welcome.;"I like it. It's simple and doesn't try to reinvent your async workflow completely to do the job. Lately I don't write many raw Promises (mostly `async function` and `await` for me now, thanks Babel!) but when I do I'll have to keep this in mind!

My only recommendation: make es6-promise an optional dependency and do some smart detection around the `Promise` var - anyone targeting Node 0.12+ or Babel already has a Promise (natively or pre-polyfilled), along with many other usecases. [Here is an example of this](https://github.com/Mitranim/xhttp) that I contributed some (very small) code to.Had a brief look, well done!Use ramda map instead. Same functionality I like the idea. I think RxJS observables solve the same issue. They provide extended array methods like map/filter/reduce/flatMap are available. The observable is like a promise that can be subscribed to and that return multiple values over time."
2015-12-29 13:27:42;gen-readlines: A generator based line reader;
2016-01-05 23:27:26;Weather in the Terminal - A Week Later (and thank you!);"that's badassworked way better then expected, kodus !  
a few things from the top of my head

1. a way to format the output for usage in other programs (so i can pipe it in to lemonbar)  
1. variable amounts of days printet  
1. options for what data to show (maybe i wanner show a green/red button depending on if it's raining/snowing or not)  
  
  
ohh and `-c` should be the default :pThis is great and deserves an upvote, a star and a watch!"
2016-01-05 21:27:48;Find todo/fixme comments. First node package. Would love some feedback.;"The README could do a better job of ""selling"" the software. What are the advantages of this tool over a general purpose utility like `grep` or the combination of `find` and `grep` or even the search feature in an IDE/editor? Is it faster, does it use less memory, is it easier to use, does it have nicer output,  etc.? Try to convince potential users that your tool is the best out there."
2016-01-05 20:34:51;Is your package trending? Compare npm package download counts over time with this web app.;"I'm new to node, and coming from rails, I found all the choices I had to make when building my stack to be pretty overwhelming (angular vs react, gulp vs grunt, express vs koa, and so on). I built this app to help myself, and fellow developers, spot trends among npm packages and hopefully make the decision making process just a little bit easier.

I'd love any feedback you may have!

Thanks, John PotterWhen I search for my package ""irc-regex"", I noticed if I go back 1-year - it shows there were download for it, before it existed?

Also July 19th shows 23 downloads in the 6 month view, but in the 1-year view, July 19th shows 1 download, but January 18th of last year shows 23 downloads?!woah this is really cool. thanks for making this, how long did it take?That is impressive. Not only did it take you three weeks but it also seems.very polished. thats really good for 3 weeks. so how much of your ruby knowledge transfer? I think ruby devs may have an advantage with nodejs because it uses tooling similar to rakefiles etc."
2016-01-05 16:37:21;How do I choose which back end to use?;"Yes.  You can build a website without a framework as well.

Express does more than enough as a back end web framework to start, and is a pretty robust.  It may even be too heavy, since it contains a lot of things.  It really depends what you're doing.  

NodeJS is the base layer for your server side.  On top of that you can add a framework (like Express) or simply use the NodeJS HTTP library to serve up requests (I recommend reading up on it a bit at least, even if you use a framework), and then you have the option of adding a Client side framework (like Ember or Angular or React).  In addition most sites will also include some kind of Database, such as MongoDB or PostgreSQL.

The way I learned NodeJS when i was starting out was to JUST use NodeJS and use the HTTP library to return some text files.  Then once I figured out how it worked, I added Express and learned how it handled web requests and had that serve up some basic HTML pages / static site.  From there I added a database and then worked more on the front end/client.

If you're struggling to figure it all out, I'd recommend doing it piece by piece from the deepest layer out to the client."
2016-01-05 13:42:34;How to broadcast AWS SNS messages to browsers using deepstream.io;
2016-01-12 22:09:46;Need help on building an Express.js web app with CMS/blogging features;"
1) map your CMS object models out with mongoose
2) write up CRUD routes in express
3) use jade
 
You can save time by putting the UI together with a Bootstrap so you aren't reinventing the wheel to build a back end that creates and manages content.
 
If it has to be any easier than that, there's nothing wrong with Wordpress!If you don't mind using an external service, there's Prismic.io. The back end is saas, then you have an API to integrate content to your node application.

(Disclaimer: I work on Prismic.io)Since you are asking for existing frameworks, I would suggest Sails. It's ORM, coupled with common CRUD operations, rest API out of the box and template rendering optional. I use it to quickly create backend since everything else is handled by frontend.The first question I would ask is why has both the framework and data store been pre determined?

Then I would mention that recreating the wheel is usually not a good idea. They're are many open source, off the shelf CMS/Blog software solutions that will save you so much time and effort.

If you really ""need"" to go this route I would suggest using a 3rd party service such as contentful for content management. Is there a reason that it _has_ to be integrated with the rest of your app? If not, I would just spin up wordpress (or if you want to stick with node, [ghost](https://github.com/tryghost/Ghost) seems to be perfectly capable) and use nginx to proxy the necessary pages to it. In terms of not reinventing the wheel, thats definitely the easiest option. 


Alternatively, you could go with a static site generator that takes in something like Markdown and spits out HTML. Thats a bit more lightweight and wouldnt require an extra server or database.

If it definitely needs to be integrated with your application, a quick googling turned up [KeystoneJS](http://keystonejs.com/docs/getting-started/) which looks to be somewhat like you're describing.Have you seen Meteor, Sails, and the newborn Nodal? "
2016-01-12 21:21:49;Monitoring your NodeJS app with Datadog;What is the impact on performance adding this an extra package to my app? I assume it is much higher than just running something that monitors the actual server resources and gives the same information.
2016-01-12 21:15:12;Getting Started with Node.js and MQTT;"Playing with MQTT and node.js since 3 years now, I'm glad to see such type of article.
"
2016-01-12 16:57:33;Building a daemon app with Node using Microsoft Graph API;"Full disclosure, I work for Microsoft and wrote this sample to demonstrate how Node developers can take advantage of the Microsoft Graph API without user impersonation using a server/daemon app. Feedback or suggestions are super appreciated.Handy, even for those of us not developing in node.js (I'm using Perl for example).  Confidential client flows in OAuth2 are important for sysadmins to run batch jobs (we're looking to use them to do student timetables in Office365 in a similar way to how we already do them in Google Apps for Education).

Its a bit of a shame that the Graph API is a bit rough round the edges still and doesn't always support what we're trying to do unfortunately."
2016-01-12 14:41:38;Upgrading node.js on Windows without GUI access?;"IRRC, you can specify the node version in the administrative portal of Azure.I don't use Windows, but maybe `npm install -g node`i'm using https://github.com/coreybutler/nvm-windows

Although I don't know if it's wokring on Azure"
2016-01-19 23:24:10;SocketIO: Suggestions on clean way to add events to every client?;"actually i tried to implement your scenario but got stuck somewhere
i put the var event in some application.js and export from it.
then i got issue in passing socket object to those functions. I also created setSocket function init but still not workingThat's a fine way to do it. It works. It's consistent. 

The alternative would be to just bind to a single channel and use the data sent to differentiate between commands, like this (probably not entirely accurate code cause I'm on mobile):

socket.on(""msg"", function (data) {
  events[data.cmd](data, socket)
})


Edit: [Here's an example](https://github.com/shakefu/shootingstar/blob/master/src/server.coffee) where I did almost the exact same thing as your approach but without the loop for legibility. 

Feel free to ping me if you have questions."
2016-01-19 21:07:18;Authorization service for a Microservices Architecture;
2016-01-19 20:07:09;Control iTunes via CLI;
2016-01-19 19:18:01;Pull Request with ChakraCore Submitted to Node.js Mainline;"I haven't tried it, but the idea of using asm.js server side is very compelling. The size of the download and the capability are the reasons I haven't used asm.js on the browser. That isn't really a problem server side.

I can't believe I'm excited about a Microsoft project. I'm not trying to troll, but to me Microsoft is only for video games, not for actually getting things done.This is... actually pretty awesome. I'm glad there will be alternatives for the JS engine in the case that one gets a bad security vulnerability or stops being maintained. 

Hopefully this will both help push V8 devs to implement new features faster and increase perf all around."
2016-01-19 18:56:19;Node Module Walk-Through: Get Port;I would like to see this series continue.Why is pinkie-promise needed?   ES6 already has promises right?
2016-01-26 19:07:57;esprev: Preconfigured Babel with support for ES6, stage 2, and stage 3.;
2016-01-26 16:07:22;Convert PHP array into JSON object?;"that a:28 means it's an array, not an object, so it's going to convert it to an array, not an object.  you'd do formObject['form_title'].

Why have you got serialised PHP objects in your MySQL DB?!"
2016-01-26 15:20:04;Emacs vs. WebStorm For Node.js Development;Pretty sure theres nothing better than Webstorm for Javascript development. Jetbrains editors in general have always been great to me.Webstorm has a local history where you can restore your files from, even if you managed to remove them before you saved your changes to version control - in a pinch that is worth a lot.Automated refactoring?? Hell no. Nope. No. Nah. 
2016-01-26 14:02:54;Turn off npm3's progress for 2x speedup!;"On a project with a billion dependencies this speedup the process from 5m2s to 3m38s so even though it's not 2x (since there are a ton of deps) it's still super-noticeable.Guessing they don't throttle the draw call.

Drawing every 1/4 of a second is usually more than enough for me when it comes to progress bars. If you're really picky, you can update every 40 ms, that's 25 updates a second and beyond that you will not see any meaningful difference visually.

..Just don't redraw the entire ansi progress bar *every* time data goes through it.1 second vs 2 seconds.... no big deal
1 year vs 2 years... big deal

npm install... that grey area in between"
2016-01-26 13:48:30;node-big-rig: A CLI tool to parse trace files;
2016-02-02 23:58:07;Disable Strongloop rate limiting?;"You should check out the ulimits for the user you're running the app under. You might be maxing out your file descriptors Hi! I work for StorngLoop, just to be clear, Loopback *does not* impose any kind of rate limiting on your API. I also took a look at your [StackOverflow question](http://stackoverflow.com/questions/35141277/node-js-sporadic-econnrefused-error-on-request-get) and added a comment to the one answer so far. The link you put in that SO post was to our API Gateway documentation, not to the Loopback documentation. Separately from LB we have a gateway product that allows the developer to impose a rate limit on incoming requests, but this is completely separate from the LB API you are developing.

Unfortunately, I do not have a better solution for you. I agree with the SO answer that this is an OS limit, and my guess is that if you run this same app on Linux or Mac (*nix based) you will not run into it, or you would be able to change that limit."
2016-02-02 22:36:34;Node LLVM bindings;Isn't that a little outdated?
2016-02-02 20:54:25;what are some good frameworks which include an admin ui already. Like Keystone without the view stuff;Have you considered using something that you've already looked at on the back-end and combining it with something like [ng-admin](https://github.com/marmelab/ng-admin) or [react-admin](https://github.com/marmelab/react-admin) for the front-end?I'm not aware of such a thing that already exists, but I am building one.
2016-02-02 20:03:37;nci - flexible, open source continuous integration server written in node.js;Looks great! I'd need the remote runner support for using it, and ideally Docker support too :) Thanks for writing it!
2016-02-02 19:16:55;Let’s start Webpack Part 1;
2016-02-09 20:55:42;Pluggable DB example;"You have to create an internal API (and models) for your data handling (which you ought to be doing anyway). Then wrap them around functions for each  task for each database.

There's really no such thing as a perfect all around database or pluggable system that works out of the box.

    function mongo_addUser () {};
    function json_addUser () {};
    function nosql_addUser() {};
    
    var api = {
      addUser: mongo_addUser, // choose implementation
    };
    
    module.exports = api;I don't have time to find it right now but what you're looking for is a Database Agnostic ORM (or ODM). You should be able to find a package that abstracts the actual datastore away from your models. check out levelDB for sure: https://github.com/google/leveldbYou could do something like that with knex.js, but it's for traditional RDBMS. It does support sqlite in memory databases, Postgres, MySQL, MSSQL, Oracle, etc. I think it's easier to do this with traditional SQL DBs as there's a semi-rigid standard that most vendors follow (SQL), but so far as I have seen the same is not true of NoSQL DBs so the data access varies a lot between them (my experience is only with MongoDB/RethinkDB).What you explain is not a common problem, so you'll have to do some of the work yourself. But you should definitely use a database wrapper like [SequelizeJS](http://docs.sequelizejs.com/en/latest/docs/getting-started/). It can connect to various different databases, still having the same syntax for managing data.I ended up adding prototype functions to my entities. Files are named the same, as well as functions, but are in a different dir (mongo and nedb for now).
The code in app.js looks the same, just the different require path is used (just dir is different).
Thanks. "
2016-02-09 20:19:30;I think I finally created nice ActiveRecord for Node. Not production-, but at least already pet-project-ready.;"Great job. It would be nice if you could include some benchmarks for comparison so we know what do you mean by ""slower""... Thanks again!"
2016-02-09 19:06:30;Secure Password Hashing in Node with Argon2;
2016-02-09 17:55:56;February 2016 Security Release Summary;
2016-02-09 17:02:03;Creating paging with 2 mongoose collection;You my friend, should not have two seperate collections if you want to aggregate data like that. This is why you not use NoSQL for this kind of thing, but RDBMS.You could do the math before making your query to the db
2016-02-16 18:46:33;Do I want modules to re-initialize when clustering? (via cluster module for using up more cores);You're gonna need to show some code. I'm not really clear on what you're asking.
2016-02-16 18:10:30;nodejs css question;It's clear you are new to node, so welcome. It could be one of many different things. Chances are you aren't serving up your static files when you render your index.html. If you post the code in your main server file, post the code within your index.html file, and describe your directory structure I'll give you a hand.[deleted]I'm having the same problem. I have a file main.handlebars with a <link> to css sheet but it does not style the page.Did you include a CSS file in your HTML file?
2016-02-16 16:53:39;[Help] gulp-connect-php issues (Maybe general node issue?);"what is your projects folders structure like, what does your gulpfile look like, and what about your package.json? 

have you ever used gulp before?"
2016-02-16 16:44:25;Barebone MEAN stack;You have mongoose as a dependency in package.json but you require mongodb in the mongo file.Ah brilliant. Teaching myself Angular to make my MEN a MEAN, so good to have barebone resources to grasp the fundamentals on!thanks for sharing.This looks cool, definitely cloning and taking a look. All of the generators are overwhelming for a beginner but at the same time I don't really want to write everything myself. Hopefully this fills that gap. 
2016-02-16 13:16:23;How to process geospatial data with nodejs and TURF.js;
2016-02-23 20:41:41;Core dumps are the most important way to debug a crashing program. Why aren't they supported in Node?;"You might check out `--abort-on-uncaught-exception`, which, in the absence of domain use or a user-registered `uncaughtException` event listener, will crash the program at the top of stack and produce a useful core. You can debug this (as others have suggested) with `mdb` on SmartOS, or `lldb` with the [`llnode`](https://github.com/indutny/llnode) plugin, which will demangle JS stack frames & provides some tools for inspecting JS values. Keep in mind that there will be garbage present in the core! Hopefully this helps.Young Xiao of Netflix had this nice talk about debbuging Node.js in production http://youtu.be/CiqzuIUwHl8
Unfortunately, things like postmortem debbuging are only work on Solaris (I believe it's because of Joyent's own infrastructure), but as fas as I know there was a node working group who's aim is to add support of such staff for Linux as well. So, hope we'll have this sort of tooling in future.Traditonaly I'd say this is stuff the OS or the JS engine can do better. But I agree with you. This is a known issue and should be adressed in he nearer future. There even is a working group for that https://github.com/nodejs/post-mortem/blob/master/README.md so also add your expertise thereI'd imagine a core dump for an interpreted script is going to be pretty damned messy and not very useful at all.  you'd be debugging the node and v8 interpretation of your script including node and v8 compiled code itself.  for debugging your script you'd really need a debug channel in the interpreter and I don't know if that exists.

also, if you're actually core dumping the node process itself, then you have found a bug in node, and then you'd load it into a node source project and debug that.

welcome to the wonderful world of interpreted languages, where even the abstraction layers have abstraction layers and nothing is as simple as it seems.This is Javascript we're talking about here. It isn't exactly known to be the most intelligent of languages. "
2016-02-23 17:46:42;Any good tools for quickly throwing together API documentation?;I use swagger via swagger express middleware. Some things aren't documented so well, but generally swagger is pretty fucking awesome. Once I've defined my HTTP schema I get API docs for free.I've been using [Api Blueprint](https://apiblueprint.org/). The format is a superset of markdown, so the source files themselves will display nicely in GitHub etc, but there's also a bunch of great tools for generating other formats from them. I've used Aglio, which generates HTML docs [like this](http://htmlpreview.github.io/?https://raw.githubusercontent.com/danielgtaylor/aglio/blob/master/examples/default-triple.html), there's [Apiary](https://apiary.io/) which gives you a hosted interactive API console, there's a few tools that will generate Postman collections for you, and you can even transform your API blueprint into Swagger definitions if you prefer that.http://raml.orgI've been using [apidoc](http://apidocjs.com/).  No complaints so far.Checkout https://github.com/tripit/slate which the look is similar to Stripe's API docs if I remember right. I just used it for a large project. It's a rails project and uses markdown to generate everything. It's not a shortcut like swagger but it comes out looking nice. I think someone created a node version too if you search for it.http://lmgtfy.com/?q=nodejs+documentation+generator
2016-02-23 14:33:39;node-currency-swap: Universal exchange rate library with support for multiple providers;cool can it have promises?
2016-02-23 05:35:59;Examples of basic pages using node.js from separate server?;"I'm not sure that is what you asked, I don't really understand if you want to do a simple rest call on a remote host or integrate HTML from node.js into a drupal7.


However, If you want to have html interface from node.js into a html drupal7 page, you can  use  web-components. Here is a way to inject HTML code into a webpage form an external webserver (who can be a node.js webserveur)


1) On the header you import the page
<link rel=""import""  href=""http://externalServerWithNode.com:7080/myForm"">


2) On your page you the tag of your element 
<myform></myform>


3) On the remote page you put this code


<page>
<h1> Hello World</h1>
</page>
<script>
  var me           = document.currentScript.ownerDocument;
  var page         = me.querySelector('page');
  var gate         = document.querySelector('myform');
      gate.appendChild(page.cloneNode(true));
</script>

(sorry if it's not what you asked)Sure, you could make a Javascript application that is stored on the drupal server source data from nodejs. Node could (with CORS headers) supply JSON to an angular app, or render html to an iframe. The tricky pieces come around session management and single sign in if you need your node app to be secure."
2016-02-22 22:49:19;Creating and Publishing a Node.js Module;
2016-03-01 21:06:18;Having trouble with npm update;How are the versions defined in your package.json? https://docs.npmjs.com/cli/update
2016-03-01 19:28:19;Is it realistic to learn Node in two months and find a job?;"Any coding experience and projects you worked at?How much time are you going to have to sink into this? If you put in 3-4 hours a day, every day over 2 months. You'll get somewhere pretty fast in terms of being able to take on a job. 

But getting hired, without any experience and only two months under your belt might be an issue. IMO you should go beyond learning node.
Learn javascript (node is just javascript with core libraries).
Actually don't learn javascript, learn how to code.
Even more, learn how to learn.

I'm not the only one with this opinion: http://blog.codinghorror.com/please-dont-learn-to-code/

Also a side point: learn how to test. Testing (may it be unit, behaviour, …) is really important. It helps you code better, have a stronger code (less bugs, or more easily identifiables), more maintainable, and so on.

If you know the basis of code, and how to learn, not only you'll know node, but you'll potentially know php, ruby, scala, whatever.

I strongly encourage you to read:

* [Clean Code: A Handbook of Agile Software Craftsmanship](http://www.amazon.fr/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882)
* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.fr/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612)
* [Test Driven Development: By Example](http://www.amazon.fr/Test-Driven-Development-By-Example/dp/0321146530)

Those books are references to a lot of developers and will teach you techniques that you'll be able to apply not only to node, but to the most of languages you'll ever encounter.Yes. I learned it in 2 months more or less on the side. Went from doing some very simple freelance frontend dev (css, jquery) to a junior full stack position (angular + node) at an agency and 6 months later had enough experience to move again into a better position at a start up. The first month on the job was tough. 



Egghead.io and Scotch.io were great resources for learning. Node is quite simple to get going with, but what you really need for the job is a good understanding of Javascript and reading a few books on JS really helped me. Focus on JS, the rest is easy.Whats you javascript knowledge? I can recommend the courses of Tony Alicea on udemy. As a foundation you should finish ""Javascript: Understanding the Weird Parts"" and then as a followup his nodejs course ""Learn and understand Nodejs"". I completed both of these courses and they are really, really good.

https://www.udemy.com/understand-javascript/
https://www.udemy.com/understand-nodejs/You should really put some time into learning and understanding vanilla JavaScript (especially how prototypical inheritance works), CSS, how browsers function internally (will save you loads of headaches later on) and best practises.

That will help you tremendously wether you end up coding backend stuff in node or frontend in whatever framework you end up in.Hi, as one my colleague said during one of his seminars dedicated to node.js development: ""It's much more easier to start develop in node.js for those who already has experience in front-end development, for instance in angular"", and I agree with him. 

I can say that I've learned angular in about two months during the work on the project I was assigned to. At that time I had no real working experience with JavaScript but only little one with PHP. In my opinion, there were two facts that helped me a lot: 

- a C# certificate, so I more or less easily jumped in JavaScript development;
- a person I was attached to gave me some directions and advices + helped a lot in solving problems I faced.

So if you wish I can share some literature and notes with you and some simple angular app, I've wrote during the learning process (it is not finished and at now does not work due to changes in YouTube API).You can learn Node well enough to code stable and efficient websites in a couple weeks.

But before that be sure to have a good knowledge of :

* JS
* how Node.js works
* how websites work
* security

----
*Edit : Accidentally forgot to mention JS :)*Absolutely. 

**Build**.  Find a practical problem you have and solve it with code. 

**Contribute**. Find an open source repo that interests you and submit pull requests.  Fix bugs.  Add features.  You'll find a lot of people willing to help, and learn to adhere to code standards, workflows, tooling, and more.

**Teach**.  Nothing helps you understand something better than explaining it to others.  Write a blog post.  Create a slide show.  Give a presentation.  Go to http://www.meetup.com/ and find some groups near you. Well, you know yourself the best; could you? What's your history with picking up new technologies? Are you a quick learner?

Also, it sounds like you're a Linux admin who wants to transition. Why don't you just build up your current foundation of knowledge and apply for another sysadmin job? Then you'll have income and just dedicate your nights and weekends towards coding?

Anywho, like other commenters suggested... you should probably find a project to work on. One suggestion on finding projects is to look to see if your city hosts a Code for America brigade and see if you can donate your time there.Checkout [freecodecamp.com](http://www.freecodecamp.com/) they have great resources for node and a very helpful community to get you through everything. The projects they have you work on can also be used to showcase your experience. A friend of mine did something very similar and got an entry level position with NodeJS. 

Also try CodeAcademy.com for picking up JavaScript (which is probably a good place to start, since NodeJS is essentially JavaScript applied outside of its usual environment).

If you already know JavaScript and have an understanding of http communication, absolutely. The bulk of the learning is just understanding commonjs modules and the core api, which can be picked up in under 20 hours of hard study.

After that it's a matter of mastering the ecosystem and learning what libraries you need for what purposes. Frankly, that's an ongoing educational process, but the most important bits like Express and various IO libraries are probably another 20-40 hours of studying projects and tutorials online.

If you don't know javascript... it's gonna take you a lot longer. JS can be very confusing to people coming from other languages, especially typed languages. If I had a dollar for every time I heard a Java dev curse at JS and asynchronous flows, my IRA would be in a pretty nice place.

If you have never written a web backend and don't understand http concepts, you may have a bit of a learning curve to climb while grasping the stateless nature of the web and what pieces you need to use to accomplish what you need.Since you are new to coding, you should start with basics of web technology like html css javascript and then to node. http://freecodecamp.com/ is a great resource for you. Complete the course as fast as you can. In there we are building projects too, it can add to our portfolio. Getting a job with the projects in portfolio will be very help you. If you have any doubts ask in here: https://www.reddit.com/r/FreeCodeCamp/You should expect your learning to take 6-12 months. As someone who has trained people with an aptitude for learning as a part of my job, I'm upset that others are suggesting anything less.
 
No matter your natural ability, in two months you will not be able to grow your knowledge base to a point where you can work in software.

If you learn react, you will also have to become *familiar* with node and npm anyway.

Here's some things I recommend:

* attend your local meetups for react, javascript and node
* learn how to use git, npm and github
* learn the point of react
* come up with the smallest project you can think of that solves a problem you or a friend has.
* use node and npm packages to solve your problem
* raise issues on those npm packages and attempt to contribute to them

If you can do each item in my list of **basics**, you will be suitable for a junior role.
Two months might be a little too short. I'd say 6mo minimum. Be willing to take a very low paying job at first. Agencies are a good place to start, especially if you are willing to work for a low rate. You'll do a lot of shit work, and maybe get pulled in a lot of directions, but you'll learn, and you'll put a little scratch in your pocket at the same time. That said, you'll still need to code as much as you can outside work. Starting to code in this day and age is not easy. There is sooo much to learn to become useful and not a drag on a team. So you gotta be willing to learn a ton on your own time, and then show some value at work. Never stop building.I think it is realistic to learn the basics of node and I'm gonna guess express in 2 months and be able to build a web server, but like all technologies, experience comes with years. If you can sell yourself well and work your ass off, I don't see why you can't get a job as a node web dev, it would be a junior level position thoughDefinitely realistic! In about 2 months, I was able to build a crappy dating site for fun. That and my degree landed me a pretty awesome job. Tbh, I have a lot more trouble with front end. But yeah, do both, and for front end I'd suggest React. "
2016-03-01 19:16:21;How we instrument Node.js;"""Monkey patching is evil! Use this monkey patching library instead."""
2016-03-01 15:44:50;Docker, microservices and developers grant access;"The question is what is a microservice for you guys?
An NPM package? A product you want to sell? A logical matching cluster of packages?


Your current situation seems to be that you use Docker as development environment. This is not the initial thought of Docker.
(Also it seems to be odd since node is available to the major OS')


The fast solution is that you remove the packages from the Docker Images and just prepare the private repository (the link and account credentials to the very basic stuff your company delivers).
If a developer wants resource X he needs to log in to the private repository with his own account.Running the entire suite of microservices on a dev's laptop works for the start, but not when there's say more than a dozen microservices going on.

In that case I would set up integration or QA servers for every service: instead of running all ""downstream"" services on their laptop, a dev just configures their ""system under work"" to go to this server for dependent services 1, that server for dependent service two, etc.

I'd also consider trusting your devs more... (Although I can see some places where that wouldn't work... but seriously, trust your devs more...)Nginx reverse proxies are great for situations when you only need to control the services you are directly responsible for or most interested in.  You white list the things that live on your machine and pass everything else through to an upstream shared server.  

If set up properly it is fairly easy for people to parrot an existing rule to configure a new service override. Docker as a dev env is a bad time. That's not what it's for. Look into something like vagrant for setting up reproducible dev envs. Package and deploy with docker. Dev with something else. "
2016-03-01 12:57:12;ExpressJS-like Web Application Server in Swift;
2016-03-08 21:58:32;Doclets.io now featuring embedded playgrounds for JSDoc @example. Hot or not?;
2016-03-08 20:03:03;BuiltWithMeteor Weekly # March6th2016;
2016-03-08 19:43:56;Realtime Doesn’t Belong Everywhere — Build Scalable API Services in Node.js with Nodal (x-post r/javascript);
2016-03-08 17:07:59;what are your experiences with express, koa, hapi?;"If you're just building an api, hapi is hands down the way to go. Then just use nginx to serve your static content.  It's incredibly simple.  I haven't used koa, but express has a ton of community resources and makes it really easy to do a full webserver build.I work on [Kibana](https://github.com/elastic/kibana), which uses hapi for its node server.  At previous gigs, I've use express in production, and I've used koa in a personal project.  Out of the three, hapi is unquestionably my least favorite, and I would never choose to use it for a new project.

It's a hard thing to qualify, but purely anecdotally speaking, hapi reminds me of what you end up with when the solution to every problem you encounter is to throw more code at it.

It borrows little from other node frameworks, which means there is next to no interconnectivity between the hapi community and other framework communities.  If you think the ecosystems around frameworks like express or koa are fundamentally flawed, this is no doubt a plus for you.

Between express and koa, my preference is express.

I prefer the progressive approach that koa is taking, but I found myself having to generator-ify too much userland code in order for it to play nicely with koa's middleware model.  Koa 2 swaps out the generator requirement for async/await, which I think will solve my concerns here, but that's not stable yet, and it likely won't be for another year or so.

The express project is ancient in node.js terms, so both the core project and the ecosystem of userland modules are extremely stable.  If you crack open an express 3 project and express 4 project, it's going to look very similar, and that trend seems to be continuing into express 5.  I think this stability is the byproduct of the simplicity of the framework: it seeks to provide a solid core for building composable applications around http request/response lifecycles, and nothing more.I prefer hapi. I used to work with express and have a couple of small projects with it, but the future of it seems a bit unclear. On the other hand, it is great in terms of support because most tutorials are made with express in mind.

I tried koa on a rainy sunday, but it seemed to rely heavily on generator functions and.. I don't know, perhaps I stopped experimenting with it too soon, but I had to use something that didn't require me to learn a lot of ES6/7 functionality (couple of months ago), so I skipped it pretty quickly, which brings me to...

hapi. It still is the way to go for all big projects I work on. It feels like you're not really coding, but just configuring a lot of stuff, for some reason. Its collection of libraries and plugins is brilliant, as the team behind hapi also develops a lot of them. I did find integration with passport to be a bit unnatural, but that's probably me being inpatient, so I wrote a custom authentication plugin. It's not necessarily better than express, as I can't give clear pros and cons to either of them in comparison with eachother, but the future of hapi seems to be a bit more predictable, so it's the first framework I'll pick when I have to start work on a new project today. 

At the end of the day, all of them will do a great job, but koa seems to do everything a bit more 'futuristic' with stuff that I'm not used to as an ex-frontend developer (such as generator functions, async/await), and hapi and express were a bit easier to get started with.Koa here. I love it. Being based on generators makes working with promises great. It has a very good ecosystem too. I've been building my MVC framework [Kratos](https://git.io/kratos) on it.I've given express and hapi a try but ultimately I just go back to using [patterns](https://github.com/watson/patterns#example-a-complete-http-router) as a router (though I might try [wayfarer](https://github.com/yoshuawuyts/wayfarer) next) with [ecstatic](https://github.com/jfhbrook/node-ecstatic) or [st](https://github.com/isaacs/st) as my static file server.  From there I choose whatever npm modules work best for what I'm trying to build.Much like @itsyourdeveloper, I started with express and migrated to hapi. Hapi is now my goto framework for all projects. 

I love how you phrased your question. I don't think there is a wrong or bad framework. Hapi just made more sense to me than express did. I've spoken with several devs who prefer express or koa for the same reasons I prefer hapi. Find what you like and what makes you work smarter, not harder. Gee. Does anyone else feel as helpless as me deciding what framework to use? It's like one day you feel like ""Yeah, I'm definitely gonna use this one!"", then suddenly you read a rant post stating how awful it is, and so you look for alternatives, reading tons of positive stuff until stumbling on the next rant post that makes you feel all lost again. Why can't there be the one framework that at least most of the people agree on... At this point, I feel like express should be the one, as it is very bare-bones, so very few things to be annoyed about, but at the same time holding the potential to make you f**k everything up because with all the decisions you have to make yourself concerning scaffolding, you have a chance of going with the wrong one.
I'm lost, really!I've used and enjoyed express for a long while, even for small throwaway apps. I find after the initial setup is done binding new endpoints is a breeze. I might look at something else to do something thats purely an API server.Started with Express (great place to start for the beginner - there's no shortage of documentation) and have now graduated to Koa.If you're after REST APIs, have a look at RestifyKoa 1.x made Node bearable for me. I use it for every Node project.

But it's hard to recommend right now due to the limbo between Koa 1 and 2. 

I'd recommend Express. Biggest community. Once you have experience with it, you'll be in a better position to evaluate what you actually want out of a web framework.Hapi is my personal favorite. Especially with all the great modules developed inside the org.  
What pleases me the most is that you can feel it has grown with its usage inside of a company. Want to quickly prototype with several endpoints on a process? Multi-connection support. Need to split your endpoints? Plugins with ""partial dependency support"" (a plugin can register independent code right away and defer registration of parts with dependency for when dependencies are registered). Need to share a cross-app concern? In a plugin, mount it on servers, done. Need to add caching? Catbox. Validations with Joi everywhere. I could go on and on. ^^'After lot of juggling, I went ahead with Express. Minimal framework, easy setup, easy to use, great community means great support. If you know what packages to bind, you can get the performance you want, no matter what framework you choose! Be it express or hapi! It's all about what do you want to do?We also have this [Article](http://techblog.netflix.com/2014/11/nodejs-in-flames.html) which then leads us to another contender, [Restify](http://restify.com/)I've been using Express for about 2 years, tried Koa for a few weeks have been using Hapi for the last 3 months.

Koa is really just Express built with ES2015/ES2016 in mind, without the mature middleware ecosystem or stability.

I've found Hapi works very well for both small and large applications, if you start out an app hard-coding routes into your single server.js file to get a quick prototype up and running but need to split them up later it's as simple as moving each handler method into it's own file, making a routes.json file that maps your route -> handler and putting something like this in your Hapi server (routes being your routes.json content):

    routes.forEach(route => {
        if (typeof route.handler == 'string') {
            route.handler = require('./api/handlers/' + route.handler).default
            route.path = '/api' + route.path
        }

        server.route(route)
    })"
2016-03-08 16:55:29;Who can explain callback Fns in the easiest, simplest, human readable way possible????;"Hey dude could you figure out how much it would cost to fly to Miami this summer and give me a call after you figure it out?We are walking and having a conversation. While we walk and talk, I occasionally throw a boomerang. Each time I throw the boomerang you make a bet I will/won't catch it. While the boomerang flies we continue our normal conversation, but neither of us know whether I will or won't catch the boomerang when/if it returns. 

While the boomerang flies we can't move forward on the bet that I will/won't catch it, but we can continue all other aspects of our conversation that don't rely on that boomerage data. We have contingencies in place for catching or missing the boomerang. Until that happens, my hand is just an empty promise that I could catch the boomerang or make an error catching the boomerang. 

Functions that you pass as arguments to other functions, which are called once the target function has finished.

    function eatCookie(cookieType, callback) {
      try {
        console.log('eating ' + cookieType);
        callback(null, 'i ate the cookie');
      } catch (error) {
        callback('i failed to eat the cookie with error ' + error);
      }
    }

    eatCookie('chocolate chip cookie', function shit(err, result) {
      if (err) {
        console.log('cannot shit due to cookie eating failure');
      } else {
        console.log('finished eating with message ""'+result+'"");
        console.log('cookie eaten, shitting');
      }
    });

     // output:
     // eating chocolate chip cookie
     // finished eating with message ""i ate the cookie""
     // cookie eaten, shittingWhat is it exactly that you don't understand about callback functions?    function moreDetails(err, data, cb) {
        return cb(err, data);
    }

    moreDetails(null, { lackingInfo: true }, function(err, data) {
        return JSON.stringify(data, null, '    ');
    })

You can give a function a number.
You can give a function a string.
..... array, object etc.. etc... 
You can give a function.. a function. 

Just like you can use a number or string in a function, you can also use a function passed into it.  

This is a callback, because it's used a lot as 'when you get some information , do this (my callback function) with it.' https://github.com/maxogden/art-of-node#callbacks

    function NeedsToFinishFirst(){
       	//whatever;
    }
    function dependentOnNTFF(callback){
        callback(); //this is the thing that happens first -NeedsToFinishFirst-
        //whatever else needs to happen;
    }
    dependentOnNTFF(NeedsToFinishFirst);When a callback function is invoked, it signals that the function that invokes the callback has finished its job.  For example:

Function that has a callback:

function A(arg1, arg2, callback) {
      //do work
     //when done
    // invokes the callback to signal A is done
    callback(err, result);
}

more examples can be found here:
https://github.com/peterluhub/sonicAsync"
2016-03-15 23:00:55;The Deep Roots of JavaScript Fatigue;
2016-03-15 22:21:17;[Beginner's question] - how to call different functions like I can do in Google Scripts;"Perhaps I'm misreading you, but just 

>   function executor(){
>      myFunctionOne();
>      myFunctionTwo();
>      myFunctionThree();
>    }
>
>    executor();it runs whatever top level code there is, so just put your function call there."
2016-03-15 19:45:48;These people are launching their first open source projects tonight!;
2016-03-15 19:36:49;V8 Release 5.0;Do they not follow semver? 5.0 sounds like a major release, but I don't actually see anything substantial in the changelog.
2016-03-15 19:07:11;MEAN stack beginners tutorial (Improved). Covering Express - Hello World!;No MongoDB please.
2016-03-22 20:33:35;Node JS N00b Questions;"I really like scotch.io for tutorials, they have a ton on node. I'm not sure what your level of knowledge and/or commitment to node is, but here is a pretty robust tutorial, though its geared for beginners so you should be successful with it. Either way you will learn a lot about the MEAN stack (hint: the N stands for Node.js)
https://scotch.io/tutorials/setting-up-a-mean-stack-single-page-applicationSo node is a backend language, like PHP.  It also has a package manager to quickly and easily add libraries called NPM.

scss is said as 'sass'.  It's a file type for [Sass](http://sass-lang.com/guide) which is like a compiled language for css.  It compiles Sass into css for the browser.

Package.json is a project specific file that contains refrences to any libraries you install with npm install --save.  This allows anyone else who works on your project to have the same libraries and dependencies for the project without having to commit the dependencies to the git repo.

Lots of people use node.js, like walmart and many other fortune 500 companies.

Getting node to work on windows can be a pain, Ive got it working but for beginners its a lot of work.  I'd recommend using a linux VM or a mac if you can.  Otherwise here is a short guide is, install Visual Studio (the free one).  Install Python 2.7. Set your environment variables for python to where you install it, install node.  Should be good to go


Yes, windows is your main problem.  The problem is that you can't compile many of the dependencies needed for some NPM packages

Is angular a requirement for node?  No, its not. It's completely independent from node and is no way required.bombass n00b guide for sailsjs framework and angular.

>https://github.com/irlnathan/activityoverlord20

check out version 1 for just sailsjs

>https://github.com/irlnathan/activityoverlord"
2016-03-22 20:19:05;Using Request Module;"req gets assigned before the callback fires, so the short answer is: that's just not how it works.

for the no-framework-barebones-async-nodejs way, whatever you want to do where you have `console.log(req);`, make it a function and call it passing the body to that function.  otherwise, you need synchronous add-ons, promises, etc.Because that's not how NodeJS works. The request function will not return anything. The way it gives you access to the values is through a callback, which a function that will be executed asynchronously (in this case, it will be executed when your request is sent and the response is received), in your code that is the function(err, res, body) function, which gives you access to the err, res and body variables inside its scope. That's all it does, so trying to return ""body"" inside won't do anything.

Now you have a token variable outside of the function and you assign the value of  body. Imagine that you try to console log the token variable instead of the req. You won't get what you expect because it is very likely that when you log the token, the callback won't have been executed yet.

Everything you do with the response must be inside of the callback. And that's how this gets ugly. Because imagine that you have to execute some other asynchronous stuff with the body that you just received. For instance, make another request to other server with the data of the body. You will have another function with a callback. For example:

    var request = require('request');
    
    request({
      method: 'POST',
      uri: 'https://<URL>/api/auth',
      form: {
        user: '<USER>',
        pass: '<PASSWORD>'
      }
    }, function(err, res, body) {
      //body of the first request
      console.log(body);
      request({
        method: 'POST',
        uri: 'http://example.com',
        form: { data: body }
       }, function(err, res, body) {
         // now you got the body of the second request
         console.log(body);
       }
    });
   
Now if you go on you might get some ugly code. Now that's what a lot of people call callback hell. Many callbacks inside of others. It's ugly but it is necessary, because that's how Node works.

Because i don't know if i'm explaining myself. Google 'asynchronous node js' or 'callback node js' to learn more. Or check this article that i just found http://callbackhell.com/Node.js let's other requests to be served while waiting on network, disk and other slow operations to complete. That is why most calls in Node.js are _non-blocking_ - they return immediately without any results. Alternate means are used to retrieve the results later. 

In JavaScript the means are using callbacks. The callback function is called at a later time when the results are in. That is why your `console.log(req)` line doesn't work like you wanted, the results are not yet in at this point. (The request module does return the bare request object immediately though, so it may be confusing.) 

The example would work as expected if the call was _blocking_ and would only return when the network response has arrived. But this is not possible in Node.js and is against the event driven asynchronous I/O design philosophy that makes Node so efficient. You can read more about blocking for example in [""Blocking and Non-Blocking in Node.js""](http://bytearcher.com/articles/blocking-vs-non-blocking-in-node.js/)."
2016-03-22 18:41:32;BuiltWithMeteor Weekly # March20th2016;
2016-03-22 16:38:04;How to create REST API without using any framework?;"Read this : https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/

Tell me if you have any questions after this.api gateway + lambda 

(aws)But it's sooo much easier if you use Express...There's no rocket science in it. The only API doc you need is here:

https://nodejs.org/api/http.html

The drudgery of doing this kind of thing yourself is the routing. Matching routes while accounting for query strings, trailing slashes, path variables... It's just so dull. I hope you like writing regexes!

If you're keen to keep it minimal, I'd look for a standalone routing module. Last time I looked, though, they all sucked.

If you want to stay minimal but sane, I'd recommend Restify.Learning Node by sticking with the basics is a good approach. However, have you thought about going top-down instead of bottom-up. Node core, by design, is very small and allows for user written modules to shine in and add functionality. There's this design philosophy of doing one thing well. 

So, what if you started with one of the few popular modules for this: Express, maybe look at Swagger, or does Seneca fit here. And then built the your API using one of those. After it's built you would dig deeper and see what the library had eaten. Digging through existing code is a good way to learn.One of the better ways to learn is to read someone else's source code.  You can learn how to do low level http on Nodejs by looking at a rest framework's code.You can use baasboxThank you all for the responses!I have not used Node.js for API but if you not particular about it you can quickly scaffold a database driven RESTFUL API in python with https://github.com/Leo-G/Flask-Scaffold"
2016-03-22 12:42:48;Nodejs madness?;"Not sure if you're the author but as a consultant I think author failed in this:

>No one cares. And no point in explaining it to these people. 

Isn't that your job as a consultant?You had a squabble with a company who didn't follow your recommendations. One of their devs recommended node (which you don't know) over your suggestion of using PHP (which you do know) and generating an app using a template which 1. means very little effort on your part and 2. the devs wouldn't have a clue how it worked.
You decided to write, as a 'consultant', an unprofessional rant slagging off your customers and node, then post it on a node subreddit.
You are a complete fucking idiot.ok, basically the main 3 arguments are:

- less coding is important and that implies fast CRUD scaffolding

- PHP is easier to scaffold than node

- PHP has cheaper hostings than node

which are falsePlease proof read. If you're after getting a valid point across, things like ""WTF!!"" and ""But people conveniently forgets..."" will automatically invalidate anything you have to say to a lot of readers. "
2016-03-29 22:11:04;What's the best option for storing state in this node.js module? X-post from /r/learnjavascript;"You can always declare it outside, set it in the then callback and if you set the timing up right, it'll be there when you need it.

For what it's worth -- this may be inconsistent with promises -- but when things get complicated and you have many dependant asynchronous calls, `async.auto` can make this easier for you.

Consider the following -- this assumes each external call takes a callback parameter that provides standard (err, results) as parameters:

    async.auto({
      
      item1: (next) => doTheFirstThing(next),

      item2: (next) =>  doTheSecondThing(next),
      
      item3: ['item1', 'item2', (next, results) => {

        // results.item1 is result of doTheFirstThing
        // results.item2 is result of doTheSecondThing
        // assuming third thing needs results from item1/2
        doTheThirdThing(results.item1, results.item2, next)

      }]

    }, (err, results) => {

      if (err) {
        // one of the things went into error
        return errorHandler(err)
      }

      // results.item1 is result of doTheFirstThing
      // results.item2 is result of doTheSecondThing
      // results.item3 is result of doTheThirdThing

    })

Of course, you could accomplish this particular example with a Q.all on item 1/2 then perform the third thing in the Q.all's then block.  But this is the most basic example - auto is exceedingly powerful when things get exceedingly complicated.

But, to be perfectly honest, both async and promise based solutions can get very hairy when things get complicated.  I find the toolkit for async is better and much prefer it to promises, but this is just my opinion.Try using cheerio.  Example: http://stackoverflow.com/questions/19472162/node-js-and-cheerio-parsing-table-with-selectors"
2016-03-29 22:09:39;Using ES6 with Koa;"Try 
 ""babel"": {
    ""presets"": [
      ""es2015-node5"",
      ""stage-3""
    ]
  }You can definitely transpile using Babel on the server side. I used to do this, but ultimately ripped it out of my project because stack traces were wrong, and I *really need* good stack traces for debugging. There are supposedly ways around it but I'm just too skittish about adding so many moving parts to a server-side deployment.

Nowadays I just use whatever subset of ES6 my version of Node (4.x) supports natively, and that's what I'd recommend others do as well.Depending on the node version in use and the features of ES6 you want, you might not have to do anything, since node natively supports a whole bunch of them already:

https://nodejs.org/en/docs/es6/"
2016-03-29 19:42:28;how do you test fast on local machine and other devices?;"Run a copy of the site on your local machine and view your work there. There are a couple ways to do it:

* Run the site on the ""bare metal"" of their local machine (using either your OSes built-in web server or a package like MAMP or WAMP where the web server is bundled in).

* Run the site in a server on a virtual machine. This is the method I prefer as I don't have to change my laptop's system configuration to run a server whose config matches that of the live site. Running a server as a VM allows me to develop multiple different environments for multiple projects and keep those environments separated.

The idea is that you can iterate quickly on your local machine.  When your local version is ready for deployment, you merge it and, with some git-fu, that work is automatically deployed to Digital Ocean, where it can be viewed by everyone.

If you have to go through the push / merge / pull every time you want to preview a change, you're going to make slow progress.

If you PM me, I'd be happy to share a more in-depth analysis of how we solve this issue.just use ngrok when you are testing something quickly...

have it serving on localhost whatever port you wish, open a command prompt, run:

    ngrok PORT

where PORT is the port number you are serving it on

ngrok will give you an http and an https url that you can use to view it from anywhere, over the internet, until you exit ngrok

The only problem is that if you are using absolute paths and urls for your assets / in your frontend code, you will need to modify them to use the ngrok url instead of localhost.

This is what i do for quick checks while im working on something"
2016-03-29 18:29:36;Deploy Node.js web app with Enterprise Network Authentication;
2016-03-29 17:00:33;Changes to npm's unpublish policy;"I foresee a lot of pushing of point release updates which break everything, just out of spite.I still don't trust them. I setup sinopia to keep my own cache of dependencies for my projects. This is what I've also done with maven, CPAN, pip, etc. in the past. I think of it as a corollary to ""Save early and save often.""why not just flag the entire package as deprecated, sending warning to package owners that would have there installs broken to update their dependencies within _x_ hours before it is removed?

the task of manually reaching out to so many other package maintainers seems ridiculous.> One of Node.js’ core strengths is the community’s trust in npm’s registry. As it’s grown, the registry has filled with packages that are more and more interconnected.


Didn't they themselves betray that trust?
>""Of course, users might not have any rights to use the package, but it's out there, and up to real lawyers to fight that one out. Ultimately, it's not our responsibility to enforce your license.""

I can't take them seriously until they address the cognitive dissonance between that statement and them taking matters into their own hands to unpublish and remove kik without a single lawyer being involved and without even contacting the developer.So the developer had too much power over his/her own packages... and NPM's solution is to require the developer to contact a customer service representative?

And then, manually, if the customer service representative finds that there are no breaking dependencies, they will release it?

Is this correct?Seems to make sense. At least they got *one* part of this story right"
2016-04-05 23:57:28;Why oh why are errors suppressed?;"May I ask, are you using promises in this codebase? Failing to add .catch() will cause these to fail silently. Also, your gripe seems to be with Javascript, rather than node itself ;)

Maybe you would prefer https://www.typescriptlang.org/. You get to use Node.js but get the features of a statically typed language.>I'd provide a code example, but I can't reproduce the problem on the small scale. This leads me to believe there is something about this codebase that is causing it to suppress errors instead of bubbling them up.

I don't know what the problem is, but this part right here seems to suggest you have no problem with node (perhaps not even Javascript), but rather you have a huge problem with your particular codebase.

You can structure code badly in any language - even in Java you can simply catch any and all exceptions in a module (class/library/whatever) and refuse to report them to any code that uses it.
process.on('unhandledRejection', function (reason, p) { ... });  

Where reason is typically the error thrown (or whatever was rejected) and p is the promise that was rejected.

unhandledRejection will catch errors in promises that normally get swallowed.  

It shouldn't be used to catch sloppy coding errors in production, but it really helps in development.This was me three months into writing node full time.

Six months in, I was a node evangelist.

You don't have enough tests if I had to guess.  I inherited a poorly tested codebase with lots of deep callbacks and long methods.

Once I started cleaning things up, debugging in the right spots and testing like a mad man, everything became clear."
2016-04-05 22:00:13;HapiJS Authentication Issue;"The handler should reply, not returnAlso, try

{auth : 'jwt'}The problem turned out to be that I needed to do 
{auth:{strategy:'jwt', mode:'optional'}} and I was setting the default after the routing....d'oh!"
2016-04-05 21:08:10;ES6 circular iterator :: fancy way;"So, I know the community is having an argument about modules like this right now, but whats wrong with?

    function shiftpush(arr){
      return function(){
        var s = arr.shift()
        arr.push(s)
        return s
      }
    }
    
    var sp = shiftpush([1,2,3])
    console.log(sp()) // 1
    console.log(sp()) // 2
    console.log(sp()) // 3
    console.log(sp()) // 1"
2016-04-05 20:10:48;BuiltWithMeteor Weekly # April3rd2016;
2016-04-05 18:33:59;nodeJS does not like REGEX :( could use some help;"Not sure what exactly you are trying to do, but `?` is special. If you were trying to create a non-capturing group then it would be the following:

    var usernameRegex = /[a-zA-Z.]{6,20}(?:<!_)(?:<!..)$/;

Otherwise, you need to escape the `?`:

    var usernameRegex = /[a-zA-Z.]{6,20}(\?<!_)(\?<!..)$/;

Hope that helps"
2016-04-12 22:48:25;Could someone explain to me how multiple sessions work in Node?;"""sessions"" in HTTP world has a very special meaning... and you're far from handling it. Look for express.js, which is used in most node.js web apps (and api servers).

Bare http server is not very powerful
http://stackoverflow.com/questions/14795145/how-the-single-threaded-non-blocking-io-model-works-in-node-js 

if parseAndHandle is functional (ie. is not statefull) then a single parseAndHandle object can perfectly handle requests for more than one user...The function that you've passed to the server.listen function gets executed for each new request, so it will be executed once for Mike and once for Joe. In this case, parseAndHandle would operate on one req and res at a time, asynchronously. Sessions are useful to store some state outside the lifetime of a single request and are usually implemented as middleware in the context of a more powerful web server like Express or Hapi. In general that would mean each req has its own unique session object. "
2016-04-12 22:27:19;Add .promise() to Function.prototype to convert any callback-taking function to a promise-returning one. What could possibly go wrong?;[nothing can possibli go wrong](https://www.youtube.com/watch?v=7trn91xkJ0w)
2016-04-12 20:52:03;User Login with node;"You don't need socketio for user logins.  Just create a username password form that sends the info the backend when the user hits login.  

The backend should take the username and lookup the user in the database.

Once you have the user record,  convert the password to a hash and compare to the stored hashed password.  IF it matches then return the neccessary information (usually some roles and priveleges and stuff like that)

I'd also send back a Json Web Token (JWT).  The jwt should be sent with all subsequent api requests to make sure the user has access to the api's. 

"
2016-04-12 20:31:05;95% CPU with select/epoll_wait in idle loop;"Edit:
The embedded device is long polling nodejs correct?

If you are polling in the idle loop without blocking the idle loop you are essentially sending requests as fast as your embedded device can send them.

Have you checked what is locking up on nodejs? Maybe benchmark response times using console.time, or attach a debugger to your nodejs server"
2016-04-12 19:52:05;"Producing a composite pipe or a ""pipeline""";"I don't understand why your code doesn't look like actual JavaScript, but you can use the base `stream.Transform` class to implement a stream pipeline:

    'use strict';

    var through2 = require('through2');
    var fs = require('fs');
    var Transform = require('stream').Transform;

    class Pipeline extends Transform {
        constructor(parts) {
            super();

            var start = parts[0];
            var end = start;

            for (var i=1; i<parts.length; i++) {
                end = end.pipe(parts[i]);
            }

            this._start = start;
            this._end = end;
            this._continue = null;

            end.on('data', (data) => {
                this._continue(null, data);
            });
        }

        _transform(data, encoding, callback) {
            this._continue = callback;
            this._start.write(data);
        }
    }

    var a = through2(...);
    var b = through2(...);
    var c = through2(...);

    var pipeline = new Pipeline([a, b, c]);

    fs.createReadStream('foo.txt', {encoding: 'utf8'})
        .pipe(pipeline).on('data', function(data) {
            console.log('Final output:', data.toString());
        });

Of course, you can also just do the following:

    fs.createReadStream('foo.txt', {encoding: 'utf8'})
        .pipe(a)
        .pipe(b)
        .pipe(c)
        .on('data', function(data) {
            console.log('Final output:', data.toString());
        });
Have you looked at [pipelayer's composition feature](https://github.com/pjeby/pipelayer#composing-pipelines)?  With it, you can do `S = pipelayer(A).pipe(B).pipe(C)` and get the result you're asking for."
2016-04-19 17:06:05;EclairJS = Node.js + Apache Spark;
2016-04-19 16:32:27;Building a Node.js module with promises (and not breaking them);"Thanks for the article, it just gave me a great idea!
https://github.com/kripod/knex-orm/issues/13"
2016-04-19 15:52:56;Using Node to support conversational interfaces and bots;I get a 404 on mobile devices when opening your link
2016-04-19 07:08:57;Use api based web frontend with express or not?;"If you're using something like React Native, you could even reuse some code accross web/ios/android, and that definitely means using an API...It's up to you, to me it makes more sense to re-use the api on the frontend as well.Using an API **in general** provides a good separation of concerns.If you plan to reuse server-side logic across platforms I would definitely recommend writing an API.

The way it would work, if you were using node, is Node API -> (Android, iOS, etc.). Each one of your clients would make http calls to your Node endpoints. Also, Express isn't the only option for writing RESTful APIs. Checkout things like [Restify](https://github.com/restify/node-restify).If you want a really easy-to-use API layer, you should check out [Nodal](http://github.com/keithwhor/nodal). :) I can provide help if you need it!Just be aware of the fact that if you provide access to your API through the browser you have consider browser vulnerabilities. In other words, XSS and CSRF.

XSS is the worse of the two. You can protect against XSS by not having any third party libs in your app. This is impossible if you have ads on your site. Either that or you can use a cookie with httpOnly flag. Meaning scripts won't be allowed to inspect the cookie and therefore scripts won't be able to steal your session.

However, if you're using a cookie, you introduce the CSRF vulnerability. CSRF is a cookie vulnerability. This isn't as bad as XSS but the protection against it is pretty straightforward.

The problem with using a cookie (with httpOnly flag set) is that your scripts won't be able to access it. This is intended of course since otherwise any scripts could access it (making it useless vs XSS). This probably won't be an issue but if you're using WebView (cordova/phonegap) you won't be able to access the cookie.

A simple solution is to use different routes for browsers that apply a cookie middleware to handle authorization (and CSRF) instead of what you're using for your API's. The logic stays exactly the same - only browsers access your api from ""/browser/api/whaterver"" instead of ""/api/whatever"". (for example)You want a RESTful API.NotJS? "
2016-04-19 06:54:19;Run a node js script on a raspberry pi via ssh?;"Install PM2, use that to start your process. It will stay running. Screen would be a nice second option but having used both, pm2 is far easier to comprehend. Have a look at tmux or screen to be able to persist your ssh sessions after disconnects.Use tmux / tmux attach if you need a console running. If you want some more management take a look at https://github.com/Unitech/pm2

It might very well be overkill, but it works.Might be different use cases, but I run a Slack bot on a Pi and I use Forever (it's one of the top packages on NPM) to keep it running.As someone else said, install screen and then run 'screen node app.js', and control+a, then d to disconnect create a service to start your node app with forever and have it output to a log?You could run your script in the background (by appending ""&"" at the end of your command). This way it won't stop when you terminate the session.npm forever or  nohup comand

cant remember exactly how nohup works but i keeps it running 

"
2016-04-26 22:15:19;Make request to other internal endpoint;"shouldnt the path be set to something like

    path: `/problem/${req.query.problemId}`

?

also, do you res.end() (res from the router.get middleware) in https.request callback?"
2016-04-26 19:18:36;Node.js v6.0 released;"If you use Node in Docker, I have released v6.0.0 images that support node-gyp dependencies.

https://hub.docker.com/r/stackci/node/tags/TL:DR version of the change log: https://github.com/nodejs/node/pull/6383[deleted]From the [schedule](https://github.com/nodejs/LTS#lts_schedule), v6 should be LTS. Can somebody enlightened me whether is this LTS? I am planning for a project for production soon. If you are interested in a more tech-focused overview, check this out: https://blog.risingstack.com/whats-new-in-node-v6/Do you guys upgrade instantly when a new version is out? Do you need to change anything in your projects to make it work?"
2016-04-26 18:18:17;Node v6 is coming out today with ES6 support!;"With 96% ES6 support - http://node.green/v5 and v4 and v0.12 also have ES6 support. Is v6 supposed to add all the unimplemented features?
"
2016-04-26 17:49:27;Having problem in understanding callback functions and assigning functions to variables;"When you do `setTimeout(callback, 3000)` that is saying after three seconds, call the function callback. What `setTimeout(callback(), 3000)` is saying is after three seconds call the return value of callback, which in your case is nothing. What's happening is `callback` is being executed immediately and `setTimeout` is trying to work on the return value, which means after 3 seconds, it will just do nothing.""callback"" just refers to the function without doing anything.  ""callback()"" actually calls the function and executes it.  With setTimeout, you *don't* want to call it yet; you just want to pass just the reference to the function, as a way of telling setTimeout what it's supposed to do in 3000 milliseconds when the timeout happens.  setTimeout takes responsibility for actually calling that function, later on.

But in Program #2 you say setTimeout(callback(),3000). Arguments to functions are always evaluated before calling the function, so in this case javascript runs callback() immediately, gets nothing as a return value, and passes THAT to setTimeout. So you're telling setTimeout to wait 3000 milliseconds then do nothing."
2016-04-26 14:16:21;DigitalOcean Hosting: Suitable for Enterprise Solutions?;"Developer and maintainer of [surge.sh](https://surge.sh) here. DigitalOcean is an excellent choice for an enterprise system.Hi!  First, I am biased in this as I am a Community Manager @ DigitalOcean so I hope others will comment and relate their own experiences to help you better decide. 

That being said, there are a ton of medium and larger organizations building on DO.  Among many others, the [Ghost](https://ghost.org/) blogging platform hosts their SaaS product fully on DigitalOcean.  We would be happy to discuss your needs and help you in finding the best solution.  Reach out to us [here](https://www.digitalocean.com/company/contact/#tab_salestrigger), or PM me and let us know a bit about your planned infrastructure.
As a hosting provider Digital Ocean is more than good. But it's not all about hosting, architecturing the environment correctly is extremely important.

You also need to ask yourself a question whether or not you need managed or on-demand. In a lot of cases the headache of managing your own IS isn't worth it for a smaller app. But growing larger the costs between a bare metal server and DO/AWS/Heroku etc instances might be multiples over bare metal, in which case hybrid may be a better choiceIt totally depends and I would say for small to medium sized companies it's totally viable! 

Although when you start to grow a bigger infrastructure you will also start to enjoy features of AWS or Google Cloud like SQL Servers and all the benefits that come with using those systems.
[deleted]DO gives you root level access to servers with enterprise quality hardware.  It's up to you to put enterprise quality apps and security on it. "
2016-05-03 22:01:28;What is the best service/ practise to manage service to port allocation?;"The easiest long term solution is to forget about maintaining a service to port mapping manually and think more dynamically. You can use something like [consul.io](https://www.consul.io) with [consul-template](https://github.com/hashicorp/consul-template) for service discovery and automatic Nginx config file generation.

With that setup in place, all your services simply need to register with Consul when they spin up and indicate their name and what port they are available on (in Node you can bind to whatever open port the OS gives you). You then run consul-template with a template file that is used to generate your Nginx configuration file whenever a chance occurs.

It sounds like a lot of work but if you're dealing with 50+ services already and intend to add more I think you'll find that this setup scales much better. You can also trivially add more instances of a given service if you need to.

Aside from something like that I think maintaining a single JSON or YAML file with a service to port mapping could work provided you have a bit of code that takes that config file as input and generates the Nginx config file as output. That way you never need to worry about things going out of sync.You could proxy_pass to a UNIX socket... This way, you could simply name the backend endpoint with a meaningful value and not have to worry about which TCP port maps to a given micro-service."
2016-05-03 21:51:05;How can I control this for loop?;"Checkout http://npmjs.com/async - specifically the 'while' construct (if you're performing asynchronous IO in the loop)    while(imgAmount != imgDownloaded){
        //do stuff and decrement / increment
    }
    callback()For native solutions, the best solution is using promises, but you may also use event-emitters or a callback counter; however, as you have experienced, error handling gets really tricky if you go down that route.

Using promises and only native code, roughly something like:

    'use strict';

    // is JSON_URLS an array?

    var downloadAll = JSON_URLS.map(function(url) {
      var downloadImage = new Promise(function(resolve, reject) {
        // i don't know what you're doing with the data, so
        // i will just set up a writable stream for every image
        var urlParts = url.split('/');
        var filename = urlParts[urlParts.length - 1];
        var localFileStream = fs.createWriteStream(filename);
        var readStream = fs.createReadStream(url);

        readStream.pipe(localFileStream);
        readStream.on('error', function(err) {
          reject(err);
        });
        readStream.on('end', function() {
          resolve(localFileStream);
        });
      });

      // if you want to ignore errors. it's not clear to me what you ask
      downloadImage.catch(err => {
        console.error('encountered an error', err.stack);
        console.log('ignoring error');
      });

      return downloadImage
        .then(streams => {
          // filtering out undefined items because undefined is returned
          // when an error is caught above
          return streams.filter(function(stream) {
            return typeof stream !== 'undefined';
          });
      });
    });

    // download all images in parallel
    Promise.all(downloadAll)
      .then(fileStreams => {
        console.log('downloaded ' + fileStreams.length + ' images.');
      });just use a simple semaphore and a while semaphore check within your for loop before the download call."
2016-05-03 20:53:34;Amazon EC2 vs Digital Ocean;"For small apps I would go with DigitalOcean because they got great pricing and SSDs. Amazon EC2 is a bit expensive but comes with a lot of features (like autoscaling and managed sql servers). Also if you get to chose take a loot at Azure too (but the same rule applies if app is small go for DigitalOcean).
Disclamer: I only used Azure, but I have friends using DigitalOcean and I have been comparing cloud services these days. 

EDIT: DigitalOcean lacks a managed firewall (basically you have to setup iptables on your vm) and I think it lacks a load balancer, you will have to make it using HAProxy. But Azure (and Amazon) comes with this from the web interface (and in Azure the load balancer is free).Joyent is really nice as well... "
2016-05-03 20:30:57;Is it true that by re-compiling nodejs with different options will obtain better performances? [CPU/Cores];I think it's more likely the difference in architecture than how it what compiler options were enabled. Take that with a gigantic grain of salt though, because there's not nearly enough information to draw a conclusion.
2016-05-03 20:26:42;Dear /r/node: Let's build the best Node.js API Framework, together. Need your help!;*Another* one?
2016-05-10 23:54:43;File Manipulation with Node.js;"All file manipulation should be done with async versions of the function. File IO by comparison is one of the most taxing operations that a computer can do (especially if the server is reading from a non-ssd hard drive)

The whole point of Node.js is to handle all of the 'slow' operations on other threads so the main thread can be reserved for quickly responding to requests "
2016-05-10 22:01:53;Help hosting Database For node.js project;"use a free mongolab account, then just point your node app database connection info to the mongolab database. Its super easy, free, and works just fine.

edit: also support is fantastic. I recently was fooling around with a new framework, rebuilding an app that I already had up and running, and in fooling around with the framework i accidentally deleted my entire users collection. Within 10 minutes of my initial email asking if they could do anything to help me, they restored a snapshot of my database from a few hours earlier to a new sandbox, and I was able to use mongodump and mongorestore commands to restore my live db from the temp sandbox they created for me. Stellar support IMO, especially considering I am NOT a paying customer.

Just wanted to post this hear because I was pleasantly surprised by how quick and helpful their support team was.Mongolab sandboxThanks guys just created an Mlab account and finally created a sanbox database. I appreciate the answers.Dude do you know of any guides? I can't get  it to work with Postgres man any tutorials are welcomes! @gjolundHave you considered using Postgres? It is a much more effective document store than MongoDB.

You will thank yourself later."
2016-05-10 21:52:55;Efficient HTML parsing / a Cheerio alternative?;"Cheerio doesn't use jsDOM.

Why are you opposed to using cheerio?"
2016-05-10 20:49:17;Nodecasts - Free video tutorials for learning Node.js;Added to favorites and will check it out later.  Any idea if you will be adding more frameworks?  I'm really liking sails right now. 
2016-05-10 19:39:17;Calling devs to join discussion on GitHub about InversifyJS testing utils;
2016-05-17 16:04:10;Medium CLI - A command line Interface for reading medium.com stories;
2016-05-17 14:34:18;Async/Await support just landed in V8;"How long now before this shows up in node natively?It still seems to have a ways to go, but this is going to be a major win for projects where I work! (less babel!)I have been nervous about this not getting in ES

Babel would drop support immediately (which is their choice, they're only spec + living proposal compliant) and people from the ES community have said things on reddit that gave me cause for concern.

It would probably have just created a shit show of forks, solutions in compile to JS languages, and general chaos.

Now that it's in v8 and chakra, hopefully we can put the debate to rest."
2016-05-17 14:29:21;5 Easy Steps to Understanding JSON Web Tokens;
2016-05-17 14:18:37;Introducing Ponos: Our RabbitMQ-based Worker Server;[deleted]
2016-05-17 12:14:44;I built a streaming, lossless audio player with node + electron;"[deleted]Great project!

I haven't looked through the source yet, but by your estimation, how much work would be needed to abstract away the S3 API into a generic interface which you could then plug in local disk or network shares?  Perhaps this is already done; if so, great!!

I'm also not a fan of the likes of Spotify, Google Music, etc. because I already have a large music collection including tons of obscure music from local bands, etc, that I like to have access to.  For this reason, I've continued to operate a Subsonic install for the past 6 or 7 years.  This kind of negates the need for a paid service.

Currently, I'm migrating the install from my primary machine onto a FreeNAS server that I built a few months ago.  However, Subsonic is showing its age and I have some concerns about security (which I have presently mitigated by running the application in a BSD jail with read-only access to music shares).

I mention all of this because this project would be interesting to hack on for me, personally, but I'm not in love with the idea of paying someone (Amazon) for bandwidth and storage when I'm willing to manage that myself.This is pretty neat. I've wanted to do something like this myself, but using [Koel](https://github.com/phanan/koel). However, it would get quite expensive on DigitalOcean (server size). I'm wondering, have you looking into Backblaze's B2 pricing? Is it better (or comparable) to S3?"
2016-05-24 15:53:04;Only one instance of Node app?;Are you sure you're not just running some kind of socket.io realtime demo app that's supposed to do that?
2016-05-24 14:15:10;Replicator - advanced JS objects serializer.;
2016-05-24 14:14:42;GET only secure RESTful API with node;"Basically you can't - unless it's an embedded system (and even then not really).Look into oauth or similar and have short lived tokens. That way if someone steals a token, they only have a short period of time to use it. Scoping your tokens can also prevent them using the token for other functions. You can make it kinda secure. From allowing only certan ips. Throttling. Oauth tokens. Etc. Sounds like [Same-Origin-Policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).

I don't know how to do it in NodeJS though.you can setup your user database to only allow connections from the server(s) hosting your node applications"
2016-05-24 13:54:41;People with ES modules questions, AMA;"If my understanding is correct, the biggest benefit of ES modules is that it promotes code modularity, static analyses (and tree-shaking), which (in browser) can be leveraged to implement better caching strategies and decrease the overall size of scripts transferred over the net.

What benefits does ES modules have in Node.js and other server-side JavaScript environments?Would optional importing work in Node in the future as it does now? From what I read it doesn't.

Example:

```
if (process.NODE_ENV === 'production') {
  import 'trace-agent';
}
```

Another possible pattern would be:

```
try {
  import 'optional-dependency';
} catch (e) {}
```

Would those patterns disappear with ES6 imports in Node?How will Node.js do modules? It seems like there was some noise a couple weeks ago about whether they should use .mjs or package.json, but I haven't heard anything since.Reading around the web, I get this contradictory sense that ES6 modules are final but not final. Implementations are ES6-complete but still have a long way to go because of modules. It's very confusing I think for a lot of people and insiders seem to skate around the issue in a dismissive way.

So my question is, is there anything yet remaining to be standardized WRT the JavaScript language itself, or is the incompleteness strictly having to do with the fact that various engines/environments still need to figure out how to load modules?

Also along those lines, why does Webkit claim 100% ES6 completeness when module loading doesn't actually work? Or does it? Presumably there's some distinction which allows them to claim that and be technically correct, but that distinction is lost on a lot of people I think.I have translated your proposal to Japanese. 
http://yosuke-furukawa.hatenablog.com/entry/2016/05/10/111102
Thank you for your clear proposal.

I would like to ask a question.
I don't understand why we need interop between CommonJS and ES Modules.
I understand we need to bridge the gap between Browser and Node. So, I think we need to use import/export in Node.js code. 

But I don't understand why we need to load CommonJS modules from import syntax, and load ES Modules from require function.

ES Modules can use require function, so we can keep the compatibility between CJS and ES modules. Maybe, we will have a confusion mixing use of import and require. 

And require function is necessary for dynamic module load. so that is not so important problem.Thanks for doing this :)

If node and node modules didn't exist, would that change the design of ES modules? Is there anything in the spec that is there solely to make it compatible with node but is not otherwise optimal?"
2016-05-24 13:19:57;Socket.io alternatives?;"There's a few alternatives, not sure about the specifics of each library and how they match against your requirements - but my general feeling is that once you go down the performance route, polling is a ""no go"" and thus would be a concept/fallback you'll have to introduce yourself.

Checkout [ws](https://github.com/websockets/ws) or [uWebSockets](https://github.com/alexhultman/uWebSockets). There's probably more around.Ignoring the ""engine"" itself, I'd highly recommend checking out [Primus.io](http://Primus.io). It's a transformer for any ws engine itself. This means you can write your code using Primus and swap out the engine (you used socket.io and switched to ws) you won't need adjust your codebase. This way you can play with different engines without losing a lot of time. Just keep in mind not all engines support the exact feature-set.If you go for streaming interfaces like I do, I can vouch for websocket-streamdeepstream.io is a framework around realtime Where do you need the performance, Client-server or server-server?"
2016-05-31 20:58:29;I got digital ocean VPS with IP number running, I also bought a domain name from a DNS. Now how the heck do I connect the domain name to the digital ocean VPS?;"Quick comment as I'm almost headed out of the office, but typically you will want to adjust the A-record for your domain name (where you bought the domain name) and have it point to the IP of your VPS. Just look it up for the registrar you used as each is different in it's layout.

Not sure if there is a more streamlined/flexible way to handle this with DO. But for me I have no problem adjusting the A-record for my domain.

This may help too: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-host-name-with-digitaloceanadjust the name servers for your domain. if you host at hover or network solutions you have to update the dns settings to 

ns1.digitalocean.com | ns2.digitalocean.com | ns3.digitalocean.com

then follow the digitalocean tutorial on how to setup a host name. Some people prefer to setup their records on the dns providers site, but i prefer to use digitalocean's interface. If i move from digital ocean i will have to update, but whatever it's simple once you know how to do it.Here are some guide I wrote that may help

http://fearby.com/article/how-to-buy-a-new-domain-dedicated-server-from-digital-ocean-and-add-a-ssl-certificate-from-namecheap/ (draft) 

http://fearby.com/article/the-quickest-way-to-setup-a-scalable-development-ide-and-web-server

http://fearby.com/article/adding-a-commercial-ssl-certificate-to-a-digital-ocean-vm

http://fearby.com/article/how-to-setup-pooled-mysql-connections-in-node-js-that-dont-disconnect/"
2016-05-31 16:26:01;Lessons from Building a Node App in Docker;"Liked your tutorial. I will say that mounting the node_modules to the host is probably not the best solution though.

If multiple people are working on your application, and they running different OS from your container, you will run into problems with compiling, line ending, etc...

I get around this problem by adding and then mounting (for development) all my applications folders EXCLUDING the node_modules intentionally. This way when the container builds and does its npm install, the installation is done in the context of the container OS and not the host OS.Great tutorial! Do you know about [dokku](http://dokku.viewdocs.io/dokku/) ? It does a lot of the heavy lifting for you.."
2016-05-31 13:07:05;Nodal 0.11.0 Released! 😄;
2016-05-31 07:48:22;How to Get Node.js Logging Right;"> Sometimes multi-transport logging appears as a requirement - but it shouldn't be. The target should always be the standard output/error. It is not the responsibility of the application to route logs.

Glad to see this here and agree. Lot to stdout and stderr, and let the deployment environment decide how to route the streams."
2016-05-31 07:45:30;The history of Node.js Streams;"In order to be widely used and supported, though, it _has_ to be part of core. Doing things in userland is great, but you can't expect to build standards that way, especially when package discovery is _still_ a nightmare.

Node's small core philosophy has a lot of benefits. Core things like streams, however, must be part of the standard lib.

The fact that streams has been such a disaster does not at all mean that it's impossible to do things like this in core. It means that the technical leadership of Node over the years has been a total shitfight.

Other languages manage to have rich standard libraries just fine. Go's userland story still sucks, but their standard library is wonderful.

Sadly, Node is locked into it's current strategy. Go, on the other hand, still has time to fix its package management."
2016-06-07 22:59:54;A framework for building small ~ medium websites;"Although this isn't a direct solution to your problem, you can easily upload images or other files to Amazon S3 storage with a few lines of Node.Dont think you are going to find a framework easier than express.

Accepting an image upload is pretty straight forward, what were you having problems with?

https://howtonode.org/really-simple-file-uploads"
2016-06-07 20:43:46;Deploy NodeJS to an EC2 Instance;Why? Aws code deploy works better their is a plugin for bitbucket if you use it. Or just use elastic beanstalk.
2016-06-07 20:10:22;field-trip: simple module to walk an unknown graph async;Inspired by the wealth of file system walking modules, but that none generalize to any traversal process that's async and the structure is unknown ahead of time.
2016-06-07 19:58:15;Trying to get a discord bot to work end up with errors upon errors;
2016-06-07 19:15:08;Advice for using postgresql with node?;"Ive been using sequelize for the last few years and have found it to be rock solid and really easy to use (it was a little sketchy and unstable before v2.x, but all is good now). Features that Ive really liked about it that either dont exist, or arent as nice to use (IMO) in other frameworks include:

- Relationship eager loading (i.e. joins via the ORM)
- Transactions can be included everywhere
- Support for not only the JSONB type, but actually querying it
- Migration support (via sequelize-cli)
- Everything is promise based


> Do you guys put node controllers + models and postgres in their own server, apart from the node.js server??

All of the node apps Im running currently are in containers, so theyre on different physical machines than Postgres which lives on its own dedicated machine.

I've only just started playing with this, but I'm using:

* [pg-promise](https://github.com/vitaly-t/pg-promise) for actual query execution
* [db-migrate](https://www.npmjs.com/package/db-migrate) for managing schema migrations
* [postgres-cleaner](https://www.npmjs.com/package/postgres-cleaner) for resetting the database between integration tests
* [sql-fixtures](https://github.com/city41/node-sql-fixtures) for setting up data in integration tests

I'm also using [node-convict](https://github.com/mozilla/node-convict) to manage my startup configuration, which currently consists of my database URL. This has allowed me to use the exact same configuration files inside my gulpfile.js as I am in the actual code, and by overriding NODE_ENV in the gulpfile for the integration tests the migrations run against the correct database.

This seems to be working well enough for me so far. I'm also resorting to running my database server inside Vagrant so that I can quickly reproduce it anywhere. I'd much rather be able to boot it up as part of the actual test process, but I've not yet found a good way of doing that. As such, I've got a Vagrantfile that sets up a VM running Postgres with two users and two schemas - one each for Dev and Test.I use [Bookshelf](http://bookshelfjs.org) for postgres stuff.Keep it simple, KnexJS, or if you must use an ORM, Bookshelf.

Sequelize is a frustrating mess, especially more complicated queries on data with many relationships. And it's not particularly fast, either.[pg-promise](https://github.com/vitaly-t/pg-promise) FTW! :)

"
2016-06-14 22:02:18;Node unit testing;"I use Mocha as the test runner and chai.js as the assertion library. I believe this combination works best for nodeJS apps.Mocha is the most widely used runner.

Tape is also popular and is conceptually purer, but we've moved back to Mocha for the simplicity its tooling brings.We use tape, but I've been looking at teenytestI moved from Mocha to Tape + [proxyquire](https://github.com/thlorenz/proxyquire)github.com/hapijs/lab[Tape](https://github.com/substack/tape) is nice in that it plays well in node as well as the browser /w [browserify](http://browserify.org).I'm using Mocha/chai/sinon."
2016-06-14 16:13:13;Does my NodeJS application leak memory? – 4;
2016-06-14 14:46:02;Hiding things at plain sight;
2016-06-14 14:22:16;Node.js Examples - How Enterprises use Node in 2016;"They never talk about the improvement or decrement in number of transactions per second a node infrastructure can support. I know it can scale horizontally but that leads to other challenges that I wish they would talk about. Maybe those challenges are the lesser of two evils when compared to Java or .Net.""GoDaddy started to use Node for the front-end and then ended up using it more in the back-end as well. The same .NET engineers who were writing the back-end code were writing the JavaScript front-end code. The majority of engineers are full stack now""

Wtf is node for the front end ??? So it means JavaScript?!And here I am still loving my PHP running with Laravel or Lumen :) Ya'll are fancy. "
2016-06-14 14:20:17;Please review my WebApp;"I'm looking it.  
First thing I saw: Don't include your credentials in your commit.Cool - how long did it take you to get from scratch to this point? what's your experience ?"
2016-06-21 23:48:03;Large batch post using up 100% cpu. Help!;"Can you show the code?Many details required.   Exact details of hardware and virtualization.  All code that could be relevant.  Exact details of data sent.

Have no idea what libraries you might be using.

Short answer is, if you are posting 1000 of something then yes, it could use a lot of CPU.  But if you don't provide any more details then you are just wasting people's time.

ALSO, why are you posting 1,000 docs?  If you only answer some subset of the required questions I will get another account and downvote the question again.

It could be an interesting optimization problem.  As of now it is just very irritatingly devoid of key information.node.js tends to allow starting many (1000) things at once... but completing 1000 things at once takes 1000 times the CPU... so yes, you can max out your CPU handling 1000 HTTP(S?) connections in a 2 seconds time window.

To limit this problem, try batching your posts: don't send 1000 requests at once, sent them 50 by 50, waiting for a batch of 50 to finish before going further.

Or use a worker queue with a fixed size, to always have 50 requests in flight (probably best option).

async.js has `cargo` and `queue` functions, which do exactly this."
2016-06-21 21:25:21;Help with installing Node.js on ubuntu unity;"i can highly suggest using node version manager: https://github.com/creationix/nvm

Installing new node stuff is really a breeze and you can switch versions easly[deleted]does the school not provide instructions?  or do they only expect you to use what's already on their lab PCs?

the easy way is to install the nodejs-legacy from your software install GUI, I forget what ubuntu is calling it these days.  the reason you need nodejs-legacy is there's an older program that predates nodejs called ""node"", so the normal nodejs package does not install a binary called node, only nodejs, and that can break a lot of things.  nodejs-legacy adds the node binary, but will conflict with the older package, but you almost certainly do not need anyway.  

in addition, whatever your aversion to ""too technical"", get over that quick.  programming is about as technical as it gets, and node isn't a GUI language, so you really need to get comfortable with the command line right now."
2016-06-21 20:57:31;Util. (CLI/Module) for detecting resource availability;
2016-06-21 20:35:46;Scaling a Web Socket Application using RabbitMQ;Rethinkdb. You need to investigate it. Why?
2016-06-21 19:56:04;ES6/7 Node starter kit with built in Rest API authentication;
2016-06-28 22:08:22;How are you storing passwords (like password to connect to DB) and API keys?;"This will help you a lot:

http://12factor.net/

tl;dr - configuration is to be stored in the environment. Never check these things in *directly* to source control. There are apps that will encode those for you to be able to import back into your app - /u/bschwind has mentioned a few. You could also wire up a config server, such as etcd or consul.

My favorite method has been to either supply the variables via the environment in Elastic Beanstalk or in ECS. If you use docker, you can store them in a private S3 bucket, and use the file to download those and inject them into the environment.

Lots of good methods. Choose what suits you. Just please don't check them into source control (directly).Most of these answers are quite complex solutions for such a basic thing, I will recommend what most say you shouldn't.
Depends on your use case, as always, but if yours is close to mine... store it with the source, in a config file (.json, .js, .env, etc.). If something's very local to a module and unlikely to be changed, I'd use a constant within the module

This is only feasible if you use private repo(s), I use private Github repos.

If you have a single server, it doesn't matter, you can use env vars like most recommend. If you administrate 10's of servers though, using env vars becomes tedious and pointless.
I'd still use env vars for assigning values that are unique to the instance, or to identify them so they can load the rest of the settings. For example, NODE_ENV.

Another reason, configuration is oftently tied to the code, want it or not. Let's say you want to revert your code to an older version, which is now incompatible with the config on the server/S3/etc. You will have to carefully figure out the config that was compatible with that version and revert it too, what is the point?

About security/encryption... you're putting all this in a private repo behind secure credentials on a trusted system, using encrypted files, local dbs, in most cases, won't add a real layer of extra security but take time from you to setup and maintain.

If this is a very big project, with a lot at stake and resources to spare. Then be my guest, get fancy. What I'm saying is, if you're just making a low-to-mid size project and you can afford a private repo, you'll probably be fine and will save a lot of wasted time setting up servers, daemons, encrypted files and whatnot, and then spend some more maintaining them as well.There are a few different ways, not a comprehensive list by any means:

* Ansible Vault / Blackbox for storing encrypted keys in your repo. Not super great because then you still have to worry about storing the vault secret key, but better than storing stuff like this in plaintext
* You can run something like a ""secret server"" which your app will authenticate with periodically, retrieve the secrets, and store them in RAM for a period of time. I'm being vague here because I haven't done this myself, but have heard of it before.
* I personally use AWS and inject the environment variables at instance launch time through the EC2 user-data script. Previously I was baking the secrets into the AMI which wasn't very good. Services like Heroku make this a bit easier to do, I believe.

That's just a few ways to do it, pros and cons to each method, etc.Check out [Cryptex](https://github.com/TechnologyAdvice/Cryptex). It stores all your secrets encrypted (In a file or in env vars, 12factor-style) and lets you control access to them without running a separate key server.

There are 1000 ways to configure it-- [this blog post](http://technologyadvice.github.io/lock-up-your-customer-accounts-give-away-the-key/) walks through a common config. Hope this helps!I usually set configuration using environment variables for node.js. You can easily get to them using process.ENV and are platform specific (useful with build servers etc)Edit: My bad. I didn't realize you were talking about service account user name and password to connect to DB. Ignore this post.

When you create a new user, assign them a unique identifier, like a GUID, and store that in the database. Take the password that the user created and tack the GUID onto the end of it. This is called salting. Take the password with the GUID tacked on and run a hash algorithm like SHA (you provide your own secret key for the hashing algorithm; it will always be the same thing, but make sure it is protected and nobody can get to it). Store the result of the hash in the database as the user's password. Congratulations, you have successfully salted and hashed the password which should be decent security. The process to validate a user's credentials is very similar. Repeat most of the same steps to hash and salt the password and then compare that value to the hashed/salted password that you stored in the DB during account creation.

API key is a heated discussion. Some use JSON web tokens, others say that is bad. Either way you end up storing some kind of value on the user's machine as a cookie, and then tie that value back to their session data on the server. There is several ways to store sessions in node, and this post is already long enough, so I'm not going to get into that right now.

Hope this helps a little bit (apparently I'm wrong because I'm getting downvoted, listen to the others).I store all mine in a keepass 2 db and then just set them as environment variables in Elastic Beanstalk if you are using AWS you can elimate a lot of api keys using IAM roles.I like using a .env file and [dotenv](https://www.npmjs.com/package/dotenv).
Obviously you'll need to put exclude .env from your source control.We have a private git repo in AWS that we use for storing api keys and configs across projects."
2016-06-28 21:42:56;galaxygen: a npm package for generating galaxies.;That's really nice. Could you tell us a bit more about your game?
2016-06-28 17:46:14;Express, Koa or Hapi for today’s node newbies?;"I think for the foreseeable future express is the way to go for newbs. It just provides such simple patterns to use and in using, learn about building webapps.

I personally have been moving over to Koa1 because it is very similar to express with the added benefit of using generators which leads to simple async stuff (not just generators themselves, but the way in which koa handles executing a collection of generators until a return is hit or there are no more values to be yielded from the collection.

I think koa2 is going to use promises instead of generators, which could also be nice, but i really like koa1 and dont think I will switch until given good reason.

I think Hapi was just too much configuration for my liking, but some people prefer apps to be heavy on configuration, light on code... I personally do not.

If I need to build any really complex webapps I will probably still use express for now. I don't care if maintenance has slowed down, at this point as far as I am concerned, express is mature enough in its current state, that It would still be a contender, even if it never receives another update.I recommend that people start with the core http API. The http API isn't going to change any time soon, it underpins all the other libraries, and you can pick and choose simple abstractions on top of the core http API that you can completely understand as you go. You also don't need to fight the core API for things like streaming requests and responses or what order to apply middlewares that mutate request or response objects.

Here are some libraries I use on top of the core http library:

* [routes](https://github.com/aaronblohowiak/routes.js#http-method-example) for routing
* [ecstatic](https://npmjs.com/package/ecstatic) for serving static files
* [body](https://npmjs.com/package/body) for parsing form data

If you need something different from how these modules work, it's easy to swap out a piece for something else.The biggest problem with being new to node is trying hard not to get caught up in yesterdays news. This is known as ""javascript fatigue"" where, if you let it, keeping up with the new shit will take half a day every day.

Fuck all that.

When you read shit comparing all these frameworks to each other, there's never a definitive answer. Never. 

Because those comparisons never talk about the important shit they all have in common: Great docs, huge support across the web and they all have caveats that some blog is going to rant about. So what.

Therefore, the bottomline is that the best one is* the one you like the best.* Run thru a Getting Started for all 3. Not necessarily the included one, as it'll be very basic... but find a ""build a blog"" tutorial for each of them. Take a couple hours each and run them. You'll get a feel.

Then pick one . . . and this is the hard part . . . ***stop comparing***. Once you buy the car, stop looking at car prices. Own your choice and run at it 100 mph.

Regardless of what a hater or fanboi will tell you: realistically you simply cannot go wrong.

Hapi is great because it just feels complete in what it wants to achieve, build for performance and security.I taught web development, so take this with a grain of salt. I used Express (edit: for teaching purposes) because it required less overhead and so the students could more easily focus on the basics. I wouldn't worry about it going obsolete - most people don't stay with one stack forever and each chance to learn new tech or library increases your ability to learn, which is half the battle. Never figured out what the other half is, though.My opinion is that hapi really isn't very complex.  At the web shop where I work several developers picked it up quickly and have really enjoyed working with it (including myself).  While koa and express's APIs are smaller, the tools in those ecosystems are not necessarily as straightforward, especially when used together.  hapi also has a great community and unique learning resources like [hapijs/university](https://github.com/hapijs/university).  Not to mention Ren & Stimply rules...Definetly express.

Lots of 3rd party modules with good documentations.

- nunjucks
- express-form
- enrouten
- connect-roles
- express-jwtNot fond of koa generators? I'd love to see those arguments. Seems to me that generators or asynch functions are the best way to write asynchronous code. Certainly much better than raw callbacks,Truth is, it doesn't really matter. I prefer hapi for most of my work with teams because there's one right way to use it.. which makes it easy to work with on a team. Express is kind of willy nilly. Koa is exploring new ideas.

None of these things really matter though. Use what makes sense to you.you can give a shot to Node-Data https://github.com/ratneshsinghparihar/Node-Data. Discalimer i am one of contributor/user of Node-DataI've been using sails lately and absolutely love it. 

Opinionated frameworks are the way to go. You always know where things are going to be no matter what project or who created it. Express 4 is coming out soon. If you want bells and whistles with ES go with Koa.You should switch to Go. It's what the creator of express and koa switched to."
2016-06-28 17:12:04;[Help] Exporting functions vs. exporting whole file;"In foo.js, you should `module.exports.myFunc = ...` if, somewhere else, you want to do:

    foo = require('foo.js');
    foo.myFunc();

Export just makes something visible to other modules that require your module."
2016-06-28 16:43:33;Implementing Search Into Your React & Redux App w/ Algolia;
2016-07-05 21:49:35;Protractor + Node.js problem with returning a value from a callback/function... just returning things in general.;"You're close, but asynchronous functions mean you return everything via callbacks. Instead of a return statement a function (callback) is passed into the method and when it's completed the callback function is called with the data.

     this.queryMailinatorApi = function(mailinatorUrl, callback) {
      request.get({url: mailinatorUrl}, function (err, httpResponse, body) {
        callback(err, body);
      });
    };
    
    this.queryMailinatorApi(url, function(err, body) {
      if (err) {
        console.error('post failed:', err);
      } else {
        console.log('Get successful!  Server responded with:', body);
      }
    });

This means the application will continue to run other code immediately after starting the http request (rather than wait for it to complete).

Edit: Explanation and code formattingdeclare a variable in an outer scope, then inside of your callback function (where you have access to the values you are interested in) assign the value to that variable that you defined in an outer scope.

you really need to get comfortable with this pattern if you are going to be doing much of anything with javascript.Easiest way to test async code that I have found is with `ava`.  It uses async/await.

But the thing is for most people callbacks take a _long_ time to get used to.  Like for me it was months before it really made sense automatically.  Same thing with promises.  

With Node you can't really avoid taking the time to learn callbacks and promises.  But then you can use async/await, as long as you understand callbacks and promises.

Personally I think you should just do some simple experiments with callbacks, step through with Webstorm or debug output, until you are sure you get what it is doing.  Before you get into the meat of your real project."
2016-07-05 21:45:54;Here's a simple Reddit bot I wrote using javascript/node and snoowrap;
2016-07-05 20:30:59;tips for working with very large files;"That's not a huge problem– the key is to process the files as streams.  I suggest checking out substack's stream handbook: https://github.com/substack/stream-handbook.  He also wrote a nodeschool tutorial on streams which serves as a good way to practice using them.  It sounds like you may end-up using the native node readline module: https://nodejs.org/api/readline.htmlDon't try to read the whole file into memory obviously.  Probably use streams, but search npmjs.org and node-modules.com and npms.io thoroughly before deciding exactly how to do it because there are probably some modules that will provide good starting points or help.  For example, I searched npms.io and found this one: http://csv.adaltas.com/I don't see memory mapped IO mentioned yet. (tho indexing comes close)

This looks promising: https://www.npmjs.com/package/mmap-io

That will let you avoid re-scanning the entire file. There's probably also seek operations in other node io libraries which might achieve the same goal.

I'm a node noob, but very experienced in Java large file IO. What you want to consider is:

1. Is the file being appended to?
2. Is the file being modified at random points?
3. Do you need concurrent access?

If any of these are ""yes"" you should try to move to a database model. It is possible to deal with #1, but I'm not sure of the right mechanism in node.Node's file open is terrible. Read the on standard in and pipe the files in. 

For row based files like CSV, read line by line rather than take the whole thing into memory. Depending on how the data is laid out, in your file, for each object you need to store, you can stream the data in and parse it into your objects. From there you can stream your objects to a service that saves them into your database. This will prevent you from loading multiple GBs of data into memory.

If you have a time constraint you can setup node in master/slave mode so it launches multiple nodes. Then you can setup a job queue with zeromq/rabbitmq/whatever your favorite message queue is. Then when you stream and parse your data, you put it in the queue and have your services listen for messages on the queue. This way you have multiple node processes querying the database and it mitigates the latency bottleneck you would experience from making a bunch of DB queries on 1 process.you can try importing entire CSVs into the db and then doing further operations on it

otherwise you might try and ""index"" the flatfiles which allows fast random access to the file (works well for text files for example that have variable length lines). in bioinformatics, we commonly use a tool called tabix for this task, but it is sort of oriented toward a particular type of file that can be sorted by coordinates"
2016-07-05 17:39:25;Building a custom 32-bit Node.js addon for Electron problem;You might have better luck asking on the Atom [forums](https://discuss.atom.io/c/electron) or [slack](https://discuss.atom.io/t/join-us-on-slack/16638)
2016-07-05 13:14:58;Tutorials on deploying a node.js app;"lots of tutorials on the do community site. If you don't want to mess with setting up your own servers look into heroku. If you dont mind being a server admin then use DO. On DO i used the mean starter droplet and it was super easy to get running from there, but moving to production i needed to setup nginx for proxy to node. I used pm2 to run node app. Then i needed to setup certbot. I'm actually about to be speaking at [OpenWest](https://www.openwest.org/) (a regional tech conference) about this topic in two weeks.

The easiest way: [heroku](https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction).  You said DO or linode, and this isn't fulfilling that requirement, but it is the easiest way to get your app online.

The easiest DIY way: [This](https://dennisbeatty.com/how-to-set-up-a-node-js-production-server/) is a tutorial I wrote a year ago, and it does use Digital Ocean.  If you can figure it out, I would recommend using pm2 instead of forever like I used in the tutorial.

The best way: I don't have a good tutorial (or know of a great one) for this, but it would be containerizing your app with docker.  There are shortcuts like [dokku](http://dokku.viewdocs.io/dokku/getting-started/installation/), which makes basically a heroku clone on your server that you can then push your apps to with git.  I will probably write a more in depth tutorial on deploying with docker after my talk.

Alternative: This one requires a lot more work, but you can also write your app as AWS Lambda functions and then use API Gateway to link to them.  In theory this might be one of the faster (in terms of response time, not coding time) and cheaper methods to deploy, but probably the most time intensive for you to build.

**Judging from where you seem to be based on your post, I would recommend just following my tutorial**.  Then as it grows you can dockerize it and improve your production environment.  If you want though, you're welcome to PM me any other questions you might have.deploybot.comHow much traffic / load are you looking to handle?

Also, what do you mean by ""synchronizing both local and production applications""?

If your main goal is to get something up and running in production quickly, I'd start with Heroku. You can use the free tier at first for testing things out on live URLs, and even the $7 / month plan for 24/7 uptime will work fine if your app doesn't have a lot of traffic. 

Scaling up to multiple dynos as traffic grows can get expensive, but many companies still find it valuable compared to the cost of not needing a full-time (or half-time) devOps person managing the infrastructure.

This would also help you to focus next on getting CI in place, if you haven't set it up before. If your repository is housed on GitHub, both TravisCI and CircleCI are good options. I prefer them over other options because all of the CI configuration / commands are managed with a config file that is saved to your repo (which makes it easy to track the history of your changes, or replicate them to new projects).  TravisCI has a built in option to deploy out to Heroku as well, which I use on a couple projects.  But you can write your own bash scripts for doing more manual deployments (out to DO servers, or wherever).

I haven't used chef/puppet too much myself, as Docker was around when I started moving into devOps stuff, and seemed like the better direction to go.  I'd start experimenting with Docker after you're comfortable getting some basic CI in place, since your CI is ideally what you would use to build your Docker images, and push them to DockerHub (or wherever), and then `docker pull` it down to your production machines.

Using nginx as a reverse proxy for node is super common when you're managing your own servers, and is great for serving up static files (images, css/js files). pm2 is what I've used for nodejs clustering on multi-cpu machines, and gives you crash/uptime support, and helps with rebooting the app in case the entire server reboots as well. These are things to look in to if you're self-hosting (not using Heroku), and plan to use multi-core machines. If you're going the Docker route, and looking to scale horizontally across cheap boxes that only have 1 cpu core, nginx and pm2 might not be as relevant.

Knowing what your main objective is (getting an app up and running quickly, just general learning, or needing to scale reliably and/or cheaply) would definitely affect the advice/answers you'll get. But either way, don't try to overload yourself learning *all* the things at once. "
2016-07-12 19:24:48;I want to create a SaaS that allows people to record how users interact with their site, how does that work?;"yup, pretty much.I would do it like this:

* Store window dimensions (to be able to scale it to different resolutions later)
* Add event listeners for mouse events (or touch, or both)
* Add event listener for keypresses.

Every click/keydown event, store the x / y position, and key type (left, right), together with a timestamp.
Every keypress event, store the typed key, and timestamp.


For the playback, scale every mouse operation against the original resolution. Lerp between current and next position over the timediff between the two timestamps, 


    (next - current) * time;


For the keypresses, use timeouts to simulate the delay between the keypresses.Im in the process of doing something (on a smaller scale) to this for a project. Im recording mouse events / keyboard events. Saving them in a simple JSON store and then essentially 'replaying' them over an image or an iframe, so i can emulate user stories.
Would something like selenium be appropriate? "
2016-07-12 18:26:28;Refraction – JS library to make modules independent, testable and re-usable;"So this is basically the suggestion to use a pub-sub pattern with named functions for each event instead of channels.

What would be the advantage here?"
2016-07-12 13:08:29;NPM and Bower Update Checker;why should i bother this when i can just use npm-update-checker from cli?
2016-07-12 09:39:12;Node Hero - Node.js Security Tutorial;[deleted]
2016-07-12 09:05:23;New Relic adds support for Golang, SPA monitoring - CIO|Google;
2016-07-19 23:57:47;Installing node in SLES 11.3, or any other SLES?;"I guess there will never be a dedicated installer.
Maybe try compiling it yourself, which would be easy, if it is supported at all. My bet though is that it won't work."
2016-07-19 21:41:46;Alexa Skills Kit SDK for Node.js Released;This is huge. The existing 3rd party alexa-app package is garbage and pretty much not supported 
2016-07-19 18:56:43;How I manage multiple Node.js versions;"I code in Linux and OSX and I've had no problems with nvm.

Just make sure you eradicate all prior installations and configurations (Google it) and keep an eye on your PATH variables and folder permissions.Only complaint about n is the lack of windows support, which means I use nodist at work. But it's what I always use in a nix environment. There's just something fun about managing node versions through a tool I installed with npm.Used to have problems with nvm, recently has worked fine.  I switched to mainly using fish shell, so for that I believe the last time I used fisherman to install the nvm plugin.  http://fisherman.sh/?q=nvm

Also as an aside, for fish, I sometimes have compatibility issues with stuff (other than nvm) so I have just been running the fish command inside bash so I can just exit and fall back to bash if there is some command that I am trying to copy paste that doesn't work.I'm a fan of managing multiple node versions through docker. One command, and you're up and running on whichever version you like. One tiny script and you can run your tests on five different versions, and you don't need any crazy complex setup... You just need docker installed. Same goes with practically any other language or service."
2016-07-19 16:23:49;Juggling Async requests;"Please keep in mind that the answer to question 9. requires: ""that you must print them out in the same order as the URLs are provided to you as command-line arguments"". If I have understood correctly you are repeating the above snippet with different arguments. That will not work due to the async nature of http.get.

In your code the http.get executes, fetches the results of the supplied URL(process.argv[2]) and returns the response. The response is then piped into a function bl...

Rather than try and decipher the code here is one possible solution using recursion:

    ""use strict"";
    var http = require('http');

    var urls = [process.argv[2], process.argv[3], process.argv[4]];

    function next(url){

         if(!url){
            return;
         }

        http.get(url, function(response){
            var s = '';
            response.setEncoding('utf8');
        
           //data comes in blocks. 
           response.on(""data"", function (data) {
               s += data;
           });

          //last block comes here
          response.on(""end"", function () {
                 console.log(s);
                 s = '';
                 next(urls.shift()); //shift returns undefined when no more URLs are left
             });
         });
    }

    //1. start 
    next(urls.shift());

Hope this helps.

-J"
2016-07-19 15:55:18;Making Sockets Play Nice;You want a session-store between your Socket.IO and API instances, that can be [Redis](http://redis.io/) or some custom service you put together yourself. Both your Socket.IO and API instances can push and pull the latest information they need from a shared source. An API event can send a message to a user's socket if your Socket.IO instances make themselves available to your API instances and they track and share who they have connected.
2016-07-26 22:48:07;SchemaPack - Serialize your JavaScript objects with schemas. Faster and smaller than the competition. Perfect for WebSockets.;"[Github link](https://github.com/phretaddin/schemapack)

I submitted [this to /r/Javascript](https://www.reddit.com/r/javascript/comments/4tgk9p/schemapack_serialize_your_javascript_objects_with/) last week. I spent the past week fixing some issues, adding some more documentation, and mostly just optimizing it to make it as fast as possible. This is my first open source project and would love any sort of feedback or comments.

Thanks!How does it compare to [socket.io's built in gzip compression](http://socket.io/blog/socket-io-1-4-0)?Looks mighty interesting. I'm building a framework that relies heavily on json objects send by web sockets. This could be very useful for optimisation indeed. Will play with it a bit. Thanks!Awesome library! Love detailed documentation! One question: is there any chance to include already ""Browserified"" file?Awesome work! It would be great if there was an option to extend existing schemas without breaking compatibility with the previous schema, just like protobuf does it. Instead of `key: type`, `key: [index, type]` could be given to explicitly specify the encoding/decoding order of property values.[deleted]"
2016-07-26 21:07:05;Is ExpressJS still the de facto alternative to build server side apps in NodeJS?;"Pretty much. A lot of people use Hapi and Koa is gradually picking up steam, but express is still the default in my experience.I would say that express is the most popular and probably that won't change within the short term, since it's the ""ready to go"" option for many. Nevertheless, I would strongly recommend giving a try to Koa v2 which is quite different to its v1. Writing asynchronous code with async/await is something beautiful. :)Ugh.

At work we've been writing generator/promise/co driven code with Koa for over a year, and it's awesome.

I couldn't even imagine going back to callback hell & express.  Anyone who says it's still ""de facto"" just doesn't know better. :)Thanks for all your input guys! Also helped me to catch up with current state of things in Node.

Also, what is your opinion on Sails? I tend to favor convention-over-configuration, but Sails might be overkill for an API.~~Last I read, Express was being integrated into Node itself.~~

~~Haven't kept up in like 6-7 months, though~~

**EDIT**: See below"
2016-07-26 16:13:22;Microsoft UK has endorsed the Awesome NodeJS list;a shame that there's not a single reference to [Sindre](https://github.com/sindresorhus)Working with SailsJS for a year,  now moving all the business' code to Express because Sails is both dying and a massive piece of shit. Checked this list: very positive about Sails.  I'm out. Get a clue Microsoft and 'Awesome'. 
2016-07-26 13:02:03;For the ones who’d like to deploy Node.js but don’t know how!;"elastic beanstalk + deploybot

= awesome plus team compatible "
2016-07-26 09:04:16;Best way to use compression middleware in Expressjs?;I would say dont. use something like NGINX as a proxy and let that handle compression with gzip. This would end up being much faster.Use middle out
2016-08-02 23:37:32;[Hiring] (Montreal, Qc, Canada) Node.JS / Javascript Developer - One-time contract;
2016-08-02 22:55:22;Active groups;https://devchat.devolio.net/ on Slack
2016-08-02 18:48:35;Any offline library to do Microsoft Word (mail) merges in Node?;"only nodejs tool that I know of that can do this is edge js that interfaces .net and node, then just lookup how to do mail merging figure out how to implement it in edgejs.. For instance this is how i solved the node xlst problem for a tool I am implementing for academic purposes..:]

    var edge = require('edge');
    var ReadFile = edge.func(function() {/*
    using System;
    using System.IO;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    class Startup
    {
    	public async Task<object> Invoke(IDictionary<string,object> data)
    	{
    		return File.ReadAllText((string)data[""xmlFile""]);
    	}
    }
    */});
    var ConvertToXpath = edge.func(function () {/*
    #r ""System.Xml.dll""
    using System;
    using System.Linq;
    using System.IO;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using System.Xml;
    using System.Xml.Xsl;
    class Startup
    {
    	public async Task<object> Invoke(IDictionary<string,object> data)
    	{
    		await Task.Run(async () => {
    			XslCompiledTransform xslt = new XslCompiledTransform();
    			xslt.Load((string)data[""styleSheet""]);
    			// Execute the transform and output the results to a file.
    			xslt.Transform((string)data[""xmlFile""], ""export.html"");
    		});
    		return File.ReadAllLines(""export.html"").ToList();
    	}
    }
    */});

    var xpathParams = {
    	styleSheet: ""xpath.xsl"",
    	xmlFile: ""export.xml""
    };
    var xmlParams = {
    	xmlFile: ""export.xml""
    };

    ConvertToXpath(xpathParams, function (error, resultxp) {
    	if (error) throw error;
    		ReadFile(xmlParams, function (error, resultxm) {
    		if (error) throw error;
    			use node-xpath here.. :d
    		});
    });
Updated.. 
maybe use the Office OLE/automation objects just like you could from VBA?I too would like something that deletes the word file and emails the creator asking for a better format."
2016-08-02 17:03:47;How to Diagnose Memory Issues with Diagnostic Hub & Time Machine for .NET;
2016-08-02 14:28:13;Image Processing In Node.js;"tl;dw use ImageMagick."
2016-08-09 22:00:37;Swimlane is looking for a Senior NodeJS Engineer to help build a cyber security ops platform;
2016-08-09 18:30:01;NodeJS WebSocket server for data transfer between game servers;"There's specialized software that is built to solve this sort of problem.

Redis master/slave or master/master clustering/replication, Mongo sharding, MySQL (or MariaDB) multi-master synchronous replication, etc.

Good luck.http://socket.io/docs/using-multiple-nodes/I have some experience with this type of thing.  Most games end up shading realms to avoid this type of thing. This means that all people in a certain room/dungeon/realm are actually all told to connect explicitly to one server to avoid the server-server latency problem.  Also, latency itself isn't normally the problem, but the volume of data that needs to be kept in sync across all servers.  

Record persistent data to your database (inventory, health, etc), which can be accessed by all servers, but transient data (people's position on the map, etc) doesn't need to live anywhere else but in the RAM of the node you are connected too. Raw TCP/UDP will be much faster and reliable in your case. Also something like redis will also do the trick, but it will be not so fast.
WS used more if you want establish communication between web-clients and server. And WS is not good with binary data."
2016-08-09 15:38:59;Cut TravisCI build time in half by caching node_modules;If you are building a library and you don't have a shrinkwrap/lockfile then this would hide real breakages in your build like breaking apis in allowed ~/^ ranges, or leftpad removals. This seems useful for apps with shrinkwrapped dependencies though.
2016-08-09 12:36:59;Node Hero - Monitoring Node.js Applications;
2016-08-09 09:21:17;Comprehensive node.js tutorials/books;"[deleted]https://www.manning.com/books/node-js-in-action
https://www.manning.com/books/node-js-in-practice

These 2 will pretty much cover all features of NodeJS, you will know where to advance from thereWhen I needed a bit of a kickstart I used [Professional Node.js](http://www.wrox.com/WileyCDA/WroxTitle/Professional-Node-js-Building-Javascript-Based-Scalable-Software.productCd-1118185463.html)Not *exactly* what you're asking for, but I've been working on [a list of resources](https://gist.github.com/joepie91/95ed77b71790442b7e61) for a while that covers a lot of the stuff to learn about Node. It's still a work-in-progress and not complete, but it might be useful regardless."
2016-08-16 23:20:03;[Show] jdi: a documentation generator for literate JavaScript;"I would love to use this, but the node6 requirement is a non-starter for our environment :(It looks interesting, although I would had preferred a less radical approach, for ex., to convert DocBlocks such as JSDoc (http://usejsdoc.org/) to Markdown rather than requiring all the documentation to be written in Markdown.Any chance of being able to specify where the output files go?

Also, a Grunt plugin to use it would be fantastic, but I understand that might be somewhat outside the scope of this project.>Since everyone has their favorite Markdown editor anyways, I don't see any reason to actually render to generated Markdown to HTML

I'm not sure who would prefer a file format viewable on GitHub only, save for requiring extra rendering steps. "
2016-08-16 18:56:26;Introducing `stack`, open-source CLI and SDK for multi-language streaming microservices;
2016-08-16 16:32:05;How should I format this to avoid callback hell?;"Do you have a code example, we can't really give you an example of an alternative if you don't give us an example of what you're trying to do.

Have you tried using [Promises](http://bluebirdjs.com/docs/getting-started.html)?I've had great luck using [Async's](https://caolan.github.io/async/) [series](https://caolan.github.io/async/docs.html#.series), [waterfall](https://caolan.github.io/async/docs.html#.waterfall) and [parallel](https://caolan.github.io/async/docs.html#.parallel) methods - [each](https://caolan.github.io/async/docs.html#.each) is handy too if my iterator is non-blocking.I highly recommend giving co (https://github.com/tj/co) a try.

It allows you write your asynchronous code in a more synchronous style.

    co(function *() {
        var accName = yield getAccName();

        if (!accName) {
            var rank = yield getRank();
            var userGroup = yield getUsersGroups();

            var addResult = yield addUserToGroup();
            var removeResult = yield removeUserFromOtherGroups();
        }

    }).catch(function(e) {
        // This will catch any exceptions or rejected promises triggered 
        // during the execution of the above block
        console.error(e);
    });

Note that functions being called with `yield` are asynchronous functions, and ideally should return promises.I use the `async` and `await` keywords with babel.  Makes everything simpler.  

At some point you will want to understand promises and generators.  You will need promises to understand quite a bit of JS code and to interface with the `await` stuff.  It takes time to get used to it all.

Also another thing that can simplify your situation is to (if possible) combine some of that stuff in a database stored procedure (if you database has something like that).

These are not popular so probably not what you want, but there are two languages, ToffeeScript, and LiveScript, that compile to JavaScript and have a built-in syntax that makes async code look basically like sync code.  I used to use ToffeeScript for everything because of that, but stopped because no one knew that language existed and ES6 with async/await was much more popular.

Pretty soon (X months, less than a year) the default Node.js will support async/await without babel.  You can do something similar with generators without babel, but I find the code to be clearer with async/await keywords.

With babel its not as clean as TofeeScript or LiveScript but it looks basically like this:

    async function checkGroups(id) {
      const name = await getAccName(id); 
      const rank = await getRank(id);
      await clearUserGroups(id);
      const result = await addUserToGroup(id, rank);
      return result;
    }

    checkGroups('bob').catch(console.error);

Having said all of that I think that if you want to fit in, the majority of people accept promises and/or generators more than using babel with async/await (although there is certainly a significant group of people using babel and async/await).  Generators are probably still the 'coolest' thing as far as popularity.  That may change in not too many months, or it may not.
If you want just some piece of code you obviously could take an example with promises or other bullshit. If you want to learn how to code it in right way - just write a function that will accept an array of other function and execute them in sequential order. Then add some arguments handling and that's all.

It's simple, 7 lines of code, instead of that monstrous promises...

var queue = function(funcs, scope) {
    (function next() {
          if(funcs.length > 0) {
              var f = funcs.shift();
              f.apply(scope, [next].concat(Array.prototype.slice.call(arguments, 0)));
          }
    })();
};
Example taken from http://krasimirtsonev.com/blog/article/7-lines-JavaScript-library-for-calling-asynchronous-functions (see it for more details).

Then write your functions and give them names, pass those names to queue array and viola.

If you need something more - just add it to that 7 lines. Or if you don't really care about performance, you can always require a lot of modules that have tons of codelines, when you need just a couple of them."
2016-08-16 14:26:59;Nodejs and Nginx file uploads;"You should really look into the TUS protocol. http://tus.io/

They have an officially supported server for node.js https://github.com/tus/tus-node-server

Basically it allows chunking large files and resumable uploads built on HTTP.

To be honest - implementing your own large file upload is very complicated - i.e how do you scale it? how do you handle failures? how do you handle parallel uploads?

Tus thought of this already - and it can easily be put in as middleware for express.
They also have a neat example: http://tus.io/demo.htmlYou should use direct upload to s3

https://devcenter.heroku.com/articles/s3-upload-node"
2016-08-16 12:47:56;Strapi tutorial : Getting Started;You have to downgrade Node to use this? No thanks.
2016-08-23 16:01:18;How do you send back api queries in a normalized fashion? Is this even a good idea.;"> Any idea what CSS framework it uses?

https://material.angularjs.org/latest/

The project source code is on github: https://github.com/mehmetbajin/gt-course-surveysAre you talking about the difference between:

```
{
  ""id-abc"" : {
    k1 : v1,
    k2 : v2
  },
  ""id-def"" : {
    k1 : v1,
    k2 : v2
  }
}
```

vs

```
[
  {
    id : abc,
    k1 : v1,
    k2 : v2
  },
  {
    id : def,
    k1 : v1,
    k2 : v2
  }
}
```

That's normal, for Firebase at least. One thing to note is that the order in the first example is not dependable when iterating (in reality it is dependable in all modern browsers/node, just not specified as such)."
2016-08-23 14:46:27;TypeError: Cannot read property '0' of undefined - passport-facebook;"`profile` has no property `emails` in this case, so attempting to access `profile.emails[0]` will throw an error as `""undefined"" === typeof profile.emails`its a lot easier for people to provide you help if you post more than just a random error message, for instance, it usually helps to include the code you are trying to run, and any troubleshooting steps you have already tried... even though in this case, the error message seems pretty obvious

       C:\Users\callum.PIXELPIN\Documents\facebook\config\passport.js:106 newUser.facebook.email = profile.emails[0].value;

that tells you that line 106 in the file %userprofile%\Documents\facebook\config\passport.js is causing an error, because of

    TypeError: Cannot read property '0' of undefined

and since it shows the line thats causing the error as:

    newUser.facebook.email = profile.emails[0].value;

its safe to assume that 

    profile.emails is undefined

have you tried placing 

    console.log(profile);

just before that line, to see what properties exist in the variable profile?What a fucking retard. "
2016-08-23 12:25:36;Controlling the Node.js Security Risk of npm Dependencies;
2016-08-23 09:33:28;How to setup ghost blog for free on azure?;https://azure.microsoft.com/en-us/pricing/details/app-service/
2016-08-23 09:01:39;Run as single app or multiple apps?;"Having multiple apps for essentially the same code (i.e. what can solved using strategies, factories or similar patterns), is a pain in the long run if you have allot of clients.

I would purpose having one type of service, e.g. `ftp-parser`, that you can configure per client.

Edit; Unless I've misread your post, we're not talking about scale here - because in that case there's obviously nothing wrong with horizontal scaling."
2016-08-30 22:15:54;“Node.js is one of the worst things to happen to the software industry” (2012);"Don't understand why all the downvoting: people should upvote that post just to see good answers to the OP's claim, like the comment of /u/psteeleidem about the architecture of eBay.  It's just a horrifically fragmented platform. This plagues Node the same way it plagues Android, much the way android runs well/is updated often on some devices meanwhile it is complete shit/unsupported after one year on others. 

It'd be nice for google, microsoft, ubuntu, any established software company really, to create a standardized framework for creating Node based web applications. Until then, we are stuck with downloading a whole separate dependency just to do the simple shit like copy/paste a file during build. And 65 other dependencies for an actual project.

I understand that this goes against what Node stands for, but this is why I don't see Node apps being really, truly ready for production environments outside of perhaps the startup scene in silicon valley. No established company like a bank or a mortgage company is going to just casually upend their entire system to switch from classic, ""works right out of the box"" Visual Studio C#/HTML/SQL web apps on the promise of ""it'll get better"" and ""there are like a bajillion different frameworks and plugins, made by random teams or individuals in places far far away, which you will have to pay people to learn from the ground up, with no 1-800 number to call when it breaks, and which may not be supported 6 months from now."".

Feel free to convince me otherwise! I do love the web apps I have scraped out on Node and I do see the potential. I'm just sorta jaded to Node after many months of tinkering with different application frameworks, IDEs, and text editors without a real sense of platform unification. The one time I got really confident with one setup (Ember + Firebase) it was immediately bought out, updated, the documentation lagged, and I gave up."
2016-08-30 21:08:01;Can't seem to connect to my node.js server;"if you're trying to connect the router's public IP from behind that router, it's probably not going to work.

the 2 routers thing is confusing.  "
2016-08-30 21:01:18;How does one write a module properly.;"You don't need all of your code in the export. Just whatever you want to export. So you can declare your functionality and have all your logic outside of the export, then when declaring the export, just assign whatever functions to it. as one800higgins noted you don't need to put all of your code in exports.module. You can export at the bottom of your file.
for example

// test.js


var a = 2;
console.log(a + 3);

module.exports = a;

//


if in another file or in your cmd line you do require('test');
first it will log out 5, then the value of require('test') will be 2;`module.exports` simply refers to an object. So you can refer a proper class, a prototype, a number, an array or a string.
The syntax in the `module.exports`is bound to be in object notation, meaning you can not use let and classical assignment within the object directly. 

If you want a setup, make it like this:

    function internals() {...} //Hide this 
    function awesomeFunction() {...} //Wanna expose this

    //Default exporting
    module.exports = awesomeFunction;

    //Explicit exporting
    module.exports = {
        awesomeFunction: awesomeFunction
    };

This pattern can be applied to all objects.
So exporting 3 classes is absolutely no problem.I always export factory functions with a ""self"" to avoid ""this""

See more here https://medium.com/@pyrolistical/factory-functions-pattern-in-depth-356d14801c91#.2ikc1uemq"
2016-08-30 18:57:37;React on the Server for Beginners: Build a Universal React and Node App;
2016-08-30 12:53:56;JavaScript Garbage Collection Improvements - Orinoco;That's great and all, but I understood nothing from this article. Some example code could've been helpful.
2016-09-06 22:42:48;Invoking jasmine does not return anything. Anyone has seen this and found a solution?;
2016-09-06 20:46:18;"Using restify to make REST service, getting ""variable not defined"" during get request";"Var shortName = request.params.....        
               

Edit: The problem seems to be in your request callback. You'll have to figure out a way to pass shortName to it"
2016-09-06 20:09:06;Farewell to Node.js v5, Preparing for v7 - NodeSource;So if I understand this correctly Long Term Support (LTS) for Node 6 starts in Oct? That would be a great moment to switch.Does anyone know if Node 7 will have support for async + await?There's one part about this I don't understand.  What's the point of the odd number releases if they're never going to LTS?  Why would anyone switch to one of those versions, knowing that in 6ish months it's not going to be supported anymore?
2016-09-06 20:03:08;User Login System: Cookies vs Local Storage;"local storage is susceptible to XSS but not CSRF. Cookies (talking about secure flagged cookies here, i.e. cookies that only work through https, no other cookies are worth talking about) are susceptible to CSRF (but can be prevented) but not XSS.

XSS is a wide, highly damaging and highly automated attack (practically no effort required by the attacker) angle. CSRF is in comparison a narrow and manual (requires work by the attacker) point of attack (plus it can be relatively easily protected against).

Both can be very damaging, especially XSS attacks.

If you're not running any third party code you don't have to worry about XSS - when do you not rely on 3rd party code? practically never - especially not if you're running Ads.

Cookies work well for storing user sessions like the ones you seems to be dealing with.It's worth mentioning that local storage is not accessible in chrome (or is it Safari?) private mode. I've only found local storage useful for non-critical frontend application cache. "
2016-09-06 18:20:11;Help understanding CORS and relationship with Heroku;"There's nothing stopping you from spinning up two ports for listening, one to serve front-end content and another for the API, you'll need to wrap both of those up in one script for Heroku to start when you deploy.

(Also, your formatting is pretty awful in your text.. fyi)."
2016-09-13 23:47:57;Pushing to Git via node script?;"I don't have any experience with this, but there are quite a few git-related packages on npmjs.com: https://www.npmjs.com/search?q=gitWhy does it have to be node? Pretty sure bash scripts have been out there for a long time that do exactly the same thing.Dude... 15 seconds a day? Doesn't matter what you will do, don't waste your time with this, you spent more than 15 seconds writing this post. Sometimes it's not worth doing things like that. Ok, you could write a script to do that... But believe me, doesn't worth.i use gulp and gulp-gitUse child_procces.exec(...) to just call the git command directly?You can use some plugins (just like gulp-git, that was suggested earlier) that usually operating over system git, or use nodegit module that uses libgit (in this case you even will not need git installed).

I've made something like you want, but for gitflow automation. For example if you print

    flow release start patch --finish --push

it will 

- read package.json and determine next version with ""semver"" module

- create a release branch from develop head with name ""release/<next_version>""

- update version in package.json and commits it.

- merges release branch into master and develop

- creates tag with version on master

- pushes all to origin(s)

I've used [nodegit](https://www.npmjs.com/package/nodegit) module for git interaction and [yargs](https://www.npmjs.com/package/yargs) to deal with command line arguments. I didn't publish it to npm yet, but if people will be interested in it, I can do it.I used `simple-git` in a Node script for a short while. It works, and using modules like `prompt` you can add some interactivity to your push (if there's conflicts, or to rimraf a bunch of stuff you don't want to commit, or whatever). 

My main problem is that it wasn't well documented, some of the documentation outright lies. But it's fine if you know Git and can pick it apart, expect there to be a bit more configuration than you'd think when setting it up.[i wrote a python script to do this](https://github.com/wookiecooking/watchmegit.py/blob/master/git.py) about a year ago for a coworker who had a similar request. You don't need a script, you can just use npm and git.

https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/"
2016-09-13 22:30:39;What would you tell a complete node noob about logging? I have so many questions.;"> I basically want to make sure I am logging all of the things I should be so that when things go wrong or even when things are going right

Rookie mistake. Focus on logging whats important (error + stack trace). More logs = more noise. More noise = harder to debug.

1. Log to different files.
2. Log to different files.
3. Errors. If, and only if, there is a specific error that keeps occurring and stack traces are not enough, consider logging everything until you catch the error.
4. Use console.log or something like https://www.npmjs.com/package/debug. Avoid loggers that allow logging complex structures. See #5.
5. It might seem awesome at first (""easy"" to filter, capturing all the data at the time of the log, etc.) and it can be useful, however, it makes logging system, logging aggregation and logging analyses process a lot harder. Focus on error logging.
6. Think what is the error. What would cause the error. And what would help to solve the error. In general, stack trace is your primary tool. After that, scope and environment values at the time of the error might be useful.
7. 1 error entry is more useful than 1M debug logs.
8. If you are a one-man band, I recommend http://newrelic.com/ or either of their competitors. Thats specifically for measuring/ monitoring latency of external services. It makes it super easy.Check out Winston. It is an amazing library that has custom log levels and colors and multiple transports. You can write some things to console and others to a file etc. I actually write a log call instead of comments. Just write them for the silly level and don't turn that level on in production. In addition to logging errors, I also like to log operations stuff. For example, when a user logs in, when they create a new item, when they make a comment, etc, I log it in plain english. It's helpful to see activity happening in realtime, lets you review everything a customer did, see most popular features, and can help you find problems that aren't exactly ""errors"". 

For example, the software I'm in charge of is an enterprise EHR application. We have big customer support contracts and some accounts want us to handle their user management. Our support team will watch the logs for things like invalid password attempts, and if the user struggles more than a few times, we'll be proactive and call them. So we'd see something like:

""nsocean has entered an invalid password""
""nsocean has logged in""
""nsocean created a thread 'What would you tell...' in /r/node""

http://papertrailapp.com/ is a great hosted logging service. I create a ""system"" for each service, and then set up groups to aggregate logs for Production and Development. 

http://raygun.io is a great error reporting service. I usually use both, papertrail for operations, and raygun for errors. It handles stack traces better, can show you request headers and cookies set, env variables, etc. 

You can also take advantage of log levels, like ERROR, WARN, INFO, DEBUG. 

    log.debug('Getting something from the database');

    if (something) {
        log.error('Something bad happened');
    }

By default, you might configure your logger to only log errors. If something happens though, you can change your app's config to log DEBUG messages as well. That way, under normal circumstances, you're not overloaded, but you have the flexibility to change. "
2016-09-13 22:21:22;(Question) Odd issue with File upload dialog box on MSIE and Edge. Dialog closes and reopens regardless of what the end user does?;
2016-09-13 21:04:53;Recommended way to combine Keystone with react?;
2016-09-13 20:25:32;Socket.io question (manually encoding packets/payloads);Not sure, but it's probably for acknowledging messages.You should probably read this: https://tools.ietf.org/html/rfc6455
2016-09-20 20:23:42;[HIRING] Our cryptocurrency development team is hiring a JavaScript/NodeJS dev. Details here.;"You have a PM.>-short-term assistance over the next **1-3 weeks** approximately (contractor role)

>-long-term assignment as an Evo team memeber
.. We can train the person and do the coaching during the job (**initial training/trial period is not paid**).

seriously? Are you asking for someone to work for free for 3 weeks in exchange for the possible chance of being hired after that time period? Or was this mean to be ""we will pay you for the 1 - 3 weeks of work, and then maybe give you some free training to get up to speed on the project, before hiring you to do more work""?"
2016-09-20 17:20:57;The Progress of Node.js a Year Post Merge and Where the Technology Is Going;
2016-09-20 15:18:41;Building a Serverless Mesh Processing Microservice in Node.js;
2016-09-20 15:12:11;You SHOULD Learn Vanilla JavaScript Before JS Frameworks;
2016-09-20 14:01:12;4 must-know tips for building cross-platform Electron apps;Great tips, and nice attention to detail, thank you!This has been very helpful. Thank you!Also agree, thanks for sharing this, all the points here are very useful.Really handy tips, thanks!
2016-09-27 23:19:42;"How to make an 'npm packager"" script work?";dumb dumb dumb!  i needed to do `npm run packager`.  doh!  Now in stack overflow fashion, downvote and berate  me! :P
2016-09-27 23:13:26;GitHub - bcoin-org/bcoin: Javascript bitcoin library for node.js and browsers;
2016-09-27 19:00:36;Why is your node.js SSL connection failing to connect?;
2016-09-27 18:42:55;Here's a function/job queue with rate limiting that I made. No dependencies. Gimme yer thoughts/suggestions!;"Where is the rate limiting? All I see is ""wait for one job to finish to do the other?""

I was expecting ""execute {x} max jobs asynchronously, and once one completes, continue executing in the queue against the max number.""

Or a slow-down algorithm. Sequential job execution seems a little against the purpose of Node.js.Intresting stuff, is it mostly aimed at network calls to rate-limited wesites/ services? If so, you may draw inpiration from this python lib: [request-respectful](https://github.com/nbrochu/requests-respectful)You could further improve this by using a double ended queue implementation instead of pushing to a standard array, something like  https://github.com/Salakar/denque (shameless plug =] )

You'll then get a constant O(1) for every queue operation."
2016-09-27 16:29:00;Node.js Web Apps @ eBay Scale - Node Summit 2016;"first off, i love the history of languages used by ebay here. That's awesome. also, if this is you giving the talk, i got a question:



what is Domain Experience Service? Maybe I just don't get it. Why not have a service per domain that handles the 'experience'. That way you can treat your domain 'experiences' as modules, and you avoid the single point of failure.Thank you for the video. Love what you guys are doing @ ebay, especially marko's approach of being able to render HTML out-of-order - which is really unique."
2016-10-04 22:46:48;[Express/Passport] For security purposes, how can I force all routes to be unauthorized unless I add auth-specific middleware?;"It sounds like you need to separate your programs concerns. Your app needs to have a login feature for authorization, although it seems like a user feature it's a separate application feature.

Also you shouldn't be placing a middle ware on every single URI that can be handled in one line. You need to place that in the main app.js folder as app.use(authMiddleware.isAdminUser())  above the routes that require it and then be done. Or at a minimum declare it at the top of you route in the route file.

I'd say read up on middleware execution This came up late on my feed, but we ran into the same problem at eBay and the solution is to match the route at the very _beginning_ of the request and attach some metadata to the matched route. This allows intermediate middleware to do different things based on the matched route and the matched routes metadata. We created a module that you can use: https://github.com/patrick-steele-idem/meta-router

Hope that helps.this might be a bit screwy but set up some sort of matrix of routes you want to open and check that matrix in some middleware at the root before any of your routes have been added - if a route isn't explicitly listed there then return 403.

I can't think of a way to get the best of everything where you opt-out of a default unauthorized return if middleware down the chain says so.

Typically the use case is to add authorization to a route by adding middleware - not opt out of authorization by adding middleware."
2016-10-04 21:43:15;Going Serverless: Migrating an Express Application to Amazon API Gateway and AWS Lambda;Does this work with socket.io? 
2016-10-04 17:25:53;Intro to Simple Docker with Node and Koa;
2016-10-04 14:44:39;What's the standard folder structure for a MEAN/PEAN app?;There's no standard but if you're looking for a decent starting point express has express-generator which makes a basic file structure and basic files along with basic router and basic this and basic that.look into mean.io or mean.js for their folder structure. 
2016-10-04 13:43:37;Test262 - A Tour Guide Through The Grotesque Corners Of JavaScript;
2016-10-11 22:34:24;Undertaking New Project, Best Approach?;You can get their session id, and make that part of the file name.Why is it saved as a json file? And not into a database?
2016-10-11 20:41:46;Apparently, npm is not used in Detroit.;As someone who has lived there I can tell you this is not true.Wouldn't wanna offend gang members.I work in Detroit and use it on a daily basis... soooooo yeah. Not sure what this even has to do with Detroit. You'll find more gangsters in Chicago anyways.http://i2.kym-cdn.com/entries/icons/original/000/015/266/Z7HeRxU.png
2016-10-11 18:31:03;MiniMatch, Node, Ionic install help;
2016-10-11 18:30:29;Start and kill a script from another script;"Can you describe the problem you're trying to solve with this approach?    This is an extremely non standard approach to periodic execution, which makes me think there may be a better way to solve the original problem.use bash with a while loop.  instead of ""timeout /t"" you'd use ""sleep"", and instead of taskkill, use killall.

a bash script that would start a program, then when it closes wait 10 seconds and start it again:

    #!/bin/bash

    while :
    do
      myprogram
      sleep 10
    done
    "
2016-10-11 15:35:01;Yarn - a new package manager for javascript;"Having used `npm` and running into *EVERY* problem  mentioned in the OP, this is a huge leap forward for the community. I just replaced `npm` in 2 Dockerfiles and both projects built without failure and in *half* the time.

This is great.Any idea why this couldn't be accomplished by contributing on npm itself? Well, I tried it on our project, but it failed to download our private dependencies, which we store in private github repos and not on npm. (npm allows in package.json to reference a dependency by an URL pointing to a git repo and specific branches, commits or tags)offline caching? yes please. lock files? yes please.The javascript community is so interesting: ""And with a single announcement, npm has been replaced."" That's not exactly what happened, but it feels like it did.Sounds like a solid project, although npm of course has the advantage of being installed along with Node.

Also pretty cool that it's otherwise entirely compatible with Node both forwards and backwards, for the people that are undoubtedly going to come out not wanting yet another new thing in Javascript: they can simply not use it and not be affected.Been waiting for something like this for a while. Good to see a collaboration between major players who have a vested interest in the community and ecosystem. Would love to see the registry taken over as soon as yarn matures a little more.

Thank you many many times over /u/sebmck, /u/thejameskyle and the other contributors!> For example, updating a minor version of babel generated an 800,000-line commit that was difficult to land and triggered lint rules for invalid utf8 byte sequences, windows line endings, non png-crushed images, and more. Merging changes to node_modules would often take engineers an entire day.

Having hit this exact issue, I am pretty excited for Yarn! Also very excited for the deterministic install algo and demonstrated reduction in build times - would make onboarding new developers a bit more painless.Pretty cool! Looks like `yarn publish` forces you to bump the version before publishing. As someone who generally bumps the version in a release branch, then `npm publish`es after it's gone through CI, merged, and tagged it's a little weird.

What do you guys think?FWIW the performance increase over npm in Windows is nowhere near as impressive as running it on a Mac.

""npm install"" on a Windows 10 w/ SSD took 1min 40secs to complete for a package.json containing Bower, Gulp and a few extras.

""npm install"" on a Mac w/ SSD took a similar amount of time for the same package.json

""yarn"" on the same Windows system took 45 seconds, even with the lockfile and cache in place.

""yarn"" on the same Mac took 15 seconds.

So yes, there's still a speed boost for Windows, but it's nothing compared to the Mac benchmarks they are promoting.[deleted]I can see how this would be beneficial, but part of me just can't trust FB. I get it's open source. I'll get over it but they are generally fucking evil. I'll have to take a deeper look into Yarn, but I'm very interested.In addition to the practical immediate use of yarn, I think it will help move things along for NPM itself:

* It demonstrates that it is possible to make something like an NPM client, which is deterministic (that is hard to overstate the importance of this) and considerably faster
* It demonstrates how, at least one way how, to achieve this
* Most likely, it will demonstrate that there is very wide interest (as people switch) for those things

But I don't think it will replace the official NPM client, rather I think those points above will lead to the next major version of the official NPM client improving along the axes which yarn has demonstrated. Competition is good for the overall pace of development.

Done... i was easily able to make my project yarn ready with an already existing npm package.json :D https://github.com/projecthammer/hammerI've just given it a go, and it seems very nice and fast. And then I've just realised that part of the reason it's so much faster than npm - on my project - is because it's not running my scripts. This means that ""npm install"" runs my entire test suite every time, but ""yarn"" doesn't, and I can't see any obvious reason why that would be.

Worse, I've just tried ""yarn test"", and the output was ""sh: grunt test: command not found"", despite grunt being both globally installed - and on my Path - and locally installed in node_modules/.bin.I don't like Facebook's attitude toward creating developer tools. What they do is, have a good idea (Typed performant PHP, typed JavaScript, supporting deterministic flat dependency management), and then publish it as an open source project without a care in the world about what already exists in this space, basically ignoring and never even considering contributing to prior art (PHP, TypeScript, JSPM).
They do this without stating if the project is meant primarily for internal use, and is just incidentally open-source, or if it is meant to be a community driven effort. This causes confusion for developers and CTOs.Sigh ... you know guys I really get it the things that bother you also bother me, the install times the huge number of dependencies etc but do we really have to split the community again ?  Come on.... "
2016-10-18 23:33:24;Beautiful commandlines for nodejs - neodoc v1.0.0 is out!;
2016-10-18 21:58:19;Screencast: Build a Simple Node.js Web Server with Docker;"$ npm install pm2 -g
### Generate Dockerfile, expose current files as a volume, start container
$ pm2 docker:dev app.js
### Switch Dockerfile VOLUME to COPY and start container
$ pm2 docker:dist app.js repo/image"
2016-10-18 20:57:39;Node v6.9.0 (LTS);
2016-10-18 20:06:03;Node.js downloads per day by versions;What made 0.10 get popular again recently?
2016-10-18 19:20:47;The Node Foundations guide to learn Node.js;
2016-10-25 22:09:21;Should I avoid circular dependencies?;"When I have to do that I create services.js.  A and B both require('services') and set services.A and services.B to what they export.  Then B can access A.foo with services.A.foo, etc.

Edit: PitaJ's reply says the rest of this message is wrong.
Circular require() doesn't work and you can usually solve it a better way.   But sometimes this is a quick way to get on to more important architecture/design/programming issues in your app.

This is discussed in the main Node.js documentation in detail here: https://nodejs.org/api/modules.html#modules_cycles"
2016-10-25 19:07:11;Electron chat application - Socket.io vs PubNub vs Pusher;"What about SocketCluster?

I work on a large xmpp chat application using socket.io and we don't have many problems with it.You're correct for first iteration SaaS like Pusher and PubNub will be good and you'll receive all out of the box. 

But if you're planning to have more than couple of users, you should think about writing your own server. You can choose not only from socket.io, there's also [primus](https://github.com/primus/primus), an abstraction layer over different websocket libraries, or you can use just simple [ws](https://www.npmjs.com/package/ws), [uws](https://www.npmjs.com/package/uws) library or even raw [tcp](https://nodejs.org/dist/latest-v6.x/docs/api/net.html#net_net) to reduce traffic and make your app faster. Basically it will be much cheaper to deal your own infrastructure than to pay for SaaS when you'll have a lot of users."
2016-10-25 17:49:09;Getting Started With Test Driven Development in Nodejs;
2016-10-25 16:42:46;Yarn makes you significantly faster and more reliable, but does it make you significantly more secure?;"Yeah, I'm really not a big fan of articles with the conclusion: ""It's not as secure as it might sound. Luckily we have the solution to your problems!""

I don't know snyk, maybe they're awesome, maybe they suck, but this practice of writing biased or seemingly biased articles makes them look shady and make me trust what they wrote a lot less. Disclosing their position right away would've been the right way to go.
"
2016-10-25 16:20:37;Node.js V7 released;"yay, no silent errors in promises
> V8 has been updated to 5.4.500.36 #8317, #8852, #9253.

It's around 5.5 that has async/await right? :( 

Edit: Someone posted this [link](https://github.com/nodejs/promises/issues/4#issuecomment-254159118) in the hackerrank comments which sheds some more light on where async/await is at. Looks like there is a --harmony-async-await flag that is buggy so we may as well wait for V8 5.5 to be used. New V8 starts faster and may use much less memory: http://v8project.blogspot.com/2016/09/v8-release-54.htmlI wonder if there is a list of new ES6 feature available comparing to Node v6?http://v8project.blogspot.com/2016/10/v8-release-55.html v8 55 has its own branchI'm getting this error when trying to run ""npm run"" or ""npm install""

    Cannot find module 'internal/fs'"
2016-11-01 20:31:58;Tutorial: Running Node.JS app on AWS/Docker using coldbrew-cli;What's the upside to using this as opposed to creating a stack on aws and using ecs?
2016-11-01 16:36:18;Best way (in 2016) to make GET REST calls for JSON data?;"Not sure what you mean by request being deprecated? This isn't mentioned in either NodeJS nor Express docs that I've seen. And I'm not aware of any Fetch API in NodeJS?

I just use http/https as rakusan2 mentioned.I use https://github.com/request/request-promise in production code: easy to use, solid and uses bluebird underneath for great utility functions on returned promises.Hey,
  This is my best answer to your question.  

* Request is popular, but uses callbacks.  So some people would recommend a promise based alternative or wrapper. (async/await)

* Fetch looks fine, just a different API (maybe with more syntactical sugar)

* Welcome to Node/NPM!  You get to pick between old favorites and new hotness (Http vs. Request vs. Fetch)

* Express is completely decoupled from what you use as an http client.

*   Things don't fall out of favor as much as they stop being supported.  If a module has had no development for over a year and 30+ issues...then that is a warning sign.
fwiw `fetch` is only notable since it's implemented on the client side, so in some cases you could use the same fetch code on server and client. for that, check out the `isomorphic-fetch` module.

beyond that, like 100% server-side code, it doesn't matter. in fact, fetch is pretty weak by itself and doesn't give you streams. for example, the `node-fetch` module (only works server-side` adds `response.buffer()` and some other conveniences.

the only thing fetch replaces is other client-side libraries like jquery's `.ajax` call. but it's not really that big of a deal. i think you still have to polyfill it in production, so who really cares.I personally use the get method in the https or http modulerequest works. fetch or fetch-promise (promise-fetch) might be simpler for GET.  You should also search on npms.io or npmjs.com.  Number of stars shows popularity if that is your main criteria.  

I use async/await with babel so would use a promised api for get requests or make one with pify."
2016-11-01 15:52:48;Host parse server or use provider?;"Hey there,
It is definitely a good idea to use a provider: saves you the time and effort of keeping things up to date in the server. Maybe you will need a team to monitor and patch problems that might happen if you host your own parse server. Just in case, check out how big the app might get and take in account how many people you will need to PAY to monitor your instances."
2016-11-01 14:54:38;Node.js and mysql question.;"I'm assuming you're not pooling your connection(s) and mysql times out an inactive connection while you're trying to keep it open.You could also consider using Knex since it will handle connection pooling and transactions for you, even if you just write raw queries. I have had the best luck with it because it doesn't try to be an ORM and it includes a truly wonderful migration toolset. http://knexjs.org/Which module are you using to connect to the database?You should leave the connection open until you are done with your application.

If you timing out because you are running express (something persistent or a daemon) then you should open the database connection on the URI call.Maybe your problem is the internal standard time-out.
Your connection gets closed automatically because of this.
If you are using express than you can do the following on receiving the request: 
    if (response.shouldKeepAlive) response.setTimeout(0);
This would wait forever. 
Thus giving another appropiate value would be best.
"
2016-11-01 11:06:30;Understanding the Node.js Event Loop;Here's a good talk on it too! https://www.youtube.com/watch?v=8aGhZQkoFbQ
2016-11-08 22:06:40;How do you debug your node apps?;"'--inspect' and chrome. Easy and fast.[deleted]VS Code has a built in debugger with breakpoints and everything.  Just released dual browser/server debugging too so you can do both at the same time.  

Have never gone back to using node-debug, which I used to use.

But I don't use babel much, so...VS code with node debugger through nodemon. I have it setup to use source maps and can breakpoint in my typescript code without any issues. There's an option you need to change to enable source maps in the launch.json. I've also got it setup to automatically reattach if the process stops (nodemon restarting app, another launch.json change). Visual Stufio Code. Doesn't get much easier. warning: selfpromotion

https://github.com/jaridmargolin/inspect-process is a nice wrapper around the native --inspect implementation.Use a bunch of console.log messages :)

I use sailsjs framework and it has an auto-reload plugin 
https://github.com/sgress454/sails-hook-autoreload

This automatically reloads the changes without restarting the node application.devtool for debugging in chrome
https://github.com/Jam3/devtool"
2016-11-08 20:09:42;Node + Typescript. Like it?;"I'm 100% sold on the combo and have been using it for over a  year.

Atom + typescript tools + gulp.

I can't imagine *ever* doing a major project without TypeScript again -- and this is from a diehard who used to think that TS was for people who couldn't organize code.

Having an accurate code compete and the ability to refactor by changing a changing a function's signature and then just fixing everything that errors -- has changed my life and my coding forever.

I am using Typescript 2.0 with node on a project. I must say it's is pretty awesome, and using all the helpers like tslint and ts-node make it even more enjoyable. Combine that with full ide support for type hinting and linting, and I am very satisfied.

The only downsides I have noticed are:

- ""build"" times to transpile the Typescript to javascript
- having to write a type definition when typings does not have one
- (and one non-issue) all the linter errors when I write a wall of code and ""forget"" to put all the types into it as I am writing.

Overall, I am a big fan.I'm using Flow, which is pretty much the same thing, but made by Facebook instead of Microsoft.

Static type checking has huge benefits. Turns out in practice, most mistakes we make are type-related, having such a tool makes those go away : no more ""undefined is not a function"" or ""could not read property of undefined"" errors at runtime.

I'm introducing Flow to an existing code base, and as I annotate files, Flow finds mistakes I completely overlooked here and there.

Personally, I'm not going back to plain JS as I see no reason not to use tools that will help you write safe code. I can't talk much about TS, but you should definitely use one of those tools.

its awesome and very enjoyable. Im actively using TypeScript on node.js for years and during this time actively developed tools for community to support TypeScript on node.js. [Check them out, you'll like them](https://github.com/pleerock)A bit much mucking around and straying from es6. Looked nice in practice but couldn't be bothered after a while.

babel-preset-latest


eslint-config-airbnb

eslint-plugin-flowtype

atom editor with linter-eslint package

There's your IDE with type linting while using ES2017. Comes with a bonus of not investing yourself into a potentially pointless fork (see what happened to coffeescript, for a loose comparison). Typescript is a serious contender compared to coffeescript, but ES is already solving these problems and standard is standard."
2016-11-08 19:56:45;"Best ""starter"" project";"IMO it depends what sort of node stuff you wanna do. You could do a command line app, a microservice, website or react apphttps://github.com/facebookincubator/create-react-appI like https://github.com/kriasoft/react-starter-kit but it doesn't have TypeScript. Shouldn't be too much work to modify it for that. 

The benefit of this setup is that it has cross platform build scripts without using a task runner like Gulp."
2016-11-08 19:43:38;A twitter account with a feed of Node best practices;"Also has a Facebook twin here:
https://www.facebook.com/nodepractices/Yes, but who is maintaining this? > 1. Use promises for async error handling.

Stopped looking at the slides after that.

How about some actual solid advice like the link here: https://www.joyent.com/node-js/production/design/errors

Or how promises make postmortem debugging harder, as this article shows: https://www.joyent.com/blog/post-mortem-debugging-and-promises"
2016-11-08 18:05:55;Do you use ES6 with ExpressJS?;"Yes, and none of the above. Node 6 supports enough ES6 features that I don't believe adding a transpiler is worth it. [deleted]Transpilers is still required for client side codeYes, and we use babel to transpile.yes, makes things simple :PYes, with a Makefile using babel's cli to transpile. For backend applications (thus ExpressJS related), we do not use any of the build tools you listed. For client side, however, we do use webpack, kicked off via Makefile.Yes. Webpack client side and babel server side with gulp driving the whole shebang. Works well though webpack is a bit slowin your package.json use this as one of your scripts: 

    ""start"": ""NODE_ENV=production node_modules/.bin/babel-node --presets 'react,es2015' ./src/server.js"",

install the babel packages with npm and your ready to use ES6 with Express and Node. I only use webpack on react apps and use gulp for CSS and other tasksNo. It took me several years to understand JS/node and when I start to get it, they changed all the things again.
"
2016-11-15 22:50:11;Running NodeJS on Linux on Windows (with no VM);"Thanks. I was also really excited when I found out about this,  but after a few hours I started to wonder,  ""why?"".  The only thing that I find really convenient is ssh. Powershell can be twisted to my needs for everything else that I do. 

Aside from the wow factor,  have you come up with a reason for doing this? Been developing on this since they pushed the file watching enhancement. The only time I've spun up my VM was to push up the dotfiles I hadn't updated yet. That plus Conemu have made it super pleasurable to develop on. Saves a lot of space and battery life.

Git, fish, vim, tmux, npm, yarn, eslint, webpack, tap, mongodb, and node have all been running swimmingly. The only real thing I've noticed is that sometimes tab completing things like file and repo names is a half second slow.

If anyone's interested, here's my setup for my subsytem: https://github.com/suitupalex/dotfiles/blob/master/apt-init-wls.sh"
2016-11-15 18:58:35;Creating Node.js Microservices Using stdlib;"Is it possible to self-host stdlib?umm. fresh install of this and can't get beyond lib init.. 

'> lib init
/usr/local/lib/node_modules/lib/cli/error_log.js:8
    let details = err.details[k];
    ^^^

SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode
    at exports.runInThisContext (vm.js:53:16)
    at Module._compile (module.js:414:25)
    at Object.Module._extensions..js (module.js:442:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at Object.<anonymous> (/usr/local/lib/node_modules/lib/cli/commands/login.js:6:18)
    at Module._compile (module.js:435:26)
    at Object.Module._extensions..js (module.js:442:10)'

:("
2016-11-15 16:25:48;Pino - The Fastest Node.js Logger for production;"Lacking comparison with something simple like:
    console.log(JSON.stringify(<log_data>))

From my experience the fastest method is to write logs into stdout and than process it with 3rd party log collectors. In such case it doesn't affect nodejs performance too much because there is minimum of js code.What's wrong with bunyan/winston?Last time i checked it had issues with json formatting. They doing jsonification by hands and simple quote in message breaked it."
2016-11-15 16:03:42;Identify Tor connections in Node.js with Tor-test;
2016-11-15 15:43:17;Detect TOR connections in Node.js apps;
2016-11-22 22:34:00;Powered by Node.js: Control our Selfmade Raspberry PI RC Car via Twitch Chat to Find Free Keys of our Games - Stream Starts Wed 12 pm CET;Should also post to r/Twitch and see if it gets traction there, best of luck!
2016-11-22 22:00:08;For some reason running Lab tests from package.json with --inspect fails if you run it *without* ./node_modules/.bin/ -- anyone know why?;No answer. but I have the same issue debugging Mocha.  have to specify node_modules/.bin/_mocha
2016-11-22 19:50:25;Node.js Tutorial: Playing Sounds to Provide Notifications;
2016-11-22 18:00:30;Sails & Trails, and other opinionated frameworks.;"If you are looking for a Sails-like framework based on Koa with an admin UI, go check out [Strapi](http://strapi.io). The next version looks promising, as well...Here you go http://adonisjs.comEven if Sails drama causes it to stall where it currently is. It is pretty stable and powerful. I have several projects running on the last few versions of sails (0.11.x 0.12.x) And I couldn't be any happier with the results.

I guess if you wan't something without that drama there's other options but it doesn't necessarily mean Sails is dead.

The latest Sails release was 4 days ago.are you looking for an admin UI? If not then I'd say just learn some solid controller > service > data access architecture and go your own. If you're looking for an admin interface I'd recommend Keystone. I'd probably stay away from Sails, since there are a lot of magical things going on there, and it's really tied in with it's own ORM, which is quite underpowered as far as such things go.Why do you need a framework? Why not just use express and other libraries that fit your need. I'm not a huge Javascript dev, but I have experience with Sails and it is god awful. It's will be better for you to pick libraries you like and combine them together to make your own framework.You've got [Koa](http://koajs.com/). It's downline of express, basically using lessons learned.

[Hapi](http://hapijs.com/), built and maintained by Walmart, of all things. Good docs, consistent.

[Meteor](https://www.meteor.com/) is a giant... it's a framework and it's opinionated, but it's quite all-inclusive. And huge.

The real answer tho isn't about ""the best one"". The incessant search for ""the best solution"" is what leads to ""JS Fatigue"" and ultimately feature creep.

The bottom line is to just pick one, and stop shopping. So long as your choice is reasonably current and the documentation is solid, you're not going to make a wrong choice.

~~I think Sails hasn't seen an update in like >2 years?~~ And Trails was a fork that died on the vine.

But between Hapi, Koa, and Express (and Meteor to a lesser extent due to it's high-end use cases), you're not going to choose wrong."
2016-11-22 13:18:58;Custom build logic post git push with Azure App Service and Kudu for a Node.js web app;Why do you put generated distribution files in a source repo in the first place?
2016-11-29 21:33:52;Parsing/Converting big XLSX (over 600MB) to CSV;"Whenever you have a file which is too big to process all at once, look for ""streaming"" parsers. 

A streaming parser will only read a little bit of the file at a time, so it doesn't run out of memory. Usually, a streaming parser emits ""events"" when it understands some new part of the data. 

In your case, you probably want to write something that triggers on the ""row"" event and writes a line of CSV to another file.

I searched on npm and here's a reader for node which might do what you want. Or it might be horribly buggy. I don't know.

https://www.npmjs.com/package/xlsx-stream-reader

(By the way: it is tempting to just write the CSV line yourself, by joining values together with commas. But you should avoid that; there's all kinds of tricky things that can happen in CSV. Find some node module that can output a properly quoted CSV file line by line and use that).

If it turns out that you can't find a good streaming XLSX parser for node I'd look at Python or even Perl, there's usually a lot of good stuff in those communities for bulk data processing. That's not really node's specialty.I use node everyday when I'm at work, but when it comes to working with ""large"" 1-10gb data sources I use python, it's simpler and you only need to learn it once If you just need to convert it (rather than access it within nodejs), I've been using the command line tool `xlsx2csv` which is available in `apt`.http://answers.microsoft.com/en-us/msoffice/forum/msoffice_excel-mso_winother/how-to-convert-xls-to-csv-from-with-the-command/7889b91d-84ca-42d3-8a77-cfe7e3cf9ce5

This may help"
2016-11-29 19:19:14;Getting started with npm or Node.js package manager Techiediaries;
2016-11-29 18:58:18;NIM - A Chrome plugin to automatically launch the debugger when using --inspect with Node 6+;"Nim is the name of a really amazing programming language that has syntax as clean or cleaner than Python and C language performance.  It can be compiled to C, web assembly, or JavaScript.

Also are you sure you even need a plugin to do that with the new versions of stuff?  Does it not launch it automatically, or at least when you click the link?"
2016-11-29 18:23:05;Node.JS: Is It Possible To Get The GTA V Wanted Level Programatically?;How's your [deep learning](http://cs.stanford.edu/people/karpathy/convnetjs/)?Should be fairly straight forward supposing you understand how to read an image file. Since the stars themselves don't move on the screen and since you know the color of them, it should be easy to check each location of each star to determine whether or not the star is displayed.[deleted]
2016-11-29 17:05:04;IBM, Intel, Microsoft, Mozilla and NodeSource Join Forces on Node.js;"Why would anyone pick anything other than a JS stack front to back these days?   It seems that's where everything is moving. 
  
I was a PHP dev prior.  I just can't justify using PHP anymore on new projects.  Node and Koa have been really easy to work with.So is this like what JXcore set out to do?I want to believe this is not just younger naive devs welcoming good 'ole M$ EEE."
2016-12-06 23:58:44;How can I delay a Request using the Request package?;"Delaying requests will have nothing to do with the Request package, it is your responsibility to solve for this functionality.

That said, you may want to work with some sort of queueing flow. Try [async.queue](http://caolan.github.io/async/docs.html#queue)simple example, https://lodash.com/docs#throttle     
    
    _.throttle(yourRequestFunction, 1000)You can use a node module. There is a rate limiter module called simple-rate-limiter.

https://www.npmjs.com/package/simple-rate-limiterRxjs would also do what you're looking for, among other cool things. As people commented, this has nothing to do with the request itself, our the Request module. You need to manage the logic of firing the requests in your code. It can start with a simple interval (see _setInerval_ function) - although that is NOT recommended for production, while to managing a loop/recursive _setTimeout_ calls, and end with some kind of queue. But it's up to you to manage the calls, space then out, and collect the results in the order sent. 'setInterval' Here's a suggestion from a non-JS coder (so it's probably not the most efficient way) ;p

I have used Promises to do something like this (using Bluebird's delay function):

    'use strict'

    const Promise = require('bluebird');
    const rp = require('request-promise');
    const delayMs = 100;

    Promise.all(rp('http://google.com'), Promise.delay(delayMs))
        .then(r => {
            // Do something with response
        })
        .catch(err => {
            // Handle error
        });

You'll need to add 'request-promise' and 'bluebird' to your package.json.I wrote a node module a while ago for exactly this purpose. It's called [timetrickle](https://www.npmjs.com/package/timetrickle). It's a time-based execution limiter. You can pass functions to a limiter function and it will queue them up and call them as fast as possible but without going over the rate limit.

Using throttling or fixed intervals will not get you the right result."
2016-12-06 21:21:59;Making Post to database with AJAX/XMLHTTPRequest;"You need to include the body-parser middleware for express to actually read the body and make it available to your app.

https://github.com/expressjs/body-parser

use it like this: 

https://github.com/expressjs/body-parser#expressconnect-top-level-generic EDIT: fixed link

> app.use(bodyParser.urlencoded({ extended: false }))
> 
> app.use(bodyParser.json())

This will parse both json data and regular post body."
2016-12-06 17:43:30;H12 timeout on Node running on Heroku;Well, by default Heroku limits the request to 30 seconds unless some sort of data is sent. One idea is to start sending status data in the reply.  Look at using something like this: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events
2016-12-06 17:34:27;React Native and Express: Uploading images with Google Cloud Storage;
2016-12-06 16:17:31;Tutorial: Consuming Node.js Microservices Created with Stdlib;
2016-12-13 21:09:14;Guide to Installing Node.js on a Raspberry Pi;"I turned my pi in a node powered cnc controller with a react front-end once. I could either use it locally with a connected keyboard and mouse or headless over WiFi. I used a pi hat and arduino nano as a g-code sender. It was surprisingly cheap and easy to setup.

But since I never had an actual cnc machine I repurposed it as a adblocking DNS server.[deleted]"
2016-12-13 19:26:38;Can I start learning to code with Node, or should I start with that Dolly Python stuff people are gaga over or the javascript thing?;"I want to downvote because your post is trash...but it did make laugh.

I'm so torn.jsAre you on drugs?How do I bump this?"
2016-12-13 19:07:04;Project setup/best practice for loading constants from files into Express/Node/React webapp;You can use [csvtojson](https://www.npmjs.com/package/csvtojson), a powerful and popular package to convert csv files to json, in this way, you can have your constants in json format and use them easily.
2016-12-13 17:26:20;Encrypt and decrypt Data-at-rest?;"do it before sending to parse-server, or modify parse-server to do it, or use something besides parse-server
"
2016-12-13 14:46:55;Asycn/Await BIBLE: Sequential, Parallel, Nest, Dynamic and Error Handle;
2016-12-20 21:27:40;Yo guys wanna learn how to make Twitter bots with Node.JS?;"So /r/node is now a toilet? Because this is a shitpost.You are my spirit animal.How about ""a simple To Do list"" and throw React in there as well?It is a rite of passage for every web developer. It used to be just pulling data and visualising and stuff but we're doing bots these days, moving up as a community. Tomorrow we'll train our representative AIs from our Twitter feeds.[Ugh, fine.](https://i.imgur.com/vXXTqIv.png)I've made several twitter bots, some using node.js. Why do you think it's a bad topic?

[@everyeventtoday](https://twitter.com/everyeventtoday)
[@unjpeg](https://twitter.com/unjpeg)
[@bathcarparks](https://twitter.com/bathcarparks)HAHA - was just about to come in here and complain - ya got me"
2016-12-20 21:11:34;Bizarre situation with my live server URL - expert advice appreciated!;"I'm no expert but I don't think the hash is sent to the server. By my understanding, the browser deals with the hash and omits it while sending requests to the server.

So, this issue probably has nothing to do with your server.It looks like your URL went through an encodeURIComponent() call somewhere, though if that issue lies in your Angular or Node.js code I don't know."
2016-12-20 19:02:44;Siphon: A Node.js data extraction library built for scale;"We're excited to bring enterprise-level data extraction to the open source community. Our library handles scaling with fault tolerance and built-in parallel processing in addition to handling HTTP request limits using proxies and customized request throttling.

We'd love to see what you can do with Siphon! Feel free to give us feedback on our Github :)"
2016-12-20 15:18:11;The 10 Most Important Node.js Articles of 2016;"> ""This situation made me realize that NPM is someone’s private land where corporate is more powerful than the people, and I do open source because Power To The People."" - Azer Koçulu

NPM scares me for a number of reasons, but this wasn't one I've considered."
2016-12-20 15:12:49;Razorframe: a plug-and-play Node.js module for empowering real-time applications at scale;"Hey /r/node!

We built Razorframe, a Node.js library, to enable the effective backend scaling of your real-time application. Built on top of Socket.io, Razorframe’s server-and client-side API allows you to easily employ the task processing of multiple, parallel Node instances in conjunction with an in-memory queue.

We'd love to get some feedback on Razorframe and ways in which we can make it a better solution for your next Node.js project. Feel free to check us out on GitHub and www.razorfra.me

Thanks a ton!"
2016-12-27 19:00:14;Data fields change to arrays on POST;Can you post the client-side code including the data you are posting and the code used to post it? Then also the server-side code that is receiving the data?
2016-12-27 16:17:18;Enterprise-grade Node.js Promises with Async and Bluebird;"An ""enterprise-grade"" ""software architect"" should be able to take one look at code written with the `async/await` keywords and immediately realize it makes code much more maintainable than code written with promises.

Also, having a 'software architect' is almost always a sign of fundamentally outdated or ill-informed software engineering and business organization, for a few reasons.

Having a 'software architect' over and often separate from the other parts of the development process usually means that a developer who is disconnected from the daily engineering problems is dictating the overall tools and approaches.  This is counter-productive because it generally means the other developers have to work around the mismatch between the dictated approach and the fine-grained problem details.

From an organizational approach, making the 'software architect' above the other team members usually means the business doesn't understand contemporary flat team-based structures or other innovations in collaboration.I'm not totally in love with some of the stuff in here, though it's a great baseline.

My contentions:

1. Binding ""this"" can be astonishing to first-time viewers (at least, I've had developers come to me confused about it).  It should have been better explained, or should be left for later promise discussions.  

2. I don't trust the benchmark here.  A 17% hit seems pretty bad considering Bluebird is the fastest promise library and async is notoriously slow.  The setTimeout wrapping Promise resolution could have unreasonable overhead, but the Promise.all(Promise.map(...)) seems to be even more weird (not sure if it's inefficient or not) when Promise.map().then() will do.

I think you could dedicate an article, however, of Bluebird vs Async..I think apples to apples, Bluebird might be faster."
2016-12-27 13:49:15;Gracefully terminating node processes on SIGTERM/SIGKILL;"Yes, I expect Googling [SIGTERM handler NodeJS] will show you examples.

You can't handle SIGKILL, though. It's an immediate kill. I was just playing around with this the other day.

It's as easy as attaching a listener to `process.on('SIGTERM')`

    process.on('SIGTERM', () => {
      // wait for your workers to complete
      // the exit the process
      worker.on('done', () => process.exit(0));
    });

As /u/cjbprime said, you cannot attach a handler to `process.on('SIGKILL')`.
Like this (using Promise-style workers):

    process.on('SIGTERM', () => {
      console.log('shutting down...');
      worker.close().then(exit);  // stop accepting jobs, exit once job queue is empty
      setTimeout(exit, 5000).unref(); // if cleanup takes > 5s, shut down hard
    });

    function exit() {
      console.log('exiting');
      process.exit();
    }


The `Worker.close` method should make the worker stop accepting new jobs while continuing to process already received jobs, much like node's built-in `Server.close`:

- https://nodejs.org/api/net.html#net_server_close_callback

You need a grace-period timeout there in case anything goes wrong with the worker; your process needs to force a shut down at some point after receiving SIGTERM.I had an issue like this.  I used `signal-exit`. But I was using the `queue` module and it seemed there was no way to finish async stuff because it was going to exit right away.  So I switched from `queue` to putting data in a regular array and emitting an event on process.

    process.on('log_', async () => { await doLogPromise(out.pop()); });

After doing that the `signal-exit` module seemed to be the only other thing I needed.
"
2016-12-27 10:57:49;Do you think I should learn Node over Ruby (and Rails)? (And why) (x-post from /Ruby);"I am a developer on both platforms. Love them both.

But In my opinion, Rails is the best way to make single monolithic applications. I tried using a similar framework for Node (Sails), but it is still too green to be taken seriously. I find that much of the hard work has already been done in many parts of the platform: the asset pipeline is great, the helpers are great, the database and migrations are great. NodeJS alternatives are still lacking. You can have database, SASS, routes and migrations set up in minutes, practically out-of-the-box. I ended up migrating the app I had from SailsJS into Rails and have never looked back.

Things made in Rails: GitHub, RapGenius, SoundCloud, Airbnb Twitter (they latter migrated to other framework). 

I do use NodeJS a lot for AWS Lambda/STDlib, Grunt Scripts and ReactJS Frontend, but for full ground-up app development Rails is still king.

Rails' weakness at this point is that Sprockets is inferior to Webpack for Frontend Javascript. I have still to find a way to get the best of both in a single pipeline. Also they will have trouble supporting HTTP2. Websockets are not ""native"" (ActionCable not enough).

And much of the tech world is moving towards Microservices, like AWS Lambda and STDlib, where NodeJS's minimalism had an advantage and Rails has to much overhead.

But the real deal is that it really doesn't matter. I read somewhere that language choice makes no difference in the success of a start-up. Both choices are perfect to get into the programming world.

**TLDR:** NodeJS is the future, but Rails is the present.

https://www.google.com/trends/explore?q=%2Fm%2F0bbxf89,%2Fm%2F0505cl

I do nodejs and C#. Different tools for different needs, but I find that these two cover most of what I need when doing web development.
I don't really have an opinion on what to use outside web development but I'm starting to look into RUST and so far I like what I see :)The good  thing about rails is that it's complete so you'll learn about everything  that goes into a web app. But, if you're into SPAs it's not a great choice because it has so much that you don't want in an API back-end. 

In terms of performance, Ruby can be incredibly performant because it's easy to write Ruby functions in C and get native compiled performance. I don't think this is possible in Node (but I only use node in dev and test, not production). 

Anyway, Node is a great choice if you're learning Web Dev because you'll be able to learn one language and apply it on the front-end and back-end. I think you'll find that you want to push most of the complexity of your games into the front-end. That get's into a bigger architectural discussion but code that runs in the client's browser is going to skip the network round trip so it has a huge performance advantage.

If I were you, I'd build ToDoMVC in both platforms before making a decision about which to focus on. * Node.js is growing like crazy.
* Javascript is starting to show up everywhere, so if you want one language to use for everithing from the web to robotics and IOT Javascript might be for you.
* I remember having a few problems with Ruby on Windows, not show stoppers but annoying to deal with Node just seems to work everywhere.IMO, most of the jobs in JavaScript are for frontend, not backend. Those are different beasts. 

RoR is very convention heavy, it can take a while to internalize those conventions; and if you don't know them, RoR can seem pretty magical/confusing. 

RoR is older, so there might be more competition from people with a lot of experience. JS became super popular over the last couple of years only. 

In the end, it's up to you and what you prefer. I started with RoR and used it for many years, but I prefer JS because it's a lot less magical; but it's also a lot more hassle to get a project started because no one made all the choices for you already. Try both, and see what works for you. "
2016-12-27 09:43:04;The Complete Node.js Developer Course 2.0;"To save anyone else from following the link, these are pay for coursesThis account always posts spam to blogs and paid courses. 
  
This course has been advertised here repeatedly."
2017-01-03 21:38:56;Natural Language Processing in JavaScript;"The course has just been opened to the public for free! Cute but:
1. All the videos are premium :(
2. As someone who doe a lot of NLP work - I can definitely say that Natural pales in comparison to services like Api.ai or LUIS.
"
2017-01-03 21:05:44;Best service for hosting Node.js apps;"You can use https://www.heroku.com/ it's free :)
Heroku is free but your app will shut down for a few hours everyday based on their pricing. You can pay $7 to go on the Hobby Tier there and have your app up 24/7.

DigitalOcean is another alternative. You can get a box for $5, but you will need to provision, setup, and monitor the box yourself. But the benefit is that you can have multiple Node apps on the same box (if they are small), so your price will be low.

If you want to minimize hassle, go with Heroku. If you want to do more stuff yourself, and save some money, go with DO.

Google both of them online, they have lots of documentation on how to set stuff up.You could try `Now`.  If you are okay with your project being open source, it's free.

From what I read on Twitter, it seems like a great service that's easy to deploy to.

[Zeit - Now](https://zeit.co/now#pricing)If you are a college student check out Github's Student Developer pack (https://education.github.com/pack).

It has $50 Digital Ocean credit that would be perfect for you, as well as lots of other good resources. I am pretty happy with Google Compute.Get a VPS. You can get one for $1 a month.No one's saying openshift? Seriously easy to get your app up, cake deployment.If you go with DigitalOcean, check this out: https://github.com/kbariotis/ansible-nodejs-digitalocean"
2017-01-03 18:19:06;13 Security Best Practices for your Web Application;"Please do not use StartSSL for your certificates, use LetsEncrypt instead. They are involved in some shady stuff and Mozilla (Firefox) is distrusting their certificates.Just want to let you know every time I click through on this site from any of your previous postings and this one, I get

> **Not Acceptable!**

> An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security.

The only way I could get to any of the articles was go to the root of the site and click through that way.This is a nice article.

I have a question regarding #13.  How much protection from DDoS attacks does the rate limiting middleware really give you?  Your server still has to deal with all of the incoming requests.

The module sets the status code to 429, but I would imagine the people writing DDoS tools ignore that.This article is the clone of the RisingStack checklist - even the first sentences are identical. The original is here: https://blog.risingstack.com/node-js-security-checklist/"
2017-01-03 16:55:30;I wrote a microservice to make Twilio message delivery better;
2017-01-03 14:54:46;"""Expired"" Node module to calculate when HTTP cache headers expire";"I recently had to implement a server side HTTP cache layer in Node.js. I was surprised that there weren't any existing modules to parse the HTTP cache headers and return information on the expiry date.

This probably isn't a particularly common requirement but I packaged the code up into a separate reusable module so hopefully I can save someone else the effort.Looks nice and simple. I like it, good job with it!"
2017-01-10 20:27:26;The MongoDB hack and the importance of secure defaults;"Fuck me... I've also been ""hacked"", but because of my own stupidity. I'm lucky I had a backup, and the data wasn't important in any case.

I had net.bindIp configured to only accept local connections, but a couple of months ago I needed to add my home IP to the whitelist because I needed to change some documents using Robomongo. That's when I fucked up. Instead of setting bindIp to `127.0.0.1,88.99.101.102` I set it to `[127.0.0.1,88.99.101.102]` 

Notice the brackets? Those fucking brackets literally made bindIp useless... Sure, I could connect because ALL IPs were being accepted, so I naturally thought that everything was ok...

So yeah, fuck me.Hard to believe anyone worth their salt would make a DB with any relatively important data on it accessible from the open internet.Read documentation, RTFM. It is clearly stated that defaults are insecure and auth is disabled. People too lazy to read a few pages before using something in prod and then start to complain. Strange for me."
2017-01-10 19:21:03;"The wordpress of bots; a modular Node.js framework to build great bots";
2017-01-10 18:15:28;Simple and fast JavaScript threads for Node.js;"See also https://www.npmjs.com/package/webworker-threadsIf you want threads, maybe choose one of the many languages that use them.

A core part of JS's design is its single-threaded event loop. That eliminates whole classes of concurrency issues (mutexes, locks, etc). If you're not going to benefit from this design decision, there are much better languages to use that already have threads baked in. Use them!:-|Jesus.  Javascript is going to re-invent the wheel forever.To me, this is great.  I want the ability to use js outside of its main/normal use cases."
2017-01-10 17:02:45;How does Passport.js actually work ?;"Passport doesn't really check passwords, that's something you have to implement yourself.

It works with ""Strategies"", which are basically classes written by others to make login of a certain kind possible. There's a FacebookStrategy, TwitterStrategy, LocalStrategy, etc. Each of these strategies can be implemented whenever you want, all you have to do is write the code to link the authentication details (if local strategy, username + password, if facebook, the facebook userid) to an user in your database. Passport handles the sessions and allows you to easily check if someone's logged in using req.isAuthenticated() and such.

If you want Passport to confirm a password is valid, you have to write your own callback function in which you check if the password is valid, because every system has other password hashing algorithms and such.Check this out: https://blog.risingstack.com/node-hero-node-js-authentication-passport-js/Not really.  

This system may be used in prod, but has nothing to do with passport. The actual implementation details of passport is handled by other stuff, including `express-session`, the passport strategy in use, and whatever configuration you provide it.  As far as I understand passport is just express middleware that bootstraps a provided strategy.... strategies have a common API thanks to passport, and there are lots of them that implement all sorts of third party auth providers.

The link you've provided is different (and looks really cool) - it encrypts the session data inside a cookie and sends that down.  Whether or not that is a good idea is debatable.  The benefit I see of having session kept in a separate store on the back-end is so that the user can't see it.... I'm sure encrypting it has the same benefit though.  I've never hit a scaling problem with a central session store but, I'm pretty small time.

You've kind of described just how `express-session` works, but a little different.  It creates a cookie (default named `connect.sid`).  When you connect with that cookie it will look up the related record in the session store (memory, or redis or wherever else you've configured it) and you'll be returned whatever you've saved in session for that user in `req.session`.  User only ever sees connect.sid cookie which is a long jumble of characters and it's really just a token to retrieve the information from session store."
2017-01-10 16:02:03;Is there a way to rending 3D images in Node?;"One way I've seen it done is to generate the mesh and compose the scene in node, then pass it to [Blender](https://www.blender.org). Blender is very powerful, and highly scriptable.Since the question is a little vague, I am going to answer it based on how I interpret it.

My guess is that you only want to render an image at a time rather than realtime rendering. To do so, you will likely need to spin up a headless phantom or electron instance. This headless browser can use client side technologies to render the image and output it to canvas. Then canvas can output the image using toDataURL.

It is a similar idea to how this library creates PNGs from SVGs: https://github.com/domenic/svg2pngthis post is a little to vague to answer with much detail but on the client/browser side you can use three.js to render 3d objects with opengl. hard to suggest anymore without known more about the requirements of your idea. If you want to do software rendering, just go ahead. Writing image files is easy.

If you are thinking of realtime rendering, there are some npm packages for that, but they don't seem very widely used or supported, so if you need to ask, you might not be able to make them work.You can use povray , there's a command line executable that you can invoke from your node program. The input would be a pov file with your 3d scene and you can generate an image. It's possible that there are already some npm packages that do that, but if not you can create your own."
2017-01-17 23:29:01;Best way to loop through arrays?;"which db?run this on a chrome browser : https://jsperf.com/fastest-array-loops-in-javascript/32

But if you have to call your database, a Array.filter followed by a single call to the db might be more efficient.Could you provide a basic structure of the data you're trying to save to the database? There may be a more efficient method.     var l = array.length
    var i = 0
    for (; i < l; i++) {
        //do something with array[i]
    }

There is no better way, and please don't use `for (var i in obj)`.

Oh and if it's asynchronous looping, you can use libraries like https://github.com/feross/run-series. You might also want to read this guide https://github.com/yoshuawuyts/tiny-guide-to-non-fancy-node.I think you should go with Promise.all.

    const arr = [{someObject}, {someOtherObject},...];
    Promise.all(arr.map(elem => elem.save()))
      .then(res => {
        console.log('success');
        // You'll end up here when all elements are saved
        // res is an array of x elements
        // index n being the result of arr[n].save()
      })
      .catch(err => {
         console.log('an error occured: ', err);
         // catch is triggered whenever one promise rejects
         // other promises are then stopped
      });
I think `map()` is fastest... get query, map fn, set diff."
2017-01-17 23:25:52;Structure now supports validation of raw data;
2017-01-17 21:49:07;Just a simple package that check whether a value is an class;The way you're using the exception as a part of the fundamental logic would be making this more CPU intensive than it needs to be in some other languages (C# for example). Is this not a concern in node? 
2017-01-17 19:27:26;Multiple event listeners?;
2017-01-17 18:19:21;How easy is it for a self-taught dev to get a node job?;"make a server with a DB that serves things and:

1. explain what it does and why

2. write tests for it

3. have it in a github repo a few branches deep

4. make it nice and clean

CONGRATS!  You're entry level.
Put a project up on GitHub.  Bonus points if the UI is responsive and there are unit tests.

Going into an interview with open source code to show off puts you way ahead of the competition.  I can't count how many interviews I've given where the candidate had no code to show.
I work almost exclusively in a Node stack and I'm completely self taught. Just learn JavaScript like you're doing, and jump into Node when you're ready. Node made it easy for me to learn some important fundamentals of full stack engineering without learning another language at the same time. 

Personally, I'd recommend checking out Nodeschool and FreeCodeCamp for some Node stuff, maybe follow a tutorial for a full stack toy app and then make a simple project. You can host it in Heroku for free up to a certain size/number of users, which should be plenty for a portfolio app. Build lots of things and make sure you know how JavaScript works... well.   I'm a self taught software engineer and I got my foot in the door by learning a ton about front and back end on my own and building side projects.  I also read a lot of books on JS and learned a lot of the quirks which helped me in interviews a ton.  Been doing it a few years now, NodeJS is a nice backend language, I like it a lot.

Lots of good resources out there.Getting really good with react will naturally push you into node. All React tooling is done in node and you're likely to have to debug alot of tools. 

Additionally, a lot of libraries can be used on both client and server, EG Lodash, RXJS.

Building electron apps is another good middle road. 

IF you are effective in the above I would at least consider you a novice at node in general.

Intermediate would probably be learning frameworks and ORMs.

Expert would get into scaling using things like clusters and message queuing. Bonus points for docker orchestration."
2017-01-24 22:06:36;How to handle simple post request ?;"you should find an example for that in whatever http library/framework you're working with...You provide a normal route in your node server. If you call it from the browser or ajax does not matter. Please note that the default method for jQuery $.ajax is GET, so make sure to implement that in your route.

A quick Google gives some examples:
http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.WIhq__nhCUk

https://teamtreehouse.com/community/using-ajax-post-to-send-data-to-nodejs-server

Good luck!I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/rcbredditbot] [How to handle simple post request ? (X-post from \/r\/node)](https://np.reddit.com/r/RCBRedditBot/comments/5pzdtw/how_to_handle_simple_post_request_xpost_from_rnode/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)https://www.npmjs.com/package/body"
2017-01-24 21:21:53;In Browser Testing in a Node.js World;
2017-01-24 20:36:17;Promises are so Passé;"Really enjoyed this video, thanksInteresting however there is one enormous flaw in his argument which is that when you have code an important part of the functionality of the code is whether it is asynchronous or synchronous, by forcing your Async code to conform too closely to how synchronous code runs you're actually making it more difficult for people to understand at a glance.

Just for the record I'm very excited about async/wait and I can't wait to use it, I just gotta add this because it's an important idea that isn't acknowledged in this video."
2017-01-24 16:34:28;What’s It Like Being on the Node.js Foundation Board of Directors?;
2017-01-24 14:40:59;I started a real-time framework based on Socket.io and Express to keep a tidy logic;
2017-01-31 20:54:08;Request body weird characters;"body.toString('utf-8') ?

It's probably some encoding related issue.request({
  url: url,
  encoding: null // return a buffer
}, function(error, response, body) {
    console.log(body);
});

Compare the buffers to check if it's a default encoding issue, if they match just .toString the buffer OR pass the encoding type directly to request.You should check out entire response (response codes, for example) but not only body. Probably your IP got banned or smth like this."
2017-01-31 20:46:52;Authorized Resources and Database Migrations with Strongloop's Loopback (also some docker);
2017-01-31 15:56:57;Node.js security: my articles on Sqreen’s blog (and others);
2017-01-31 14:45:47;Node by Numbers 2016 — NodeSource;
2017-01-31 11:47:49;Would Node.js be the IE6 of server-side JavaScript?;This is terribly outdatedJan 15, 2015 ???
2017-02-07 22:39:10;Is it possible to have a MongoDB and Node.js app on the same VPS in Digitalocean?;"Most definitely yes, just please make sure you set up mongo with credentials and firewall it off. Otherwise it'll be auto-hacked in minutes. There's nothing technically limiting you from co-mingling your DB and App, but it's generally frowned upon for anything more than a pet project.I wouldn't worry about it until your app grows in size and needs more resources, then just separate the 2 XDI'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/rcbredditbot] [Is it possible to have a MongoDB and Node.js app on the same VPS in Digitalocean? (from \/r\/node)](https://np.reddit.com/r/RCBRedditBot/comments/5souuy/is_it_possible_to_have_a_mongodb_and_nodejs_app/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)"
2017-02-07 21:36:20;This has been driving me crazy: Express Session does not save with custom DNS address. Does anyone have any insight?;
2017-02-07 18:37:53;canister.js - another take on DI in node.js;"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/rcbredditbot] [canister.js - another take on DI in node.js (from \/r\/node)](https://np.reddit.com/r/RCBRedditBot/comments/5snciv/canisterjs_another_take_on_di_in_nodejs_from_rnode/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)"
2017-02-07 18:19:29;Why 2016 Was the Best Year Ever for Node.js;
2017-02-07 18:07:04;Dark themed chat app with Node.js, Socket.io & Angular2;This is really cool! Keep making neat things!Thanks
2017-02-14 23:57:23;Silly question, but how do I go about creating the template engine/front end for big projects ?;"Totally depends on your ""big project"". I like React as kind of a ""one size fits all"" thing but I've never worked on a truly big project. I'm a huge fan of riotjs -- much more similar to ""normal"" html and javascript. http://riotjs.com/play/"
2017-02-14 22:28:24;Six best practices when building REST APIs;"I vehemently disagree with the meta part. The response should use status codes and headers appropriately. The responses should ideally be an array for a list of objects, such as customers, and a single object representing a customer for a /api/customers/25 example. 

All IDs should ideally be called ""id"", not something like ""customer_id"" because the object already represents a customer.

If you have an exception that you need more information for the UI then you should create a standard exception object with detailed codes and description for the developers. The devs will use the code in the UI to create their own message.Some good points, but :

1. Why not simply use response headers for meta data ?
2. I prefer never using plural. What if the singular and the plural form are the same ?
4. PUT is a more standard way to update a resource (http://restful-api-design.readthedocs.io/en/latest/methods.html#patch-vs-put)
[deleted]Meanwhile, some of the biggest and most reliable REST API's always send 200 (500 would only be a fatal server error).I strongly disagree with 2 and 4. You are making, first of all, an API. It's like calling a function in your program. Today it's HTTP and JSON. Tomorrow it might be something else. If you tie the API strongly to the HTTP paradigm you'll end up with a mess if you try to change the technology one day. The HTTP verbs are nice, but they make it hard to migrate out of pure HTTP. What if you need to serve that endpoint over websocket tomorrow? What if you need to do TCP or even UDP because your app grew? What if your clients are connecting through a proxy blocking some HTTP verb or cleaning up your headers?

What I'm proposing: use versioned endpoints, eg. `/v1/getCustomers`, send parameters and receive metadata and data."
2017-02-14 20:57:54;mongodb returns Cursor, I loop through and add objects into an array, how do I send the array client side without third party libraries?;"node has promises built inYou don't seem to be using cursors.
Assuming you are using mongoose, use `.cursor` after the find.

Anyway, the code looks like it should work.
I'm not sure about `res.render('index', {data:item});` though - I usually never make an API but it doesn't look quite right.

What are you trying to do anyway? Is this supposed to be an API or a direct webpage?

Also: It doesn't make sense to throw your error in the `find` since it will never be catched - rather log the issue.
Additionally: Iterating over the found documents and putting them in an own array is wasteful and doesn't help you in any way. You merely store the document references in your new array - you might as well use the `data` array."
2017-02-14 17:12:49;Getting Node.js Testing and TDD Right;
2017-02-14 15:46:53;[Beginner] Generate a pdf with node;"What you need to do is to turn your node js app into a web application. You can use [Express.JS](http://expressjs.com/en/starter/hello-world.html) and write a very simple web app.

You will need to write couple of 'handlers' this way:

    app.post('/getpdf', function (req, res) {
     var html = req.body.payload;
     var filename = ""dynamically_generate_this_file_name.pdf"";
     Prince()
     .inputs(html) //Warning: direct string input. You may need to convert to buffer  
                    before using the html. consult Prince's documentation. I am sure theres a way.
     .output(filename)
     .execute()
     .then(function () {
        res.send({ url: ""/""+filename });
     }, function (error) {
        console.log(""ERROR: "", util.inspect(error));
        res.status(500).send(""Something horrible happened. Kittens probably died"");
     });
    });
    
// another handler

    app.get('/:filename',function(req, res){
     //You need to pipe the file contents from local disk to 'res'. There are plenty of 
     //examples for this in Express.JS on      
     //how to do this. But if i remember, this is a simple way to do it.

       res.download('/'+req.params.filename);
    });
In your javascript in the client side do this:
    
    <script>
        $('#generate').click(function(){
     $.post('/getpdf',{ payload: $(""body"").html() } ).done(function(result){
        if(!!result && !!result.url){
          var link = ""<a href='""+result.url+""'"" target='_blank'>Download pdf here ! </a>"";
          $(""body"").append(link); // obviously append this somewhere appropriate.
        }
      }).error(function(){
        // warn the user that earth is on an imminent collision course with sun
      })
        });
    </script>

I wrote all this without checking any of it. You may need to correct references here and there, install express.js (Its stupidly simple). But you get the jist of it."
2017-02-21 22:39:58;Debug V8 in Node.js core with GDB;
2017-02-21 16:26:00;"New Pluralsight course: ""Advanced Node.js"" -- Focusing on the Node.js runtime itself (not its packages)";"I find it hilarious that an ""advanced node"" course teaches you the fundamentals of the runtime.the course basically speaks about the runtime itself, and to understand the runtime you need some few . practices "
2017-02-21 13:48:52;Why is socket.io down?;Better like that. Do not use socket.io, full of bad practices and unmaintained. Checkout UWS / Primus insteadThe website? You could try accessing it from your mobile network as opposed to wifi, or maybe through a proxy. It could be a problem with the local node for the site in your area. https://github.com/socketio/socket.io/issues/2870I guess that explains the spike in traffic to http://socketcluster.io/
2017-02-21 13:12:45;10 Best Practices for Writing Node.js REST APIs;"Please, do not `PUT` to a collection (i.e. `/users`) to create a member, that is the job of `POST`. You should only use `PUT` to create when the identifier will be supplied by the client.

A `PUT` to `/users/123` should create a user with the supplied identifier or overwrite an existing one."
2017-02-21 12:33:02;Reshape Water - Home;
2017-02-28 23:13:36;Simple Production Error Handling For Express Servers;
2017-02-28 21:22:22;Programmers are confessing their coding sins to protest a broken job interview process;"It's funny, my boss and I were just talking about this today. We were both saying how neither of us had ever used an interview algorithm in any of our code.

I feel like the best way to interview a junior developer (or most developers, really) is to have them talk about some project they did, why it excited them, what challenges they faced, what technology they used and why they liked it/didn't like it.

You learn way more about what a developer knows by just talking about something that interests them, than seeing if they remember some bullshit algorithm from a textbook. I mean in the real world I'm just gunna google whatever method does it for me.Most of my team is distributed remotely, so we interview over google hangouts. For us, pairing culture is pretty important. So I invite someone else from the existing engineering team, spin up coderpad.io, and give the interviewee and the employee a tough problem to work on together. I offer coaching to keep it on track. It has absolutely nothing to do with how well the problem gets solved on the spot, but how they're able to communicate about it, how coachable they are, how they adapt to the engineer's style, etc. I've been silly enough to do more whiteboard-style testing in the past, but this is far, far better.This is actually one way to weed out potential employers. I end interviews if they get into that garbage. You don't want to work for people who have their fingers that far from the pulse of what's important.Ive single handedly run a social network with 500k users, for ~10 years, but if you put a gun to my head and asked me to run a rsync or tar without the use of Google...Well goodbye cruel worldIf an interviewer is asking you to code quick sort, how to rake/migrate, or how to get the length of a string then the interviewer should be fired. The problem here isn't white-boarding interviews, its programmers that don't understand how to do them properly.


I worked at Amazon for 5 years and was involved in performing interviews. You have to understand that the system is designed to prevent bad hires at the expense of possibly rejecting good hires. The reason for this is that a bad hire is insanely expensive for the team and the company. It takes 1-3 months to fully train someone on all the internal systems and frameworks, and then another 3-6 months to find out that if someone is productive or hindering your team. You then have a period of time where you tell them they need to improve or they will be put on probation, and after 3 months of probation they will be let go. The team then has to spend another 3-6 months trying to fill that position, and they just lost out on 1-2 years of time, not to mention the monetary cost to the company.

 The white-boarding interviews should not care about syntax and they should in pesudo-code. It shouldn't matter what languages the candidate knows because you can expect that they will pick up whatever they need to do the job easily. They should not ask you to implement any sorting algorithms or remember which Java classes use .size and which use .length.

I would ask questions about algorithms and see how the candidate thought about solving the problem. Did you take the time to understand the requirements or did you try jump in and write code that solved something different than what I asked? Do you have a super basic understanding of run-time complexity? Do you understand data structures and can you tell me why you would prefer one over another for this solution? Can you explain how you would design classes for a simple system after getting some basic requirements? Do you understand what issues come up when scaling services to millions of users?

I don't think any of those questions are unfair, and are all things that you need to know if you want to work at Amazon. Not all of them have easy answers that you can just Google. I need you to be able to go into a meeting with the rest of the dev team and be able to keep up when everyone else is talking about these concepts.I am really really glad that this is finally getting out in a larger scale because I am not a CS student but I got into coding because I love it. If loving what I do and getting work done is not enough but knowing how to write bubble sort is then the system is truly broken. ""This means companies tend to favor recent computer science grads from top-tier schools who have had time to cram; in other words, it doesn’t help diversify the field with women, older people, and people of color.""

What does this have to do with the article? Why the fuck does everything turn into a gender/race thing these days? I do not see how a whiteboarding interview would affect a black guy anymore than a white guy or asian girl or whatever.
>Those speaking up on Twitter now appear to be predominantly white and male. However, this style of interview has been repeatedly criticized for contributing to the industry’s diversity problem.

Go fuck yourselfI did a whiteboard interview last week where they they started with really easy questions and asked progressively harder ones to see how much I knew. Seems much more fair than a standard coding interview.I've found the worst of these are the online versions of this. They're completely automated, and only interested in a 100% working solution. The worst one I had was where everything did work 100%, and then it did surprise performance benchmarking on something stupid like the longest word in a string.Someone should start a boot camp that teaches Cracking The Coding Interview. Get people who have no experience or knowledge outside of algorithms into jobs in a few months. Teach to what companies value during interviews rather than what they value during work, and skip all that useless stuff from colleges.

But if your focus in interviews is algorithms, your focus in code reviews and employee evaluations should be algorithms as well.  Did the employee meet their quota for algorithm use? Did they use the correct algorithm? Did they implement it correctly? Did they create it from scratch or from memory or did they have to refer to outside resources?I just went through a decent interview (didn't get it) and one of the things they asked me to do was flatten an array of arrays. I said, ""Well, I'd use concat and reduce but I'd have to check MDN or something to make sure I'm using it correctly."" They said I could check MDN. Of course the answer was in the example. I asked if they still wanted me to flatten the array. They answered asking if I could do it without concat or reduce. I said sure, but I'd need to look it up and learn it that way. 

Granted, I think it was more of a way to garner an understanding of my thinking. I think my point is that I could do what they asked, but I confessed I don't know the ins and outs of every method off the top of my head. Ok, but why would you want to invert a binary tree?I sat through a three hour interview crushing it. And completely froze on simple whiteboard question. I then proceeded to answer a question that I had been asked in a different interview. Lol they looked at me like wtf.

Whiteboard suxIn the third world interviews are pretty mandatory in my experience.  Have interviewed at least 2 guys with over a year's worth of experience who couldn't write fizzbuzz, even with the ability to google. Apparently all they did at their last job was ride the coattails of one employee. When it comes to calculating time complexity best I can do is ""good"", ""bad"", and ""don't to that""People conducting whiteboard interviews don't really care about remembering exact function prototypes or having perfect syntax, but how you approach solving a computing problem, so I don't see how most of these confessions are super relevant. I mostly google for ideas, or inspiration on stackoverflow. If i forgot a function i'd probably use the documentation first instead of stackoverflow..Whiteboard interviews are useless on their own. They don't reflect the day to day work.   
That's why at 10Pines, we went with something different (https://blog.10pines.com/2017/02/20/our-recruiting-process/)Huh, a lot of hate for the article's comments about race and gender. I could understand disagreeing with the article by backing up your argument with some facts, but the comments on here are tangibly aggressive.[deleted]"
2017-02-28 21:03:21;Node and Express querystring woes.;Have you tried inspecting the network call from the client to make sure it is definitely sending the expected query strings?
2017-02-28 15:25:10;constraints when building a service on top of twitter;
2017-02-28 13:48:26;What's up with PM2.X?;I love this tool.
2017-03-07 20:25:52;is there a public tarball or zip of all the dist/ folder for nodejs.org?;meh ill upload one to dropbox or gdrive if not, its syncing now :\ 20GB in...
2017-03-07 19:31:05;Danger of using async/await in ES7;"I don't understand the issue.

    const setupDatabase = async function() {

Since it's an `async` function, then any failed `await` inside the body will short-circuit with a rejected promise.

You can't tell if there's unhandled failure without seeing `setupDatabase`'s callsite.

Am I missing something beyond typical promise fare?"
2017-03-07 18:51:41;Migrations System, ORM, what to use for this? I'm coming from Ruby so I'm used to ActiveRecord and Migrations and Postgres. Where are the industry standard tools? I don't have too much or an interest in Mango right now.;"lol lol MangoI might be biased (as I just posted about it) and I don't want to sound spammy, but I'd say give wetland a go (https://wetland.spoonx.org/).

It uses knex.js (as some people already suggested to use) but offers more like you're used to. It's based on the JPA spec, so like hibernate, doctrine 2, and more or less your active record approach :) It has migrations (dev and generated), a unit of work and much more... The documentation is decent.

I hope it's helpful!Came here from /u/kostarelo post in another thread about Wetland...

I'm currently building up a schema for PostgreSQL in knex migrations, but something about doing it this way just doesn't feel right. There's no single representation of the schema at the end of it all, I guess, is what the problem is. Sure it's there in the DB, but in source it's a pain to flip through a bunch of migrations to try and guess what the end result schema is going to be.

I've also used MS VS with db projects in the past, and I think I much prefer that model. You build out the schema itself in files that define tables, views, procs, etc, and then you can do schema comparisons and save/execute delta updates. To see what the definitive schema is for any given object you'd just open the script that defines it. 

I haven't been able to find anything like that for Node.js, or outside of MS VS db projects in general actually - which is a shame, because it's a very slick model for managing DEV/QA/PROD environments, and iterative updates (and I don't praise MS on much anymore these days).I prefer knex and objection.js. knex is a query builder with migration-support, and objection.js is by far the most malleable ORM I've used in node.js (Sequelize was my least favourite, bookshelf is what I use in production currently though had I had the choice today I would have picked objection.js)Here's my thoughts from my blog: https://kostasbariotis.com/data-migration-with-nodejs/

TL;DR: Use [umzug](https://github.com/sequelize/umzug) with a custom cli to run the migrations.db-migrate is your best bet."
2017-03-07 16:42:57;Signing/Decoding with Base-4 PKCS-8 in Node.js;"I've been using this library in Node:

https://github.com/digitalbazaar/forge

As it's easier to debug being pure JS.  Several demos are available in the repo to get you started.

I"
2017-03-07 09:15:24;How to get my own localisation?;
2017-03-14 22:54:23;Node.js 7.7.3;
2017-03-14 22:37:02;child_process and color;
2017-03-14 21:46:22;[Theory] TDD & Sequelize: Is it worth it to verify the schema;"(Disclaimer: I am a sequelize maintainer - I also work with sequelize every on my day-job)

I think testing column length would definitely be over-testing, and I'm inclined to say that testing column types would be overtesting as well. At least if you are just testing along the lines of `expect(Model.foobar, 'to be defined')`.

I'm not saying that someone changing the column length by mistake couldn't happen, but I think this should be caught in code reviews - Not by unit tests, since writiting that many tests would be incredibly tedious. Writing tedious tests leads you to copy-pasta, which again might lead you to miss some details, so your tests don't have the coverage you think anyway, and might give you a false sense of security.

Secondly, that specific scenario (changing the column length) will only have a limited effect - Since a big part of the definition is only used when syncing the schema - So it wouldn't have any effect on your production database.

What we usually test in our in our sequelize code is:

* Hooks 
* Custom instance and class methods (which are often used to encapsulate business logic)
* (sometimes) getters and setters, if they include more than a few lines of code
* (sometimes) Relations between our core models - Not the columns on the model definition, but integration tests that create some instances, and associate them.I'd say that even verifying the columns and associations is overtesting.

You declare the columns and associations to Sequelize. You then trust that it will do its job and create them. I would assume (and fervently hope) that the code which does that is tested by Sequelize and there's no need for you to re-test it in your code.I actually think that for the sake of coverage and regression detection you should test everything you suggested  "
2017-03-14 21:23:48;API call is successfully made but, getting an error in the console;Just as a heads up, you've posted your API key in this post. These are normally secret and shouldn't be made public. I'd recommend revoking this key and requesting a new one. 
2017-03-14 18:54:18;How to Place and Receive Phone Calls Using Node.js;The presenter has a nice voiceBut can it do my *taxes*That's pretty cool.
2017-03-21 23:43:55;Build A Support Ticket Application With AdonisJs;
2017-03-21 22:46:01;Meet the people who make Node.js: Colin Ihrig;"Oh please don't. No. Not in this day in age.

Not when the inventor of JavaScript can be *vilified* for *personally donating* to the *winning* referendum campaign.

Do *not* start personalising things. Because hateful activist groups will seek them out and try and destroy them regardless of the contribution they've made to society."
2017-03-21 21:54:22;Any good keystonejs alternatives?;As one of the people who works on Keystone, what are you trying to do but can't?i looked into the community. development seems to have died and the docs are obviously not updated. not great. :( /u/jedwatson is active here though
2017-03-21 19:46:05;SFNode Meetup: Creating Electronic Dance Music with JS & Node.js - Walmik Deshpande;
2017-03-21 19:01:08;"Build a ""Serverless"" Slack Bot in 9 Minutes with Node.js and StdLib (x-post r/webdev)";"asshole move to call your service StdLib!stdlib.. cheap and lame.X-Post referenced from [/r/webdev](http://np.reddit.com/r/webdev) by /u/J-Kob  
[Build a ""Serverless"" Slack Bot in 9 Minutes with Node.js and StdLib](http://np.reddit.com/r/webdev/comments/60phgd/build_a_serverless_slack_bot_in_9_minutes_with/)
*****  
  
^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)Yeah fuck off with that bullshit"
2017-03-28 22:02:10;Are URL parameters considered secure when used like this with passport and https in production?;"It is encrypted, however, the browser will likely save it unencrypted and server's logs may store it unencrypted.No! 
The browser is likely to store the query string in the history & logs which shouldn't be considered secureuse json tokens its much saferYes. 

The way this works is as follows:

1. Client determines the IP via DNS lookup. 
2. Client contacts IP and tells it that it's looking for example.com and that it wants to do a TLS handshake. 
3. Host and client set up TLS connection. 
4. Client passes the header info, the full URL, parameters, and body. Normal HTTP conversation continues from here. 

To see it in action, I encourage you to set up a simple ""hello world"" server on a service like now.sh (they automatically set your site up with a free Let's Encrypt powered certificate) and then inspect your traffic using something like Wireshark. 

Note though that you MUST NOT put passwords in the URL as a query string because URLs are stored in history on the client. It doesnt seem to work with http headers, only body content and URL parameters which seems a little confusing"
2017-03-28 19:03:51;Memory leak in the latest 4.x and 6.x versions of Node.js;Has this been an issue with other releases of Node? 
2017-03-28 16:00:54;Proxying WebSockets with NGINX;That was really helpful. Thank you[deleted]
2017-03-28 14:49:49;Everytime I run my node app, I have to hit cancel and restart the script. Is there anything better?;"[nodemon](https://www.npmjs.com/package/nodemon)[deleted]http://nodemon.ioOne more for nodemon. You can even specify that it watch other file extensions other than .js. I usually have it watch my handlebar files and restart for that too. node-dev https://github.com/fgnass/node-devnodemon... UNLESS you happen to be using ""bash on ubuntu on windows"" in which case there is a known bug that won't let the nodemon start, gets an EPERM error. You may be able to find a work around for your situation here:

https://github.com/Microsoft/BashOnWindows/issues/216

if you are on linux or mac then forget I said anything because nodemon will work fine
Are you using DevTools for debugging?"
2017-03-28 14:07:53;TestCafe v0.14.0 is out with authentication via user roles, client-side debugging and other cool features.;
2017-04-04 23:37:46;noob question in regards to libuv;"So I was going to try and explain everything, but I think it's better to point out how I went about finding the answer.

We can start out in the `lib/fs.js` file where we can find most of the js code around the fs module.

In the file we can find the `readFile` method you are looking for

https://github.com/nodejs/node/blob/master/lib/fs.js#L322,L348

In that method we see a few things.
- `new ReadFileContext()`
- `new FSReqWrap()`
- `binding.open()`

I first started looking into `FSReqWrap`.


    const binding = process.binding('fs');
    ...
    const FSReqWrap = binding.FSReqWrap;


So where does `process.binding` come from? With a bit of help from grep/spot/ack we can see how methods get set on the global `process` object.

https://github.com/nodejs/node/blob/master/src/node.cc#L3416

We can then go find the `Binding` method

https://github.com/nodejs/node/blob/master/src/node.cc#L2654

We can kind of see that the Binding method is trying to fetch/load modules. I found the `get_builtin_module` method and followed it a bit to `node_module_register` (through `modlist_builtin`).

The `node_module_register` function is used by `NODE_MODULE_CONTEXT_AWARE_X` 

https://github.com/nodejs/node/blob/master/src/node.h#L491

Just below that we can see a `NODE_MODULE_CONTEXT_AWARE_BUILTIN`.

That macro is used to register internal modules, we can see it's use in the node_file.cc code

https://github.com/nodejs/node/blob/master/src/node_file.cc#L1455

Now we are in the actual fs code, and right at the bottom of node_file.cc we see a lot of `SetMethods`.

When the `fs.js` code calls `process.binding('fs')`, we are handed back an object with all those methods attached.

From there you should be able to look through the code to find anything you need.




"
2017-04-04 20:55:12;Unhandled Promise Rejections in Node.js;Can someone elaborate why it is considered bad practice to have a global error handler using the process.on(unhandledPromiseRejection)? 
2017-04-04 18:53:18;I create a simple HTTP cheatsheet;https://httpstatuses.comI usually just refer to `http.STATUS_CODES`.
2017-04-04 15:49:28;Twitch bot help;"https://reddit-uploaded-media.s3-accelerate.amazonaws.com/images%2Ft2_j2s46%2Fjmyvkce55kpy
"
2017-04-04 14:41:36;I set up session cookies for an API behind a separate SPA. Finished them both. I just signed up for a refactor overhaul didn't I?;"If you can identify some kind of token you can pass that long as a custom http header and use that to fetch the login token / user.

I encountered a similar problem with a little project I was working on that does isomorphic rendering.  the initial data is fetched by the server using the same routes as the client. Problem is, the routes are authenticated and the server doesn't have a session.

I ended authenticating initially and populating the authenticated user, along with their token, into the store. When the server performs requests against the api it uses this same token and the server knows to validate against it if it has been provided.

I'm not sure if this will necessarily work for you, but it might give you some ideas.I don't think there's anything preventing you from providing session data to your client. Especially if your session information is useful for client side routing / rendering.

The important issue is that you need to use the server version of the session to actually verify actions / sending potentially sensitive data.

Unless there's something in your session the client shouldn't see? That strikes me as unlikely, though.Do you need the server sessions for anything?

Normally with single page apps session state is stored on the client. The app gets a token (roughly equivalent to the session ID) during authentication, then uses that token to identify itself during calls to the server.

You can just reuse the session ID as an auth token if you want. It's often the easier way to go."
2017-04-11 19:38:56;AsyncJS vs Promises vs async/await;"`async`/`await` is implemented w/ ES2017, so [you'll need node v7.6.0+ unless you want to transpile](http://node.green/#ES2017). It's built on top of `Promises`, so [it helps to understand how those work](https://www.promisejs.org/).

AsyncJS basically makes callbacks tolerable, and easier to work with. The Promise spec allows for more readable/intuitive handling of asynchronous code. New features/packages are building on and improving `Promises`, so it probably makes sense to use them over a callback-wrangling approach.As far as I know, `async`/`await` use `Promise`. `Promise` is already in the ES6 standard, and can be used in native JS (no libraries) in recent versions of Node, Chrome, and Firefox. Check out [MDN: Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). Promises are great, (apparently) Bluebird performance is better than sliced bread, native ES6 support is useful, etc. However, in the real world, this kind of performance is usually the last thing you care about.

I would go so far as to say async/await is the correct way to do things. Code written with async/await is shorter, more explicit and much much easier to follow, has less syntax in general. Promises are a bit of a pain to teach to new bootcamp grads whereas async/await is very intuitive. Exception handling becomes painless and as a bonus, there's a couple of things that you'd have to do a recursive function that you can now do in a normal loop (e.g. page through an API call with an unknown number of pages). There's absolutely no need to wait for ES2017 either, [asyncawait](https://www.npmjs.com/package/asyncawait) works great.

I'm open to criticism on this but (other than performance which I don't care about), I can't see a single advantage to promises.I use bluebird. This guy Joepie91, usually very freaking smart, explained a debate he had where he favored bluebird, but u don't remember the exact technical reason. Bluebird has been doing me right and I love it.  async/await in TypeScript is what I use. Extremely convenient.Thanks folks. Looks like bluebird for performance and async/await for convenience. Thanks folks."
2017-04-11 18:25:24;Help with unit testing.;seems like you're looking for a [supertest](https://www.npmjs.com/package/supertest), [cheerio](https://www.npmjs.com/package/cheerio) combination. You can utilize supertest to make the request, then cheerio to inspect the DOM.Move the route handler to a separate file, then you can write unit tests for it. In the current state, you can only write end to end tests. Learn more here: https://blog.risingstack.com/node-hero-node-js-unit-testing-tutorial/
2017-04-11 16:13:24;How do I insert a row every 2 columns with Jade/Bootstrap/Express?;"I don't code in Pug (Jade), but I can give it a shot after checking the docs a bit. Try this as a starting point:

    .row
      each partner, i in partnerlist
        .col-xs-6
          p #{partner.name} 
          p #{partner.phone_number} 
          p #{partner.website}
          img.logo(src='#{partner.logo}')
        unless(i % 2 == 0)
          </div><div class=""row"">

`each partner, i in partnerlist` creates 'i' as the index of the partnerlist that is being read and `unless(i % 2 == 0)` checks if the index is odd.[deleted]Just put them all in one row. The class col-xs-6 sets the width to 50% and floats left so if they are all in a single row, they'll wrap every 2 columns giving you what you want."
2017-04-11 16:07:21;Electron is flash for the desktop;"[To quote myself:](https://www.reddit.com/r/programming/comments/64oqaq/electron_is_flash_for_the_desktop/dg3z9k6/)

> So a mature and extremely well developed rendering engine that has been performance tuned for years to be as fast as possible by some of the best engineers in the world is actually complete garbage because Slack and Atom are slow? Are you kidding me?
>
>Anyone who uses Discord or Visual Studio Code knows how well Electron can work when used properly, and those apps probably wouldn't exist without Electron. Developing a cross-platform GUI app that actually looks how I want it to look doesn't completely suck now thanks to Electron. It's also easier to tune the performance of my app thanks to all the built-in tooling Chromium provides. Not to mention I can write the whole thing in TypeScript (with its crazy powerful type system) and use any NPM packages I want (to do basically anything).

You can write a slow Electron app, just like you can write a slow JavaFX app, just like you can write a slow C++/Qt app. The benefits of using Electron (easy profiling, easy debugging, easy to make automated tests, easy to style and customize, easy to develop, hot reloading, reusing web code, etc.) make it a no-brainer for a desktop app in the current year.

You can complain about Slack using 200 MBs of RAM, but Slack wouldn't exist with Electron, not to mention Discord, Visual Studio Code, etc. It's made a new generation of awesome desktop applications possible. I'm glad Electron exists and developers are using it. I have 8 GBs of RAM, god forbid my IDE uses 2.5% of it.I think developers are well aware of this problem. But the proposed solution ""we need to stop using electron"" is as good as ""we need to take more care of the environment"". ""Doing the right thing"" is not a driver for a community as a whole.

This blog post is a well argued rant. Justified and even gives you as a developer an alternative to look into, but how do we change an industry?For me one of the big issues is that if I'm running chromium, spotify, atom, discord, slack and Franz, there is a certain degree of redundancy in terms of memory, all of them have the same renderer, the same audio subsystem, networking and so on.

Maybe is about time for a general electron/chrome service all of these programs could use to reduce their memory footprint.""so when you download slack you're actually downloading a complete copy of Google Chrome""

Stopped reading after that.Technically, Adobe AIR is/was Flash for the desktop.Electron based apps consumes more resources than native ones because it uses Chromium as basis, that's obvious. But it's not the only and definitive reason to say: ""Any Electron based applications are slow"". This guy remind me the popular phrase: ""Java is slow"".

The primary cause of an application bad performance it's the poor in quality terms of it's code. A bad designed application is slow by nature, in adition, a bad code is terrible for performance; you just can't wait a good performance from some thing that was built wrong.

For example, VS Code is very good, is fast and consumes a lot less resources than Atom and both are electron based applications. It bothers me to say this, but Microsoft did a very good job.Electron is convenient platform for [Service as a Software Substitute, or SaaSS](https://www.gnu.org/philosophy/who-does-that-server-really-serve.html)This post and all these threads are jokes right?"
2017-04-11 15:48:47;How to not let anyone POST/PUT/DELETE on my API ?;"That's a big question, and the answer of ""just `npm i passport` and copy/paste teh samples"" doesn't really address what you're really asking, which is more or less ""tell me everything about making APIs public or private correctly, what  authentication and authorization mean and how to implement them in a web app?""

People write entire books about those topics.

Nonetheless, a few pointers about this:

- Cookies are the near universal method through which a user session is managed. Cookie are set by the server in a response header, and sent back in every browser request header afterward. The server is responsible for looking at those cookies, and seeing if they match something it knows. It's important for those session cookies to be unique, and hard to guess.

- The login flow can vary a lot, from a straight user/password form to some delegated (OAuth, etc) authentication, but the end game is usually the same: The server becomes convinced that you are user X, and issues a cookie back to you. Anyone that presents this cookie in future requests will be assumed to be user X. So that little string of jibberish becomes the primary thing that authenticates you in future requests after login.

- Because browsers are weird misshapen beasts, that's not enough to protect your APIs. To protect your data from being read by unwanted third party, you'll need to make sure you only output data from predictable URLs in a way that *cannot* be directly parsed by a browser (so, no naive JSON-P entrypoints for non-public data.)

- Still not enough. To protect your data from being modified by unwanted third party, you'll need to have an API that issues a CSRF token (cross site request forgery. google it for details), and you'll need to enforce that every API request that modifies data must include that token in its payload.

- If you're writing an API meant for other sites to use, rather than just users of your own site, then you get into the business of managing API keys, and you may choose to not rely on cookies since those requests may not come from a browser, and instead have an API key issuance and management mechanism/UI, then ask API users to include that key in their requests and validate that instead.

- Everything above is about authentication (who is talking to me). You'll also need to figure out authorization (what can this person have access to). Being authenticated is great, but User X probably shouldn't have access to the same stuff User Y does, even though they're both authenticated. Sort out your policy carefully, and implement it in a way that minimize surprises (splitting your authorization policy implementation across many little bits in many files will often yield surprises.)

There's a lot more stuff to cover, including how to store credentials correctly, how to log things so that you can maybe tell if Something Bad happened, whether transport-level encryption is appropriate to your use case (spoiler alert: it is), and a bunch more things. But that's a start.
REST is supposed to be stateless (i.e. not relying on sessions), so all requests should require some kind of authentication, possibly token based.  
You'll be best off using [Passport](http://passportjs.org/) and an authentication method. The method itself is up to you. You could handle your own user registrations, or use an existing OAuth provider (like Facebook or Google)Read about node passport. Pick an auth method. Integrate. you can expose your API via a proxy like KONG and expose only GET via proxy service(virtual service) and you can continue to use the actual service to do posts. on the proxy (API gateway) you can apply security so that who can do what etc.Here's a decent [article](https://jonathanmh.com/express-passport-json-web-token-jwt-authentication-beginners/) that covers basics using passport and JWT.

Also, rolling your own solution using the `jsonwebtoken` package is not terribly difficult. If I decide to use passport and say I want the user to check if they have a valid apikey else they cant see the users information, how then would I use ReactJS to retrieve users data and display it in the front end if I need to have an apikey to get/post the data ? Couldn't you configure CORS to be restricted to your domain or website? Obviously setting up authentication is the ultimate solution but if the fact that someone can just use something other than your site is a problem, I believe CORS could lock that down. what you want is cors, only do this at server level, not frontend.

https://github.com/expressjs/cors
"
2017-04-18 22:39:50;Patched a FormData object with fetch.js. Can't really tell from looking at the req how it worked (even though it did). Didn't seem to send a body object, didn't seem to append queries to the URL... what happened?;
2017-04-18 20:23:57;grawlix v1.0.5: now with grawlix-racism plugin that targets racial and ethnic slurs;"And not even twelve hours later, I changed my mind on a bunch of behind-the-scenes stuff and did another release. So now the package is up to v1.0.6. At least I finally got complete test coverage this time around.

So I'm honestly curious -- what's with the downvotes? Are people just sick of hearing about this project?"
2017-04-18 20:08:38;Detect public IP + more info via different APIs;
2017-04-18 18:01:06;NodeJs+Ionic2+Socket.Io newbie question.;"So I'm not entirely sure what issue you're having. Are you receiving the '2' from the socket emit? Is the '2' being displayed in more than one location and not suppose to?

One thing I noticed, you are pushing to prova but its not initialized as an array.

What does your console look like on load?"
2017-04-18 17:07:34;Those of you who use MongoDB, how do you survive without support for transactions?;"Based on both your posts I have to wonder two things:

 1. Are you designing your DB properly?  Or are you still thinking in terms of tables causing it to look more like a SQL design.
 2. Can your data lend itself to being organized as documents? It's possible a documentDB is a terrible choice for your project.

A lot of people assume a documentDB and relational database are interchangeable, and for some projects they may be, but it's not always the case.  Each as it's pros and cons.  For some projects you may want to have both.

I can't know what's going on as I don't have any idea as to what your or storing and how you are organizing it.

Personally, when I'm working with MongoDB having atomic operations on the document level is enough.  I've never encountered a situation where two documents are so tightly coupled that I **must** have both updated or both fail.  The schema is setup that each document is a standalone piece of data and doesn't rely on anything else.  This is the exact opposite of relational databases, where what could be a single document in MongoDB spans many different tables, so updating one item requires transaction to ensure the many tables are in sync.

I spent well over a decade dealing with relational databases exclusively.  It took me over a year to truly grasp MongoDB and even longer to embrace it.  I still struggle building queries and reports that I could easily knock-out quickly in SQL.  But each has it's pros, so I'm glad I learned both.

Out of curiosity, what is your use case that you need transactions across documents?

By re-writing it in SQL.
Turns out my data was relation after all and referential integrity between those relationships was important too. Opps.My opinionated 2 cts about Mongoose...

I think Mongoose is corrupting the ideas behind mongodb in the node world, by having you think an ORM is needed, by making you think in terms of relations... except there's no R in mongodb, so no need for an ORM.

Another way to put it: there's no impedance mismatch between mongodb and JS. Mongodb stores objects (documents), JS handles objects: no impedance mismatch, so the very reason ORMs were born does not apply to mongodb.

If you're using mongoose just for schema validation, you could try switching to Typescript for type safety, or use a schema validation lib instead.

Every noSQL usecase should respect rule #1 of noSQL dbs: model for queries, not for data. If you want/need to design for data, use a SQL db instead.

Lastly, noSQL is about getting your 1s ""fast"" SQL query run in 1ms instead: if that's not your goal, don't bother with noSQL (some use cases call a 1s SQL query a DoS). noSQL is an optimization path, not a replacement of SQL: accept the tradeoffs.Message queues and idempotent data operations. 

Message queue process the changing of data. If something fail. Msg gets put back on queue. Having idempotent data ops means a msg can be rerun repeatedly with no side effects. In advance setups you can rerun history of msgs and have same output. 

CQRS pattern starts to come into play at this point.Every time transactions were needed in my projects, it turned out an SQL database was a better solution than MongoDB (or CouchDB).

My team maintains an application that sort of emulates transactions by building a query ""chain"" and figuring out the corresponding rollback queries. Once the whole ""chain"" and ""rollback chain"" are ready, it runs queries sequentially, retries a couple times in case of failures, and then switches to the ""rollback chain"" if the regular chain fails too many times.

It works wonders when everything is fine, but often leaves the database in a weird state when things fail. Mostly because when the regular ""chain"" fails, most likely the ""rollback chain"" will fail as well. So we added more intelligence on top of that, to persist the ""rollback chain"" and retry it on another process on the side.

In the end the behaviors the user sees make sense, and our data is eventually consistent (sometimes with a slight delay). But that's a lot of code we had to write and test, for a feature that's available out of the box and way more efficient in most SQL databases.There are transactions in MongoDB.  Writing a single document is a transaction.  So if you design your data model such that you keep all data inside of a transaction boundary in one document, then you've maintained consistency.  This will look very different from a normalized data model.

If you can't design your data model that way, there are things you can do to mitigate your risk.  But it's more likely that NoSQL just isn't the right tool for your use case.

EDIT: Read your post where you described assigning tasks to users.  An appropriate data model for this with Mongo would have a Task document with an Assignments field, where each assignment has a status.  You'd update the document atomically whenever a user accepted or rejected a task.MongoDB is for people who are mentally challenged.I use mongodb and I've never heard of transactions, I still love it lol"
2017-04-25 18:16:53;fucking node-gyp (win 10 node dev);"Yeah, use this:

```
npm install --global windows-build-tools
```

[source](https://github.com/felixrieseberg/windows-build-tools)[Microsoft NodeJS Guidelines](https://github.com/Microsoft/nodejs-guidelines)

[Section on compiling native addons](https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#compiling-native-addon-modules)

[Visual C++ Build Tools  (The download that you're looking for)](http://go.microsoft.com/fwlink/?LinkId=691126)

I've had issues with the npm package not working for Windows 10, the linked executable has always worked for me.This is why I dev in a linux VM since I moved back to a windows laptop from mac. Its nice that all my work stuff is separate from personal usage of the machine and I can just close the VM to play a few games and open it back up to where it was."
2017-04-25 17:51:01;Setting up multi-platform npm packages;
2017-04-25 17:45:36;Best github description yet.;
2017-04-25 17:07:29;Create lean Node.js image with Docker multi-stage build;really interesting , where can i run this ?
2017-04-25 13:23:38;Socket.io - CLIENT SCRIPT authenticating with a website login;
2017-05-02 20:53:07;Recursively send request on failure?;"Oldie but goodie: https://github.com/TomFrost/node-attemptOne comment... use isomorphic-fetch or node-fetch, which is already promise based... or axios (more feature rich) instead of custom wrapping request.  Also if you can use async functions or co for generators, it may be a bit easier to handle retries.You don't actually resolve the promise if it goes into the else block, you recursively call into the function again which creates a new promise which might be resolved -- either way, you don't pass this success back to the caller and your response will get lost.

You should probably pass along a context with the recursive function call which includes the resolve function, (probably the place to keep the limit and count variables as well).

You might need to make the `get` function a wrapper function that sets up the context/promise and calls into the function that does the actual fetching - the second function would need to take a parameter for `context` that includes the initial resolve.  Once you get a result you are expecting call resolve, and the callstack should clean up and you should be good to go with a resolved promise.

Also, I'd probably `reject` if you hit your limit... if ever I saw a use case for an error/rejection, that would be it.  Going that route, you'd want to pass `reject` with context as well...  you currently don't use that variable so I omitted it from the paragraph above."
2017-05-02 19:33:15;[Halp! NodeJS + SocketIO] I am trying to take an image converted to base64 and emit to my server for saving, but all the server receives is null.;"The reason for the size difference, is base64 is using 1/3 more bytes to express data in a more ""text safe"" way than raw bytes.It's pretty simple. 

You register an event listener and return asap. 

The event listener is not called when you return therefore it's default var value of null socket.emit(""event"",{NameHere:img}) "
2017-05-02 16:30:58;Having difficulty with xml2js on Xml->Json->Xml in NodeJS;"You're passing stringified JSON back into the buildObject() function and not a javascript object.

After your .replace() call you should do a JSON.parse() before passing it into buildObject().

Also, your .replace() will only replace the first instance of ""Hello"" and not all instances of it. You should use a global regex instead:

        var needle = /Hello/g; 
        json = JSON.stringify( json ).replace( needle, ""Hellow"" );Seems like a lot of processing... why even convert it to JS in the first place?  You have a string of the XML you can run replace on that and output what you get to the filesystem.  No need to do all this parsing.

Also, fwiw - JSON and XML are two totally different paradigms.  There's no way to know that passing a JS object back to this xml builder will create the correct format.You may also try different xml2js packages like https://www.npmjs.com/package/fast-xml2js"
2017-05-02 13:08:28;Mastering the Node.js File System & the fs module;"Contents:

* fs module:
   * The asynchronous API
   * The synchronous API

* Node.js File Streams

* When not to use fs.access

* Caveats about fs.watch

* Useful fs modules from npm:
   * graceful-fs
   * mock-fs
   * lockfileAnd `fs-extra` if you want actually want some sort of convenient API for simple operations.Also, worth looking at mz/fs if you want a promise-based interface for async functions."
2017-05-02 09:47:37;Simple HTTP benchmark for popular nodejs frameworks using wrk;"Wow the Alex Hultman's HTTP module is now production ready? The performance improvement compared to the native Node.js HTTP module is crazy!  Please, stop with useless benchmarks.What's the difference between using this and wrk directly?
"
2017-05-09 23:22:05;Data security in NoSQL databases;"The main issues I have seen are:
1. Public Access to the DB.
2. Not setting user/passwords.Operations in MongoDB are atomic at document levelhttps://docs.mongodb.com/manual/core/write-operations-atomicity/Two different types of `safe` - 

1) Is it safe from external manipulation or attack?
Yes, as long as you practice smart security - limit access to trusted ip addresses (e.g. your application server + your pc for ssh).  Use access tokens that expire and take steps to prevent replay attacks.


2) Is it safe from concurrency issues?  If you do everything right from an implementation perspective... are there risks that the database may `overwrite` or `lose` records?

This is what /u/mrm8488 is referring to as Atomic.  MongoDB has improved dramatically in the last few years, becoming ACID compliant on the document level (ACID = Atomicity, Concurrency, Isolation, Durability).

You have to be very careful about the queries you chose to use since MongoDB is asynchronous.  For example if you write to a record asynchronously with two separate queries, but do it incorrectly, you may end up overwritting data from Call A with data from Call B.

Important to note that this problem doesn't apply to all NoSQL databases... IIRC, redis is single-threaded and won't allow you to accidentally overwrite a record."
2017-05-09 19:33:43;Recursively create directories - A better mkdirp;"I like how ""actively maintained"" is a feature...

The module does one thing... I think we can agree that 99.999% of the bugs have been squashed."
2017-05-09 19:14:24;Have we passed peak Meteor already or is this just a momentary drop in interest?;"Meteor had serious issues from the beginning; newer norms and tools have made it obsolete.More like a bolide now

I'd see myself out now...It seems to be a bit quiet on the Meteor news front (at least on hackernews and here)I know for me that boat sailed when React Native came out. It was interesting before that to have multiple deploy targets but now between React Native & Electron I don't see when I'd look to meteor.It's dead."
2017-05-09 19:05:29;I'M BACK!! (NOW...LET'S GET DOWN TO BUSINESS!!);Not my kind of node, but love the hair
2017-05-09 16:53:18;Project to Backup Cloud Services;I don't know, It would be cool if there were more friendly solutions but there are quite a lot of ways that address that already. I simply use 'duply' to begin with, it throws all my stuff into both S3 and dropbox, I also keep revisions in case something would get corrupted and for undelete.Update: here's the project's GitHub repo: https://github.com/johnjones4/Doomsday-Machine
2017-05-16 23:19:01;Eight Node.js Events to Attend in 2017;I wish I could go to more events like these. I've only ever been to one and it just happened to be on the way to work. If you are a person who attends regular conferences, how do you do it?
2017-05-16 22:46:56;need a nodejs developer to build a tool for me;What's your budget?I am unsubscribing from this subreddit.Node...al.ping me. only for serious development though. 
2017-05-16 22:11:29;How do I prevent my API page from being viewed, yet still allow AJAX requests to it?;"Use authentication in your apps.    app.get('/api/users', function(req, res, next) {
        User.find().exec(function(err, users) {
            return res.format({
                json: function () { res.send(users); },
                html: function () { res.redirect('/'); },
                default: function () { res.redirect('/'); }
            });
        });
    });What do you mean to accomplish?If all you want to do is check if a request comes from a browser page request or your own AJAX call, check the headers. Ajax requests usually have an [""origin"" header](http://devdocs.io/http/headers/origin). [Here is how](http://stackoverflow.com/questions/11875522/node-tell-origin-of-request) you would read the origin header in node/express.

And as all the other smart people on this thread says, preventing anyone beyond the most clueless users from retrieving data requires an authentication system. Ajax requests can be spoofed without any problem at all.I think what you want cannot be acomplished.

Entering an url in a browser is like making an ajax get request, so if one of them is unreachable the other will also be.

If you're trying to hide it for security reasons, maybe you should try another aproach, as the ajax requests can be seen in the browser log anyways. Most HTTP client libraries will set an `X-Rquested-With` header for ajax requests. Express has built in support for this via a flag on the req object. So you could create a middleware for all API routes:

    router.use(function(req, res, next) {
        if (!req.xhr) {
            res.redirect('/');
            return;
        }
        next();
    });

This is only advisable if your API is strictly for internal use and you have control over the clients making requests to your API. It will certainly prevent any users from stumbling upon the API by accident however.

You should definitely be authenticating with something like JWT too, by the way.You can check the Referer (the spelling error is in the spec) header. It can be spoofed but it should be good enough to stop just pasting in the json endpoint into the location bar.Simply use/apply auth in your app, use a middleware for that .. Cuz u might use it constantly You could potentially set up a reverse proxy to only run the API privately, but that's a lot of hassle that you can avoid by adding authentication to the app. Check out [Passport](http://passportjs.org/). If you want a quick and lazy way, post instead of get? "
2017-05-16 19:23:13;How to include non-npm library in project?;[Read this article](https://docs.npmjs.com/cli/install) You can also reference git repository and save it with `--save` argument
2017-05-16 18:47:12;Woodlot - An all-in-one JSON logging utility for NodeJS.;"Why this instead of Winston that I already know, have logging adapters for everything I want to log to, and have tones of tutorials and stack overflow answers?

I don't see anything bad about this frame work, I just don't see a must have feature to make me need to try it. 

Good docs site though. Just need an actual elevator pitch on why. "
2017-05-23 22:12:52;[Express] How do you save a document to a database efficiently?;Why are you closing the connection to the DB? Just leave it open.
2017-05-23 21:20:47;Technical Skills for NodeJS Job;"There are a bunch of little things I don't like about your list, but generally speaking I'd still talk to you and that's all the resume is good for. Personally, I'd rather see your github than a list of things you claim to know, but I understand the need for doing things like writing ""NoSQL (MongoDB)"" so that you can appease the recruiters that are doing naive filtering of resumes en masse. 

If you're specifically looking for a Node gig, you might want to list off some of the popular modules that you're familiar with just to show that you've written some code and participated in the community. "
2017-05-23 16:04:01;Need some help improving my production setup;"Could bring up your new environment on a new VM (or multiple VMs) and then change your DNS to point to the new environment after you've tested it -- you'll possibly need some downtime to sync up the databases though.

What's the motivation to move to Docker?  (are you doing it to solve a problem or because it's the hip thing to do these days?)"
2017-05-23 14:45:34;The Node.js Interactive North America agenda has been announced;
2017-05-23 14:36:43;I've built a site to help programmers find a team for their project ideas;Opening it from baconreader on iOS I got this  http://i.imgur.com/zd7IuoU.jpg 
2017-05-30 21:05:52;Node v8.0.0 has finally landed!;it's not Node v8, it's just Node 8.Interested to see how well npm 5 performs, meant to be super fast. Anyone noticed any change?
2017-05-30 18:10:47;What's New in Node 8;"Has anyone run benchmarks for Node 8 yet?Content:

* Upgrading to Chromium V8 6.0
* N-API for Building Native Addons
* util.promisify()
* JS Bindings for the Inspector
* NPM 5
* AsyncHooks API
* Zero-Filling Buffers
* Date Parsing""The function works with little overhead...""

Define ""little overhead"". Definitely glad to see the removal of --debug though. It added to confusion from CLI debugging. All in all, great looking release!We tried switching to 8 and have experienced some strange issues.  We use Koa and its most popular middleware.  We communicate with legacy systems and requests can sometimes take 10-15s.  We log incoming POST requests.  For some reason, when we switched to version 8, we started noticing POST requests that resulted in long-running responses were getting resubmitted multiple times (we could log the hit in the outter most middleware) ... yet Chrome network activity clearly only logged 1 post.  Switch back to version 7.10, this doesn't happen.

Something is definitely weird.  Seems like that could lead to some very serious bugs out in the world.

So keep your eyes peeled if you plan on switching to 8 in production.Official release post from Node.js -
 https://nodejs.org/en/blog/release/v8.0.0/"
2017-05-30 17:36:44;Can I have your thoughts on these two architecture possibilities?;"I think a lot of it depends on how you want the resulting data to look like, if MongoDB is a given then Option 2 seems _needlessly_ complicated. you're not only adding an additional layer, you're adding traffic over the internet, trusting a 3rd party and adding encryption overhead to what essentially would give you a throttle back if your MongoDB is down and you can not backlog the requests (assuming you can not simply pause processing, in which case it makes even less sense)


I don't know what exactly you're trying to do, what is your failure sensitivity etc but I would never use a remote element on the internet for a queue unless it was produced remotely and sent directly there


I would make my decision based on this: if the main cost is processing I'd implement my own message queue _locally_, if the main cost is receiving the log data and committing to a DB I would use no queue at all or have an overload dump to the filesystemI am generally in favor of message queuing systems, having used them for years.  When I read ""load balancer"" in option 1, I was thinking ""use message queues"".  So you're definitely on the right track.

For option 2, you could cut out the middleman and send the logs directly to the queues, depending on where they're coming from.  You're talking about CloudAMQP.com, but ideally, your queuing servers would be in the same cloud as your apps, in the same security groups, etc., so there would be no need for the encryption step.Have you verified that you actually need half of the stuff you are thinking about as options?

How many log entries per second are you dealing with?"
2017-05-30 16:55:57;Nodemailer emails not showing up on iCloud?;
2017-05-30 15:44:20;Reliably getting the domain/hostname from an incoming request;"Fairly certain that you're never going to get 100% on this. It comes down to finding the balance between convenience for your clients and difficulty in spoofing. What you're looking for is something like a single-use token. Recaptcha is a single-use token that also tries to restrict automated submittal, but what you pay for that extra functionality is a (slight) annoyance to your legitimate clients.Referrer is just a header it can be faked.

Theoretically an IP can be faked if the 'attacker' doesn't care about getting a response back.have those domains process the form post locally and submit it to your API server side.  then you can restrict by the web server IP.

all other methods for determining where a form came from are unsecurable
"
2017-06-06 23:04:58;Basic Node.js debugging in Google Chrome;
2017-06-06 21:40:23;How to Build a Facebook Bot App Using Node.js – Hacker Noon;
2017-06-06 19:42:59;Testing data access layers;Write integration tests using docker & compose. Wrap your code in a node container and use compose to run your tests against a Postgres container. Let me know if you have questions or need an example.  Not sure if this is a best practice or not, but the way I've handled that in my API projects is I have two sets of tests. Unit tests and integration tests. Unit tests stub and mock all SQL calls. Integration tests require that you have a local install of Postgres, or point at an external host. The SQL gets tested as part of the integration test suite. 
2017-06-06 17:02:17;Strategies for Propagating Document Updates;"Man I know this is not practical right now but you guys seem to have created a new world with different laws of physics and now you are looking for new equations about how to calculate the gravity. I don't expect you are going to find some golden nugget of knowledge here because most people's strategy for propagating document updates is using a proven relational database with SQL.Just to re-iterate: this is exactly what SQL was designed for. Next time you get a chance to choose a stack use Postgres instead.

With regards to technical debt I would say that the devs have already incurred substantial technical debt by building this untestable event system. By untestable I mean, yes you have tests but they are filled with race conditions because of the timeouts (setImmediate is fine. Any other timeout should never be in a test case). So I could clarify it by saying your code base is non-deterministically testable. Regardless of terminology that's a really bad situation to be in.

So you are not adding technical debt when you suggest a refactor - you are admitting that technical debt already exists and is nearing a breaking point.

Whether it's politically advisable to admit the emperor wears no clothes or not is another question.

Regarding propagating updates: Promises and async/await worked great for me on the last large code base I led. The code is clean and easy to read and easy to (deterministically!) test.The idea of an event bus actually does not seem wrong to me but it is reliant on the basis that document updates can be independent of each other. You've apparently created a situation which they are not. A locking mechanism could solve that, this is the classic solution in parallelism. You can also combine the updates in one event, although the events will not be pure then. 
When you start decoupling using an event bus, I think it's good practice to decouple your tests too. Otherwise, your system isn't really fully decoupled :) If this seems unnecessary, then you're right. Maybe decoupling wasn't needed in the first place. 

Instead of User does action, test that the model should update, you could be testing that the event is emitted correctly when the user does an action. 

You could have subsequent test that makes sure that the model, given this event, will update in a certain way. 

When a programmer makes a change to the controller/user-facing layer, all they have to do is make sure the event is still being emitted. When a change is made to the model layer, then they just make sure the model tests are acting correctly. In reality, when adding/updating a feature, we make changes to the controller and model layer simultaneously. In those cases it's annoying to have to edit two tests instead of one. But in refactoring and reusing code, this separation can be really useful. And it also solves the issue of flakey tests with long timeouts :)

In the future, if you end up using your event bus to coordinate multiple services, your tests that make sure that the event is emitted are still relevant, and model update tests would belong in that separate service. 

Your current design does have it's merits, if you approach it from a DDD standpoint. It's nice to be able to track business actions in the form of events. Assuming you log them, it would be easy to do analytics on top of user behaviours. But what I don't like is that I assume each model reacts to an event on it's own. It's hard to change business logic when a business action is distributed asynchronously across a lot of things. For example, it may be the case that one model needs to read another model in order to perform correctly, but you have no guarantees on updates. You'll have to rely on the event definition, which can be a tough dependency to maintain. 


If I were to solve the initial problem without an event bus, I would keep it more or less straightforward using promises or async/await or callbacks. I would make a separate module encapsulating the business action that requires the change to both model A and B and make them happen in parallel or one after another or something. Business actions are where your code changes the most, so it's nice to keep the models simpler and do these things in their own module. It would essentially be one public function, maybe with private functions to keep the code clean if it's a big one. "
2017-06-06 14:59:00;Debugging remote Node.js application running in a Docker container - advanced guide;I wonder if it's working now that `--debug` has been deprecated in favor of `--inspect`Any IntelliJ 15 steps that can be added to the article ?
2017-06-13 20:28:19;TestCafe v0.16.0 is here with TypeScript support and seamless testing in headless Chrome and device emulator 🚀🚀;So easy to test with this. Awesome.
2017-06-13 18:22:38;Node 8 and npm@5 release: What's new?;"> Oh yeah! npm is now faster than Yarn!

Not always. It is on par with Yarn, but depending on your project, yarn may be faster or npm may be faster.> npm cache commands have been rewritten and don’t really work anything like they did before. (#15666)

Balls of steel."
2017-06-13 17:44:57;How to handle street address data?;"geocode, using a service like google maps or something similar. store lag/lng, do harvestine formula for distance. Postgres has an extension called `earthdistance` which is perfect for this kind of thing.  You'll need to build your queries more manually, using something like `knex`, but it's not too difficult.

As /u/angryCutlet pointed out, you'll need to get the latitude & longitude of the addresses, and save those in your table.

Here's a good blog post explaining how to use it.
http://tapoueh.org/blog/2013/08/how-far-is-the-nearest-pub/"
2017-06-13 15:29:19;ODBC Drivers;"Would these work?  

MS SQL: http://tediousjs.github.io/tedious/  
PostgreSQL: https://www.npmjs.com/package/pgto clarify for future readers, an odbc driver only works with a single database system.  you can have just about as many data sources configured using as many different drivers as you want.  in node you just need a separate database object for each source you want to simultaneously connect to, even if they are all the same driver.Check out Knex. It supports both.check https://github.com/typeorm/typeorm"
2017-06-13 15:10:06;Here’s what you need to know about npm 5 - Pusher Blog;Interesting! Just found your share. Thank you!
2017-06-20 23:16:40;Newbie - req.body issues;"Do you have body-parser hooked up correctly?Do you have your Content-Type HTTP header set to ""application/json""?

I frequently forget to set this header when troubleshooting.You need to add the [body-parser](https://github.com/expressjs/body-parser/) middleware. Without it your req.body will just be in the form of a string. I had the same problem once. Express app was already using body parser and json parser as well. For the love of god I couldn't figure out wtf was wrong. It took me couple of days to figure out that somewhere in the code base someone had limited the *content-length* http header. 

Do check http headers properly. You never know what's going to bite you."
2017-06-20 20:38:59;What do you think of my library?;"> Would you use it?
No. 

> Why?
I like the fact that express is light, it allows me to easily adapt it to my needs. Adding/removing middleware is so straightforward that I don’t need another dependency just to include some default stuff I could easily do myself. I made something similar but terser for restify.  No one uses it.

    const web = require('shortrest')(8099);
 
    web.get('/echo/:name', (req, res) => {res.send(req.params)}); Is this attempting to replace express middleware? https://expressjs.com/"
2017-06-20 20:09:35;ADD LICENSES USING COMMAND LINE WITH NODEJS;
2017-06-20 18:19:39;Messenger Chatbot via NodeJS Help;
2017-06-20 17:55:28;Problems using socket connection for mysql calls.;
2017-06-27 23:28:02;[Video] How to Use Twilio Speech Recognition;
2017-06-27 22:04:10;How to build an image moderation system with Node.js;"Misleading title.  Written and posted by the company who will sell you the service required to do this, making this basically an ad. In the future, more transparency would be a better approach here:  ""We created a service to help you (blah blah), and here's how we built it."""
2017-06-27 20:21:52;Initializing Objects inside functions;"It's probably a poor practice to instantiate DocumentClient on every getRecord.  Especially if instantiating the document client is expensive / issues a request to AWS.

I would also recommend switching away from just exporting directly on module.exports and start using es6 classes."
2017-06-27 20:11:32;Today I published https://github.com/parro-it/keyboardevent-from-electron-accelerator, a module that take an Electron Accelerator and convert it to a derived Keyboard event.;"https://github.com/AdiChat/Infinite-tunnel/tree/master/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/a/aProbably worth pointing out what the heck an [electron accelerator](https://github.com/electron/electron/blob/master/docs/api/accelerator.md) is.

I've used electron for multiple projects, and I'd never seen that term before."
2017-06-27 19:40:36;Introduction to Redis + Node.js;
2017-07-04 23:25:20;TDD with Node/Express;"+1 for supertest.  Great route testing.I am not familiar with Jasmine but I use mocha for node. Unit.js and supertest. If I follow you correctly - are you trying to test drive your import statements?I'm currently following a MERN bootcamp, so I asked on of the mentors if I could start using unit testing. He told me if I wanted to do that, I just literally test every piece of code I write. Now that I look back at it, it seems kinda ridiculous. Thanks for me realize this though folks!What happens if you do `require('module-not-installed');`? It'll all blow up with a decent message so you'll know when it fails! I wouldn't really recommend writing specific code for this but just read the error messages as it's rare enough and clear enough not to warrant specific code.

In a project of mine I'm allowing several ways of including the same thing from the public API (tests run within the same folder):

    const router = require('.');
    it('loads the main router', () => {
      expect(router).toEqual(require('server').router);
      expect(router).toBe(require('server/router'));
    });

You can see it with a bit of context in here: https://github.com/franciscop/server/blob/master/router/unit.test.js#L18 . I am using Jest, which is a test runner for Jasmine.

However, unless in a really specific case like this where the path is actually important and/or for a library I'd recommend to ignore this and just read the error message. Another recommendation is to load all of your `require()` within the beginning of your file outside any function so you avoid any run-time error."
2017-07-04 19:33:46;Aleppo is utility functions written in JavaScript.;"Why not ramda or lodash?Looks like the date parts are also covered by moment.js

Not fully understanding the `doo` part, looks interesting."
2017-07-04 18:20:46;Any volunteers to help solve /r/changemyview's missing delta issue?;"> how hard can it be, Ill check out the code.....

     src/index.js -- 1087 lines 

> #nope

Lol, this thing is *terrible*I'd love to help, but I'm not touching that spaghetti with a ten foot pole. I don't want to disrespect the person who wrote this, but it's kind of a clusterfuck.

If anyone is going to rewrite it, let me know, I'll help."
2017-07-04 18:10:49;Learning: Point me in the right direction;"I like the following books and I feel as thought they'll help give you direction

https://www.amazon.ca/Node-js-Web-Development-David-Herron-ebook/dp/B01CGKAIX0/ref=sr_1_1?s=books&ie=UTF8&qid=1499197905&sr=1-1&keywords=Node.js+Web+Development+-+Third+Edition

https://www.amazon.ca/s/ref=nb_sb_noss?url=search-alias%3Dstripbooks&field-keywords=Node.Js+Design+Patterns+-+Second+EditionI'm a big fan of this course:
https://www.udemy.com/understand-nodejs/

He really takes the time to break things down and explain themI wrote this book for doing data stuff with Node, it has some intro to node stuff that you might find super useful. Quite short and full of examples.

https://mark-mccracken.gitbooks.io/using-node-for-cloud/content/

Let me know what you think"
2017-07-04 18:00:48;Web sockets don't send?;"Hi, I haven't analyzed nor executing your code but after a first lookup it seems you are using ""cluster"" mode, so you are creating different instances (processes) of your node program. Then, they do not share memory!!! You can use Redis to share data across processes."
2017-07-11 18:31:37;Node v8.1.4 (Current);
2017-07-11 18:31:37;Node v7.10.1 (Current);
2017-07-11 18:31:36;Node v6.11.1 (LTS);
2017-07-11 18:31:35;Node v4.8.4 (Maintenance);
2017-07-11 18:09:42;Introducing npx: an official npm package runner (available in npm@5.2.0);"> Have you ever run into a situation where you want to try some CLI tool, but it’s annoying to have to install a global just to run it once? npx is great for that, too. Calling npx <command> when <command> isn’t already in your $PATH will automatically install a package with that name from the npm registry for you, and invoke it.

So, basically if I want to attack npm users, I just need to squat a typo'd popular package and npm will automatically download and run a binary I specify, then wait.

***Fucking. Genius.***Is there a way to interrogate what script is actually being run?

For instance, `npx --which foobar` would print `./node_modules/path/to/foobar` and quit.How is this better than `npm install --save-dev package` and add a script line, then just run `npm run scriptName`?"
2017-07-18 23:45:51;How to build an express server to work with react?;Have your server host an authenticated API. Your frontend react app has to prove it has rights to the content before your server will cough it up via the API. Look into something like Passport.js.Try the next.js framework from zeit
2017-07-18 19:48:29;How one senior developer at Cars.com convinced the entire company to do a full migration to Node.js;"He did it on his own time, to prove a concept. The management loved it, and despite some roadblocks, it was very successful. The move allowed updates from a every few months schedule, to a daily one. > He promised his bosses he’d have the first page published using Node “within two weeks” of that initial meeting.

> “That was the stupidest answer I’ve ever given,” Mac told us with a laugh. “I wasn’t thinking about infrastructure, processes, security, and everything else we needed to do to get it working.”

> It took Mac and the team months to get everything in place.

Great article. Definitely can appreciate and I think we can all relate to the time estimation flaw. It's the hardest thing...Seven opening sentences, 5 of them have ""cars.com"" in them.

We get it, you SEO.

Update: 20 references in the whole article.Too much hype in this article for my liking. I would have liked a more thorough explanation of why the old stack did not work, how the new stack solved things, what things it did not solve and what new problems it created: build times and on-boarding JS devs cannot be the whole story. 

Could the problem not be solved by rebuilding the application in the same language? How much of the Java codebase is left and why? Did back-end devs resist to using a dynamic language? If so, could TypeScript help mitigate that pain?

Edit: it appears to me that the problem has little to do with language but more with poor application or platform architecture -- as is often the case.Awesome to hear. I did a similar effort a couple years ago myself."
2017-07-18 19:39:46;Can anyone tell books to learn Nodejs ?;"[Practical Node.js](https://www.amazon.com/Practical-Node-js-Building-Real-World-Scalable/dp/1430265957/ref=sr_1_4?s=books&ie=UTF8&qid=1500415620&sr=1-4&keywords=nodejs) is pretty good.

Heres the table of contents:

> Chapter 1: Setting up Node.js and Other Essentials
>
>Chapter 2: Using Express.js 4 to Create Node.js Web Apps
>
>Chapter 3: TDD and BDD for Node.js with Mocha
>
>Chapter 4: Template Engines: Jade and Handlebars 
>
>Chapter 5: Persistence with MongoDB and Mongoskin
>
>Chapter 6: Using Sessions and OAuth to Authorize and Authenticate Users in Node.js Apps
>
>Chapter 7: Boosting Your Node.js Data with the Mongoose ORM Library
>
>Chapter 8: Building Node.js REST API Servers with Express.js and Hapi
>
>Chapter 9: Real-Time Apps with WebSocket, Socket.IO, and DerbyJS 
>
>Chapter 10: Getting Node.js Apps Production Ready
>
>Chapter 11: Deploying Node.js Apps
>
>Chapter 12: Publishing Node.js Modules and Contributing to Open Source

It'll cover everything you will need to know to start building websites with node
Duno about any general books but is there anything in particular you would like to learn? Keep in mind that ""how to use nodejs"" is vague :))"
2017-07-18 16:48:14;Best and most reliable module for extracting a .tgz?;"""tar xzvf [filename]"" if you're on Linux.

Tar exists on MacOs as a command-line only tool (at least my install which includes dev tools).  I bet there are GUI tools as well but I can't vouch for any of them.

7zip will get the job done on Windows .I suggest whatever npm and yarn use.  I can't remember the name, but it's probably robust and bug-free.I always use https://github.com/mafintosh/gunzip-maybe with https://github.com/mafintosh/tar-fs - even guards against zip bombs; which is neat if you ever plan to unzip user content and don't want your server to crashNone of these modules work. Just going to loop through the tar command. Not even isaacs tar module works... pretty pathetic. Or even a shell script. "
2017-07-18 15:43:28;A set of best practices for JavaScript projects;
2017-07-25 23:09:15;Can I implement token based auth in a «cookie-like» way?;"First, by storing password I hope you meant a hashed password. Never store a users actual password. 

Second, it's fine to not use JWT. Personally, I prefer it and I store a JWT version in my database that is generated on first login. If I needed to invalidate a token I would bump that number up one. While this introduces a small amount of state to the token, it's useful on password resets to ensure a compromised user does not stay compromised. Also please note that expiration is built in to JWT. 

That all being said, servers existed for decades before JWT was a thing, so they're far from required. Do what feels comfortable for you that doesn't eliminate security best practices. Make a JWT based off of the user's ID, store it in a cookie and return it to the user in the http response. Check for the cookie on each request thereafter for authentication, matching it to a user ID. No need to store it in your database. Disadvantage is just more code needed when there isn't a point."
2017-07-25 22:56:28;Best way to access Sequelize models from another system?;"Make your data models a private moldule/package so you can require it easy. So you want server B to ask server A to talk to MySQL? 

It's possible if server A exposes an interface and server B consumes it, but it would be much less work to just copy your models over. E.g. HTTP routes

If you have an automated deploy system you could make sure they always get the same models too."
2017-07-25 22:23:55;How to Use Async/Await to Wait for forEach Loop to Complete Before Moving On;"If the order of promise execution is important, use normal *for of* loop with await. If the order isn't important, use *Promise.all* to fire all promises simultaneously.Write self-calling fn.

1. Define initial array
2. Define function with argument of an array
3. Iterate
4. make a async req
5. put **processFn** in callback
6. remove current item from an initial array
7. check if array is not empty
8. call function from step 2. with new array as argument inside callback

Yes, this is serial execution. Better method would be to send one request with all the arguments so they're processed on server.... :)"
2017-07-25 20:40:22;Writing funny stories with friends with Programmable Chat;
2017-07-25 20:15:30;Best practices for app with web and worker processes, and communicating background job results to client via socket.io?;
2017-08-01 23:53:05;Deploying containers so should I bother with `npm shrinkwrap`?;"It comes down to determinism. The semver matching in package.json is pretty variable, so a fresh install or npm update will update each module to the latest version, (and many other nested dependencies).

If your `Dockerfile` includes something like `COPY package.json` and `RUN npm install`, without clearing cache your image cache or building without cache, you won't get the new result (if you depend on a new version of a dep), and, if you do clear cache, you'll result in different `node_modules` between builds (which might break things arbitrarily).

With `npm-shrinkwrap.json`  (or, using npm5, `package-lock.json` which is basically the same thing), the build is far more deterministic and you can be sure even between a dev env and your containerized environment, you'll have the same contents in `node_modules` between builds and if you need to update something, youl'll update to specifically what you've defined."
2017-08-01 22:25:57;wuami - wu-tang name generator module;Now make a github.io page. =)
2017-08-01 20:43:32;how to add header values to readstream.on;
2017-08-01 20:03:22;Is there an easy way to run a blog within my existing Node app?;"you could use a templating engine like handlebars and make a simple blog loading content from your db.... it's simple and you can make it as you prefer...
managing your routes for example 
> yourdomain/blog/:category/:post-title

and use the url params (:category and :post-title) to make a query to the databaseYou could use Jekyll. Just generate the blog pages and serve them as static pages."
2017-08-01 17:57:02;Nightwatch.js - Write End-to-End tests in Node.js quickly and effortlessly that run against a Selenium/WebDriver server;
2017-08-08 20:19:03;Created My First Module Today (for assisting those of use who use AWS for email);
2017-08-08 18:14:04;Rawkit – Immediately Open Developer Tools When Running Node.js Apps;"I love you.nice 
Neat! Tho now that `chrome://inspect` exists, this is a tad situational"
2017-08-08 17:40:09;Any way to add timestamp to Nodemon?;If express app, just add console log on app's start event... Other than that... I don't know :(
2017-08-08 10:36:41;Learn regex the easy way;"I seriously just end up at https://regex101.com/ every. single. time.Great timing for me. Last night I wanted to create a solution to backup folders/files with ncp. ncp uses a regex to filter what you want and I thought to myself...after 15 years in the field maybe now is the time to learn some regex. 

Better late than never.Zero mention of the back tracking algorithms and catastrophic performance hits. 

Did I miss something or...?

Generally, if you have a problem and you are trying to solve it with Regex you now have two problems."
2017-08-08 08:53:16;Advice;https://medium.com/@will123195/continuous-deployment-with-aws-dokku-circleci-999b749151ed
2017-08-15 23:07:10;13-REST api with DELETE request and Mongoose;
2017-08-15 21:59:20;Node v8.4.0 (Current);Looks like http/2 is the biggest change. Native support will be nice on a LTS release. 
2017-08-15 19:25:56;Learn Nodejs by building 12 projects;
2017-08-15 17:21:06;My new AI project proudly powered by node;Can you give some details about the logic behind that?These pictures looks funny. 
2017-08-15 17:02:15;Bee-Queue v1.0: a simple, fast, robust job queue for Node.js, backed by Redis;
2017-08-22 21:09:29;Modern library for stitching several png images together?;I've used jimp and it worked for my needs (resizing, renaming with img properties).Mapnik 
2017-08-22 20:49:36;Node with React- Fullstack Web Development;Looks like a shill account that just links to paid courses. Spam.
2017-08-22 20:43:10;How are large companies running their nodejs infrastructure?;"http://pm2.keymetrics.io is pretty awesome for that.Not specific at all to Node but there's Kubernetes.We use docker containers on kubernetes in my shop.

We have some smaller efforts hosted directly using AWS services.  A beanstalk thing, some EC2 in ASGs, and a lambda or two.In our case (dozens of unique services, mostly written in Node), this works well:

[Docker](https://www.docker.com/) +
[Mesos](https://mesos.apache.org/) +
[Singularity](https://github.com/HubSpot/Singularity). 

All services register with a service discovery registry (built in-house, not unlike [Consul](https://www.consul.io/) )

Most of our apps are literally containers running

    node app.js

Deployments done by a REST API call to Singularity, specifying number of instances in a cluster

Ops team looks after Mesos + Singularity. Devs responsible for deployment and scaling of their own services[deleted]I am using pm2 in several MEAN projects over years now and didn't have any significant problems with that.Go Serverless, for example with aws lambda. Thats what I do currently after piling up complexity with  cluster, docker, compose, kubernetes and so on. Feels easy like 90s PHP again but scales like hell and is dirt cheap. If you're looking for something to manage it all for you then try elastic beanstalk in AWS. It will add instances as required and take care of all the load balancing, routing etc.Amazon ECS (Docker containers) running Node with Forever. You can do all of this work or, if your time is valuable, you can just use Heroku (which provides everything you mentioned out of the box and is supported / patched 24/7).AWS lambdas here.Full scale: consider kubernetes.io. If that's overkill and right now you're just looking for that`node server.js &`  replacement, consider something like systemd or upstart. IMHO the more archaic / closer to the OS, the better. I've never been a big fan of a Node.js process keeping a Node.js process alive. For my company, [Transloadit](https://transloadit.com), the following approach has been working well for us since 2009, running on clusters from 100-1500 VMs: http://kvz.io/blog/2009/12/15/run-nodejs-as-a-service-on-ubuntu-karmic/. tl;dr: upstart takes care of respawns, logging, and injecting root-owned secrets into a non-priviliged user running the process."
2017-08-22 20:18:22;Web Audio API - Building Note App with Angular + Node.js;
2017-08-22 20:05:14;Async/Await in JavaScript (Node Examples);
2017-08-29 22:20:22;Node.js CTC and TSC have been merged back together;"Complete timeline:

https://gist.github.com/balupton/d6531a2f48dba896a1bced86e8b1636c

(I am not the author of this gist, or related to its creation in any way)When I see something like what's happened with the NodeJS community, how can I even say that the technology has a healthy enough community to claim it will see continued support?You guys remember electronconf? When a double blind selection picked the best talks submitted, but the conference was cancelled when said double blind selection didn't pick a diversity ratio they were happy with? Remember that shit?  

What is wrong with this community? Can't we shut the hell up and get back to writing software?this is the dumbest shit ive ever seen in my lifePitchforks?! Again!? Cool.
From what I can tell, this has been in the works [for a while](https://mobile.twitter.com/mikeal/status/900037479843078144).

Dear Americans, why are your political and social issues leaking into tech I'm using!?!? Can we please just all be code writing and assembling machines!?

/*
I'm starting to think we have trust issues. Things are (inexplicably) moving fast without clarity on what has happened in the recent past (necessity for re-vote on Rod). I get that trolls exist on Reddit so i had to scan threads on HN where you have founders of cos. that actually use node. Found nothing but issues being raised.

Information is being disclosed -- by virtue of being open-source -- but it is definitely *NOT* being communicated.

I sympathize with the devs and core contribs involved - the barrage of answers being asked from them cannot be easy. But it is partially their own fault because process concerns flagged by ""the community"" on Rod's initial removal vote after Rod's published response, went unaddressed. And you are still marching on, perhaps with bias.

Off-topic:
If you must know my ""identity"": I'm a middle aged brown-skinned enterprise user who is liberal (but not ""militant liberal"" -- i'd vote for gay rights in my country but never for masked leftists beating people on the streets). I'm an atheist. Gender pronouns I use are him/her -- country of birth has 0 discourse on gender issues. I find Donald Trump repulsive and Hillary was pure evil, but I did like Bernie a lot. <3 the Obamas. I find Seth Myers talk show funnier than others. Am I now qualified to be taken seriously!? I ask because twitter feeds on node ""leaders"" are riddled with politics. I don't know if I need to belong to certain beliefs systems to be taken seriously (creators of yarn tell me if im leaving npm due to ideological issues, I'm not allowed to use yarn).

Currently using TypeScript with node. Due to lack of clarity on whether Rod experienced a fair arbitration, I'm on ""his side"". CoC changes appear rushed to protect people and are dubious, I don't believe CoCs belong in open-source projects. My favourite colour is blue.

Now logging out and off to write code at work.
*/[I think the damage has been done.](http://i.imgur.com/ks5AEdZ.png)Ramming through sweeping organisational changes in the middle of a crisis. That’s almost an admission of guilt on its own.

I would not be surprised with this whole thing ends up with Rod Vagg getting the boot, and any misdeeds by his detractors getting swept under the rug (how the hell can the people who announced a fork still be in a position of leadership in Node.js?).I don't even care anymore.  Just keep developing a good platform.https://github.com/nodejs/TSC/pull/327

Looks like they are also introducing rules to explicitly save the 2 serial harassers /u/node_in_peace exposed yesterday now that they have forced out RVagg. Disgusting.This whole shit makes me consider to switch to C# or Rust completely. I have enough of this socially correct, developer snowflakes in JS development.Nice.  This had been in the works for a while.  Glad to see Node's overly-complicated governance structure get simplified.  It was really unclear as to what the TSC and CTC were each supposed to be in charge of.Get these damn social justice warriors back in the gender studies departments where they belong.As long as the alt-left radicals get their way by stomping their feet, this will never end. 

In the spirit of Stalin - ""show me the man and i'll show you the crime""god this world is so fucked......[deleted]Haha aa hahaha. Haha.

Ha!fucking joke!"
2017-08-29 21:52:14;Why isn't my feed aggregator working?;"Hey! The problem is that you're calling asynchronous functions inside the foreach. You will want to wait until all those callbacks were called. Check out the 'async ' module on npm, it will help you with that!You've identified the problem -> you're mixing sync/async and the sync code returns data before the async events return. So I'm guess you're looking for a pattern?

I would just recommend using the async library. Something like async.each https://caolan.github.io/async/docs.html#each

Modify this to accept a callback instead of returning a value. Define your return array outside of the async.each and use the closure. Clear the array with each getData call. Execute the callback with the async.each error or the array of items. 

"
2017-08-29 21:17:49;What does the underscore in from of a property mean in NodeJS?;"It's a convention people use to indicate that the property should be considered ""private.""  That is to say, whatever created it is hoping that no outside code modifies the value.

The keyword is ""hoping"" because it's just a convention, not enforced by javascript at all.I tried looking it up but not surprisingly everything is about the underscore library on google. In a similar context for example I know that constructors in JavaScript start with a capital letter or const values are ALL CAPS.

Is there something similar going on here? Is this a more general rule i'm not aware of? I feel like this is an obvious question. Thank you in advance.

I'm pretty sure I'd get my question removed for be like an opinion question on stackoverflow. ;/See the Collaborator Guide for a detailed description
https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md#internal-vs-public-api

P.S. if you find a way to add this to the general docs, a PR would be much appreciated.I've been coding like 15 years, never used underscore in that manner. Have seen a lot of ppl do it, but it's not for me. And no need to use all caps for anything. Especially now that JavaScript has const."
2017-08-29 20:47:48;New version of the Express API versioning library (1.3.0) supports Accept header and custom function parsing;
2017-08-29 18:33:34;Collection of cool/useful ES6 Modules. Review, contribute, star, criticize...;"Each module in library can be independently included from each other. 

Key points:

1. sort that is significantly faster than lodash sort (and have nicer API)
2. toEnum implementation (and it's hard to find good implementation)
3. small promisfy && promisfy.all that returns native promises (in case you don't want to include huge libraries like Bluebird etc..)
4. deepFreeze that resolves issues/bugs popular deep-freeze library has
5. singular function that after is called can't be called again until it finishes with execution"
2017-09-05 23:29:24;Survey results: How software ecosystems deal with breaking changes;
2017-09-05 22:04:33;Do you use colons or dashes to prefix npm scripts?;"I use ( ͡° ͜ʖ ͡°) as a separator...

```
test( ͡° ͜ʖ ͡°)build
```I do everything with a colon, using it as more of a modifier.

    ""test"":  ""mocha test/**/*test.js"",
    ""debug:test"": ""DEBUG=app* npm test"",
    
etc with build, watch, whatever
 "
2017-09-05 20:54:19;Get to know the Actor Model;
2017-09-05 20:04:52;Node v6.11.3 (LTS);
2017-09-05 19:40:02;My middleware for capturing & rendering stack trace context (with sourcemaps);Author here. Lately I have been working on a React codebase that requires server-side rendering and JSX. This means that server side codebase is transpiled by Babel/Webpack. Because of this any stack traces written to the console are hard to interpret. To improve this I wrote a middleware that captures errors and applies the available sourcemap. The middleware also renders a page displaying the stack trace (+ code snippets) and some additional runtime context. Let me know what you think.
2017-09-12 17:09:04;Should I transpile a library with Babel or TypeScript?;"[deleted]I think the key word is ""compatibility"". According to [these stats](https://semaphoreci.com/blog/2016/10/12/nodejs-versions-used-in-commercial-projects-2016-edition.html) there are still a lot of older versions out there, which do not support the shiny new features (e.g. [async/await](http://node.green/#ES2017-features-async-functions)). Babel and TS help you mitigate that problem for you.

Note: If you are publishing the library yourself, then including it into the package is actually the prefered method. See [Publishing](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html).[deleted]"
2017-09-12 15:51:42;Node v8.5.0 (Current);"They added experimental support for esm modules with "".mjs"" files"
2017-09-12 15:50:06;Nest 4 RELEASE is here! Node.js framework built on top of TypeScript & RxJS;
2017-09-12 14:54:03;Securing Node.js RESTful APIs with JSON Web Tokens;"A useful technique I've used in applications, beyond creating a middleware on the server that stores the piece of data encoded in the JWT on the request object (which is very useful), is creating a wrapper around my client-side HTTP request function that takes the JWT from localStorage (or wherever you are storing it) and automatically adds the header to your request. Using localStorage and jQuery as an example, you could do


    function makeAjaxCall(options) {
      options.headers = options.headers || {};
      options.headers['x-access-token'] = localStorage.getItem('x-access-token');
      return $.ajax(options);
    }


Then of course in your client-side login function store the `token` property of the response data from the endpoint using something like `localStorage.setItem('x-access-token', response.data.token)`

This method works with whatever client-side HTTP method you are using but if you are in fact using jQuery you might also look into Ajax interceptors to do the same thing I just described. I prefer writing my own wrapper altogether. Hope this helps someone!I have been using an `Authorization` header instead of `x-access-token` header. Something like

>Authorization: Bearer <jwt>

Is that not a good practice?"
2017-09-12 14:33:35;Node app hangs until enter pressed;"Do you have a minimal example of the source code that produces this behavior?One suggestion is to run your app using a process manager that runs it in the background. Get PM2.It's most likely powershell doing that. I have seen that for years and have no idea why it happensoh, I know why this happens, I goggled for ages to find it.
 
Buried deep in a forum thread...
 
In console window, right click icon, choose properties, then uncheck ""QuickEdit Mode""
 
This will disable this blocking edit behavior by console window.
 
hope that helps
"
2017-09-19 19:51:52;What things should I know as a professional NodeJS developer?;"I'd expect them to understand callbacks, promises, await/async, npm and package.json, express or koa, how the node thread operates and how to avoid blocking calls, and something like pm2 or nodemon. A templating language is also a bonus. Currently Nodejs as backend programming mostly used for Creating rest api and real time data [socket.io] . 
        For  rest api ,you've to learn any web application framework in nodejs like express,koa,hapi. In my opinion expressjs is good . So try to create sample project in  expressjs which will cover below things 
       1. Session management[eg. passportjs],
       2. Storing of Data [eg. mogoose]
       3. CRUD Operation
       4. Api authentication like oauth2
 
   And to learn socket.io create a sample chat app in nodejs.

  Learn commonly used libraries in nodejs like eg . async,request,underscore,nodemon,mysql,mongoose,redis,nodemailer etc. and some unit testing libraries eg. mocha
Firstly, try to answer the following question without google to decide a skill level:

1. What's the difference between process.nextTick and setImmediate?

2.  How can you read and inspect the memory usage of a Node.js process?

3.  What is the Call Stack?

4. What are the 3 file extensions that will be automatically tried by the require function?

5. When is it ok to use the file system *Sync methods?

6. What is the node-gyp package used for?


I've been doing node for several years now.  Biggest thing, and most radical change from other languages, is it's asynchronous nature and dealing with callbacks.  Understand the event loop and why code is not written in a synchronous way.  If you can grasp that, pretty much everything else is easy to figure out.I agree with the advice on learning the popular frameworks (express/koa/maybe kraken.js) and some of the more popular libraries. My short list to be familiar with would include:

* task.js (cooperative concurrency using generators);
* a decimal math library;
* immutable.js (efficient immutable data structures);
* lodash (functional-style utility library);
* JSDoc (JavaDoc-style documentation generator);
* json-safe-parse (fix problems with JSON.parse clobbering built-in methods);
* node-supervisor (or other watchdog service daemon);
* node-fibers (coroutine library for multiple call stacks in a thread);
* cluster (spawn workers to other CPU cores);
* Google's Closure compiler (static code analysis and optimizer);
* ESLint (and choose a style to work with -- AirBnB's is popular);
* benchmark.js (statistically-sound profiler, node also has a built-in profiler);
* passport.js (*defacto* express authentication middleware);
* moment.js (internationalization library - Microsoft has one called Globalize for strings, numbers, currency, dates, and percentages);
* socket.io (websockets library);
* commander (parse command-line options), also clear (term screen clear), clui (command-line spinners, etc.), chalk (colored term text);
* joi (validation library, you can create schemas for objects to ensure validation of key information);
* body-parser (express middleware to parse JSON response);
* compression (express middleware for response compression);
* gm (ImageMagick wrapper for image manipulation);
* mime-types;
* request (make external http requests);
* slug (slugify URL's);
* stripe (payment processor for Strip service);
* morgan (express middleware for HTTP request logging);
* nodemailer (SMTP client);
* nodemon (monitor script for dev environment);
* marked (fast Markdown parser);
* bcrypt (encryption library);
* shelljs (portable Windows/Linux/Mac unix shell commands e.g. rm);
* istanbul (code coverage tool);
* mocha / sinon / superagent (or whatever testing rig you prefer);
* nconf (hierarchical config manager);
* bunyan or winston (JSON logging libraries);
* minimatch or glob (globbing libraries);
* pm2 (production process manager with load balancer);
* cron or node-schedule (task schedulers using cron syntax);
* toobusy (return a ""Server Too Busy"" response if event queue gets too long);
* i18next (internationalization library);
* needle or restler (http client libraries);
* helmet (express middleware to set group of HTTP headers);
* multer (handle multipart and form data for file uploads);
* stampit (factory library);
* trait.js (traits library);
* stately.js or machina (state machine libraries);
* sprintf.js (if you like C-style sprintf statements);
* core-decorators or reflect-metadata (if you like Java-style annotations);
* dotenv (load environmental variables from a `.env` file);
* nar (archive file, you can embed node itself and all dependencies in a distributable executable);
* nightwatch.js (end-to-end testing using Selenium).

I know that's a bunch, but given *almost* no stdlib in js, it is what it is. I'd also understand the issues that node package management presents, i.e. the whole ecosystem going down after a string-padding library is delisted (look at what nodesource is doing). 

If you have some background beyond your 2 years of Django experience, I'd dive in and do a node native module in C++. The Native API (N-API) is much easier to work with than doing C extensions in Ruby or PHP, because you're not mucking in the internals of the language and having to generate new parser tokens and the like. The V8 javascript engine and libuv (the event loop library) sit external to your N-API code, and you can get a really good feel for how everything fits together.

Learn the Node core module APIs, like `fs`, `process`, etc.

Good luck!To use Yarn over NPM"
2017-09-19 18:01:01;trying to debug node.js module in chrome dev tools;
2017-09-19 14:49:06;Deploying node apps - just use package managers or something like docker?;"Ad 2) that's how it should be. You've probably just encountered some unfortunate version mismatch or system related problem (as you're guessing with the database).

Ad 1) Maybe take a look at now.sh (it's a bit unstable though, since they're new, and they also support docker). It's also pretty common to use 3rd party database (i.e. mlab) in this world as opposed to PHP, currently my approach for personal (and in some cases professional) projects is to write just the app code in node, then use mlab for database and AWS or whatever service for other stuff I might need need.

But, if you want to have it all set up on the server side (including database and all), then I definitely recommend using Docker. Docker is actually pretty easy to use for Node (much easier than PHP I'd say).Use zeit’s now. First off great job getting a client if you don't know how to handle deployments, or know how a repo should work. Second the least headache will come from using docker. If you can't figure out how to  use a repo do you expect your client to? Using docker ensure your client and you are using the same production setup. Third your mongo database should not affect your application. If it is you have setup the database connection incorrectly. If it's setup correctly you should be able to deploy the app any where and access the database. Assuming that you setup the permissions correctly. 

TL;DR docker is the best way to deploy your app so that other people end up with the same working version. "
2017-09-19 14:22:35;[Feedback Request] Released My First Production Node App;"Any feedback would be much appreciated!

My goal is to create a community and social network for developers and software engineers that’s accessible and usable by anyone, whether they’re learning to code for the first time or are a senior engineer. I’ve noticed three things that I believe are needed:

1. Build a centralized community. GitHub is great for micro-communities around projects, but it primarily focuses on code which makes it difficult for individuals to create an identity or feel connected. Aside from GitHub, there isn’t anything that I’ve found that’s built on around the things that are important to us. I want to make it easy for people to collaborate and connect with people that have similar interests. 

2. The resources and important information for software engineers is spread across the internet which requires a tedious amount of browsing - Twitter, Medium, personal websites/blogs, Hacker News, Reddit, etc. I think we really need a platform optimized for us.

3. There isn’t a streamlined manner to display projects or portfolios. This can sometimes be a barrier for new engineers as well.

I had a ton of fun getting to build gitconnected in technologies that I’m very interested in, and I hope that other’s can find value in my work. There’s plenty of features that I plan to add if people like it and believe in the vision. Let me know what you think or you have any questions!"
2017-09-19 11:00:27;Node.js HTTP recording proxy for CI environments;
