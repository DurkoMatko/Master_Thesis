date;discussion;issue_comment;subreddit
2015-08-11 23:48:07;"Node repo is officially io.js I'm so lost on this whole IO.js/Node.js stuff. Every time something comes out about either one, I'm just left wondering ""but... I thought... but? ah just screw the whole thing"".  The github readme hasn't been updated yet. This has been the plan, the starting point for the next major version of node will be based on the work done by the io.js fork. There is no name change, just the repo and starting point.

Apparently. Yep still confused.

Edit: [Read This](https://github.com/nodejs/node/issues/2327) [deleted] CONFUSED I'm going to continue to use node.js until morale improves. No blog post or anything as far as I can see. I kinda think the io.js name makes more sense, but going to be hard to stop calling it Node.  So no more node.js?  MEAI stack just doesn't have the same ring... I think they just haven't got around to change the readme.md yet, because it doesn't really makes sense to host io js on nodejs/node github repo. This is the node.js repo: https://github.com/joyent/node No, node is still node, they are just in the process of finishing the convergence work and eliminating the need for iojs repo if the node repo is officially io.js, why does nodejs.org download page link to the joyent/node repo? We need to wait till the new version of node?  Will iojs be doing rapid development? That was one thing I hated about rails...by the time I built my prototype I had already gone through 5 upgrades and then 3.x came out. I gave up at that point and went back to Perl and PHP. ";True;node
2015-09-03 23:16:44;"When is the new Node.js site going to link to a v4.x download and have you guys had any issues upgrading straight to that from v10.x? Looks like they are still wrapping up pull requests right now. I'd expect a late publish today or maybe tomorrow at this point. 

https://github.com/nodejs/node/issues/2522

Regarding upgrading... That's a loaded question. Too many variables (literally) to give an answer to that. 

*Edit:* Postponed until Monday.  [deleted] I'm most curious how long it will take packages on npm to be tested and published with fixes. I'm curious as to what new features there will be..

edit: I'm guessing I could just compare io and node. ";True;node
2015-09-12 07:17:51;We need a stickied thread for confirming what libs work and what don't with node 4.0. https://github.com/nodejs/node/issues/2798 Just look at the Travis (or similar) badge on the repo. ;True;node
2015-10-06 09:32:04;"Why ES6 Has Classes Does not justify the 'why' part.

> The answer is that classes and inheritance are core aspects of JavaScript development and there is a standard way to do them in ES6 using the class and extends keywords.

Needs examples and more reasoning. ...What is this even? What are you even on about? 

The concept of a class and implementation of classes in Javascript are two completely different things. You've literally made no valid points for the *class* keyword which is being introduced in ES6.

If we look at TypeScript's transpilation of the class keyword, we can see that classes are basically closures that return a user-defined object type.

```
var Car = (function () {
    function Car() {
    }
    return Car;
})();
```

One of the biggest arguments against ES6 classes are that it's just syntactical sugar around basic JavaScript patterns. You haven't mentioned this at all. In fact, the more I read your page the worse it gets. What does React.js have anything to do this JavaScript classes? Why did you even make this page?

**Edit:** if this isn't enough, you went and [opened a GitHub issue](https://github.com/nodejs/node/issues/3209) on the Node.js repo that directly contradicts the points made in this article. Idk if anyone else feels this way, but right now I believe a big solid **fuck off** is warranted. We already have enough noise in the Node.js community. I think your point is that where there were once many ways to make a JavaScript class-like object, there is now one preferred way.  It is a valid point but somewhat obscured by the rhetorical voice you employ in this story.  I would suggest you rewrite your argument a little.  Just a kind suggestion.  If you do please consider dropping me a note here: https://github.com/Hypercubed/javascript-the-esoteric-parts ";True;node
2015-11-29 13:36:26;"Node.js limit ram usage Sounds like you need to rewrite your web scrapper................. from: https://github.com/nodejs/node/issues/3370
Your app will crash as soon as you hit 256mb when using `--max-old-space-size=256`

One thing to do would be to let your app crash and use `pm2` to restart it.
You could also use a queue (ie. RabbitMq) and having two processes:

* webserver that push to the queue
* worker that you let crash when memory consuption got over a certain level First, to limit it, use `ulimit`.

However, what you probably want to do is make sure that your task fits in memory -- I suspect you're retaining everything, and nothing is garbage collected. Time to take an incremental approach to whatever you're doing, whatever unit of increment makes sense (document at a time, or a streaming parser, or whatever) Your issue here seems more like a memory leak due to a bug in your code. Try using [heapdump](https://github.com/bnoordhuis/node-heapdump) to get a better idea of what in your application is using so much memory. Its readme should give you a good idea of how to use it. ";True;node
2016-06-25 18:21:39;"I'm new to node and I cant get npm to work when i install node.js. Any suggestions? Please post your command line (input and output) and the contents of your PATH variable. 

But for the long term I'd strongly recommend not working in Node on Windows. Having done both, Linux is far better. I started development in Windows. I wouldn't go back. 

Get VirtualBox, install CentOS 7 or something else.  This is the equivalent of ""my car is making a noise, can you fix it?""

Try following the instructions provided in this link:  
https://github.com/nodejs/node/issues/2814 Am on Windows 10 and never had problems with it. So npmb-v isn't working and you added the new path variable to the npm directory in AppData or let the node.exe don't for you? I have to use a different user account on my windows machine.  npm doesn't work on my main account but no problems on my ""node account"".

I first wrote windows drivers for NT in 1993.  Very comfortable in the registry, file system, and monitoring access of resources when I execute npm.  And I still can't figure out why npm doesn't work in one account but works fine in the other.  Same resource access.  Same permissions on resources.  etc. im gonna guestimate and say that its something to do with your paths variable. On win10, no problems whatsoever I'm on Windows 10 and haven't had any issues. Update: So, I'm still having the issues I was having with my Windows npm, no change there. I decided to try node on Linux Unbuntu to see if I'd have any luck with that and i did. But, I started having a similar issue with the Unbuntu npm. At this point I'm pretty sure its a path issue. npm is a pain on windows.

Did you install the prerequisites here: https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#prerequisites

There is also this issue that has some useful info at the bottom of it.
https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245

 ";True;node
2016-08-29 06:09:20;"Protecting in-memory secrets? Can you give a bit more details about what your server does ? 

It's usually safe to store a secret in your server memory as long as the access to the server is restricted and you don't have blatant security issues.   1) if this password is *really* secure, limit the amount of things that your application does to limit the *attack area* for stealing the password.  Don't make your app both a web server *and* a database backup tool... just do one job.

2) Don't set the password via an ENVIRONMENT variable... other applications can read it then.  If you do need to set it via ENV, ensure that only this one app can run as this user, and only this one user can read the ENV (OS specific)

3) Be sure to zero-out your memory.  If you are a Bank, or other *REALLY SECURE* product, read https://github.com/nodejs/node/issues/4660 and learn about how non-random memory access can both read and write previously used data into and out of ram.  As long as you're not using eval on code from the user or giving users access to a debugger connected to the server, then you shouldn't worry about that.  Unsure why it's downvoted to zero here - it's a legitimate question ";True;node
2016-09-21 21:19:16;"Please try a new ""--inspect"" command-line switch I recommend [node-nightly](https://github.com/hemanth/node-nightly) to anyone looking to give this a go. Just tested it and ran --inspect (and --harmony to try async/await!) and it all looks good! Hi,

I posted one bug that I have in Windows. The console doesn't seem to work unless I change the websocket in the url from localhost to 127.0.0.1


https://github.com/nodejs/node/issues/9382 ";True;node
2017-01-24 02:05:41;"How to send an HTTP response (for example using Express), when a ""unhandledRejection"" promise error occures? Just don't let things get to the global exception handler. 

The idea of the global handler is that things have gotten to a point where something has gotten out of control. You are now in a situation that your code doesn't know how to handle. You should log the exception that occurred. If it's serious enough, maybe you need to consider calling process.exit and letting your process manger start up a new process (you are using a process manager right. Pm2, docker, cloudfoundry, something). 

The purpose of the exception handler is for you to log out the exception somewhere and then not let that happen again.  Just make sure the rejection doesn't bubble back up out of the request. It's easy if you use async/await:

    app.get('/xyz', (req, res, next) => {
      Promise.resolve().then(async () => {
        const x = await y(req.query.something);

        res.status(200).send({
          x,
        });
      }).catch(error => next(error)); // or do something else to handle the rejection...
    }); You might want to use [express' error handler](https://expressjs.com/en/guide/error-handling.html) instead of `process.on('unhandledRejection', ...)`

    app.use(function (err, req, res, next) {
      console.error(""Unhandled Rejection"", err.stack);
      res.send(500).send(""Unknown Error"");
    }); This was sort of the what node domains: https://nodejs.org/api/domain.html and ""zones"" were trying to solve with async code. 
 I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/rcbredditbot] [How to send an HTTP response (for example using Express), when a ""unhandledRejection"" promise error occures?](https://np.reddit.com/r/RCBRedditBot/comments/5ptjla/how_to_send_an_http_response_for_example_using/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot) One possible option is to create a middleware that adds and removes all requests from a set. Then on that error, you could loop through that set and sent the 500. That said, I'm pretty sure you'll end up in a loop of a socket being dead, causing an error, which you try to write a 500 to, which is a dead socket, so it throws an error... Some interesting links I found, if it can help someone one day :

http://madole.xyz/error-handling-in-express-with-async-await-routes/

https://medium.com/@yamalight/danger-of-using-async-await-in-es7-8006e3eb7efb#.5qeg8lqoh

http://stackoverflow.com/questions/41349331/is-there-a-way-to-wrap-an-await-async-try-catch-block-to-every-function

https://github.com/strongloop/zone  
https://github.com/strongloop/zone/blob/master/examples.md

https://github.com/CrabDude/trycatch

EDIT :

Another must read : https://github.com/nodejs/node/issues/66

I slowly realized that there is currenty *no* proper way of dealing with unhandled promise rejections in Node other than restart the server... Which sucks a lot, in opinion. For example, this can lead to DOS attacks... Have a look at the very end of this video : https://www.youtube.com/watch?v=BoyLVxyl8dc .
 ";True;node
2017-06-08 14:23:20;"Node v8.1.0 released Isn't it without the `v` now? For those waiting for V8 5.9: https://github.com/nodejs/node/pull/13515 Seems to have broken npm init.

Edit: https://github.com/nodejs/node/issues/13557 So I,m still new with Node.js.

I'm working on a new project, should I update from 8.0.0 to 8.1.0 right away?

And once in production should I keep it up to date? Or if it works let it that way.

Thanks! ";True;node
