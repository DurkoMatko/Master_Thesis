date;submission_text;comments_text;issue_comment;subreddit
2013-02-03 19:37:37;fs-extra: Drop in replacement for fs. Adds a few extra file system methods.;"Hi, module author here.

I wanted to share this not because it's new or novel. But because I'm interested in getting the community's feedback. Particularly on the section ""Roadmap"". 

This is my most depended upon module (https://npmjs.org/package/fs-extra) so I thought it made sense to solicit feedback from the community to help guide it in the right direction.I dislike these kinds of utility grab bags of functionality.

1. It's difficult to know what is in them so it isn't obvious from the `npm search` results that your particular module has whatever it is that I'm looking for when I go to search.

2. Big packages with lots of methods are much more work because there is much more surface area for bugs. This is another issue of focus.

3. Versioning for downstream dependencies is much harder since it's not always clear which function changed in which particular version and when it's safe to bump the version. You might not even be using the function that caused the major or minor version to increment so to upgrade that package dependency requires a careful upstream analysis of the changes. It's much nicer for packages that depend on your modules when each piece of separable functionality is made separate since the versioning is independent too.

I like it much better when these morsels of functionality like cross-platform `rm -rf` are split out into entirely separate modules with entirely independent documentation and tests. It's much easier to contribute patches to tiny projects with narrow scope than sprawling packages with no clearly defined limits. With tiny modules you also avoid the constant turf wars and bike shedding about which functions belong and which functions don't belong. It's something of a historical mistake that the fs module is as large as it is, as the emphasis in the node community and core developed has turned largely towards highly focused tiny pieces.

Here's a relevant discussion that erupted months ago (edit: and I see is linked to in the fs-extra readme) with one of my modules with some more concrete examples and reasons for preferring small modules to large utility-style ones:
https://github.com/substack/node-mkdirp/issues/17

And just for fun [hoarders](https://npmjs.org/package/hoarders) is the utility grab bag idea taken to its most comple logical extreme.regarding `createFile`, maybe liken the operation to shell `mkdir -p $basedir && touch $filename` in your docs?

I don't like the naming of `remove` - it's a bit too generous.  Perhaps something a bit more strongly worded, like `purgePath`?  You need to imply that it's a recursive delete, after all, and that it should be used with **utmost caution**.";"I dislike these kinds of utility grab bags of functionality.

1. It's difficult to know what is in them so it isn't obvious from the `npm search` results that your particular module has whatever it is that I'm looking for when I go to search.

2. Big packages with lots of methods are much more work because there is much more surface area for bugs. This is another issue of focus.

3. Versioning for downstream dependencies is much harder since it's not always clear which function changed in which particular version and when it's safe to bump the version. You might not even be using the function that caused the major or minor version to increment so to upgrade that package dependency requires a careful upstream analysis of the changes. It's much nicer for packages that depend on your modules when each piece of separable functionality is made separate since the versioning is independent too.

I like it much better when these morsels of functionality like cross-platform `rm -rf` are split out into entirely separate modules with entirely independent documentation and tests. It's much easier to contribute patches to tiny projects with narrow scope than sprawling packages with no clearly defined limits. With tiny modules you also avoid the constant turf wars and bike shedding about which functions belong and which functions don't belong. It's something of a historical mistake that the fs module is as large as it is, as the emphasis in the node community and core developed has turned largely towards highly focused tiny pieces.

Here's a relevant discussion that erupted months ago (edit: and I see is linked to in the fs-extra readme) with one of my modules with some more concrete examples and reasons for preferring small modules to large utility-style ones:
https://github.com/substack/node-mkdirp/issues/17

And just for fun [hoarders](https://npmjs.org/package/hoarders) is the utility grab bag idea taken to its most comple logical extreme.";node
2013-03-10 21:40:57;Tracking down a memory leak in Node.js 0.8 and Socket.IO;"For another fun resource-murdering bug, use socket.io with redis.  It has issues with adding way too many subscribers, causing huge perf problems once you hit enough concurrent clients.

edit: for reference: https://github.com/LearnBoost/socket.io/issues/862#issuecomment-8978801

I may be off in my description of the bug. Great post.  How did you generate that first time-series graph?  Manually from multiple heap dumps?  Or something trickier?I was just looking at your issue last week.  Thanks for digging into this more and providing a great detailed analysis.  Socket.IO is powerful, but given a little more time to mature and work out kinks like this, I expect performance to increase drastically in the near future.

I hope I have time to dig into this issue soon:
https://github.com/LearnBoost/socket.io/issues/1148A great alternative to socket.io is sock.js http://sockjs.org I've been using it in production now for a few weeks on http://worldofcardgames.com with no issues. It's MUCH lighter-weight than socket.io";"I was just looking at your issue last week.  Thanks for digging into this more and providing a great detailed analysis.  Socket.IO is powerful, but given a little more time to mature and work out kinks like this, I expect performance to increase drastically in the near future.

I hope I have time to dig into this issue soon:
https://github.com/LearnBoost/socket.io/issues/1148";node
2013-04-12 09:29:39;exports vs module.exports in node.js;"exports === module.exports  
typeof exports === 'object'
*Wrong.*

``module.exports`` and ``exports`` *are* the same thing, in the sense that when Node.js starts it creates an object that they both reference, but they are *different* in the sense that they are two separate variables that point to the same value.

If you add properties to the object they both reference, they both can see it, but when you *change the very thing one of them is pointing at*, only that variable can see it.

    ASCII ART EXPLAINING POINTERS IN JAVASCRIPT
     
    On creation, they point at the same object
    
    module.exports --> [object]
                        /
    exports -----------/
    
    Add a property to that object, they both see it.
    
    module.exports.foo = ""bar"";
    
    module.exports --> [object].foo -> ""bar""
                          /
    exports -------------/
    
    Totally reassign that object, they see different values.
    
    exports = SomeClass;
    
    module.exports --> [object].foo -> ""bar""
    
    exports --> SomeClass;
    
    Node.js's *module* system uses whatever is attached to module.
    
    exports is just a shorthand (that perhaps should never have been)

That last solution at the end is bogus, too. The simplest solution is just *forget ``exports`` ever existed, only use ``module.exports``.*you guys are over complicating things. easiest to understand it as a closure.

https://github.com/joyent/node/issues/5228#issuecomment-15991136";"you guys are over complicating things. easiest to understand it as a closure.

https://github.com/joyent/node/issues/5228#issuecomment-15991136";node
2013-04-20 11:52:37;SeriousJS (very alpha) - An alternative to Coffee-Script with an emphasis on managing larger projects and debugging;"> Won't compile with Coffee-Script, despite making complete visual sense.

Author needs to learn about [line continuations](https://github.com/jashkenas/coffee-script/issues/966). Just like Ruby. I think any whitespace aware language will have them. 

> The generated code's line numbers don't match up with the source. This makes debugging pretty difficult sometimes

I think this was addressed in 1.6, wasn't it? 

> Functions are lambdas:

>  (a, b) -> a + b


I don't see how coffee doesn't have this already: 

> coffee> f = (a,b) -> a+b

>[Function]

>coffee> f(2,5)

>7

>coffee> 
";"> Won't compile with Coffee-Script, despite making complete visual sense.

Author needs to learn about [line continuations](https://github.com/jashkenas/coffee-script/issues/966). Just like Ruby. I think any whitespace aware language will have them. 

> The generated code's line numbers don't match up with the source. This makes debugging pretty difficult sometimes

I think this was addressed in 1.6, wasn't it? 

> Functions are lambdas:

>  (a, b) -> a + b


I don't see how coffee doesn't have this already: 

> coffee> f = (a,b) -> a+b

>[Function]

>coffee> f(2,5)

>7

>coffee> 
";node
2013-09-06 23:26:58;Do Not Use bodyParser with Express.js;"For most of my apps, the only data I really ever need from a POST is going to be in json format so the json middleware is enough for me.

But I can't even remember the last time I've seen ANY of the example apps or tutorials that people post on here and in /r/webdev for express use anything other than bodyParser. Random - Even though the guy who maintains express, and many other projects, must be EXTREMELY busy, I once dropped him an e-mail and he responded same day. Back when I e-mailed him I was a bit of a newb and didn't expect a response at all. I know it's a bind of a grand assertion to make... but if someone like that answers an e-mail from some random newb (which was obvious based on my question) I'm gonna go ahead and assume he's a great guy.,I've seen /tmp directories getting out of hand in a variety of environments, this problem is common and isn't confined to Express.  It's a good idea to have some sort of scheduled/active maintenance of /tmp to ensure it doesn't get out of hand.

What are the options here?  At the last place I worked they had a cron job that ran to clean up old files.  Is there not a better way to do this?  Maybe a file system driver for fuse that could do this transparently would be cool - but probably needless complicates things.

Out of interest, what's your solution?  Presumably clean up the temp files properly if a move doesn't take place.  Have you made a merge request?The article author does have a point about TJ being super busy. He has pretty much abandoned Kue. Now that he is working on Koa I wonder if he will stop working on express. I pointed out this aaaages ago on GitHub:

https://github.com/visionmedia/express/issues/1673

And since then, there is a plan in the works to change the default behaviour of the bodyParser:

https://github.com/senchalabs/connect/issues/871

However, as TJ rightly points out, this is a fairly standard way of operating; it's just that it should have been made clearer in the documentation and examples.Very good tot know. This gives me a good excuse to dump bodyParser. I never liked that it parsed the request body prematurely based on the content type of the request. This can cause major headaches when you want to stream data directly to somewhere else. If the bodyparser is enabled and the user sends a json file, the bodyparser will use the request body to parse the json. Once the request had reached an endpoint (app.post) the endpoint cannot get to its data anymore.

The alternatives for multipart also sound much better, since they're streamable. Maybe that should become the standard for express?Is this really a vulnerability? I think it's working as designed.

It looks like he's basically saying the problem is in node formidable, which is a module that handles forms and **file uploads**. The temp files that he's seeing are most likely the uploaded files. Probably why the maintainer hasn't responded.

Edit: File handling is not within the scope of Formidable, its scope is to handle forms and uploads. The maintainer has no clue how you want to handle the files and doesn't care.

Basically it seems like this post is complaining that this module has an open output pipe that's leaking because it's not connected to a kitchen sink when the pipe could also be used for a water fountain.I'm not half as disappointed that there's a vulnerability in there as I am with the amount of people giving TJ nonconstructive feedback/neckbeardrage on Twitter.Its a temp file in a temp directory.  So what if he doesn't delete it?

After ALL of this time has ANYONE else ever actually had a security problem related to that?  No.

Its not a security problem.  If you have a bunch of people uploading files then you may need a cron to delete temp files.  So what.

That's not a security vulnerability or a reason to stop using bodyParser.  If someone floods your server with enough data to eat your entire hard disk then you have a problem regardless of temp files.";"I pointed out this aaaages ago on GitHub:

https://github.com/visionmedia/express/issues/1673

And since then, there is a plan in the works to change the default behaviour of the bodyParser:

https://github.com/senchalabs/connect/issues/871

However, as TJ rightly points out, this is a fairly standard way of operating; it's just that it should have been made clearer in the documentation and examples.";node
2013-12-19 03:49:16;There is no way to throttle a websocket in node, correct?;"You could create a processing queue, but if you're receiving more packets than you can handle, eventually the queue is gonna fill up.  Throttling isn't going to solve the problem, because then the packets will just back up in a different place.

I would suggest that you start tracking how many messages you receive per second and start dropping packets once you go over a threshold that you cant process.

If that isn't an option... Get a faster database.

Also, it used to be that twitter firehose had a way of capping the maximum number of messages it would send you per second.  Been a while since I used it tho.Can't you just push all the requests to redis as they come in and then do all the data processing and inserts into the slower databases via a separate background process (or several processes/threads) and also do the database inserts in bulk rather than one by one?You can pause -- or have the websocket server not read -- the low-level stream.First of all keep a persistant connection to the database, this will reduce delays there. Next you can thread the workers to help with any large load. Otherwise i would expect that you would be good.Good question.  I googled it some.  First, I didn't know there was anything such as a Twitter firehose, which apparently is a stream of every single tweet on the planet?  Very interesting technical problem.  Not the least bit trivial.

https://github.com/faye/faye-websocket-node/issues/15  Towards the end they say they fixed it.

I think this is the related module from further on in dev, and someone talking about another related issue: https://github.com/faye/websocket-driver-node/issues/3

But if you throttle consuming the websocket, aren't you still going to have a huge backlog to process?  

I think a queue is a good idea.  Also pipelining.  I mean, if your database is not the fastest, maybe try sending a bunch of inserts at a time, rather than one at a time.

Or use a faster database.  Or partition the tweets somehow and use multiple databases.

Or filter your twitter stream more?

My instinct is that it is best to avoid messing with the websocket level and handle it at a higher level because I think the road you are going down is going to have some interesting details but not be an efficient way to solve your problem in terms of developer time or code re-use down the line.

You could also take a look at http://datasift.com/ and http://gnip.com/ which might be a more convenient way to solve your business problem than directly accessing the firehose.

Have you done any testing with a real twitter stream and real database?  How much data is actually being sent down the hose on average? https://dev.twitter.com/discussions/7892  According to this it could be like 400GB of data per day for the full stream.  Or are you talking about spritzer or gardenose?

I think you pretty much have to filter out a lot of the data or aggregate it or shard it somehow.  Seems like too much data to store and keep querying.

What are you doing with the firehose data?

Before saving the data, I would just verify that you could process that amount of data in any way in memory.   I mean, is it even possible for one Node process to distribute that amount of data to a cluster of other servers for processing?   Would it be fast enough to handle the full firehose?

If its the full firehose I think your first problem might be bandwidth and hardware.
";"Good question.  I googled it some.  First, I didn't know there was anything such as a Twitter firehose, which apparently is a stream of every single tweet on the planet?  Very interesting technical problem.  Not the least bit trivial.

https://github.com/faye/faye-websocket-node/issues/15  Towards the end they say they fixed it.

I think this is the related module from further on in dev, and someone talking about another related issue: https://github.com/faye/websocket-driver-node/issues/3

But if you throttle consuming the websocket, aren't you still going to have a huge backlog to process?  

I think a queue is a good idea.  Also pipelining.  I mean, if your database is not the fastest, maybe try sending a bunch of inserts at a time, rather than one at a time.

Or use a faster database.  Or partition the tweets somehow and use multiple databases.

Or filter your twitter stream more?

My instinct is that it is best to avoid messing with the websocket level and handle it at a higher level because I think the road you are going down is going to have some interesting details but not be an efficient way to solve your problem in terms of developer time or code re-use down the line.

You could also take a look at http://datasift.com/ and http://gnip.com/ which might be a more convenient way to solve your business problem than directly accessing the firehose.

Have you done any testing with a real twitter stream and real database?  How much data is actually being sent down the hose on average? https://dev.twitter.com/discussions/7892  According to this it could be like 400GB of data per day for the full stream.  Or are you talking about spritzer or gardenose?

I think you pretty much have to filter out a lot of the data or aggregate it or shard it somehow.  Seems like too much data to store and keep querying.

What are you doing with the firehose data?

Before saving the data, I would just verify that you could process that amount of data in any way in memory.   I mean, is it even possible for one Node process to distribute that amount of data to a cluster of other servers for processing?   Would it be fast enough to handle the full firehose?

If its the full firehose I think your first problem might be bandwidth and hardware.
";node
2014-01-25 19:12:45;Can't get node.js to return a valid signed PUT URL;"I tried for about a month to get it to work for my podcast app - I ended up throwing the towel in and used the AWS php sdk for pushing the files. https://github.com/aws/aws-sdk-js/issues/86 did you try all of that.

";"https://github.com/aws/aws-sdk-js/issues/86 did you try all of that.

";node
2014-03-17 11:28:25;When will ES6 class syntax be coming to node?;"I believe it depends more on V8 than the node team. [deleted]Today with Traceur or TypeScript.

Or with a SweetJS macro.. that is pretty badass too.[Here](https://code.google.com/p/v8/issues/list?can=2&q=label%3AHarmony&colspec=ID+Type+Status+Priority+Owner+Summary+HW+OS+Area+Stars&x=priority&y=owner&cells=tiles) is the issues list for V8 harmony features, a quick search shows nothing involving the class syntax. A quick look at the [Node.js Changelog](http://nodejs.org/changelog.html) shows node is currently using V8 3.14.5.9. I'm not sure how fast the node team normally tracks V8, and I doubt harmony features are too big of a priority right now, but the issue tracker is worth watching.

**Edit:** You can check what harmony features are available in your version of node with

    node --v8-options | grep harm

If you are feeling adventurous, you could try to compile node with a newer version of V8 then it is currently using. Things might go up in flames, but then again they might not. Just

    git clone https://github.com/joyent/node.git node
    cd node
    rm -rf deps/v8
    git clone http://github.com/v8/v8.git deps/v8 # Change this to get the version you want

    ./configure
    make
    make installYou can use some ES6 features now; http://h3manth.com/new/blog/2013/es6-on-nodejs/[deleted]ES6 isn't being finalized until December 2014 iirc.";"[Here](https://code.google.com/p/v8/issues/list?can=2&q=label%3AHarmony&colspec=ID+Type+Status+Priority+Owner+Summary+HW+OS+Area+Stars&x=priority&y=owner&cells=tiles) is the issues list for V8 harmony features, a quick search shows nothing involving the class syntax. A quick look at the [Node.js Changelog](http://nodejs.org/changelog.html) shows node is currently using V8 3.14.5.9. I'm not sure how fast the node team normally tracks V8, and I doubt harmony features are too big of a priority right now, but the issue tracker is worth watching.

**Edit:** You can check what harmony features are available in your version of node with

    node --v8-options | grep harm

If you are feeling adventurous, you could try to compile node with a newer version of V8 then it is currently using. Things might go up in flames, but then again they might not. Just

    git clone https://github.com/joyent/node.git node
    cd node
    rm -rf deps/v8
    git clone http://github.com/v8/v8.git deps/v8 # Change this to get the version you want

    ./configure
    make
    make install";node
2014-03-25 22:01:26;Capturing stdout via child_process live (help would be appreciated!);"Node buffers the stdout streams and flushes at its own discretion. The output arrives as chunks of unspecified size (but always in-order). 

The size and boundaries of these chunks is not directly related to how many (or how large) console.log() you do (although large writes might trigger a flush sooner). 

If you need to do work on individual lines you'll have to buffer+split yourself.

Also node is notoriously bad with child_process and stdio on Windows. For example this bug was open for ages: https://github.com/joyent/node/issues/3584 but was recently fixed, I believe it is in a recent node 0.11.x.

I have no idea why it could be out of order; I've seen a lot of crappy windows CLI behaviour but re-ordering of streams never happend (so far). Did you try [all options](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) of spawn()? Did you use the `stdio` option correctly?I have never tried this, but you may want to look into using the third argument of child_process.spawn, options. One of the options (stdio) will let you provide your own stream implementation for stdout through which you could implement much finer grained control over the buffering of the output. This might do what you need, it might not.

Check out http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options and http://nodejs.org/api/stream.html#stream_class_stream_writable_1 for a lot more details.";"Node buffers the stdout streams and flushes at its own discretion. The output arrives as chunks of unspecified size (but always in-order). 

The size and boundaries of these chunks is not directly related to how many (or how large) console.log() you do (although large writes might trigger a flush sooner). 

If you need to do work on individual lines you'll have to buffer+split yourself.

Also node is notoriously bad with child_process and stdio on Windows. For example this bug was open for ages: https://github.com/joyent/node/issues/3584 but was recently fixed, I believe it is in a recent node 0.11.x.

I have no idea why it could be out of order; I've seen a lot of crappy windows CLI behaviour but re-ordering of streams never happend (so far). Did you try [all options](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) of spawn()? Did you use the `stdio` option correctly?";node
2014-03-25 12:04:07;Writing cross-platform Node.js;"Whitle this article is interesting, it only gives pretty basic information about compatibility. Furthermore, node.js is not *perfectly* cross-platform compatible: for example, I lately ran into [this bug](https://github.com/joyent/node/issues/5587), which is really annoying and makes my app incompatible with Windows.> If you define scripts to be run in your package.json you will find that Windows will choke if you use ./ and rely on a Node.js shebang.

Mocha uses ./ and shebang, and I was able to use it on Windows just fine. What am I missing?

https://github.com/visionmedia/mocha/blob/master/package.json

https://github.com/visionmedia/mocha/blob/master/bin/mochaAlso important: don't use `make` and Makefile's in your build scripts! 

So many module that cannot be tested on vanilla windows; we can't even begin to test and fix their path concatenation errors. It is stupid, as it is a solved problem by now, npm is full of build systems in every flavour. 

Do not use platform specific external commands in a cross platform capable ecosystem. It is stupid and violates what the platform is trying to do.

I have this discussion many times, it get old fast. Some of the hardliners still come up with ""use cygwin"" which is ridiculous or `git bash` which is okayish but should not be needed.";Whitle this article is interesting, it only gives pretty basic information about compatibility. Furthermore, node.js is not *perfectly* cross-platform compatible: for example, I lately ran into [this bug](https://github.com/joyent/node/issues/5587), which is really annoying and makes my app incompatible with Windows.;node
2014-03-27 09:16:02;Phonegap fails to get superspawn.js from Node Modules folder because of space in Windows username.;"\#1 reason I don't do node in Windows: library developers frequently fail to test properly on Windows. 

My advice: get a VM, do your node dev in Ubuntu. Unless you're building a windows app in node, of course. > C:\Users\Stefan Weck\AppData\Roaming\npm\node_modules

is the location for [globally installed npm modules on Windows](https://github.com/npm/npm/issues/3155). You can confirm this for your system by opening the Command Prompt and executing `npm root -g`

You could change the location of this folder to something like `D:\npm\node_modules` by [changing the ""prefix"" in npmrc](http://stackoverflow.com/questions/14846111/the-npm-global-flag-seems-to-be-inconsistent-on-windows), provided you have full access to that folder. Or, you could use `npm config set prefix ""D:\npm""`. 

That should save you from a lot of pain in the future too.Report it as a bug.Instead of using a space like '\Stefan Weck\' try coding it in as '\Stefan%20Weck\'Wrap the directory string in another string token? CMD accepts a string for directory if the directory is valid, without the need to escape spaces.

eg, you are using

    'C:\Users\Stefan Weck\AppData\Roaming\npm\node_modules'

but maybe

    ""'C:\Users\Stefan Weck\AppData\Roaming\npm\node_modules'""

will work.";"> C:\Users\Stefan Weck\AppData\Roaming\npm\node_modules

is the location for [globally installed npm modules on Windows](https://github.com/npm/npm/issues/3155). You can confirm this for your system by opening the Command Prompt and executing `npm root -g`

You could change the location of this folder to something like `D:\npm\node_modules` by [changing the ""prefix"" in npmrc](http://stackoverflow.com/questions/14846111/the-npm-global-flag-seems-to-be-inconsistent-on-windows), provided you have full access to that folder. Or, you could use `npm config set prefix ""D:\npm""`. 

That should save you from a lot of pain in the future too.";node
2014-04-12 23:23:43;What is a flashpolicy port in nodejs?;"https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO



>**flash policy port defaults to 10843**

>    By default the Socket.IO client will check port 10843 on your server to see if flashsocket connections are allowed. The Adobe Flash Player normally uses 843 as default port, but we decided to default to a non root port.

It is used for changing the default flashsockets port (10843) - check out [flashsocket.js](https://github.com/LearnBoost/engine.io/blob/master/lib/transports/flashsocket.js#L68) in engine.io to see where it's used

[socket.io issue 1011](https://github.com/LearnBoost/socket.io/issues/1011) has a decent write up of why you'd use it

";"It is used for changing the default flashsockets port (10843) - check out [flashsocket.js](https://github.com/LearnBoost/engine.io/blob/master/lib/transports/flashsocket.js#L68) in engine.io to see where it's used

[socket.io issue 1011](https://github.com/LearnBoost/socket.io/issues/1011) has a decent write up of why you'd use it

";node
2014-06-19 07:53:51;Cross database ORM module?;"I use http://sequelizejs.comJugglingdb seemed under maintained to me. I posted an issue a while back that has not been responded to. I ended up using the Waterline ORM from the Sails.JS project. Solid code, pretty well documented and a good responsive community. Not sure about support for MariaDB though.

Edit: CamintJS is a copy of JugglingDB. It didn't seem like they added anything to it, but I saw a post in its github issues from the creator of JugglingDB asking the guy to stop raising funds for the project since it was ripping off their code without crediting them. Definitely wouldn't trust using it.https://github.com/balderdashy/waterline
Please note that associations are not yet available in master branch, however: https://github.com/balderdashy/sails/issues/124You could take a look at waterline, it, the sails js default orm it is a separate package ( Im on mobile and I can not provide a link,  but a Google search will do it for you) I'm working on ORM at the moment, it's going to be released as part of the jsgui library.

I'm focusing on Postgres at the moment, and doing it in a way so that other DBs can have corresponding new classes written for them.

The system uses quite a lot of abstraction, it's fairly complicated because there are quite a lot of parts to it. It uses abstract models of the database, and works out what to do based on those, generating an Abstract Syntax Tree that contains the instructions to send to the database.

Also within scope is parsing DB code (such as to see what functions do).

Perhaps some others want to get involved in writing this code to make it do what they want?

I'm also representing DBs (and many other things) using a Resource object that enables asynchronous interaction through a standard interface (and can then be connected to an HTTP Resource Publisher to make it available as a JSON web service).I've heard about http://bookshelfjs.org/ but not yet used it myself.

Seems to be an active project that supports quite a lot of features. The webpage says it supports PostgreSQL, MySQL, and SQLite (the Readme also  mentions MariaDB).";"https://github.com/balderdashy/waterline
Please note that associations are not yet available in master branch, however: https://github.com/balderdashy/sails/issues/124";node
2014-06-26 19:17:30;Building User Authentication with Node.js, Express, Passport, and Orchestrate;I'm at Portland Code School listening to Tony talk about this blog post now.FYI to anyone interested: this tutorial uses Express 3, Passport works fine in Express 4, but the session/cookie stuff [has changed](https://github.com/jaredhanson/passport/issues/222). Basically, make sure you are using [express-session](https://www.npmjs.org/package/express-session) version > 1.5.0.;FYI to anyone interested: this tutorial uses Express 3, Passport works fine in Express 4, but the session/cookie stuff [has changed](https://github.com/jaredhanson/passport/issues/222). Basically, make sure you are using [express-session](https://www.npmjs.org/package/express-session) version > 1.5.0.;node
2014-07-02 16:49:04;Continuous Integration with Node.js, pt. 2: Code Coverage with Coveralls;I've used jscoverage, istanbul and blanket.js for code coverage report generation, and blanket.js is by far my favourite! My only issue with it at the moment is the following: https://github.com/alex-seville/blanket/issues/293;I've used jscoverage, istanbul and blanket.js for code coverage report generation, and blanket.js is by far my favourite! My only issue with it at the moment is the following: https://github.com/alex-seville/blanket/issues/293;node
2014-07-14 22:47:09;My Node.js core June Recap: Changes coming to Streams;"some things i'd like to see:

- convergence towards the whatwg specs: https://github.com/whatwg/streams. if i have to choose between node or whatwg streams, i'm going to choose whatwg
- consider removing object streams: https://twitter.com/domenic/status/481548842022604800
- propagate `.destroy()`s through `.pipe()`s to avoid leaks: https://github.com/joyent/node/issues/6041
- don't open a file descriptor for a file read stream until that stream begins flowing. can't find the issue for that but i got rejected

why do we need `.fail()` we should just have `.destroy()` be implementable as well";"some things i'd like to see:

- convergence towards the whatwg specs: https://github.com/whatwg/streams. if i have to choose between node or whatwg streams, i'm going to choose whatwg
- consider removing object streams: https://twitter.com/domenic/status/481548842022604800
- propagate `.destroy()`s through `.pipe()`s to avoid leaks: https://github.com/joyent/node/issues/6041
- don't open a file descriptor for a file read stream until that stream begins flowing. can't find the issue for that but i got rejected

why do we need `.fail()` we should just have `.destroy()` be implementable as well";node
2014-07-29 20:18:34;Strongloop just bought Express.;"Since TJ was leaving this is a good thing, means there will still be a person managing Express. StrongLoop, I like what you do, please do not fuck this up.

**edit** I was misinformed about how the Express project works. Readers: please read the replies below.[TJ seems to have a pretty reasonable response to all of this](https://github.com/strongloop/express/issues/2264#issuecomment-50567002)Seems to me this was a wasted opportunity for a call to action. I read this and thought maybe it's time to give back to express, but didn't see any requests for help. What needs done?Strongloop seems more concerned about branding & ownership than the Express community & maintainers. This is a shoddy first move, hopefully things improve from here.Well, time to get Hapi for me.Oh well, what did Express do for me? Nothing. 

Routing? Pff... 

Connect I love you![deleted]Well, their LoopBack framework is something I really like. I'm looking forward to see their contribution in Express.From a strongloop perspective, a very good grab, imagine all those nodejs tuts using express, still its appalling for those who have contributed (those who have done more than a couple of prs). 

Its a shame i see this kind of things in OSS.

Strongloop: Raise or Fold, your turn.";[TJ seems to have a pretty reasonable response to all of this](https://github.com/strongloop/express/issues/2264#issuecomment-50567002);node
2014-09-16 19:20:27;Why didn't npm use module namespacing?;"https://github.com/npm/npm/issues/798 Funnily enough, in later versions of NPM, you can use `""module"": ""username/module""` as a shorthand for Github git dependencies.  Add `""module"": ""username/module#v1.2.3""` for any branch or tag in the repo.Great question, especially on smaller modules that get abandoned.From a user perspective, the current system seems way better.  Think about places where name clashes happen - everyone after the first person just gets creative about it.  This leads to names that are far more memorable.  Some examples of what I mean:

- Would you rather remember that you use the `promise` library made by `petkaantonov`, or that its called `bluebird`?
- How about the faster `underscore` library by `lodash`, or the module name `lodash`?  Okay, bad example.
- Do you really prefer `michaelficarra/coffee-script` to `coffee-script-redux`?

And its just obviously easier for the first module to claim the name - did you know that `async` is maintained by `caolan`, that `underscore` was written by `jashkenas`, or that `promise` is owned by `then`?  All things you would have to know when installing those modules, of course.Because it was easier.

They're working on getting orgs and what not into npm especially since they need that for better enterprise support.";https://github.com/npm/npm/issues/798 ;node
2014-09-13 19:30:57;OpenCV for NodeJS;I've been using this in production for a few months. We are doing face/object recognition on 100 million images a week and the package has performed well enough. My biggest gripe is that C++ exceptions aren't caught and bubbled up - they just crash the process. Awesome news, trackingJS is one step closer being on the server!  https://github.com/cirocosta/qcode-decoder/issues/1holy crap, thanks for posting this :O;Awesome news, trackingJS is one step closer being on the server!  https://github.com/cirocosta/qcode-decoder/issues/1;node
2014-10-31 17:31:16;Best module for MS SQL queries?;"I'm using tedious, and it works very well. However, it has no connection pooling. I am making infrequent, very large (10-100k rows) requests and just creating and destroying connections for every query.

A coworker on another team is using mssql and liking it. It uses tedious under the hood for the low level things. I can't offer any personal insight though.One option to consider is edge.js, which is a little funky, but apparently quite performant:

http://tjanczuk.github.io/edge/#/15I've been using this:
https://www.npmjs.org/package/mssql

It can hook in to a variety of drivers but I've been using it with tedious.I had been using [node-sqlserver](https://www.npmjs.org/package/node-sqlserver), however it's development is [effectively dead](https://github.com/Azure/node-sqlserver/issues/171) as far as I can tell - suffering from the same problem as their PHP driver. They're not accepting patches, which is irritating.

I am now using [node-sqlserver-unofficial](https://www.npmjs.org/package/node-sqlserver-unofficial), as it's a drop in replacement, but I'm pretty close to swapping it out with [mssql](https://www.npmjs.org/package/mssql) from fear of it just going away.npm module mssql is a wrapper around other clients for MS-SQL (tedious being the default) that is slightly cleaner to use, and provides clean pooling options.  I'd suggest using that directly.I used Edge to connect to MS SQL on a recent project. Very simple to use.

Store connection string.
set EDGE_SQL_CONNECTION_STRING=Server=x.x.x.x;Database=dbname;Trusted_Connection=true

var edge = require('edge');
var getId= edge.func('sql', function () {/*
SELECT * FROM dbo.Users WHERE [id] = @id 
	*/});

// Call SQL function

getId({""id"":id}, function (error, result) {
		if (result) {
			...
		}
		else
			...
	});




";"I had been using [node-sqlserver](https://www.npmjs.org/package/node-sqlserver), however it's development is [effectively dead](https://github.com/Azure/node-sqlserver/issues/171) as far as I can tell - suffering from the same problem as their PHP driver. They're not accepting patches, which is irritating.

I am now using [node-sqlserver-unofficial](https://www.npmjs.org/package/node-sqlserver-unofficial), as it's a drop in replacement, but I'm pretty close to swapping it out with [mssql](https://www.npmjs.org/package/mssql) from fear of it just going away.";node
2014-11-09 18:37:59;Routing without frameworks;"first:

   npm install routes

then:

    var router = require('routes')();
    router.addRoute('/hello/:name', function (req, res, params) {
      res.end('Hello there, ' + params.name + '\n');
    });
    var http = require('http');
    var server = http.createServer(function (req, res) {
        var m = router.match(req.url);
        if (m) m.fn(req, res, m.params)
        else res.end('404!')
    });
    server.listen(5000);

or if you also want to serve static files as a fallback, `npm install ecstatic` then:

    var http = require('http');
    var ecstatic = require('ecstatic')(__dirname + '/static');
    var router = require('routes')();
    router.addRoute('/hello/:name', function (req, res, params) {
      res.end('Hello there, ' + params.name + '\n');
    });
    var server = http.createServer(function (req, res) {
      var m = router.match(req.url);
      if (m) m.fn(req, res, m.params);
      else ecstatic(req, res)
    });
    server.listen(8000);

as the routing grows, it can be split out into its own file or several files using ordinary `require()` calls.This may help you: https://github.com/pillarjs/path-to-regexpIn the book [The Node Beginner](http://www.nodebeginner.org/), there is a chapter on [setting up basic routing](http://www.nodebeginner.org/#whats-needed-to-route-requests) in a simple web application. Probably worth a read for you. 

The book is only $10 on LeanPub, and looks like a good frameworkless introduction into building a simple site with routing.You can use flatiron director[1] without a framework.

1] https://github.com/flatiron/directorMost router modules have a URL pattern matcher and some thin glue code geared for a framework like Express. You could use RegExp instead of a URL pattern matcher, but using a matcher for URLs can avoid messy-looking code:

    var patt = urlPattern.newPattern('/users/:id');
    var match = patt.match('/users/123');
    assert.ok(match.id === '123');

    var patt = /^\/users\/([0-9a-f]{3})$/;
    var match = '/users/123'.match(patt);
    assert.ok(match[1] === '123');

I started out using `routes` module for matching, but switched to`url-pattern` after having some [grief](https://github.com/aaronblohowiak/routes.js/issues/31) from the `routes` one.12 hours and no one has mentioned express? Did I miss the fad of hating them or something?

Express is HTTP routing with a bunch of APIs that allow for awesome middleware: like ""serve-static"" for static files, ""cors"" for adding CORS headers, and ""cookie"" for session management. Here's a basic example of how easy express makes routing: http://expressjs.com/starter/basic-routing.html";"Most router modules have a URL pattern matcher and some thin glue code geared for a framework like Express. You could use RegExp instead of a URL pattern matcher, but using a matcher for URLs can avoid messy-looking code:

    var patt = urlPattern.newPattern('/users/:id');
    var match = patt.match('/users/123');
    assert.ok(match.id === '123');

    var patt = /^\/users\/([0-9a-f]{3})$/;
    var match = '/users/123'.match(patt);
    assert.ok(match[1] === '123');

I started out using `routes` module for matching, but switched to`url-pattern` after having some [grief](https://github.com/aaronblohowiak/routes.js/issues/31) from the `routes` one.";node
2014-12-26 19:51:32;socket.io v.1 VS Sock.js or other WebSocket implementations;"Etherpad core dev here.  

We just migrated to SocketIO v1+ from 0.9 and things are better.

I looked into other websocket implementations prior to settling on socketIO.   The main thing socketIO handles is cross platform relatively gracefully.  Other websocket implementations (at the time) had very little in the way of graceful fallback.

I can't vouch that Guillermo is going to keep being active on socket/engine IO though but he certainly has his hand involved.

I'd say SocketIO is your safe bet.

RE performance and scaling. This isn't PHP/Ruby, you wont hit the same type of early scaling issues.

Your communication layer will want to be as modular as possible so you can keep performance isolated to a single node initially and when it comes times, scale it out.

Hope that helps and good luck.Most of these posts are old and outdated. You should pick one with a reasonable API you like and start building your app. Make sure the IO layer is separate enough that it is not a big deal to swap later (this is not difficult and usually requires just a few more minutes of thought). I would also caution you against being bought into too many ""performance"" issue posts right now unless you have thousands of users ready to go today.

Projects like Primus are interesting but do note that they may carry their own bugs or opinions on implementation. Primus is likely one of the better ones as the author takes care to do his research and make sure it works.I've recently discovered [Primus](https://github.com/primus/primus) which is sort of an ORM for websocket connections.  It allows you to read session cookies from the header: https://github.com/primus/primus/issues/132

I've heard that socket.io recently has improved their performance issues however.

edit: poked around a bit and it looks like socket.io performances are still an issue: https://medium.com/@3rdeden/cluster-fucks-when-scaling-socket-io-2c8ad1153332Just to be pedantic `Engine.IO`, `Socket.IO` and `SockJS` are not WebSocket implementations. `ws`, `websocket`, `faye-websocket`, `yawl` are.Do not compare Sock.js to Socket.io. Compare it to Engine.io, socket's core.Thank you all.Just ran a test and yes Primus can read the cookies with Sock.js. I'll keep an eye on this project. If socket.io is working for you right now then stick at it. It can be a jump to go to sockjs, and if you arent actually recieving these issues in even the long term life of this app, then it isnt an issue for you. 

How do you benchmark socket.io apps? [socket.io-benchmark](https://github.com/michetti/socket.io-benchmark),[websocket-bench] (https://github.com/M6Web/websocket-bench) are dated and not compatible with the latest version.sockjs for me. light and fast.I too found socket.io performance to be horrendous. Can't handle more than 30 connections at once.";"I've recently discovered [Primus](https://github.com/primus/primus) which is sort of an ORM for websocket connections.  It allows you to read session cookies from the header: https://github.com/primus/primus/issues/132

I've heard that socket.io recently has improved their performance issues however.

edit: poked around a bit and it looks like socket.io performances are still an issue: https://medium.com/@3rdeden/cluster-fucks-when-scaling-socket-io-2c8ad1153332";node
2015-01-13 07:21:06;Question about memory limits in Node Webkit;"I apologize in advance for not answering your question. I'd just like to make a suggestion. As you say, you're reaching the memory limits for storing data in browser, which is understandable because the browser was never really meant to *process* or *store* data, but it's very good at visualizing it, as you mentioned.

Now that you're thinking about running your app outside of a browser tab (with node-webkit), you have a good opportunity to rethink your app a little bit. Firstly, you don't need to use node-webkit at all, since all it is is a packaged browser and node server. Instead you can simply provide your app as a webserver running on (for example) port 3000 that users can navigate to, which removes the overhead of having to download another browser. If you're running a separate server, you also have the potential to offload some of the processing to another language. You don't *have* to, you *could* fork node a few times and use it like a web worker (or there is a module [here](https://www.npmjs.com/package/webworker-threads) that simulates web workers on node, which I assume it does by forking), which is easy since you've already written the code. However you could also write the server in flask and use python to deal with the data processing. Something like numpy is going to be a lot faster than node, and most importantly will manage memory better because it's implemented natively.if you really need to have 13 GB of data in memory and compute on that data, don't force that data into the browser. 
Keep this data in a separate process outside the browser and stream into the browser only the data user is ACTuALLY seeing. Even with with millions of vertices/polygons, browser will be able to handle that without breaking a sweat(rendering in WebGL of course), because it is not going to be nowhere near those 13Gb.
How to stream it? Well you could run a node process(to which you can raise the memory limit as people were trying in this [thread](https://code.google.com/p/v8/issues/detail?id=847)) which would stream this data over websockets. This should be quite easy to do. With node-webkit, you could just use interprocess communication. Your data processing might be written in any other language-C++ native app doesn't impose any limits on your memory in 64 bits. 
I personally would go with websockets, because then you open up a possibility for client to be over the network from your master process.

If you decide to go with node.js process for your data processing, be sure to checkout [io.js](https://iojs.org/), the latest version of V8 should make it easier to raise memory limits.[deleted]";"if you really need to have 13 GB of data in memory and compute on that data, don't force that data into the browser. 
Keep this data in a separate process outside the browser and stream into the browser only the data user is ACTuALLY seeing. Even with with millions of vertices/polygons, browser will be able to handle that without breaking a sweat(rendering in WebGL of course), because it is not going to be nowhere near those 13Gb.
How to stream it? Well you could run a node process(to which you can raise the memory limit as people were trying in this [thread](https://code.google.com/p/v8/issues/detail?id=847)) which would stream this data over websockets. This should be quite easy to do. With node-webkit, you could just use interprocess communication. Your data processing might be written in any other language-C++ native app doesn't impose any limits on your memory in 64 bits. 
I personally would go with websockets, because then you open up a possibility for client to be over the network from your master process.

If you decide to go with node.js process for your data processing, be sure to checkout [io.js](https://iojs.org/), the latest version of V8 should make it easier to raise memory limits.";node
2015-01-21 07:54:57;node_modules path too long;"We don't check in node_modules.  Check in your package files and let the dev run `npm install` to generate their own local files.Try using [npmd --greedy](https://github.com/dominictarr/npmd) or [npm-flatten](https://github.com/neenhouse/npm-flatten) or [fenestrate](https://github.com/zetlen/fenestrate).

For removing stuff use [rimraf](https://www.npmjs.com/package/rimraf)I was having this problem as well and found that mapping a directory directly to project folder has minimized the problem for me.This has implications past just SourceSafe: 

I'm doing devops work in a Windows environment. The team is using Grunt to compile some Javascript views, which, of course, uses Node. But, the apps themselves are hosted on IIS. 

There's no way I'm going to install Node.js on my production servers just to compile some Javascript-- that needs to be done during the build process. So, you wind up with a node_modules directory with an insanely long path in it, and neither my automated build scripts, nor TFS will copy it anywhere. 

[The Node.js devs themselves don't see this as a problem.](https://github.com/joyent/node/issues/6960)

>As far as I can tell, nobody is particularly enthusiastic about changing the behaviour of npm or node entirely for Windows alone — a platform few of us use, even fewer of us like, and only a couple of us care about.

I'm sorry, that's really arrogant, and that just shows they're giving lip service to Windows being ""fully supported"".  This is a Explorer.exe related problem, use RoboCopy and your problem is gone.

Althoug the windows API won't allow more than 260 characters in a path with Explorer, the maximum total path length is ~32,767 characters.

RoboCopy uses different API calls.
FileZilla will also let you browse any depth in the local window.

[edit] : added some links

https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx#maxpath

http://superuser.com/questions/37737/how-do-i-extend-the-maximum-file-path-size-in-windows-7

[Check out this article](http://shapeshed.com/writing-cross-platform-node/)
    Im on Windows 7 and have the same problem but it only occurs with certain modules. Why is that? Why do some modules nest and others dont? Are the module developers aware of how much of a problem this is for Windows users?  grunt-contrib-imagemin is the module thats nested on my system and wont allow me to delete.have you tried the command **npm dedupe**?As a practice for reasons just like this, I use c:\code\ for dev.  Of course, this wont help for crazy long paths, but it has worked for my purposes.";"This has implications past just SourceSafe: 

I'm doing devops work in a Windows environment. The team is using Grunt to compile some Javascript views, which, of course, uses Node. But, the apps themselves are hosted on IIS. 

There's no way I'm going to install Node.js on my production servers just to compile some Javascript-- that needs to be done during the build process. So, you wind up with a node_modules directory with an insanely long path in it, and neither my automated build scripts, nor TFS will copy it anywhere. 

[The Node.js devs themselves don't see this as a problem.](https://github.com/joyent/node/issues/6960)

>As far as I can tell, nobody is particularly enthusiastic about changing the behaviour of npm or node entirely for Windows alone — a platform few of us use, even fewer of us like, and only a couple of us care about.

I'm sorry, that's really arrogant, and that just shows they're giving lip service to Windows being ""fully supported"".  ";node
2015-02-07 22:09:58;Best ORM for MySQL in Node;"well.. i've tried sequelize (with sqlite3) it was great until u hit the [BUG](https://github.com/sequelize/sequelize/issues/2741#issuecomment-67361711) D:

i was in development so didn't wait for a fix and used the (native?) node-sqlite3 module

i still recommend sequelize great docs some parts are outdated since it under heavy development (update) so you may need to do extra research for the undocumented/new stuff I just went through this and ended up starting with node-orm2 and almost immediately ran into issues. I switched to Bookshelf.js and it's been going great.I use Sails JS as my framework which uses [Waterline](https://github.com/balderdashy/waterline) but you can also use it stand alone.

Version v0.9x was shotty but it grew a ton in support, features, and reliability in v0.10x and v0.11 is just around the corner I believe.I found sequelize to be too much bloat for my interests, always wanting to do more than I wanted it to do.  So I wrote these instead:

- http://queryizejs.com - Query builder
- http://quelljs.com - Single record ORM

Very lightweight, low complexity. Supports both node-mysql and node-mysql2 connections and pools.You may give Waterline (https://github.com/balderdashy/waterline) a try. Ive used it and there are lots of adapters for different NoSql AND relational DBs, in particular, there is an adapter for MySQL.
 I will appeal to your ""most likely"" clause and raise you an ""express is fine, but why mysql?"" arg.";"well.. i've tried sequelize (with sqlite3) it was great until u hit the [BUG](https://github.com/sequelize/sequelize/issues/2741#issuecomment-67361711) D:

i was in development so didn't wait for a fix and used the (native?) node-sqlite3 module

i still recommend sequelize great docs some parts are outdated since it under heavy development (update) so you may need to do extra research for the undocumented/new stuff ";node
2015-02-22 04:49:56;Lodash distances itself from Underscore 1.8;"Hopefully Jeremy doesn't start pulling the same shit on Backbone that he's been doing on Underscore.Context for this: [Underscore 1.8 makes last minute breaking changes to master without discussion](https://github.com/jashkenas/underscore/issues/2061
http://www.reddit.com/r/javascript/comments/2whrl9/underscore_18_makes_last_minute_breaking_changes/)Underscore still has the advantage that it's quite a bit smaller than Lodash. In the browser i still use Underscore but on node I use Lodash.

It's a pity that the APIs are diverging, although I understand the reason.";"Context for this: [Underscore 1.8 makes last minute breaking changes to master without discussion](https://github.com/jashkenas/underscore/issues/2061
http://www.reddit.com/r/javascript/comments/2whrl9/underscore_18_makes_last_minute_breaking_changes/)";node
2015-02-27 00:45:46;io.js + Node.js - Reconciliation Proposal;"I cant be the only one who thinks they can both coexist and are better off seperate. One is like running debian stable, the other is like running arch, since it is more bleeding edge. This way walmart gets their legacy code, and some of us get the fancy bells and whistles.I don't want to interfere with any official discussions or anything but as far as the Intl/ICU stuff --there is an Intl module in npm.  Did they build this stuff into core?  Is there some reason that can't be a module.

I understand that people in other countries like that one person would like things to ""just work"" -- I think they should.  The thing is it really is a big download, and most people who aren't in China for example don't need all of the Chinese data..

Is it possible to make international support easy with one or a few npm modules that do uber-installs of all things international (if people want that) or for particular regions?

Maybe there could just be a section on a Node.js web page that links to some important/sanctioned or perhaps just popular node modules.  ""For international support, npm install -g intl"" or ""npm install -g uber-intl""

Because right now, its hard to tell whats really an important/relevant/tested module, and especially something big like internationalization, it would be nice to know.

Or maybe there is something that is related to the core build that can't be separated out.  But hopefully that doesn't include all of the data.

Anyway not my problem since I'm not on any TC or anything.

From what I see this looks like terrific news and I don't see the Intl thing as turning into a showstopper so I personally would bet that the reconcile is going to happen.

EDIT: lol, looks like I overestimated Node/Joyent https://github.com/joyent/node/issues/9295How did ""open governance"" manage to make Node more corporate than ever?Will iojs 1.x become node 1.x if the projects merge? I'm worried about conflicts of interest between node-foundation and the iojs TC governance model, unless whatever's happening within io can stay that way within node, and whatever they're doing corporately can stay in their own branch, so 2 branches of node. But if there's two stable branches, what's the point in merging? 

I predict there's going to be dissent within the node/io community, concerns about node-foundation wanting to take control of the project entirely and basically halting the current progress in IO (or diminishing it).Isn't it going to hurt both eventually if the split remains?http://i.imgur.com/PD106OG.jpg";"I don't want to interfere with any official discussions or anything but as far as the Intl/ICU stuff --there is an Intl module in npm.  Did they build this stuff into core?  Is there some reason that can't be a module.

I understand that people in other countries like that one person would like things to ""just work"" -- I think they should.  The thing is it really is a big download, and most people who aren't in China for example don't need all of the Chinese data..

Is it possible to make international support easy with one or a few npm modules that do uber-installs of all things international (if people want that) or for particular regions?

Maybe there could just be a section on a Node.js web page that links to some important/sanctioned or perhaps just popular node modules.  ""For international support, npm install -g intl"" or ""npm install -g uber-intl""

Because right now, its hard to tell whats really an important/relevant/tested module, and especially something big like internationalization, it would be nice to know.

Or maybe there is something that is related to the core build that can't be separated out.  But hopefully that doesn't include all of the data.

Anyway not my problem since I'm not on any TC or anything.

From what I see this looks like terrific news and I don't see the Intl thing as turning into a showstopper so I personally would bet that the reconcile is going to happen.

EDIT: lol, looks like I overestimated Node/Joyent https://github.com/joyent/node/issues/9295";node
2015-03-09 00:16:25;The missing NPM version manager.;"`npm install -g npm@2.7.1`

Am I missing something here?A version manager for your version manager, so you can version manage while you version manage.

If you use bower too you can version manage your version manager to version manage your version manager.This's for update notifier and test latest version easily. Here is why I build this one: https://github.com/watilde/npmbrew/issues/14I've never yet needed to switch between specific npm versions, but if/when I do this seems like it would be handy. Any npm switching I do happens automatically as a side effect of node version managers I use, such as [n](https://www.npmjs.com/package/n) or [nvm](https://www.npmjs.com/package/nvm), since npm and node versions have become tidally locked in recent years.";This's for update notifier and test latest version easily. Here is why I build this one: https://github.com/watilde/npmbrew/issues/14;node
2015-03-05 16:38:12;How much of a drop-in replacement is io.js?;"Think of io.js 1.x as node.js 1.x. It'll likely be compatible with your current node.js 0.x, but there may be minor breaking changes.

Make sure to scan the changelog for breaking changes and you should be fine. For most intents and purposes it's fully backwards compatible (or at least as backwards compatible as you would expect new node.js releases to be).Many c++ packages need to be updated. Otherwise, it mostly works.Which node? Subbing in iojs for node 0.12 should be feasible since both were forked from 0.11 fairly recently. Pre-0.11 nodes, not so much.io.js is not compatible with node 0.10.x in similar cases to node 0.12.x. Request.js shows it quite well: https://travis-ci.org/request/request. For me broken SSL is **NOT minor** problem.io.js now: 8/10

io.js after they fix [#456](https://github.com/iojs/io.js/issues/456) : 10/10Edge cases. Just try.I'd say each pure js module has a small probability of breaking. Those with c++ bindings significantly higher. So it should really come down to looking at your dependencies and doing some back of the envelope calculations to determine the number of extra headaches you might have. 

As time goes on this may or may not be a non factor for iojs users depending on node package maintainer support. Or it might get worst since iojs is on a path to break things (for good reasons, let's not forget nodes stagnation).

I was at node summit when they announced the foundation and I'm pretty hopefully iojs gave the node maintainers the wakeup call they needed and things will merge back together. I'm pretty sure the foundation is in fact a strong, good reaction to the imminent fragmentation.

And fragmentation of the community quite frankly is quite awful. If you feel strongly about the new features of iojs I'd suggest you yell at the new node foundation, maybe even tell them you switched because x, y, z.NodeBB core dev here. I played around with io.js a bit via nvm, and NodeBB ran fairly well, but without having used it long-term or in production, I wouldn't know what kind of edge cases there would be. I'd imagine there may be some via our socket.io dependency. 

Ghost, on the other hand, relies on SQLite, which doesn't compile easily on 0.11, so that may also be a blocker for you on io.js...

Best of luck! ";"io.js now: 8/10

io.js after they fix [#456](https://github.com/iojs/io.js/issues/456) : 10/10";node
2015-04-22 22:14:17;How to add an Istanbul code coverage badge to your GitHub repository;"Be careful with that repo key. If others get a hold of it, they can make commits to your repository. I suggest using Travis CI to secure the key, and use .travis.yml to set the key accordingly.You don't need to specify the full ""./node_modules/.bin/"" aka $(npm bin) in your json scripts. That directory is already available for the scripts directly.I wrote this down as I was figuring it out for myself, so I thought I'd share it as my Google searches for ""istanbul code coverage badge"" didn't really turn up any useful results for me. Please let me know if there are any mistakes or if I'm missing anything. Thanks for checking it out!I wrote this recently, and I think that you might find it helpful: http://blog.bguiz.com/articles/open-source-project-stewardship/nodejs-oss-stewardship/#coverage-in-nodejs

My article goes for the bigger picture though -
it coversnot just code coverage, but also linting, testing, and documentation (in the works).
I hope you find it helpful!I'd rather to see an article on ""why"" instead of ""how"".

There are projects that don't care about coverage, and nonetheless are maintained well.

There are projects that care about coverage, and the code is pretty shitty because of it. E.g. error reporting is hard to cover, hey, lets remove it!

I've seen github projects with 100% coverage that still have 3 errors in 1 line of code.

Also, and this is becoming my favorite example, we have a library with 100% coverage and [still managed to get 3 different errors in one line of code](https://github.com/markdown-it/markdown-it/issues/76#issuecomment-86067583) that canceled each other out just enough for tests to pass.

What I'm saying is: it ain't worth a badge.";"I'd rather to see an article on ""why"" instead of ""how"".

There are projects that don't care about coverage, and nonetheless are maintained well.

There are projects that care about coverage, and the code is pretty shitty because of it. E.g. error reporting is hard to cover, hey, lets remove it!

I've seen github projects with 100% coverage that still have 3 errors in 1 line of code.

Also, and this is becoming my favorite example, we have a library with 100% coverage and [still managed to get 3 different errors in one line of code](https://github.com/markdown-it/markdown-it/issues/76#issuecomment-86067583) that canceled each other out just enough for tests to pass.

What I'm saying is: it ain't worth a badge.";node
2015-04-22 20:52:39;Require is Dog Slow;"Except it's not and claiming that a single require call takes 700ms is disingenuous at best. What wasn't measured is the overhead of the actual require call versus what those modules are doing when they are initialized. In this case it sounds like they are experiencing problems with Sails migrations which occur during sails.lift(). This is pretty well documented and easily solved via a config change.

https://github.com/balderdashy/sails/issues/1373> Now, failed stat's are not the entire reason require is slow, but if I am reading the timestamps correctly in the strace log, they are a fair amount of it, and the most obviously wasteful thing.

A lesson to learn from the past that gets lost in all the shit-talking: This is why optcode caching developed in PHP. The rise of PHP frameworks like Kohana would not have happened without alleviating the stress a bunch of empty file stats cause when searching for includes. Toss a bunch of complex DB queries on that and yeah, you've got the shitty performance from PHP for complexities in 2003 all over again. Even Ruby is learning this lesson with projects like [jRuby](http://jruby.org/), which is essentially optcode caching inside a JVM.

To be fair though, it's not require() itself that's slow - it's file i/o. Perhaps your tool chain is doing more of that than it should via require(), but that's something the developers of those modules should keep in mind when writing their modules. Keep things lean with fewer secondary dependencies and things are nice and fast. Also, if you're shipping a production module, please make a fully minified and concatenated version.

Personally, I think this is the main reason to avoid large, swiss-army-knife, do-it-all frameworks. In some ways you made the choice in convenience over speed. Good luck to you.Really wish you added the qualifier of '**Nodes** Require is Dog Slow` in the title like the article does. I clicked the article initially wondering WTF the author was doing making requirejs take that long...

I have never seen such slowness using requirejs on the frontend...in case anyone is wondering.

**edit:** I think the issues observed by the author has to do with the fact that require() calls in node are a sync operation that causes node to open and interpret a ton of files to compute the dependency tree before it acts on it.";"Except it's not and claiming that a single require call takes 700ms is disingenuous at best. What wasn't measured is the overhead of the actual require call versus what those modules are doing when they are initialized. In this case it sounds like they are experiencing problems with Sails migrations which occur during sails.lift(). This is pretty well documented and easily solved via a config change.

https://github.com/balderdashy/sails/issues/1373";node
2015-05-09 05:18:57;Jumping ship to iojs, is there any blogging platform for it like ghost?;"I don't have an answer, but I do recommend having multiple versions of node/iojs installed at once, then when something doesn't work, you can switch versions quickly.

Check out [nvm](https://github.com/creationix/nvm) or [nodebrew](https://github.com/hokaccha/nodebrew)[Chose the best day to do it lol](https://github.com/iojs/io.js/issues/1664)";[Chose the best day to do it lol](https://github.com/iojs/io.js/issues/1664);node
2015-06-21 23:24:18;npm ERR! npm license has expired;here is the issue on github: https://github.com/npm/npm/issues/8631You've been pulled over on the information superhighway!I ran into the same issue. For a brute force solution in the meantime you can always use npm install <git clone url>According to the issue linked to by /u/abendigo, it should be fixed now, but if you're using npm for deployments, CI, etc., you should use a [local cache](https://github.com/mixu/npm_lazy.git) in case of issues with the npm infrastructure.;here is the issue on github: https://github.com/npm/npm/issues/8631;node
2015-06-18 19:22:26;SlackbotAPI: A node.js API for Slack | See comments for a description;"Oh, I've used it many times and I totally recommend it :)
Pretty stable and easy to use (Slack's official Node API sucks)Hey there and thanks for checking out my thread. This is my very first module and I am really curious about your opinions/feedback/issues/pull requests. Please let me know if it's any use to you and let me know where you think it can improve. I've only just started with node.js recently. Thanks!";Hey there and thanks for checking out my thread. This is my very first module and I am really curious about your opinions/feedback/issues/pull requests. Please let me know if it's any use to you and let me know where you think it can improve. I've only just started with node.js recently. Thanks!;node
2015-07-01 14:51:04;Is it normal to have so many files opened?;"guessing but yea, sounds like a file handle leak

probably missing 1-2 closes to db connections (to sql on disk), or 1 or 2 not closed file handles in winston, or newrelic or redis

try `ls -l /proc/{1234,2345,456}/fd`), but use your node PIDs, then maybe count/sort them
try native sockets and wsNo, it's not normal.  This is indicative of a file descriptor link, and in fact a couple of [issues](https://github.com/Automattic/socket.io/issues/1910) have been filed with socket.io with regard to it (or its dependencies) leaking sockets.  As /u/mc_hammerd mentioned, you can check `/proc` to figure out what kind of handles are being leaked (files vs. sockets), and `netstat` to figure out which IP/port the sockets are connected to.";No, it's not normal.  This is indicative of a file descriptor link, and in fact a couple of [issues](https://github.com/Automattic/socket.io/issues/1910) have been filed with socket.io with regard to it (or its dependencies) leaking sockets.  As /u/mc_hammerd mentioned, you can check `/proc` to figure out what kind of handles are being leaked (files vs. sockets), and `netstat` to figure out which IP/port the sockets are connected to.;node
2015-08-11 23:48:07;Node repo is officially io.js;"I'm so lost on this whole IO.js/Node.js stuff. Every time something comes out about either one, I'm just left wondering ""but... I thought... but? ah just screw the whole thing"". The github readme hasn't been updated yet. This has been the plan, the starting point for the next major version of node will be based on the work done by the io.js fork. There is no name change, just the repo and starting point.

Apparently. Yep still confused.

Edit: [Read This](https://github.com/nodejs/node/issues/2327)[deleted]CONFUSEDI'm going to continue to use node.js until morale improves.No blog post or anything as far as I can see. I kinda think the io.js name makes more sense, but going to be hard to stop calling it Node. So no more node.js? MEAI stack just doesn't have the same ring...I think they just haven't got around to change the readme.md yet, because it doesn't really makes sense to host io js on nodejs/node github repo.This is the node.js repo: https://github.com/joyent/nodeNo, node is still node, they are just in the process of finishing the convergence work and eliminating the need for iojs repoif the node repo is officially io.js, why does nodejs.org download page link to the joyent/node repo?We need to wait till the new version of node? Will iojs be doing rapid development? That was one thing I hated about rails...by the time I built my prototype I had already gone through 5 upgrades and then 3.x came out. I gave up at that point and went back to Perl and PHP.";"The github readme hasn't been updated yet. This has been the plan, the starting point for the next major version of node will be based on the work done by the io.js fork. There is no name change, just the repo and starting point.

Apparently. Yep still confused.

Edit: [Read This](https://github.com/nodejs/node/issues/2327)";node
2015-08-08 16:37:29;how do you debug a node app that doesn't crash but stops working?;"This is actually pretty common in evented systems.  I call it ""getting zombified"".

Logging is your friend, but I don't see any at all.  At the very least you *always* need error logging.  Now that you need to additionally debug, you'll want to have more logging than just errors to give you a hint of where the process got zombified.  `console.log()` and `console.error()` are fine for this to start.  If you run multiple of these processes, an aggregated logging service might be needed.

I also see eventemitters without any attached 'error' handler, or really many event handlers in general.  Log all that stuff.  Sometimes the most foolproof way to handle these errors is to log it and then let the process actually exit (maybe `process.exit(1)`).  Sometimes you'll want to do some other clean-up before you restart.  I assume systemd will restart it in a fresh state if you exit.

The other thing I do for monitoring is I put a metric on the work that this does.  Usually using some metrics app like graphite, datadog, librato, etc.  I treat that a bit like a heartbeat and alert when work has stopped for too long.  Maybe you have multiple scenarios that could count as a heart beat: both emit() cases, and the successful http request case.  If setting up metrics seems like too much work, at least log it and you can search the logs for the area where these heartbeat metrics stop.Maybe double check memory usage another way to make sure its not a memory leak.  Also write some console.error and make sure you are able to monitor the logs.  Maybe there was some exception that went in a different file than you were looking?  Also see https://github.com/socketio/socket.io/issues/1015

Also you could try launching a different way in case the behavior changes (like just with pm2 or no supervisor, maybe a more obvious crash).  Also you could check resource usage like open files or connections.

Also there are alternatives like sockjs.

But restarting the server might not be so bad if your client can detect it and reconnect or reconnect after a 'reboot' message.

Also try to be very sure there isn't some other separate but related process on the system causing instability.

Another obvious thing that might or might not help: https://nodejs.org/api/debugger.htmlYou probably have a memory leak somewhere and are leaving file descriptors open.

`soundtrack_stats` doesn't seem to ever been cleared but I don't feel that is enough. Have you checked socket.io documentation?Pipe the process to a log on startup. Check that after its stopped working. I've had unhandled errors and other weird 'crash' like behavior that doesn't actually terminate the node instance, but causes it to stop responding entirely.Maybe using try/catch in each bkock for debugging purposes Let me suggest a slightly different approach: there are tools which analyse node.js applications end-to-end. They are built to measure performance and identify bottlenecks.

Ruxit is a new SaaS solution which auto-detects your node.js application end-to-end. You just have to install the agent on your server, restart it and the rest is done by the tool. 

If you want to give it a try: there is a 30-day free trial and it takes less than 5 minutes to see data. 

https://ruxit.com/nodejs-monitoring/

Disclosure: I work for Ruxit, so don't believe me, try it yourself. But if it helps to solve your issues please let us know and spread the word ;-)



";"Maybe double check memory usage another way to make sure its not a memory leak.  Also write some console.error and make sure you are able to monitor the logs.  Maybe there was some exception that went in a different file than you were looking?  Also see https://github.com/socketio/socket.io/issues/1015

Also you could try launching a different way in case the behavior changes (like just with pm2 or no supervisor, maybe a more obvious crash).  Also you could check resource usage like open files or connections.

Also there are alternatives like sockjs.

But restarting the server might not be so bad if your client can detect it and reconnect or reconnect after a 'reboot' message.

Also try to be very sure there isn't some other separate but related process on the system causing instability.

Another obvious thing that might or might not help: https://nodejs.org/api/debugger.html";node
2015-08-06 15:15:28;IO.js 3.0 Alpha for(Node.js 4.0);"My view:

1. I'm not familiar with the breaking changes

2. io.js is the ""canary"" branch of Node. I recommend, if you're on a Node stable release, to consider migrating to latest (0.12). btw, 0.10.40 is the [latest patch](https://nodejs.org/dist/v0.10.40/).

3. more memory footprint !== memory leak. don't take a leap of faith, deploy your application on 0.12 and see how it behaves.

4. use [babel.js](https://babeljs.io/)

5. same of point 4

6. which version? It had leaks, but they were fixed. [Uber](https://twitter.com/mranney/status/540013975568535553) and [Floobits](https://news.floobits.com/2015/02/23/on-moving-to-io.js/) were using io.js on productionbcrypt has an [issue](https://github.com/ncb000gt/node.bcrypt.js/issues/322) on io.js 3.0 for now.  So I reverted to io.js 2.5.  Just like when you update to the latest node.js release at times (even though I guess they might not be doing them as much anymore), there were some breaking changes. It depends on the libraries you use.  

Some compiled libraries with node-gyp can be touchy on bleeding-edge versions essentially.

Just install ivm. `npm install -g ivm` that'll give you the io.js version manager, and then you can do ivm 2.5.0 or ivm 3.0 to switch, and if you have an issue you can revert.  ";"bcrypt has an [issue](https://github.com/ncb000gt/node.bcrypt.js/issues/322) on io.js 3.0 for now.  So I reverted to io.js 2.5.  Just like when you update to the latest node.js release at times (even though I guess they might not be doing them as much anymore), there were some breaking changes. It depends on the libraries you use.  

Some compiled libraries with node-gyp can be touchy on bleeding-edge versions essentially.

Just install ivm. `npm install -g ivm` that'll give you the io.js version manager, and then you can do ivm 2.5.0 or ivm 3.0 to switch, and if you have an issue you can revert.  ";node
2015-08-12 15:25:57;Complete CLI parser in 53 loc;"I've always used `minimist` because it had the simplest API (compared to nopt and commander) while still packing a decent number of features in just 200 LOC.

Poor docs, a growing number of unresolved issues and it does not adhere to the [UNIX utility conventions](http://pubs.opengroup.org/onlinepubs/7908799/xbd/utilconv.html) very well (see [here](https://github.com/substack/minimist/issues/50)), but it's lean and has no dependencies. 

Parsec's API is more succint, it has a well documented README, and still no dependencies!

I also fixed the issues I was having with minimist and other problems that were still unresolved in its issue tracker at the time of this writing. It's also 53 lines of code :P";"I've always used `minimist` because it had the simplest API (compared to nopt and commander) while still packing a decent number of features in just 200 LOC.

Poor docs, a growing number of unresolved issues and it does not adhere to the [UNIX utility conventions](http://pubs.opengroup.org/onlinepubs/7908799/xbd/utilconv.html) very well (see [here](https://github.com/substack/minimist/issues/50)), but it's lean and has no dependencies. 

Parsec's API is more succint, it has a well documented README, and still no dependencies!

I also fixed the issues I was having with minimist and other problems that were still unresolved in its issue tracker at the time of this writing. It's also 53 lines of code :P";node
2015-08-24 13:57:19;Node, Express, Swig, and MongoDB - getting started with CRUD;[Swig is actually no longer actively maintained](https://github.com/paularmstrong/swig/issues/628) (which makes me incredibly sad—I love Swig!). However Mozilla's [Nunjucks](https://mozilla.github.io/nunjucks/) is a familiar, albeit poorly-named alternative;[Swig is actually no longer actively maintained](https://github.com/paularmstrong/swig/issues/628) (which makes me incredibly sad—I love Swig!). However Mozilla's [Nunjucks](https://mozilla.github.io/nunjucks/) is a familiar, albeit poorly-named alternative;node
2015-08-23 21:52:55;Primer on Swig Templating;Also note that [Nunjucks](http://mozilla.github.io/nunjucks/) is the new Swig.I think you need to escape the Swig tags you're using in your example HTML, they [seem to be getting evaluated](http://imgur.com/Zvinges) to the empty stringI just wanted to share that Swig is no longer maintained. [Source](https://github.com/paularmstrong/swig/issues/628);I just wanted to share that Swig is no longer maintained. [Source](https://github.com/paularmstrong/swig/issues/628);node
2015-08-28 14:20:53;Node Standard Library;"The problem I have with this is that once a certain module becomes popular and then goes in your standard, if I ever have to work with a group using that standard and find a better module then I have to argue with them about why its better and whether it integrates properly with the other modules.

So you are increasing coupling while encouraging stagnation and cargo-culting.

I know there are a ton of modules and its hard to sort out the best ones, but I suspect this might not be the best way.  It might be the worst idea ever for Node.node already has a standard library: https://nodejs.org/api/

For module discovery, focused packages are easier to find than all-in-one grab bags:
https://github.com/substack/node-mkdirp/issues/17#issuecomment-5863086

Documentation, tests, and contributing is also easier with separate packages when the versions of packages can iterate independently of one another. With a grab-bag standard library, if one function changes its signature in a breaking way, the entire package should update its major version, even though each function is relatively independent.

From what I've seen in sprawling ""batteries included"" approaches in other languages, standard libraries are where software goes to die. Bugs calcify into features and you can't ever break an API because versions are completely coupled. Better libraries emerge in the ecosystem, but the standard library has to either ignore them to focus on stability or take in every new idea, breaking frequently and having a meaningless release cycle.

If you want to introduce curation, using the module loader is a terrible idea. There are so many other better ways.Interesting concept. Is this going to be A) basically a vetted list of existing packages, B) forks of existing packages, C) a bunch of from-scratch packages?There is nothing in there. Nothing is standard Maybe make a Yeoman generator and brand your standard.  Like 'StuartMill stdlib' or something.  Then people will understand its ok to come up with their own standard.";"node already has a standard library: https://nodejs.org/api/

For module discovery, focused packages are easier to find than all-in-one grab bags:
https://github.com/substack/node-mkdirp/issues/17#issuecomment-5863086

Documentation, tests, and contributing is also easier with separate packages when the versions of packages can iterate independently of one another. With a grab-bag standard library, if one function changes its signature in a breaking way, the entire package should update its major version, even though each function is relatively independent.

From what I've seen in sprawling ""batteries included"" approaches in other languages, standard libraries are where software goes to die. Bugs calcify into features and you can't ever break an API because versions are completely coupled. Better libraries emerge in the ecosystem, but the standard library has to either ignore them to focus on stability or take in every new idea, breaking frequently and having a meaningless release cycle.

If you want to introduce curation, using the module loader is a terrible idea. There are so many other better ways.";node
2015-09-03 23:16:44;When is the new Node.js site going to link to a v4.x download and have you guys had any issues upgrading straight to that from v10.x?;"Looks like they are still wrapping up pull requests right now. I'd expect a late publish today or maybe tomorrow at this point. 

https://github.com/nodejs/node/issues/2522

Regarding upgrading... That's a loaded question. Too many variables (literally) to give an answer to that. 

*Edit:* Postponed until Monday. [deleted]I'm most curious how long it will take packages on npm to be tested and published with fixes.I'm curious as to what new features there will be..

edit: I'm guessing I could just compare io and node.";"Looks like they are still wrapping up pull requests right now. I'd expect a late publish today or maybe tomorrow at this point. 

https://github.com/nodejs/node/issues/2522

Regarding upgrading... That's a loaded question. Too many variables (literally) to give an answer to that. 

*Edit:* Postponed until Monday. ";node
2015-09-12 07:17:51;We need a stickied thread for confirming what libs work and what don't with node 4.0.;https://github.com/nodejs/node/issues/2798Just look at the Travis (or similar) badge on the repo.;https://github.com/nodejs/node/issues/2798;node
2015-09-12 03:10:31;iisnode and promoteserverVars;Why would your run iisnode?Is there any chance you are setting those server variables in an http module? There's an [open issue](https://github.com/tjanczuk/iisnode/issues/317) regarding that. I'm not an expert in iisnode, but I'm very familiar with both iis and node. I might be able to play around with this at some point. ;Is there any chance you are setting those server variables in an http module? There's an [open issue](https://github.com/tjanczuk/iisnode/issues/317) regarding that. I'm not an expert in iisnode, but I'm very familiar with both iis and node. I might be able to play around with this at some point. ;node
2015-10-06 09:32:04;Why ES6 Has Classes;"Does not justify the 'why' part.

> The answer is that classes and inheritance are core aspects of JavaScript development and there is a standard way to do them in ES6 using the class and extends keywords.

Needs examples and more reasoning....What is this even? What are you even on about? 

The concept of a class and implementation of classes in Javascript are two completely different things. You've literally made no valid points for the *class* keyword which is being introduced in ES6.

If we look at TypeScript's transpilation of the class keyword, we can see that classes are basically closures that return a user-defined object type.

```
var Car = (function () {
    function Car() {
    }
    return Car;
})();
```

One of the biggest arguments against ES6 classes are that it's just syntactical sugar around basic JavaScript patterns. You haven't mentioned this at all. In fact, the more I read your page the worse it gets. What does React.js have anything to do this JavaScript classes? Why did you even make this page?

**Edit:** if this isn't enough, you went and [opened a GitHub issue](https://github.com/nodejs/node/issues/3209) on the Node.js repo that directly contradicts the points made in this article. Idk if anyone else feels this way, but right now I believe a big solid **fuck off** is warranted. We already have enough noise in the Node.js community.I think your point is that where there were once many ways to make a JavaScript class-like object, there is now one preferred way.  It is a valid point but somewhat obscured by the rhetorical voice you employ in this story.  I would suggest you rewrite your argument a little.  Just a kind suggestion.  If you do please consider dropping me a note here: https://github.com/Hypercubed/javascript-the-esoteric-parts";"...What is this even? What are you even on about? 

The concept of a class and implementation of classes in Javascript are two completely different things. You've literally made no valid points for the *class* keyword which is being introduced in ES6.

If we look at TypeScript's transpilation of the class keyword, we can see that classes are basically closures that return a user-defined object type.

```
var Car = (function () {
    function Car() {
    }
    return Car;
})();
```

One of the biggest arguments against ES6 classes are that it's just syntactical sugar around basic JavaScript patterns. You haven't mentioned this at all. In fact, the more I read your page the worse it gets. What does React.js have anything to do this JavaScript classes? Why did you even make this page?

**Edit:** if this isn't enough, you went and [opened a GitHub issue](https://github.com/nodejs/node/issues/3209) on the Node.js repo that directly contradicts the points made in this article. Idk if anyone else feels this way, but right now I believe a big solid **fuck off** is warranted. We already have enough noise in the Node.js community.";node
2015-10-07 15:25:20;Yeoman frustration;"""mkdir lines start before the git clone is finished"" spawnCommand is async, you need to listen to ""close"" event (from https://github.com/yeoman/generator/issues/545#issuecomment-41847208)";"""mkdir lines start before the git clone is finished"" spawnCommand is async, you need to listen to ""close"" event (from https://github.com/yeoman/generator/issues/545#issuecomment-41847208)";node
2015-10-18 20:44:28;Express response corrupts file;"Sounds similar to this: https://github.com/aheckmann/gridfs-stream/issues/48[This](https://github.com/aheckmann/gridfs-stream/issues/76) looks relevant. Are you using livereload? 

Otherwise, can you pop open the corrupted file with a hex editor to look for clues?

Also, instead of:
    
    readstream.on('data', function(data) {
        res.write(data);
        localWriteStream.write(data);
    });
    readstream.on('end', function() {
        res.end();
        localWriteStream.end();
    });
    readstream.on('error', function(err) {
        throw err;
    });   

I think you can use:

    readstream.pipe(res);
    readstream.pipe(localWriteStream);
    readstream.on('error', function(err) {
        throw err;
    });Try piping the write stream through the read stream. ";"[This](https://github.com/aheckmann/gridfs-stream/issues/76) looks relevant. Are you using livereload? 

Otherwise, can you pop open the corrupted file with a hex editor to look for clues?

Also, instead of:
    
    readstream.on('data', function(data) {
        res.write(data);
        localWriteStream.write(data);
    });
    readstream.on('end', function() {
        res.end();
        localWriteStream.end();
    });
    readstream.on('error', function(err) {
        throw err;
    });   

I think you can use:

    readstream.pipe(res);
    readstream.pipe(localWriteStream);
    readstream.on('error', function(err) {
        throw err;
    });";node
2015-10-26 14:48:47;Using TypeScript AND Babel TOGETHER In Your NodeJS Code;"FYI, newer versions of TypeScript (1.7+) can build to ES6 with commonjs. (https://github.com/Microsoft/TypeScript/issues/4806

I imagine there are some ES6+ features in TypeScript that aren't supported with `node --harmony`, and for those this article's advice is still relevant.";"FYI, newer versions of TypeScript (1.7+) can build to ES6 with commonjs. (https://github.com/Microsoft/TypeScript/issues/4806

I imagine there are some ES6+ features in TypeScript that aren't supported with `node --harmony`, and for those this article's advice is still relevant.";node
2015-11-13 19:28:34;Is ExpressJS still an active project?;"Express is one of the most supported and maintained http frameworks for node.  Tons of production code relies on it and a lot of large companies use it.

Version 5 is in the works and is coming soon.  Express has been modularized significantly over the last year, which may obscure how much attention the project receives on a daily basis.  

The best alternative to express ime is Hapi js.  It's also well supported and extremely well battle tested. 

Koa is also a popular alternative but has historically relied on cutting edge language features that required special flags. With native support for most of these now in node 4+, this is less of a pill to swallow, but I like to stick with express/happi unless my explicite goal is to take advantage of es6 features.IBM acquired Strongloop in early Sept.  The delays might have something to do with that.I noticed the same last month and asked about it on hacker news: https://news.ycombinator.com/item?id=10482069. Feels really weird!For future readers: 

this happened to ExpressJS- https://github.com/strongloop/express/issues/2844[deleted]";"For future readers: 

this happened to ExpressJS- https://github.com/strongloop/express/issues/2844";node
2015-11-29 13:36:26;Node.js limit ram usage;"Sounds like you need to rewrite your web scrapper.................from: https://github.com/nodejs/node/issues/3370
Your app will crash as soon as you hit 256mb when using `--max-old-space-size=256`

One thing to do would be to let your app crash and use `pm2` to restart it.
You could also use a queue (ie. RabbitMq) and having two processes:

* webserver that push to the queue
* worker that you let crash when memory consuption got over a certain levelFirst, to limit it, use `ulimit`.

However, what you probably want to do is make sure that your task fits in memory -- I suspect you're retaining everything, and nothing is garbage collected. Time to take an incremental approach to whatever you're doing, whatever unit of increment makes sense (document at a time, or a streaming parser, or whatever)Your issue here seems more like a memory leak due to a bug in your code. Try using [heapdump](https://github.com/bnoordhuis/node-heapdump) to get a better idea of what in your application is using so much memory. Its readme should give you a good idea of how to use it.";"from: https://github.com/nodejs/node/issues/3370
Your app will crash as soon as you hit 256mb when using `--max-old-space-size=256`

One thing to do would be to let your app crash and use `pm2` to restart it.
You could also use a queue (ie. RabbitMq) and having two processes:

* webserver that push to the queue
* worker that you let crash when memory consuption got over a certain level";node
2015-12-04 13:49:08;Top 100 Node.Js Frameworks;"I'm just curious - are you related to [CSSAuthor](http://www.cssauthor.com/node-js-frameworks/) where this word-for-word article first appeared?

If so perhaps it'd ease confusion if you made that more clear (or better for you - don't word-for-word reproduce articles on different sites).  If not, might be best to rather attribute original creator and provide your personal take on their list.aka - ""Every framework that came up in a search result, with no insight into the pro's and con's or appropriate use cases - really, no insight whatever. More useless than a BuzzFeed listicle""That article is waste of time and way below standard I would expect on that subreddit. It's basically top 100 ways to say ""it's Node framework to build applications"" with pictures of landing pages.On a related note, please add your voice to [this issue](https://github.com/corruptmem/nodejsmodules/issues/3) to get the https://nodejsmodules.org/ guys to fix their cert.

Archive link to see what it's about: https://archive.is/yO9si";"On a related note, please add your voice to [this issue](https://github.com/corruptmem/nodejsmodules/issues/3) to get the https://nodejsmodules.org/ guys to fix their cert.

Archive link to see what it's about: https://archive.is/yO9si";node
2015-12-11 10:37:30;Stable version of credential released - Easy password hashing and verification in Node;"We are still looking for security experts to review the library
https://github.com/ericelliott/credential/issues/8";"We are still looking for security experts to review the library
https://github.com/ericelliott/credential/issues/8";node
2016-01-17 16:15:54;Is Express.js dying?;"Considering all of the projects which rely directly on express, I don't believe it will be dying anytime soon. For example there is kraken, which is built by PayPal. PayPal uses that framework internally and probably won't be getting rid of it anytime soon. So unless they replace express with something else in their framework they have to rely on it. This is just one of many framework presently relying on Express 
On top of that, Express really is more of an extension the node libraries than it is a new framework. To me it seems like how node hTTP is supposed to be. This is different with other frameworks, for example sails or hapi, which feel more like entirely new libraries. They stand out as being amazing libraries, but Express really stands out for feeling like in a natural extension of the node core libraries.
I don't feel as though we going away anytime soon. That being said, it has bothered me for some time that strongloop purchased it. That purchase has made me personally question where the framework will go.Dude, seriously? That's the best way to actually kill a project. By asking if it is dead, you're shaking the confidence of those who may use it, regardless whether it's true or not.

When a project has matured, it is perfectly normal, even healthy, that development slows down. I would worry if it didn't.

The whole issue about repository ownership will be settled in time. In those moments of uncertainty, the best thing to do is to be patient, not publicly asking ""is this the end?""It's on the verge of being forked. That's about it. If the corporate side can't keep up, it'll get forked. Seems just like a classic case of what happens when corporates who have no real idea how this should be handled take charge. Happened to node.js itself (io.js) and I'm sure it'll happen to this too. Considering v5 is in the works, no.https://github.com/strongloop/express/issues/2827#issuecomment-164218546

**TL;DR**  
NoIf there is contention around  whether or not Express is going to be viable long-term, which some of the comments in that link seem to indicate, what are our real-world alternatives? I've used Express in one of my projects, and it's great, but I have to admit I'm concerned about things like the amount of overhead it adds - especially for relatively simple tasks like serving up static pages or a basic REST api.

What is out there that's comparable, in case Express really does end up withering on the vine?Meh, who cares? 

Than we will have something new.";"https://github.com/strongloop/express/issues/2827#issuecomment-164218546

**TL;DR**  
No";node
2016-01-26 13:26:03;Speed up npm 2x by disabling the progress bar;"Guessing they don't throttle the draw call.

Drawing every 1/4 of a second is usually more than enough for me when it comes to progress bars. If you're really picky, you can update every 40 ms, that's 25 updates a second and beyond that you will not see any meaningful difference visually.

..Just don't redraw the entire ansi progress bar every time data goes through it.[Here's a great comment](https://github.com/npm/npm/issues/11283#issuecomment-175246823) on the npm GitHub issue explaining what's going on (not my comment)[deleted]That's pretty ironic, considering that Nodejs is all about async.";[Here's a great comment](https://github.com/npm/npm/issues/11283#issuecomment-175246823) on the npm GitHub issue explaining what's going on (not my comment);node
2016-01-31 18:54:59;Can't use ES6 modules in Node v5 ?;"Node doesn't yet support all ES6 features. A list of supported ones can be found here: https://nodejs.org/en/docs/es6/

The reason is because Node's feature support is tied to V8.For now, you need to use a transpiler that supports module loading/bundling (Babel, Traceur, TypeScript, rollup, etc). 

Long story short, there are multiple module specifications/standards in JavaScript (ES6, CommonJS, AMD, and UMD). Most backend JS engines implemented CommonJS when they were first created (Node.js, MongoDB, PhantomJS). ES6 module standard is relatively new and is semantically different from CommonJS (as in not 100% compatible), so most engines haven't gotten around to implement support for it. 

Here's an issue reported in Node.js repo of your problem: 
https://github.com/nodejs/help/issues/31

If you don't want to use transpiler, you should stick with CommonJS import: 

    var express = require('express');

In case you are wondering how CommonJS and ES6 module systems differ beyond just syntax: they differ in how they handle ""default"" exports and how they resolve circular dependencies. dont think that's supported yet without babel.
on this page you can find more info on what is supported (you need to use strict mode for most too) : https://nodejs.org/en/docs/es6/I think you need to use babel for imports, might be wrong.Try require instead?Node does not natively support full ES6. You can, however, write ES6 and compile to ES5. 
Here is a small useful starter:
https://github.com/liady/es6-library-minimal[deleted]";"For now, you need to use a transpiler that supports module loading/bundling (Babel, Traceur, TypeScript, rollup, etc). 

Long story short, there are multiple module specifications/standards in JavaScript (ES6, CommonJS, AMD, and UMD). Most backend JS engines implemented CommonJS when they were first created (Node.js, MongoDB, PhantomJS). ES6 module standard is relatively new and is semantically different from CommonJS (as in not 100% compatible), so most engines haven't gotten around to implement support for it. 

Here's an issue reported in Node.js repo of your problem: 
https://github.com/nodejs/help/issues/31

If you don't want to use transpiler, you should stick with CommonJS import: 

    var express = require('express');

In case you are wondering how CommonJS and ES6 module systems differ beyond just syntax: they differ in how they handle ""default"" exports and how they resolve circular dependencies. ";node
2016-02-07 21:18:24;Automatically switch versions of node by looking for a .nvmrc file in the path tree;"You can do this with a .node-version file already. 

Edit: Sorry, I was thinking of nodenv. There is an issue open for nvm to support it: https://github.com/creationix/nvm/issues/794";"You can do this with a .node-version file already. 

Edit: Sorry, I was thinking of nodenv. There is an issue open for nvm to support it: https://github.com/creationix/nvm/issues/794";node
2016-02-05 17:05:16;How to ease concerns about scalability and maintainability in Node/Express.;"I'd say scalability and maintainability is mainly achieved by good application design rather than a language or stack you pick. In my company we are currently shifting to microservices to achieve that. Small services can be scaled independently. Also maintaining a small project is way easier than a monolith. And nodejs is just great at microservices if you use it with pm2 and shipit. 

As already mentioned take a look at koa. I find it even easier and cleaner to use. Your developers just have to wrap their heads around promises and generators which can be weird at first sight.This is an opinionated reply; you've been warned.

I find that most applications that are badly structured or don't use common programming paradigms fall into the same pit of lacking maintainability. I've seen many ASP.NET applications become nightmares to work with so maintainability for me is all about design decisions: moving away from monolithic architecture, following a code convention, agreeing on project structure, etc.

In regards to scalability I can't give you hard, concrete advice because I haven't run an external service in production that receives 10,000 requests a second. However, here are some ideas I would tackle if I were faced with the situation where I need to make my Node.js application massively scalable.

Node.js is single-threaded. Unless you are taking advantage of Node's `cluster` feature, which I would suggest you stay away from for the sake of simplicity, this means your multi-core servers aren't getting put to good use. Luckily, there is a Node.js application named [PM2](https://github.com/Unitech/pm2) which will easily let you spin up multiple processes of your Node.js application on different cores (which it itself uses `cluster` to perform load balancing). If you design your application in a way where it is stateless, you can launch an instance of your application per core (so 8 instances on an 8 core machine). You can even commission more machines running PM2 and use NGINX to load balance between those machines. Again, just an idea.

When benchmarking Flask using `ab` on my local computer I noticed some severe performance issues compared to Node.js. Obviously, there are better ways to benchmark but that was enough to disqualify Flask for me. I've looked at Go and frankly I don't like the language at all. I find it to be a mess and extremely painful to work with. If your team likes Go then maybe you should go down that route but I wouldn't jump on the hype train just yet.

While there are questions about Node.js and its future, major companies are already behind it and using it in production for real use cases (Netflix, Uber, PayPal). It's no longer the new shiny and you can bet that the market for Node.js will grow. Development on many Node.js modules is still underway due to ES7 so the goal really is to pick something that works for you.

One last bit: Express is not the only web server framework for Node.js out there. There's also Koa and hapi. I would recommend doing some research on each of these to see if it's something that might interest you.

Don't let people dissuade you. While Node.js isn't the silver bullet everyone wants, it's definitely very powerful and I can attest to its simplicity. Don't do CPU intensive operations on a Node.js process and you'll be fine. Find something you like using, make sure it can be run reliably in production, and then ship it.Express has been going through some questions recently [about its future](https://github.com/strongloop/express/issues/2844). It does look like it is going to move to the Node foundation soon so that may alleviate any worry about its long-term future. As of right now its basically a rudderless project.

Its very difficult even after all these years to find a  good example of a long-term maintainable Express-based project with code you can review. There may be a lot of these running behind closed doors, but for the most part, if you look online its just a lot of small example apps, **and its been years**.

JavaScript suffers a bit from [TMTOWTDI] (https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it) which makes maintainability tough unless your team keeps the ""how we do it"" very strictly controlled. Callbacks, Promises, Async, Modularity, Testing, it can all add up to a mess if people are not in lock-step with how to get things done. 

There are also a lot of choices besides Angular for the front-end stuff. It is leading to [JavaScript fatigue](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4) and this may become an issue for you depending on how long you think you will be working with this stack. It seems like no matter what stack (& tooling) is being recommend this month, things could look very different in the near future. You don't have problems like this to this degree with PHP. 

You may want to add something like Go to your evaluation, it is not as well known as JS, but has alleviated some of these problems [for some teams](http://thenewstack.io/from-node-js-to-go-why-one-startup-made-the-switch/).

Wish I could be more helpful. Been feeling a bit of this burnout myself. :(
Do a PoC and prove it out. 

If you are interested in microservices look into nearForm as they have been doing microservices with node for years. 

There are plenty of case studies to help persuade management, just have to look. 

Join your local node meetup and attend the meetings. The node community is a social one, you can gain a lot of insight from talking to others. Check out Strongloop and Koa. Koa is from the original devs of express and has some interesting work going on, and is designed around middleware. Strongloop/loopback is pretty mature and allows rapid development and has an Angular SDK, common models shared by angular and your backend, and has some neat API creation features (swagger is under the hood). Strongloop/loopback was also just acquired by IBM so it will probably get support from them for a good while. But still open source.

Recommend doing the loopback app tutorials to get a quick demo up. Good luck!So, firstly I'm an c# dude ( senior dev), and I mostly use both asp.net mvc and node js ( I hate Web forms, they suck).  Now that this is out of the way, my 2 cents :

It's all about the team that works the project,  if they are open minded and ready to jump ship on the new tech stack... 
I currently an involved as tech lead for an IoT management project that uses node,  all of the team, except me are seasoned net devs with no js xp ,  they went from hating it to accepting it and started to be a bit productive. The bad part is that in the first month I had to review and explain mostly everything,  the velocity was quite crappy. 

Now things started to go smoth. 
I haven't said anything about the technology performance cause it's all about your architecture and how you build it. We use Travis rabbit docker just to name a few..Like most people said, its really about good design and practices etc. rather than a particular stack that determine maintainability and scalability.

Having said that, Node.js and JavaScript are currently excellent in terms of enabling both maintainability and scalability.  I did development in C# on the desktop and web server for several years before mainly doing PHP for a few years and then moving on to Node.js.  So from experience I know that moving to Node and JavaScript is a big win for scalability and maintainability.  Of course, it will take a significant amount of time to become familiar with new programming languages and platforms, and good design and practices are important as always.

# Maintainability

## Modular Design

Modular design has a huge impact on maintainability.  Modular design is the focus of Node.js application design.  There are more than 200,000 packages on npm because of this focus that Node developers have on well-factored code and code re-use.  The `npm` system is first class in terms of packaging up dependencies, handling semantic versioning, etc.

## Component Support

The latest versions of ECMAScript (in latest browsers or with babel) now have great support for classes.  Angular 1 and now 2 have very strong support for UI components.  The latest version of ECMAScript is an excellent language overall and I highly encourage you to use it.

## Impedance Mismatch

Developing with MongoDB eliminates the object-relational impedance mismatch (I would stay away from Mongoose personally).

## ESLint

ESLint and similar tools will help catch syntax errors before your tests.

## TDD/BDD

There is also a strong culture of test-driven/behavior-driven development in Node and JavaScript communities.  Automated testing can make a massive improvement in maintenance turnaround if you consider the time tracking down bugs from changes.

# Scalability

## Asynchronous I/O by Default

Waiting for IO can kill the effective performance of a synchronous server application. The default operating mode for Node.js's input/output, however, is asynchronous, which means your application doesn't get held up waiting for one IO operation to complete.  This means that one process can handle thousands of requests in a short time.  Compare that with something like a PHP application running on Apache server where each user request might be using the resources of an entire process, and you can see massive scalability gains from the start.  (I know, most people don't use Apache anymore, but you will still see big resource efficiency gains). 

Now with babel and the new `async/await` syntax you get that default concurrent input/output along with a simple synchronous syntax.
 
## Server/VM Cost

Also, compared to something like Windows, Node.js runs on Linux, which depending on the system can have a fairly tiny resource footprint compared to a Windows server.  Linux cloud servers also cost less than Windows.Question, when you say 'he knows ASP', you don't mean actual ASP do you?  Because there used to be this thing many years ago called ASP, that came before and was totally different from ASP.NET.  No one uses classic ASP anymore for new projects that I know of.Maintainability and enterprise support are the two main focuses of the node maintainers right now.

If you're in an environment where c# is used, have a look at nodesource.  These guys are at a lot of the sfnode meetups giving talks and long term support for real ""grown up"" companies and graduating node from being seen as more of a startup /io only kind of platform is seen as the future.

Same stance from the npm folks.  In my opinion there's never been a better time to start your organization moving in a node direction.

Just, as other people have mentioned, focus on microservices.  With devops more or less being a solved problem with docker, Heroku, etc, there's no reason why any part of your system needs to be monolithic.   Lots of tiny applications with one job makes testing and architecture much easier.

Your c# guy will be blown away in six months :)";"Express has been going through some questions recently [about its future](https://github.com/strongloop/express/issues/2844). It does look like it is going to move to the Node foundation soon so that may alleviate any worry about its long-term future. As of right now its basically a rudderless project.

Its very difficult even after all these years to find a  good example of a long-term maintainable Express-based project with code you can review. There may be a lot of these running behind closed doors, but for the most part, if you look online its just a lot of small example apps, **and its been years**.

JavaScript suffers a bit from [TMTOWTDI] (https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it) which makes maintainability tough unless your team keeps the ""how we do it"" very strictly controlled. Callbacks, Promises, Async, Modularity, Testing, it can all add up to a mess if people are not in lock-step with how to get things done. 

There are also a lot of choices besides Angular for the front-end stuff. It is leading to [JavaScript fatigue](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4) and this may become an issue for you depending on how long you think you will be working with this stack. It seems like no matter what stack (& tooling) is being recommend this month, things could look very different in the near future. You don't have problems like this to this degree with PHP. 

You may want to add something like Go to your evaluation, it is not as well known as JS, but has alleviated some of these problems [for some teams](http://thenewstack.io/from-node-js-to-go-why-one-startup-made-the-switch/).

Wish I could be more helpful. Been feeling a bit of this burnout myself. :(
";node
2016-02-22 12:13:18;Using Node.js Event Loop for Timing Attacks;"TLDR: You can hack a password  by determining the amount of time it takes for requests to be processed. 

For each character that you guess correctly, the API will take slightly longer because it's doing a character by character comparison. 

The take away is use a fixed time (independent of length) password validation algorithm. XORing the password with the one stored is recommended. 
So I guess that this would be solved by using hashes, am I correct with that assumption?I still have yet to see any convincing evidence that timing attacks are feasible over the Internet. Reposting my comment from /r/netsec because I think it's still relevant:

The write-up is interesting but the target server implementation they gave is a very very contrived example and would never exist is reality.

Although timing attacks are possible theoretically, I have never been able to create a proof of concept against JavaScript or other interpreted, high-level languages.

Even in the best-case scenario where you can time the execution directly inside the source code rather than sampling it through the HTTP response time, I still can't find a proof of concept.

I'd honestly love to see someone prove me wrong and write a working proof of concept for this (modified) vulnerable code sample they gave:

    function isAuthenticated(correctToken, token) {
        return correctToken === token;
    }

If we do take theoretical attacks into account, then we'll also have to take into account that V8 (the Node.js JIT) could optimise-out their proposed constant time compare mitigation as stated in:

https://github.com/nodejs/node-v0.x-archive/issues/8560

It would be really interesting to see some discussion on the topic of timing attacks!ctrl-F > ""hash""

No results found.";"Reposting my comment from /r/netsec because I think it's still relevant:

The write-up is interesting but the target server implementation they gave is a very very contrived example and would never exist is reality.

Although timing attacks are possible theoretically, I have never been able to create a proof of concept against JavaScript or other interpreted, high-level languages.

Even in the best-case scenario where you can time the execution directly inside the source code rather than sampling it through the HTTP response time, I still can't find a proof of concept.

I'd honestly love to see someone prove me wrong and write a working proof of concept for this (modified) vulnerable code sample they gave:

    function isAuthenticated(correctToken, token) {
        return correctToken === token;
    }

If we do take theoretical attacks into account, then we'll also have to take into account that V8 (the Node.js JIT) could optimise-out their proposed constant time compare mitigation as stated in:

https://github.com/nodejs/node-v0.x-archive/issues/8560

It would be really interesting to see some discussion on the topic of timing attacks!";node
2016-02-19 20:03:16;New node logo;"Of all the ideas/images that have been [suggested](https://github.com/nodejs/evangelism/issues/179), i can't help but feel a bit disappointed.Was the old logo even old? Why was any effort at all dedicated to this waste of time. This looks like it would be a cool *twist* for a special node event or something. Its not even different. good one. Actually like it...That is hideousNothing brings me back to 2009 (the year node was initially released) like 5 gradientsThe old one was so much better.Maybe I'm just a minimalistic heathen but I think the old one looks nicer...It's fine, a bit too much going on for my liking though. I updated the reddit alien above to the new logo for funzies. The detail isn't very noticeable at small sizes though (which is another mark against the logo).Because every day I come to work and say to myself Damn nodejs really needs a better logo. 

Who am I kiddding, I didn't even know there _was_ a logo. Or didn't care. [**@mikeal**](https://twitter.com/mikeal):
>[2016-02-19 18:41:07 UTC](https://twitter.com/mikeal/status/700751984987475968)

>New Node.js Logo. [*pic.twitter.com*](http://pbs.twimg.com/media/CbmSN46UcAApScA.jpg) [^[Imgur]](http://i.imgur.com/Gxlum39.jpg)

----

[^[Mistake?]](/message/compose/?to=TweetPoster&subject=Error%20Report&message=/46mi0w%0A%0APlease leave above link unaltered.)
[^[Suggestion]](/message/compose/?to=TweetPoster&subject=Suggestion)
[^[FAQ]](/r/TweetPoster/comments/13relk/)
[^[Code]](https://github.com/buttscicles/TweetPoster)
[^[Issues]](https://github.com/buttscicles/TweetPoster/issues)
IMO the colors are too dark...reminds me of military fatigues.I appreciate the effort,  making a logo is not so easy, however, I don't like this one at all. Sorry :(
Given the preoccupation with logos in the node community, I doubt this one will last more than a year or two max -- which is good.  :)

The gradients and overall shape make it seem dated and ill conceived to me.  How do you best frame/align a ""T"" design like that in normal shape containers that come up often. (rectangles, circles, etc)  I don't even remember what the old one looked like by comparison.I really like it. Sure I can nitpick a bit about personal preference on the gem, but it looks good and modern and legibleWhat's the fucking point?http://i.imgur.com/GBuflbJ.gif";Of all the ideas/images that have been [suggested](https://github.com/nodejs/evangelism/issues/179), i can't help but feel a bit disappointed.;node
2016-03-06 14:01:40;Big open source projects using Jade/Express;"[\*cough\* pug \*cough\*](https://github.com/pugjs/jade/issues/2184)I use Koa on the server and not Express, but every project I do, including my company's product uses both Jade on the server view rendering, and as a Webpack loader for templates in Angular.

What exactly are the issues you're running into?Can you describe how your jade templates are getting out of control?Describe out of hand. What is structure like?Sorry, I can't say any examples, but I found handlebars to be easier to break apart and more manageable at scale.";[\*cough\* pug \*cough\*](https://github.com/pugjs/jade/issues/2184);node
2016-03-10 09:02:39;Reliable Node.js ORM for RDBMS;"I've been using Objection.js for a while now and love it! It's a good combination of ""staying out the way"" and powerful features.

Here (https://github.com/Vincit/objection.js/issues/11) you can find pointers on the Objection vs. Bookshelf discussion. And incase you missed it, theres a bunch examples in ES5, ES6 and even ES7 in the repo (https://github.com/Vincit/objection.js/tree/master/examples).

Hope that helps out!for SLQ dbs, knex is the best IMHO.I'm going to strongly recommend against using Sequelize. I had nothing but nightmares with it. Just don't even bother.

KnexJS is the way to go, it's simple, behaves in a predictable manner, and is basically 1:1 with SQL.

As you need to access data from your DB, use the MySQL or Postgres CLI to write the query and experiment. Once you're happy with the query, translate it to Knex calls and move on to your next feature. No surprises, no frustrating ""How do I translate this SQL to sequelize calls?""

By the way, SQL is *super* high level, I don't know how a huge collection of programmers got duped into believing they need an ORM for their project.Go on bookshelfjs site and under the ""projects using boohshelf"" section is a project called soapee. It's written in es6 and is a great reference for how to set things upI was in your same boots about a month ago. I had heard great things about Sequelize and assumed it was the best so that's what I used. Ugh what a nightmare it was. There were so many undocumented ""features"" and no explanation on how to do certain things. Here is a perfect example of me complaining about missing documentation: https://github.com/sequelize/cli/issues/261

I took a step back and found http://bookshelfjs.org/ which is an ORM that wraps around another library called Knex. Knex isn't really an ORM but rather a query builder.

Anyways, I jumped over to using Knex and it was SOOOO much easier and faster to learn than Sequelize. I never looked back. At some point I'll convert some of my code to use BookshelfJS since it integrates with it.

So yeah. +1 for Knex / BookshelfJS.    -1 for Sequelize even though it seems very popular.As /u/bschwind mentioned, I would be advising you to stay way form Sequelize. If you still insist on using one, knex looks fine. Have a look at node-orm2! 

Regarding your ES6 issue, why not try it yourself? I don't think having ORM alone in ES5 will work, but you can turn it off only for ORM part, but not 100% sure until we do so.There is also http://docs.sequelizejs.com/en/latest> particularly how do i convey exports.up/exports.down in es6?

you can probably just do 

    export function up() {}

or you may have to just use CJS modules for that one set of files, which answers your question yes you can have the knesxfile use node style modules and the rest of your app compile to es6 with babel.  That being said you can use a good portion of ES6 in node without having to compile anything (including classes, arrow functions, generators, const/let) so it might make more sense to not compile anything and use ES5 modules along with the ES6 features of node.I've been using [Massive.js](https://github.com/robconery/massive-js) -- it's for PostgresQL only, but it's less of an ORM, more of a ""helper"" library.I haven't found one I really like and is documented well with good tutorials. At this point I'm doing raw queries. I know SQL already, no point in a middleman. bookshelf is nice. knex is there when you need it.Check out sequelize.jsYou should check waterline: https://github.com/balderdashy/waterline";"I was in your same boots about a month ago. I had heard great things about Sequelize and assumed it was the best so that's what I used. Ugh what a nightmare it was. There were so many undocumented ""features"" and no explanation on how to do certain things. Here is a perfect example of me complaining about missing documentation: https://github.com/sequelize/cli/issues/261

I took a step back and found http://bookshelfjs.org/ which is an ORM that wraps around another library called Knex. Knex isn't really an ORM but rather a query builder.

Anyways, I jumped over to using Knex and it was SOOOO much easier and faster to learn than Sequelize. I never looked back. At some point I'll convert some of my code to use BookshelfJS since it integrates with it.

So yeah. +1 for Knex / BookshelfJS.    -1 for Sequelize even though it seems very popular.";node
2016-03-28 08:59:18;EverythingStays – Immutable and Distributed Node.js Modules [x-post /r/ipfs];"Another alternative not limited to nodejs is [gx](https://github.com/whyrusleeping/gx)it was only a matter of time before someone made a decentralized npm alternative.

definitely an interesting project to keep an eye on but it seems like you are going a little too fast. 

instead of everyone building their own implementation of a decentralized pm (which is actually ironic as it is reinventing the wheel) we should first discuss and carefully evaluate our options.

if you didn't already see these you should definitely check them out:

* https://github.com/nodejs/NG/issues/26
* https://github.com/nodejs/NG/issues/29
";"it was only a matter of time before someone made a decentralized npm alternative.

definitely an interesting project to keep an eye on but it seems like you are going a little too fast. 

instead of everyone building their own implementation of a decentralized pm (which is actually ironic as it is reinventing the wheel) we should first discuss and carefully evaluate our options.

if you didn't already see these you should definitely check them out:

* https://github.com/nodejs/NG/issues/26
* https://github.com/nodejs/NG/issues/29
";node
2016-04-02 10:10:33;Can someone suggest a koa2 skeleton/starter kit that uses babel and has example of how to deploy in production?;"I have not personally looked for a Koa2 starter yet. I am apprehensive of running Node code through Babel as Node is hard enough to debug as it is.

However, Babel provides a good example of how to run a node server through it: https://github.com/babel/example-node-server

More specifically you are probably interested in this section: https://github.com/babel/example-node-server#getting-ready-for-production-useThis is from koa's wiki - https://github.com/geekplux/koa2-boilerplateThis are two approaches:
https://github.com/ScottKaye/koa2-barebones-example

https://github.com/mapmeld/1batch/wiki/02.-Setting-up-a-basic-KoaJS-server

You can stay up to date through following this issue: https://github.com/koajs/koa/issues/533I've got one - https://github.com/jeffijoe/koa-es7-boilerplate

The deployment you'll have to do yourself, but there are scripts for precompiling with babel so all you'd have to do would be deploying the  `dist` folder.

It contains testing and linting scripts as well.";"This are two approaches:
https://github.com/ScottKaye/koa2-barebones-example

https://github.com/mapmeld/1batch/wiki/02.-Setting-up-a-basic-KoaJS-server

You can stay up to date through following this issue: https://github.com/koajs/koa/issues/533";node
2016-04-12 14:30:47;Experiences with Koa v2?;"Using Babel to transpile Node code does not seem safe to me. By ""safe"" I mean easy to debug. I have very little experience with debugging transpiled Node code, so maybe its not as hard as I imagine.

edit: I made a little blog post about the migration from koa v1 to v2. I'm happy to PM you the link or post it here in this comment thread. (I already posted it to this subreddit a little while back). Basically, if you plan ahead just a little, the migration from v1 to v2 will be very easy once Node supports async/await natively. 

Changing the function signatures might even be something that could be automated with a custom babel plugin. I think a series of regex operations could even do it.I'm using Koa2 for a REST API, no problems with stability or debugging so far. I'm transpiling using babel with source map support. I guess the biggest down side I've encountered is lack of V2 middleware and V2 documentation. There is a [module](https://github.com/koajs/convert) for converting V1 middleware to V2. The lack of docs isn't too much of an issue as Koa is very minimalistic in the first place, but there are some Koa2 project examples floating around on Github/elsewhere.Read this https://github.com/koajs/koa/issues/533 , I don't know anyone who migrated, but I guess someone must have.Note: Koa 2 actually has zero dependency on async/await. All you need is functions that return promises. So if you're worried about transpiling server-side code, just to get async/await, you could do:

    co.wrap(function*(next, ctx) { yield next; })

...wherever you'd normally do:

    async function(next, ctx) { await next; }

No transpilation necessary. It wouldn't be a very deep refactor to sweep through later and update to async functions, since the semantics are so similar.";Read this https://github.com/koajs/koa/issues/533 , I don't know anyone who migrated, but I guess someone must have.;node
2016-04-10 00:34:13;"Does the ""pg"" module prevent sql injection?";"[deleted]I use the PG module for production and all I have to say it watch out for time!! ( https://github.com/brianc/node-postgres/issues/429#issuecomment-24587214 ) I have not come across an issue related to SQL injection when properly using parameterized inputs along with proper server / client sanitization.

In your example your are not using parameterized inputs and **you are probably subject to SQL injection**.

@sevenyearoldkid is a noob and does not understand what a prepared statement is. His entire post is literally about parameterized inputs/prepared statements but does not refer to the actual issue.

Read up on parameterized inputs / prepared statements ( https://github.com/brianc/node-postgres/wiki/Prepared-Statements ) to see how the module implements them or dig through source. For my application I have built a 'factory' for handling pg statements that utilize parameters.
";"I use the PG module for production and all I have to say it watch out for time!! ( https://github.com/brianc/node-postgres/issues/429#issuecomment-24587214 ) I have not come across an issue related to SQL injection when properly using parameterized inputs along with proper server / client sanitization.

In your example your are not using parameterized inputs and **you are probably subject to SQL injection**.

@sevenyearoldkid is a noob and does not understand what a prepared statement is. His entire post is literally about parameterized inputs/prepared statements but does not refer to the actual issue.

Read up on parameterized inputs / prepared statements ( https://github.com/brianc/node-postgres/wiki/Prepared-Statements ) to see how the module implements them or dig through source. For my application I have built a 'factory' for handling pg statements that utilize parameters.
";node
2016-04-07 03:54:36;Express-Session. Sessions are never saved. Help!;"It appears you're attempting to use an async function for generating your session id. Only synchronous genid functions are supported. It means the id returned will most likely be null or undefined in this case, which is why your session is probably not saving correctly.

https://github.com/expressjs/session/issues/107";"It appears you're attempting to use an async function for generating your session id. Only synchronous genid functions are supported. It means the id returned will most likely be null or undefined in this case, which is why your session is probably not saving correctly.

https://github.com/expressjs/session/issues/107";node
2016-04-19 16:32:27;Building a Node.js module with promises (and not breaking them);"Thanks for the article, it just gave me a great idea!
https://github.com/kripod/knex-orm/issues/13";"Thanks for the article, it just gave me a great idea!
https://github.com/kripod/knex-orm/issues/13";node
2016-04-22 12:43:49;Lessons from Building a Node App in Docker;"I just hit the pain point with npm install a couple weeks ago but haven't come back to address it yet.

There's some interesting discussion in https://github.com/npm/npm/issues/8836 and I think I like the one where you add package.json early, run npm install twice, and use the cache between layers.";"I just hit the pain point with npm install a couple weeks ago but haven't come back to address it yet.

There's some interesting discussion in https://github.com/npm/npm/issues/8836 and I think I like the one where you add package.json early, run npm install twice, and use the cache between layers.";node
2016-05-12 10:04:10;Waterline in production;"I use it for several projects in production that are on the smaller-side and they do pretty standard CRUD-type operations. No problems at all, and it's as fast as I need. 

BTW, I'm using Sails.js, so Waterline comes with it (I didn't implement it separately) and MySQL as the DB.Yep, waterline itself works fine.  We've only had one issue with the sql server driver and ended up forking it to fix it.

It doesn't handle connection errors properly and goes off into the nether, https://github.com/cnect/sails-sqlserver/issues/40

That said, the problems you'll have is with the adapters doing weird things ... waterline itself is fine.";"Yep, waterline itself works fine.  We've only had one issue with the sql server driver and ended up forking it to fix it.

It doesn't handle connection errors properly and goes off into the nether, https://github.com/cnect/sails-sqlserver/issues/40

That said, the problems you'll have is with the adapters doing weird things ... waterline itself is fine.";node
2016-05-20 15:17:17;I f*#%@$! hate node-gyp;"You have not yet faced the horrors of node-pre-gypNode-gyp updated its readme just a few days ago with new [Windows instructions](https://github.com/nodejs/node-gyp#installation). Now you only need the build tools rather than VS itself.

There's an issue [here](https://github.com/nodejs/node-gyp/issues/629#issuecomment-151018292).

Personally I setup my old desktop with Lubuntu and a guest Ubuntu Server VM, and use MEGAsync's 50gb free storage to sync the virtual drive to the cloud so all my projects on that VM are automatically backed up. To develop I run [Cloud9](https://github.com/c9/core#installation) (WebIDE with terminal) and [GOGS](https://gogs.io/) (basically a GitHub clone), among other [self hosted apps](https://github.com/Kickball/awesome-selfhosted), all backed up. So the benefits of just running an old PC with a Linux VM are manyfold.1. Get a Mac
2. Get a Linux
3. If on Windows, install VS 2013 and restart

Windows user here. I hate mac but I don't shy to admit, its much easier than Windows.I faced this problem a few weeks ago. This would be a solution for Windows users : 


INSTALL PYTHON v2.7.X (2.7.11 is the most recent version) :

- Download directly on internet.


DEFINE ENVIRONMENT PYTHON VAR :

- In D/Program Files (x86)/Python/python.exe (don't copy that path !!)


INSTALL node-gyp globally :

- $ npm install -g node-gyp


INSTALL GTK2 (de-zip in a directory C:/GTK) :

- http://ftp.gnome.org/pub/GNOME/binaries/win64/gtk+/2.22/gtk+-bundle_2.22.1-20101229_win64.zip


INSTALL libjpeg-turbo64 1.42 :

- http://downloads.sourceforge.net/project/libjpeg-turbo/1.4.2/libjpeg-turbo-1.4.2-vc64.exe?r=&ts=1448149090&use_mirror=ufpr


INSTALL MICROSOFT VISUAL STUDIO 2015 COMMUNITY (this may take some time... coffee break) :

- https://go.microsoft.com/fwlink/?LinkId=532606&clcid=0x409


DEFINE CONFIG FOR NPM :

- $ npm config set msvs_version 2015 --global

...and you're done! Everything should work now. :)This is all over your text: 

    ^^^^^^' 

What is going on with your formatting? It looks really weird and makes it harder to read. And it's far worse on Raspberry PiAgreed. Code on le Windows 7, deploy to RH7. 

At this point I prefer pure-js packages so I don't have to gyp

Even for shit like msgpack

Which doesn't work in 4.x with VS2012Amen. F)(*&%$#@ AMEN!! I avoid packages that require compilation like the plague. Luckily for me I've been able to find pure JS implementations for nearly everything. 

There are projects that get around it but no one has seemed to have worked these into documentation so people know about them.

- https://www.npmjs.com/package/node-cmake
- https://www.npmjs.com/package/cmake-js

Even the makers of gyp hate it.[obligatory link](https://www.youtube.com/watch?v=KDbYMw8JRYY)Truth. Every time. node-gyp, specifically on windows, is pure trash. i have had it fail DESPITE installing all the windows specific requirements. could never get it to work. formatted windows and then it decided to work. I could never figure out why it didn't work, because the error it kept spitting out was pretty much telling me i needed the visual studio stuff, which i had.

i have never really had good experiences with gyp. even in other environments like linux it can be problematicNode gyp is especially annoying because ignores npm CA file setting which is already annoying because that ignores the system ca information. 

Having python 2 along side python 3 is annoying too. Leave py3 as default and set the python path to 2 in npmrc. The Rant is well deserved I just picked this crap up and it is beyond annoying.I have never seen a piece of software which embodies the ""Works On My Machine!"" principle better than node-gyp

I've seen people get everything working in two minutes, while the person sitting next to them spent a day of Googling and trying random crap until it magically worked.The problem manifests itself in node-gyp, but node-gyp isn't the core problem.

The problem is that there are deep dependencies that require **compiling.** IOW, Node and it's default libraries aren't good enough... someone decided to go write a  module in a foreign compiled language to go along side the standard node/language binaries.

***Why? Why is this necessary?*** 

Maybe I'm missing something here, but it seems to me that allowing package manager distribution of foreign source code is a bad idea on many many levels.Might I suggest: https://golang.org/ ?

";"Node-gyp updated its readme just a few days ago with new [Windows instructions](https://github.com/nodejs/node-gyp#installation). Now you only need the build tools rather than VS itself.

There's an issue [here](https://github.com/nodejs/node-gyp/issues/629#issuecomment-151018292).

Personally I setup my old desktop with Lubuntu and a guest Ubuntu Server VM, and use MEGAsync's 50gb free storage to sync the virtual drive to the cloud so all my projects on that VM are automatically backed up. To develop I run [Cloud9](https://github.com/c9/core#installation) (WebIDE with terminal) and [GOGS](https://gogs.io/) (basically a GitHub clone), among other [self hosted apps](https://github.com/Kickball/awesome-selfhosted), all backed up. So the benefits of just running an old PC with a Linux VM are manyfold.";node
2016-05-19 03:18:13;Is this normal or is my NPM bugged?;npm version 3+ dedups and flattens dependencies. So what you see there is not just the dependencies but also the dependencies dependencies and so on. That package doesn't seem to me to have an unreasonable number of dependents. You can do `npm ll` to see a tree of where everything came from.yea, iirc they started doing that in later versions so if modules share deps they don't download them multiple timesIt is perfectly normal, and the way npm is supposed to work. Over-modularizing everything, leading to massive dependency graph and extremely brittle software. NPM itself (the cli) is extremely brittle and basically broken by design. For instance, look at [this](https://github.com/npm/npm/issues/5082) issue... Consider also how many issues npm has and tell me if anybody is their right mind would use such a massively broken thing...;It is perfectly normal, and the way npm is supposed to work. Over-modularizing everything, leading to massive dependency graph and extremely brittle software. NPM itself (the cli) is extremely brittle and basically broken by design. For instance, look at [this](https://github.com/npm/npm/issues/5082) issue... Consider also how many issues npm has and tell me if anybody is their right mind would use such a massively broken thing...;node
2016-06-13 16:15:10;npm install serialport issue;"Found this: https://github.com/node-inspector/v8-profiler/issues/88

EDIT: to be clear, see answer from Starscream27: ""For installtion with sudo you should use npm flag --unsafe-perm""> The error as follows: npm ERR! serialport@3.1.2 install: node-pre-gyp install --fallback-to-build

That's not the error. You need to post the entire log.hi! turns out my node version was wrong....total noob mistake! Installed 32bit distro instead of ARMv7 distro!

After re-install is worked fine!";"Found this: https://github.com/node-inspector/v8-profiler/issues/88

EDIT: to be clear, see answer from Starscream27: ""For installtion with sudo you should use npm flag --unsafe-perm""";node
2016-06-10 16:34:47;NightwatchJS, Selenium, Phantom: Help!;"What are you trying to do? I would need more input to give you the best advice.

I've used phantom, selenium, cucumberjs, webdriver, appium, etc.First, take a look at the answer here:
https://github.com/nightwatchjs/nightwatch/wiki/Running-tests-in-PhantomJS

Then consider also setting the user agent so that the website thinks a real browser is hitting it. You'll get slightly different results returned from the website with phantomjs' default useragent.
https://github.com/nightwatchjs/nightwatch/issues/243#issuecomment-155199713

PhantomJS vs Chrome default user agents:
http://engineering.shapesecurity.com/2015/01/detecting-phantomjs-based-visitors.html";"First, take a look at the answer here:
https://github.com/nightwatchjs/nightwatch/wiki/Running-tests-in-PhantomJS

Then consider also setting the user agent so that the website thinks a real browser is hitting it. You'll get slightly different results returned from the website with phantomjs' default useragent.
https://github.com/nightwatchjs/nightwatch/issues/243#issuecomment-155199713

PhantomJS vs Chrome default user agents:
http://engineering.shapesecurity.com/2015/01/detecting-phantomjs-based-visitors.html";node
2016-06-18 16:38:24;npm is incredibly slow on Windows 10;"If you have an antivirus, make try adding all node, npm, and other trusted command-line-based executables to the ignore list.  I had similar issues for python and git.  


Antivirus (especially what I have, Avast), distrusts terminal apps and runs higher levels of scrutiny on them before letting them launch.Look for an issue on npm or Node repos.

Also make sure you are using the latest Node and npm.
Also can try `pnpm` which does symlinks.

Also make sure your disk is performing in terms of random reads/writes.

There is also cygwin.

But yeah I just installed Lubuntu on Virtual Box last night (download ISO via torrent).

Easier is to use putty with a cheap VPS like Linode or Digital Ocean or EC2 reserved (don't get the cheapest it gets throttled).  I usually just use that with vim and fish shell which means I just type one character and fish recalls the build command or whatever based on the dir I am in.You could also try the Linux Subsystem.There are a few things you can try:

1 - If you can upgrade to node V6 (which is the new LTS release) this should also upgrade your npm. Naturally though when upgrading to a new major version in SemVer there will be breaking changes so some troubleshooting may be involved however the good news is because it's LTS you shouldnt have to worry too much about it again till 2018.

If you really can't upgrade to nodeV6, keep your nodeV4 and try to upgrade NPM to version 3 manually as it should still have a noticable difference due to the fact V3 implements package leveraging (i.e. if 2 or more packages have the same dependency instead of installing it twice it's moved to the root and the original packages just reference it).

2 - This is a recent [presentation from JSconf](https://www.youtube.com/watch?v=zWEU8kNKi3Q) which outlines a few things, in particular configuration options, which should be of interest of you -

a. Use `--save-bundle` when you construct your projects.

b. Config `--cache-min 999999`

3 - I suggest this as a last option as it involves changing some of the core of NPM itself, furthermore it may not be necessary if you can upgrade to node V6 (note the date was a few months prior to its release), but in the interest of being thorough.

http://jackmcdade.com/blog/tired-of-waitingI'm on Windows 10 and it's not slow for me. It might just be your system?I'm not sure if the list packages operation is affected by the same issue, but the introduction of the progress bar was extremely inefficient, and disabling it greatly improves performance. It kind of sucks because there's no option to fall back to the old text based progress, so it's all or nothing. See more info [here](https://github.com/npm/npm/issues/11283) and to disable, try  

> npm set progress=false";"I'm not sure if the list packages operation is affected by the same issue, but the introduction of the progress bar was extremely inefficient, and disabling it greatly improves performance. It kind of sucks because there's no option to fall back to the old text based progress, so it's all or nothing. See more info [here](https://github.com/npm/npm/issues/11283) and to disable, try  

> npm set progress=false";node
2016-06-15 16:59:41;Is anyone using ELK stack with PM2?;"Heres what I would do:

First (Im assuming your on some modern linux distro here), ditch pm2 for systemd. Systemd comes with systemd-journald which will handle all logs that your application spits out on stdout and stderr and (imo) is way better than pm2 as its a real init system rather than a userland-process pretending its an init system.

Now from here you have a few options:

1. You can tell bunyan to log JSON or whatever to stdout/stderr for journald to pick up and then forward on to logstash directly
2. Have bunyan log to stdout/stderr and submit JSON to logstash directly.

Personally, Id go with option 1 as journald can output logs as a JSON blob which can then be easily parsed by logstash directly (see [this github discussion](https://github.com/elastic/logstash/issues/1729)). This way you automagically also get meta information like hostname, process (unit) name, time, etc.";"Heres what I would do:

First (Im assuming your on some modern linux distro here), ditch pm2 for systemd. Systemd comes with systemd-journald which will handle all logs that your application spits out on stdout and stderr and (imo) is way better than pm2 as its a real init system rather than a userland-process pretending its an init system.

Now from here you have a few options:

1. You can tell bunyan to log JSON or whatever to stdout/stderr for journald to pick up and then forward on to logstash directly
2. Have bunyan log to stdout/stderr and submit JSON to logstash directly.

Personally, Id go with option 1 as journald can output logs as a JSON blob which can then be easily parsed by logstash directly (see [this github discussion](https://github.com/elastic/logstash/issues/1729)). This way you automagically also get meta information like hostname, process (unit) name, time, etc.";node
2016-06-25 18:21:39;I'm new to node and I cant get npm to work when i install node.js. Any suggestions?;"Please post your command line (input and output) and the contents of your PATH variable. 

But for the long term I'd strongly recommend not working in Node on Windows. Having done both, Linux is far better. I started development in Windows. I wouldn't go back. 

Get VirtualBox, install CentOS 7 or something else. This is the equivalent of ""my car is making a noise, can you fix it?""

Try following the instructions provided in this link:  
https://github.com/nodejs/node/issues/2814Am on Windows 10 and never had problems with it. So npmb-v isn't working and you added the new path variable to the npm directory in AppData or let the node.exe don't for you?I have to use a different user account on my windows machine.  npm doesn't work on my main account but no problems on my ""node account"".

I first wrote windows drivers for NT in 1993.  Very comfortable in the registry, file system, and monitoring access of resources when I execute npm.  And I still can't figure out why npm doesn't work in one account but works fine in the other.  Same resource access.  Same permissions on resources.  etc.im gonna guestimate and say that its something to do with your paths variable.On win10, no problems whatsoeverI'm on Windows 10 and haven't had any issues.Update: So, I'm still having the issues I was having with my Windows npm, no change there. I decided to try node on Linux Unbuntu to see if I'd have any luck with that and i did. But, I started having a similar issue with the Unbuntu npm. At this point I'm pretty sure its a path issue.npm is a pain on windows.

Did you install the prerequisites here: https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#prerequisites

There is also this issue that has some useful info at the bottom of it.
https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245

";"npm is a pain on windows.

Did you install the prerequisites here: https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#prerequisites

There is also this issue that has some useful info at the bottom of it.
https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245

";node
2016-07-04 12:29:24;Pure javascript implementation of Git (Node.js and Browser);"I just don’t get what is the effective difference between this and [nodegit](http://nodegit.org), can anybody explain? I have created [an issue](https://github.com/SamyPesse/gitkit-js/issues/11) asking for that info in the READMEThe API seems very removed, but a great project! Let me know when it can do a `git pull`Also worth mentioning [creationix's](https://creationix.com/) [js-git](https://github.com/creationix/js-git). 

Alas, I'm not familiar enough with either project to compare them.";I just don’t get what is the effective difference between this and [nodegit](http://nodegit.org), can anybody explain? I have created [an issue](https://github.com/SamyPesse/gitkit-js/issues/11) asking for that info in the README;node
2016-06-29 02:58:59;Why does jsonwebtoken's verify method async?;"It's just a common design pattern. If you're using something like async.waterfall it's handy to not have to wrap it. 

That code specifically calls process.nextTick as well, so if you're doing extra processing in the calling code it works to break up the code and allow other events to be handled. 
Might want to check https://github.com/auth0/node-jsonwebtoken/issues/111 which in part addresses your concern.The fastest result for a single operation is not always the highest priority.

Making the method support both sync and async signatures gives the consuming code the option to choose. It's often advantageous to free up the process and do other things like handling new requests.";Might want to check https://github.com/auth0/node-jsonwebtoken/issues/111 which in part addresses your concern.;node
2016-07-09 19:13:46;Why NOT Koa?;"Koa is great because it's so tiny, that any reasonable Node dev can wrap his or her head around it's implementation. koa@2 is built around async/await instead of generators https://github.com/koajs/koa/issues/533I've been using it for around 2 years, it's great.  It's very lightweight, has a good amount of useful middleware, and the generator flow is much better (in my opinion).

A few things:

* Even though the ""error handling"" is better, it's not perfect.  You regain try/catch over async operations, but the stack traces usually dead end in the corresponding promise library.
* You would best to get familiar with co.js.  Many libraries are not yet promise based, so you'll have to be conscious of promisifying libraries when needed.
* Streams are a little bit more painful in a generator based framework.  You *can* pipe a stream to the response body, but it gets more complicated to do transformation streams.  At any rate, none of this has stopped me, just had to learn more.

I recommend it.  It's hard to go back once you've started using the generator workflow, and it paves the way for ES7 async/await, which hopefully addresses the issues above.I think mostly it's just that people haven't started using it all that much.

If it fits your needs, isn't too hard to maintain, and doesn't have any drawbacks, you should totally use it.

I'm actually curious, since I'm in the same boat if I should switch.  (I probably will)it's more about the ecosystem, for example you can use passport.js in express _directly_ while for KOA you can not, many things like that so express can still win as a whole I assume.Don't use async. Co is a much better module that will be easier to replace with async await.Koa 2 with TypeScript is pretty sweet.";koa@2 is built around async/await instead of generators https://github.com/koajs/koa/issues/533;node
2016-07-15 16:31:12;What is the proper way to learn how to use databases in Node?;"do you already know sql?  IMO things like Sequelize are for those that don't know how to make schemas, or just don't want to for whatever reasons.

you're certainly free to just exec the queries direct using a library for the DB you want to use.  there's not really a ""proper"" node way to do data storage.It depends on the library you're using. Also what's your specific problem?  

Also srry for rambling after this point I'm on mobile and can't easily format my response. Or even see more than four lines at a time so if it's unclear what I'm talking about let me know and I'll try to clarify.

I'm looking at the sequilize docs and I don't use SQL databases yet I feel like I could craft quite the database using that documentation. Heck it even creates new tables when they don't exist!! I dont event have to mess with the DB. 

The big thing that I found helped when hitting an odd problem is doing what you just did ask for help, you might be looking at the problem incorrectly or googling the wrong keywords. <-- TRUST ME knowing what keywords to search can help tremendously. 

But even before asking for help online I find it easiest to get on github and read the docs. It's all in one place instead of in snippets like on most websites. You can find the index file see how it initializes how it handles arguments and what arguments it's looking for. Then you can see how the different modules/methods handle those arguments. 

Lastly the best way to learn is to dregd through the difficult times, remember take a break, take a walk, you might just need a little separation from the screen so instead of typing away and failing you're forced to say okay, when I execute `sequilize.define({userData})` it does this then my next line of code creates a row on my DB table. Then the callback returns an error or success. Then I can return that object to the client by attaching it to the req.body or some req.customSubObjectHolder so that when you write next(); in that middleware your next middleware will have access to the req.customSubObjectHolder and can send to the client or manipulate it further.

Because remember your database is not the backend it's the DB and node is the applications backend. So they're on different servers. Hence the callback to node saying error or success. I always use the callback option when interacting with the DB even if it only returns errors so that I know oh it was the DB server and not my code. Or if there's an error on the DB (maybe: incorrect types of data or malformed object) the database might have a wrote error but you wouldn't know it was your node code causing the error unless you had the callback/promises letting you know. 

Also remember if youre using a library like sequilize then most likely any DB errors are because you wrote something wrong in your node app and the malformed object is trying to interact with the DB causing the error. Thanks for the help guys. I want to learn Postgres. My [trouble with Sequelize](https://github.com/sequelize/sequelize/issues/6283) arose when trying to implement many to many relationships such as a like button or tagging. express doesn't do databases.  Database selection is up to you.

So if you go SQL or noSQL; thats the first question.

SQLs actually represent a database 'somewhere else' and you need to build relational tables.  You can think of noSQLs as cache stashes you retrieve using some kind of logical comparision (or a function)";Thanks for the help guys. I want to learn Postgres. My [trouble with Sequelize](https://github.com/sequelize/sequelize/issues/6283) arose when trying to implement many to many relationships such as a like button or tagging. ;node
2016-08-19 07:16:10;How to diagnose this error?;"Try updating `8080` to `3000` on https://github.com/maxogden/voxel-hello-world/blob/master/package.json#L22

But it still not working (the browser output seems broken), I don't think I can help on thatMaybe this helps -> https://github.com/maxogden/voxel-hello-world/issues/25Maybe [this](https://github.com/maxogden/voxel-hello-world/issues/24) helps.
..or the github [issue page](https://github.com/maxogden/voxel-hello-world/issues)

";"Maybe [this](https://github.com/maxogden/voxel-hello-world/issues/24) helps.
..or the github [issue page](https://github.com/maxogden/voxel-hello-world/issues)

";node
2016-08-29 06:09:20;Protecting in-memory secrets?;"Can you give a bit more details about what your server does ? 

It's usually safe to store a secret in your server memory as long as the access to the server is restricted and you don't have blatant security issues.  1) if this password is *really* secure, limit the amount of things that your application does to limit the *attack area* for stealing the password.  Don't make your app both a web server *and* a database backup tool... just do one job.

2) Don't set the password via an ENVIRONMENT variable... other applications can read it then.  If you do need to set it via ENV, ensure that only this one app can run as this user, and only this one user can read the ENV (OS specific)

3) Be sure to zero-out your memory.  If you are a Bank, or other *REALLY SECURE* product, read https://github.com/nodejs/node/issues/4660 and learn about how non-random memory access can both read and write previously used data into and out of ram. As long as you're not using eval on code from the user or giving users access to a debugger connected to the server, then you shouldn't worry about that. Unsure why it's downvoted to zero here - it's a legitimate question";"1) if this password is *really* secure, limit the amount of things that your application does to limit the *attack area* for stealing the password.  Don't make your app both a web server *and* a database backup tool... just do one job.

2) Don't set the password via an ENVIRONMENT variable... other applications can read it then.  If you do need to set it via ENV, ensure that only this one app can run as this user, and only this one user can read the ENV (OS specific)

3) Be sure to zero-out your memory.  If you are a Bank, or other *REALLY SECURE* product, read https://github.com/nodejs/node/issues/4660 and learn about how non-random memory access can both read and write previously used data into and out of ram. ";node
2016-09-08 14:04:39;7 Magnificent Frameworks of Node.js to Work On;"How about hapi.js? In my opinion it is way better than express and koa What the hell is Sails doing in there? That thing is a mess.Might worth mentioning that Sails is slowing down releases and a lot of Sails eco-system packages are now halted in favour of [Trails](https://github.com/trailsjs/trails)
Nevertheless, a great framework to work with, very easy to get started.

Ref:

- [sails-swagger](https://github.com/langateam/sails-swagger/issues/16)

- [sails](https://github.com/balderdashy/sails/issues/3429) Sails is dead, also you should consider http://adonisjs.com. Way better structured and rails like MVC framework I haven't used Sails in over a year, but why is everyone saying that it's slowing down? I can see the last commit was made one day ago. I use [Restify Model](https://github.com/baseprime/restify-model) for a lot of my projects. It's like Sails or Django Rest Framework (for node). However, it doesn't support database migrations by default.I have been trying out feathersjs, and it's pretty sweet how fast it is to get started, and with very little code.Not a single mention of hapi or [Nodal](https://github.com/keithwhor/nodal)... two pretty big API players to leave out.Holy moley, these are the most unimaginative picks possible. ""Magnificent?"". API's, MVC, templating, all of them doing the same thing the others are doing.

Not saying they're not quality frameworks, but at best I'll use them in my projects just to get that stuff out of the way - I have zero desire to work on them.Wow, you shamelessly steal [this simple image](https://www.google.ca/search?q=nodejs+frameworks&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjP6ITZuIDPAhVKVh4KHTLuBI4Q_AUICCgB&biw=1280&bih=699#imgrc=W8bEWmN2G3DmmM%3A) from [this presentation](https://www.youtube.com/watch?v=WOVmr6CjgNw) and don't even mention **Strongloop** framework, which is quite amazing btw. Strongloop is one of the few NodeJS platforms that has strong convention, awesome scaffolding tool and well documented API. Plus its not going anywhere, since this company was acquired by IBM and continues the development.  ";"Might worth mentioning that Sails is slowing down releases and a lot of Sails eco-system packages are now halted in favour of [Trails](https://github.com/trailsjs/trails)
Nevertheless, a great framework to work with, very easy to get started.

Ref:

- [sails-swagger](https://github.com/langateam/sails-swagger/issues/16)

- [sails](https://github.com/balderdashy/sails/issues/3429) ";node
2016-09-07 14:28:25;How to make nvm automatically use the correct version of NodeJS for a specific folder/project;"http://stackoverflow.com/questions/33701505/a-dotfile-that-will-set-the-default-node-version-on-a-project-using-nvm[nodenv](https://github.com/nodenv/nodenv) has built in support for per directory dotfiles with just the version you want in it.FYI, this has been intentionally excluded from nvm because of ""cd bloat"". There was major [bike shedding](https://github.com/creationix/nvm/issues/110#issuecomment-40512109) about this a while ago. This has always been easy to accomplish in a dirty fashion.";"FYI, this has been intentionally excluded from nvm because of ""cd bloat"". There was major [bike shedding](https://github.com/creationix/nvm/issues/110#issuecomment-40512109) about this a while ago. This has always been easy to accomplish in a dirty fashion.";node
2016-09-21 21:19:16;"Please try a new ""--inspect"" command-line switch";"I recommend [node-nightly](https://github.com/hemanth/node-nightly) to anyone looking to give this a go. Just tested it and ran --inspect (and --harmony to try async/await!) and it all looks good!Hi,

I posted one bug that I have in Windows. The console doesn't seem to work unless I change the websocket in the url from localhost to 127.0.0.1


https://github.com/nodejs/node/issues/9382";"Hi,

I posted one bug that I have in Windows. The console doesn't seem to work unless I change the websocket in the url from localhost to 127.0.0.1


https://github.com/nodejs/node/issues/9382";node
2016-10-06 17:14:05;Hosting your own private NPM registry to share private modules with your team.;Sinopia is no longer maintained. See [Issue #376](https://github.com/rlidwka/sinopia/issues/376) for alternatives.;Sinopia is no longer maintained. See [Issue #376](https://github.com/rlidwka/sinopia/issues/376) for alternatives.;node
2016-10-12 12:25:02;Chartist;I attempted to try out the [node-chartist](https://github.com/panosoft/node-chartist) module with the intent of making a working example, but found that [it has not been updated to work with npm v3's dependency changes](https://github.com/panosoft/node-chartist/issues/6). However, if you use npm@2, you should be able to try it out for yourself and see if it works out. Cheers!;I attempted to try out the [node-chartist](https://github.com/panosoft/node-chartist) module with the intent of making a working example, but found that [it has not been updated to work with npm v3's dependency changes](https://github.com/panosoft/node-chartist/issues/6). However, if you use npm@2, you should be able to try it out for yourself and see if it works out. Cheers!;node
2016-10-25 16:20:37;Node.js V7 released;"yay, no silent errors in promises
> V8 has been updated to 5.4.500.36 #8317, #8852, #9253.

It's around 5.5 that has async/await right? :( 

Edit: Someone posted this [link](https://github.com/nodejs/promises/issues/4#issuecomment-254159118) in the hackerrank comments which sheds some more light on where async/await is at. Looks like there is a --harmony-async-await flag that is buggy so we may as well wait for V8 5.5 to be used. New V8 starts faster and may use much less memory: http://v8project.blogspot.com/2016/09/v8-release-54.htmlI wonder if there is a list of new ES6 feature available comparing to Node v6?http://v8project.blogspot.com/2016/10/v8-release-55.html v8 55 has its own branchI'm getting this error when trying to run ""npm run"" or ""npm install""

    Cannot find module 'internal/fs'";"> V8 has been updated to 5.4.500.36 #8317, #8852, #9253.

It's around 5.5 that has async/await right? :( 

Edit: Someone posted this [link](https://github.com/nodejs/promises/issues/4#issuecomment-254159118) in the hackerrank comments which sheds some more light on where async/await is at. Looks like there is a --harmony-async-await flag that is buggy so we may as well wait for V8 5.5 to be used.";node
2016-10-29 13:29:09;Async functions - making promises friendly;Wake me when these are available in Node without Babel. This looks like a good issue to subscribe to: https://github.com/nodejs/promises/issues/4[are you async yet?](https://h3manth.com/new/blog/2015/are-you-async-yet/);Wake me when these are available in Node without Babel. This looks like a good issue to subscribe to: https://github.com/nodejs/promises/issues/4;node
2016-11-21 21:54:41;The more I use npm scripts for tasks the more I wish that package.json was package.yaml;"Time to move the details out into scripts your package calls!I'm wondering why. Could you send your package.json please ?

I used to write Makefile sometimes for more complicated tasks.https://www.npmjs.com/package/package-yml. 

https://github.com/npm/npm/issues/3336

";"https://www.npmjs.com/package/package-yml. 

https://github.com/npm/npm/issues/3336

";node
2016-12-10 23:46:37;"Opinions on Koa 2 vs express ""req"" and ""res"" handling";There is an open issue on GitHub discussing this very point https://github.com/koajs/koa/issues/849;There is an open issue on GitHub discussing this very point https://github.com/koajs/koa/issues/849;node
2017-01-13 19:08:52;command: nvm giving 'command not found' but node-- version works;[This is a known issue](https://github.com/creationix/nvm/issues/576);[This is a known issue](https://github.com/creationix/nvm/issues/576);node
2017-01-24 02:05:41;"How to send an HTTP response (for example using Express), when a ""unhandledRejection"" promise error occures?";"Just don't let things get to the global exception handler. 

The idea of the global handler is that things have gotten to a point where something has gotten out of control. You are now in a situation that your code doesn't know how to handle. You should log the exception that occurred. If it's serious enough, maybe you need to consider calling process.exit and letting your process manger start up a new process (you are using a process manager right. Pm2, docker, cloudfoundry, something). 

The purpose of the exception handler is for you to log out the exception somewhere and then not let that happen again. Just make sure the rejection doesn't bubble back up out of the request. It's easy if you use async/await:

    app.get('/xyz', (req, res, next) => {
      Promise.resolve().then(async () => {
        const x = await y(req.query.something);

        res.status(200).send({
          x,
        });
      }).catch(error => next(error)); // or do something else to handle the rejection...
    });You might want to use [express' error handler](https://expressjs.com/en/guide/error-handling.html) instead of `process.on('unhandledRejection', ...)`

    app.use(function (err, req, res, next) {
      console.error(""Unhandled Rejection"", err.stack);
      res.send(500).send(""Unknown Error"");
    });This was sort of the what node domains: https://nodejs.org/api/domain.html and ""zones"" were trying to solve with async code. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/rcbredditbot] [How to send an HTTP response (for example using Express), when a ""unhandledRejection"" promise error occures?](https://np.reddit.com/r/RCBRedditBot/comments/5ptjla/how_to_send_an_http_response_for_example_using/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)One possible option is to create a middleware that adds and removes all requests from a set. Then on that error, you could loop through that set and sent the 500. That said, I'm pretty sure you'll end up in a loop of a socket being dead, causing an error, which you try to write a 500 to, which is a dead socket, so it throws an error...Some interesting links I found, if it can help someone one day :

http://madole.xyz/error-handling-in-express-with-async-await-routes/

https://medium.com/@yamalight/danger-of-using-async-await-in-es7-8006e3eb7efb#.5qeg8lqoh

http://stackoverflow.com/questions/41349331/is-there-a-way-to-wrap-an-await-async-try-catch-block-to-every-function

https://github.com/strongloop/zone  
https://github.com/strongloop/zone/blob/master/examples.md

https://github.com/CrabDude/trycatch

EDIT :

Another must read : https://github.com/nodejs/node/issues/66

I slowly realized that there is currenty *no* proper way of dealing with unhandled promise rejections in Node other than restart the server... Which sucks a lot, in opinion. For example, this can lead to DOS attacks... Have a look at the very end of this video : https://www.youtube.com/watch?v=BoyLVxyl8dc .
";"Some interesting links I found, if it can help someone one day :

http://madole.xyz/error-handling-in-express-with-async-await-routes/

https://medium.com/@yamalight/danger-of-using-async-await-in-es7-8006e3eb7efb#.5qeg8lqoh

http://stackoverflow.com/questions/41349331/is-there-a-way-to-wrap-an-await-async-try-catch-block-to-every-function

https://github.com/strongloop/zone  
https://github.com/strongloop/zone/blob/master/examples.md

https://github.com/CrabDude/trycatch

EDIT :

Another must read : https://github.com/nodejs/node/issues/66

I slowly realized that there is currenty *no* proper way of dealing with unhandled promise rejections in Node other than restart the server... Which sucks a lot, in opinion. For example, this can lead to DOS attacks... Have a look at the very end of this video : https://www.youtube.com/watch?v=BoyLVxyl8dc .
";node
2017-02-12 07:05:58;Question about NPM package names: Was there a particular reason for marking the scope of a scoped package by prefixing it with at-sign (@) in particular?;"1. `mypackage/mymodule` is already a valid path in the module resolution algorithm. Since npm uses separate namespaces for packages and accounts, they needed a way to disambiguate between the two in `node_modules` hence the @ mark.
2. The mark could have been a suffix but usually people use prefixes in other domains as well.
3. @ doesn't mean anything in other places like the shell (hence no `~`) or in URL queries (hence no `+`) so it's safer to pass @-scoped package names to existing code that works with unscoped ones. You could technically require everyone to be very precise and careful about always encoding and unencoding package names but people aren't always going to get it right. There are already several tools that don't handle @-scoped packages correctly, but at least they fail safely. The @ mark is forgiving and simple.

You should also read the GitHub issue that covers many of the decisions: https://github.com/npm/npm/issues/5239.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/rcbredditbot] [Question about NPM package names: Was there a particular reason for marking the scope of a scoped package by prefixing it with at-sign (@) in particular? (from \/r\/node)](https://np.reddit.com/r/RCBRedditBot/comments/5tk8bd/question_about_npm_package_names_was_there_a/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)";"1. `mypackage/mymodule` is already a valid path in the module resolution algorithm. Since npm uses separate namespaces for packages and accounts, they needed a way to disambiguate between the two in `node_modules` hence the @ mark.
2. The mark could have been a suffix but usually people use prefixes in other domains as well.
3. @ doesn't mean anything in other places like the shell (hence no `~`) or in URL queries (hence no `+`) so it's safer to pass @-scoped package names to existing code that works with unscoped ones. You could technically require everyone to be very precise and careful about always encoding and unencoding package names but people aren't always going to get it right. There are already several tools that don't handle @-scoped packages correctly, but at least they fail safely. The @ mark is forgiving and simple.

You should also read the GitHub issue that covers many of the decisions: https://github.com/npm/npm/issues/5239.
";node
2017-02-21 13:48:52;Why is socket.io down?;Better like that. Do not use socket.io, full of bad practices and unmaintained. Checkout UWS / Primus insteadThe website? You could try accessing it from your mobile network as opposed to wifi, or maybe through a proxy. It could be a problem with the local node for the site in your area. https://github.com/socketio/socket.io/issues/2870I guess that explains the spike in traffic to http://socketcluster.io/;https://github.com/socketio/socket.io/issues/2870;node
2017-03-12 21:52:35;Will functions like readFile return a promise eventually?;"There are GitHub issues discussing this, for example:

https://github.com/nodejs/promises/issues/16Let's hope not";"There are GitHub issues discussing this, for example:

https://github.com/nodejs/promises/issues/16";node
2017-03-28 14:49:49;Everytime I run my node app, I have to hit cancel and restart the script. Is there anything better?;"[nodemon](https://www.npmjs.com/package/nodemon)[deleted]http://nodemon.ioOne more for nodemon. You can even specify that it watch other file extensions other than .js. I usually have it watch my handlebar files and restart for that too. node-dev https://github.com/fgnass/node-devnodemon... UNLESS you happen to be using ""bash on ubuntu on windows"" in which case there is a known bug that won't let the nodemon start, gets an EPERM error. You may be able to find a work around for your situation here:

https://github.com/Microsoft/BashOnWindows/issues/216

if you are on linux or mac then forget I said anything because nodemon will work fine
Are you using DevTools for debugging?";"nodemon... UNLESS you happen to be using ""bash on ubuntu on windows"" in which case there is a known bug that won't let the nodemon start, gets an EPERM error. You may be able to find a work around for your situation here:

https://github.com/Microsoft/BashOnWindows/issues/216

if you are on linux or mac then forget I said anything because nodemon will work fine
";node
2017-03-29 08:14:37;Why aren't more people using rethinkdb? Its pretty awesome;"""It's pretty awesome"" doesn't mean it's the answer to everyone's needs... In my case, it's not an option because:

* what I have is ""pretty awesome"" too
* I know very well what I already have
* rethinkdb has no specific feature that I need
* performance is worse than what I have
* rethinkdb doesn't have the community and company support
* don't fix it if it ain't broken

Most people will think some of these hold for them too...> Its pretty awesome... I have done 2-3 small apps using...

I'll take ""general and over-broad claims you don't have remotely enough context to make"" for $500, Alex. ;-p

Hint: Just because it's *fun* that doesn't necessarily make it a good fit for everyone's technical, business or other requirements.Most of the comments are only partially right. RethinkDB the company failed and so they moved the project from being supported by a ""mother"" company to being supported by the OSS community. I have used it for every project I could do from scratch in the past 2-3 years and it is pretty awesome. Soon they will release a next version. Also I don't think that people don't use it because of their needs. I think it's more of a standard-thingy. Just as MySQL did for SQL - MongoDB did get the standard for NoSQL. People just don't know about it. But I am pretty certain that if MongoDB continues just like they do right now it will change ;)This is a post mortem why they failed
http://www.defstartup.org/2017/01/18/why-rethinkdb-failed.html

As for why it is not used....
I guess people prefer to go with MongoDb which has a bigger community.  Easier to get answers + ""nobody was fired for buying IBM"".Because for me it kind of sucked. It couldn't ingest more than 10,000 records (or some relatively low number) at a time. It timed out during the ingestion phase, and it couldn't handle many connections at once.

I switched to MongoDB with little code change and saw all of these problems go away.All of the cursor book keeping is a price that must be paid 

I think rethink is great but what advantage is it over Postgres and redid pub/sub for any real time subscribing you'd need?   Just inject your own hooks to your software rather than let the database book keep them

Your code might be slightly less elegant but lots more scalable.  And also if you have other disparate events, they'll run through this a lot easier.  After seeing so many complex projects fail I'd rather go for simpler building blocks like Postgres and redis.[deleted]The change feeds feature looks pretty interesting. Is it possible to turn off the ""old_val"" ? In my usecase, old_val is irrelevant...

Also, would this scale well if I use web sockets and have thousands of potential changefeed observers?

I'm looking into making widgets similar to espn.com/nba game score widgets that update when the score changes.

Can I just use Rethinkdb handle this alone, or do I need to throw redis on top of it and then use redis for handling pub/subs? That would be disappointing. :[I use it, its so much better then mongodb... the things you can do, oh baby...

* https://rethinkdb.com

* https://thinky.io

 * It's still good even with this issue / https://github.com/neumino/thinky/issues/609
 * hopefully someone will pick it up and maintain it.

* https://expressjs.com

This is my stack pretty much, for backend...I think the mobile app story is pretty bad?

And, it's risky to bet an actual business on a product of a failed company, even if you think there'll be a decently sized open source community helping to maintain it.I'm not sure how bad a beating I'd get from our DBAs if I suggested using any kind of NoSQL database for a new project.

But it would be bad.   Very bad.

I suppose if you work alone on your own projects it could be fun to play with, though.It's a very common development tale . . .

An 'also-ran' concept with a couple of stellar ideas, but middlin implementation and poor support, winds up as abandon ware.

IOW, there was nothing truly compelling to get anyone to use it.";"I use it, its so much better then mongodb... the things you can do, oh baby...

* https://rethinkdb.com

* https://thinky.io

 * It's still good even with this issue / https://github.com/neumino/thinky/issues/609
 * hopefully someone will pick it up and maintain it.

* https://expressjs.com

This is my stack pretty much, for backend...";node
2017-04-09 18:42:09;How come nobody mentioned Lambda now supports 6.10.0?;"We're all waiting for it to natively support async/await :)What makes you say '6.10.0'?  They seem to be saying 6.10 this time  - not specifying the patch version (last time they specified 4.3.2).

I suspect they want the flexibility to upgrade to 6.10.x when they feel it is warranted.Doesn't quite answer the question, but we [featured it](http://nodeweekly.com/issues/180) in Node Weekly 2 weeks ago.. :-DWhat's the real news here? Nothing new with node really?Because we are still waiting for python 3 :|

Python 3 is older then node.js itself.. FML.This is not a node thing. I have used node for years and had to Google what ""Lambda"" is. ";Doesn't quite answer the question, but we [featured it](http://nodeweekly.com/issues/180) in Node Weekly 2 weeks ago.. :-D;node
2017-05-15 12:56:06;Objection.js ORM;"[deleted]Now that's how you write proper documentation that includes examples and common use-cases. Usually you have to go through an awful lot of trickery to get relations working in ORMs but with this one it's literally the first example after defining a model. Great job, will definitely use this. As a side note; Objection.js is quite different compared to a traditional ORM. Actually, the creators themselves communicate it as:

> knex.js on steroids
*(knex being the query builder objection.js builds upon)*

It leverages pure SQL. As an example it doesn't have the common `Model#save()` method. Instead relies on an extended `objection.QueryBuilder#insert()`which accepts a model object but in practice works much like the regular `knex.QueryBuilder#insert()`.

I myself used Sequelize and bookshelf.js and while both have their strengths neither compares to objection.js when it comes to malleability *(I personally dislike both Sequelize and bookshelf.js for other subjective reasons)*. If you're an ""out-of-the-box"" application, or utilising PostgreSQL JSONB data types heavily - objection.js is the way to go IMHO. I've been using objection.js for a production application recently and have been very impressed, coming from experience with Sequelize and Loopback ORMs.

My main gripe with Loopback was that the ORM doesn't let you [filter on related properties](https://github.com/strongloop/loopback/issues/683), which is a *huge* omission and results in quite a bit of working around the framework to get what you need.

The ability to drop down to knex when required is a huge help, especially when dealing with something that's slightly out of the scope of an ORM.Now you have no excuse for defaulting to MongoDB when starting a new Node project

Save it for document stores and other loosely-structured object use cases that *actually* require a non-relational databaseThat documentation page has some pretty awful layout, good god.  Curiosity turned to disgust after a little bit of scrolling.";"I've been using objection.js for a production application recently and have been very impressed, coming from experience with Sequelize and Loopback ORMs.

My main gripe with Loopback was that the ORM doesn't let you [filter on related properties](https://github.com/strongloop/loopback/issues/683), which is a *huge* omission and results in quite a bit of working around the framework to get what you need.

The ability to drop down to knex when required is a huge help, especially when dealing with something that's slightly out of the scope of an ORM.";node
2017-06-08 14:23:20;Node v8.1.0 released;"Isn't it without the `v` now?For those waiting for V8 5.9: https://github.com/nodejs/node/pull/13515Seems to have broken npm init.

Edit: https://github.com/nodejs/node/issues/13557So I,m still new with Node.js.

I'm working on a new project, should I update from 8.0.0 to 8.1.0 right away?

And once in production should I keep it up to date? Or if it works let it that way.

Thanks!";"Seems to have broken npm init.

Edit: https://github.com/nodejs/node/issues/13557";node
2017-06-18 02:48:13;nodejs, yo, Docker local dev container issue;"It appears `yo` *really* doesn't like being run as root.  

It attempts to change the current user of the running process to some other uid - but it doesn't change the home directory, so when the command runs it is run as non-root and attempts to read files in `/root`, and you get permission defined.

Seems like a half-measure intended to save people from potential security flaws of generators - which is admirable, who knows what those generators include and what they run as.... but the end result is if you run as root in a docker container, it blows up.

Kind of funny, it will always attempt to downgrade root

https://github.com/sindresorhus/root-check/blob/v1.0.0/index.js#L7

Which changes the user and the group:

https://github.com/sindresorhus/downgrade-root/blob/v1.2.2/index.js#L8-L19

But it won't kill your process, or tell you something is wrong if you are running in Docker... it will however blow up with an EACCES exception due to the change in user and reading files from `/root`, that's nice of them:

https://github.com/sindresorhus/sudo-block/blob/master/index.js#L9

...Unrelated, but that is some next-level module abstraction.  How many npm modules does it take to screw in a lightbulb?  I've listed 3 in those links, didn't need to link `is-root`, `is-docker` or `is-sudo`.

Anyway, the easiest way to get around this is.... don't run as root.  

Set up a user at the top of the dockerfile with a home directory and shell of `/bin/false`, update the npm prefix to point at that user's home directory and switch to that user when running the global install commands.
Slightly newer issue on github that may have more things to try:

https://github.com/yeoman/yo/issues/348

";"Slightly newer issue on github that may have more things to try:

https://github.com/yeoman/yo/issues/348

";node
2017-06-25 16:46:53;Vim node.js completion?;"I use [YouCompleteMe](https://github.com/Valloric/YouCompleteMe) + [Tern](https://github.com/ternjs/tern_for_vim) and they work perfectly for me. With [vim-plug](https://github.com/junegunn/vim-plug):

    Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }
    Plug 'Valloric/YouCompleteMe'

Then enable it for JavaScript files:

    "" enhance YCM JS completion with tern's smarts
    autocmd FileType javascript setlocal omnifunc=tern#Complete

I also disable the YCM preview window:

    set completeopt-=preview
    
Then add a [`.tern-project`](https://github.com/ternjs/tern/issues/759) file at the root of each project (and/or in a parent directory) e.g.:

    {
        ""libs"": [
            ""browser"",
            ""jquery""
        ],
        ""plugins"": {
            ""node"": true,
            ""es_modules"": true
        }
    }

Occasionally, the YCM daemon (ycmd) is updated and YCM needs to be rebuilt (YCM informs you when this needs to be done):

    $ cd ~/.vim/plugins/YouCompleteMe
    $ ./install.py --tern-completerYou should already have [omni-completion](http://vim.wikia.com/wiki/Omni_completion) by clicking the menu key. It's mostly just a completion that matches within the file itself and usually works well for most of my needs.You might try TypeScript's language service.  It works with plain JS - I'm not trying to force you to change your code at all - and I'm pretty sure it has a Vim integration.the best completion i've gotten so far has been from [deoplete](https://github.com/Shougo/deoplete.nvim) with a [tern source](https://github.com/carlitux/deoplete-ternjs)

caveat: requires switching to neovimAfter a trying out a lot of plugins I simply like the built-in the best (simply start typing a word and press CTRL-N or CTRL-P).

or CTRL-X + CTRL+L for Line completion

or CTRL-X + CTRL-F for File completion

For API's I use sth like https://devdocs.io (or local equivalent through CMD+Space on Mac)

For larger projects I use ripgrep (it's like awk and grep but combined, faster and better) and/or ctags from within vim to jump around code/patterns/function names/etc (using vim's built-in quickfix)";"I use [YouCompleteMe](https://github.com/Valloric/YouCompleteMe) + [Tern](https://github.com/ternjs/tern_for_vim) and they work perfectly for me. With [vim-plug](https://github.com/junegunn/vim-plug):

    Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }
    Plug 'Valloric/YouCompleteMe'

Then enable it for JavaScript files:

    "" enhance YCM JS completion with tern's smarts
    autocmd FileType javascript setlocal omnifunc=tern#Complete

I also disable the YCM preview window:

    set completeopt-=preview
    
Then add a [`.tern-project`](https://github.com/ternjs/tern/issues/759) file at the root of each project (and/or in a parent directory) e.g.:

    {
        ""libs"": [
            ""browser"",
            ""jquery""
        ],
        ""plugins"": {
            ""node"": true,
            ""es_modules"": true
        }
    }

Occasionally, the YCM daemon (ycmd) is updated and YCM needs to be rebuilt (YCM informs you when this needs to be done):

    $ cd ~/.vim/plugins/YouCompleteMe
    $ ./install.py --tern-completer";node
2017-06-23 07:40:56;[Question] Google Cloud App Deployment Script with Nodejs;"I've finally found a way to run it entirely (Windows+Mac OS X) with live output in node.js. I used [execa](https://github.com/sindresorhus/execa) + the environment variable PYTHONUNBUFERRED as explained in the solution here: https://stackoverflow.com/questions/44820259/cant-spawn-gcloud-app-deploy-from-a-node-js-script-on-windowsI am currently having the same issue (only on Windows / it works on Mac OS X for me with [execa](https://github.com/sindresorhus/execa)). I have opened an issue on [stackoverflow](https://stackoverflow.com/questions/44820259/cant-spawn-gcloud-app-deploy-from-a-node-js-script-on-windows)
and on [execa repository](https://github.com/sindresorhus/execa/issues/97).";"I am currently having the same issue (only on Windows / it works on Mac OS X for me with [execa](https://github.com/sindresorhus/execa)). I have opened an issue on [stackoverflow](https://stackoverflow.com/questions/44820259/cant-spawn-gcloud-app-deploy-from-a-node-js-script-on-windows)
and on [execa repository](https://github.com/sindresorhus/execa/issues/97).";node
2017-08-28 06:57:06;Multiple CoC violations by Node.js board member Ashley Williams;"Locking this post, too much bad behavior and too many reports.Here and elsewhere, it's become more and more clear that what's happening is motivated by a Hegelian/Marxian ideology of thesis-antithesis power struggle.

One of the interesting results of this is that while a Code of Conduct regulates the speech and behavior of a community *explicitly*, behind that there is an *implicit* assumption of the power and worth of statements based upon which group the speaker belongs to: the thesis or the antithesis, that is, the dominant ideology or the secondary ideology.

A clear result of this, as we see illustrated here, is that an action or statement out of the mouth of speaker A is *not* weighed equally with the action or statement out of the mouth of speaker B.  This is why statements that are flipped to be equal and opposite are actually thought of to CoC enforcers as wildly different magnitudes of offense.  *What becomes acceptable and unacceptable according to the Code of Conduct becomes not so much what the actor says or how they act, but what group they belong to.*

For instance, if a member of the secondary ideology acts completely outrageously, they are treated with kid gloves because they are from the secondary/submissive ideology.  It's assumed that they are historically repressed - and that they haven't been able to have their say, so we should give them a pass, no matter how outrageous their conduct is.

Conversely, if a member of the dominant ideology acts even the least bit against the grain or even the least bit politically incorrect, the hammer comes down on them.  Through no choice of their own, they have been born into the dominant ideology and should tread as lightly as possible, so as to give others a chance.  The very smallest transgressions are seen as attempts to stifle the secondary ideology.

If you want to think of it kind of mathematically, you can think of it as a multiplying factor.

""How great is the offense of speaker A?"".  Because they're a member of the dominant ideology, the offense is the weight of the action/statement itself multiplied by 10.

""How great is the offense of speaker B?"".  Because they're a member of the secondary/submissive ideology, the offense is the weight of the action/statement itself multiplied by 0.1

EDIT: Thanks so much for the reddit gold!  First time I got it, in almost nine years.I'm a member of a protected class, and if Ashley's comments are any indication, I feel pretty unwelcome in the node/npm community right now.

In fact, my protected class is one that is notoriously discriminated against in the software industry.

I'm an Old Programmer.

It's funny, I see people asking, ""I just turned 30. Will I ever be able to get another job in the software business?""

Try being 65! ;-)

My work has created billions of dollars of value for multiple companies. But what's the good in that? I'm not young and hip.

And worse, I'm a white male.

Wait a minute... I'm not white, I'm Italian! (With a bit of Irish and French.)

Did you know that Italians used to be considered practically another race, like ""George Bailey's garlic eaters"" from [_It's a Wonderful Life_](http://www.italiansrus.com/articles/subs/wonderful_life_part3.htm)?

But never mind that, I'm still male, which obviously rules me out from ever speaking at one of these conferences. Which I don't want to anyway, so I guess we're good.

And anyway, who wants an old ""white"" guy like me around?

It even gets worse... I use **TABS**.It's truly sad that the platform that I once loved has turned out like this. It almost feels like a religious war with the CoC rules. I genuinely thought that programming was all about solving problems with code with no barrier to any race, gender, caste, culture, ethnicity, tribe or even a sentient being (machines come to mind). Clearly, that's not the case now and I'm just saddened that we've limited ourselves to CoC rules.

 Irony of ironies. Social justice advocates are fanning themselves silly [over this thread on Twitter](https://twitter.com/ohhoe/status/902258609911762944). People here aren't buying your double standards and damseling, socjus.

""This is what happens when a woman tries to...""

See, they can't stop doing it. Everything must be viewed through the lens of how your gender makes you a victim. But it's the _other_ people who are sexists, you know, the ones who don't act like women need to be treated with kid gloves, and who judge a woman by her output. Remember that catch phrase of theirs? ""Freedom of speech doesn't mean freedom from consequences."" Not when it's these consequences, apparently.Ms. Williams sentiments and hate seem clear. She should have no part in Node JS moving forward, and neither should anyone else that publicly stands for racism or sexism of any kind.Here is a GitHub discussion thread regarding the board meeting that will be occurring on the Rod Vagg issue this afternoon:

https://github.com/nodejs/board/issues/69#issuecomment-325410716

And here is a respectful comment I submitted regarding the concerns that are outlined here concerning fellow board member Ashley Williams:

http://bitcubby.com/files/skitch/questions_to_the_board__following_yesterday_s_board_statement_·_Issue__69_·_nodejs_board_1F548F48.png

Hopefully they allow this message to remain visible.These comments are extremely unprofessional. This should definitely be addressed.if only these assholes would spend this time and mental energy making node better.

And I'm baffled by the fork to ayo.  Don't these people have clients and jobs with dependencies that require Node anyways?  Are they now forcing ayo on all of their future developers?I'm glad someone filed a CoC complaint on this matter. I realized from reading this Node.js Board of Director's (and NPM core commiter's) comments through the ayo.js thing that she couldn't care less if what she says affects me negatively, but the fact is that it does. I'm male and white. I grew up in foster care and group homes and have never felt like I fit in with professional / upper middle class people (of any race, orientation, or anything else). Not because they aren't nice people, or anything; I'm just excluded from the worries and experiences they share. I really struggle with thinking that I belong in a decent job doing software development, because I feel like such an outsider to the people around me. You don't know really what someone else's experience is, and people tend to assume a lot about others and their backgrounds.

I don't discriminate against others and I feel like I have a lot of empathy towards others. I am very generous to others, even to the point of my own detriment.

My escape from this world is tech. I started in ASM and C, and I've been infatuated with node the past couple of years because I enjoy some of the problems it's good at solving. But I *don't* at all have to stick around a community that's led by a bunch of asshats who think I'm not good enough to join their little party and who make a point of airing it publicly constantly, because I don't have the privileges they do; the world is real and unforgiving of mistakes in my life. It's also obvious to me that a lot of this is very manipulative and about furthering commercial interests of some of the people involved, or securing power in a project outside of the normal ways to do that (contribute good code!).

I'm watching how this plays out to decide if I want to spend much time around the node ecosystem going forward. It's enough taking shit from people badmouthing Javascript constantly without getting it from the inside too. There's enough work elsewhere, and maybe it's better work anyway.[deleted]This is a brilliant example of black knighting. Nothing is going to happen to Ashley. That's not the point. The point is this exposes CoCs for what they really are: a weapon for certain people to use against their enemies. It assists in ideological purges of undesirables but doesn't apply to those with the appropriate ideology. CoCs are a fraud, in other words.[deleted]Can someone show me where on a Pull Request, I can specify my weight, sexual orientation and religion?She sounds like a terrible person but I don't believe any action will be taken against her.No way action is taken here.  It includes actual citations.I'll be interested to see how this one plays out. Everything she's done seem like cheap, immature stunts to impress teenagers and ""totally like blow the minds of these old guys"". It's good to have someone outspoken about supporting women in tech but can't we get someone who's not just swinging blindly at anyone for publicity and spouting childish crap all over twitter? 

Where did they find this muppet?The report was received! https://github.com/nodejs/TSC/issues/324This is giving me a sad, very sad smile :(

It just tells me that if you want to find something on someone you will find it.
And, if you want to enforce something that is important to you for a full 100% things will get hurt in the process.

At this moment the entire drama around Rod is not good for NodeJS and our community.
For me the hardest part is that I cannot find any real evidence (in the format as shown above) of what he is actually accused of.
It seems like i'm not alone in this according to [hacker news](https://news.ycombinator.com/item?id=15101668)

However, if 60% of the board has made a decision and you cannot live with it go ahead and make the fork and create your own playground. Maybe the NodeJS community is better of without them (once again not sure due to lack of evidence).
I hope the drama will end here and we can all do what we like to do most: Write code and make stuff better.

I'm all about inclusiveness and I really do believe toxic people should be removed from any community, but:

* Show structural evidence of toxic behavior
* Show any amount of forgiveness because I'm sure everyone has typed something that could be interpreted differently if you read it with a different mindset.

I hope this report will made people think about accusations and will help improve the process of reported CoC violations.

(edit: typos)
I sent the following email to report@nodejs.org:

> ""Earlier this morning, multiple code of conduct violations by board member Ashley Williams were reported to this email address. I am emailing you simply to say that I am aware of this submission and will be watching intently to see what becomes of it (as will many others). Please do the right thing.""

I encourage others to do likewise.If you care about the future of Node then I suggest joining the foundation as an individual member. It’s $100 to join, $25 if you’re a student, and free for contributors to Node.

https://nodejs.org/en/foundation/members/YES! Thank you!Relevant:

[The Amazing World of Gumball - Gumball The Social Justice Warrior
](https://www.youtube.com/watch?v=5XOaYMkz5Cc)Please retweet:

https://twitter.com/tkambler/status/902203047610380288

https://twitter.com/tkambler/status/902205852630863872I wonder if there is ANYBODY that will actually switch to ayoFYI... I posted a link to this complaint on the #Node.js IRC channel. I was subsequently banned.As a front end dev who subbed like a week ago. Damn, get your shit together Node community. Are they going to do anything because of this? Has anyone been actually removed from a leadership position in any open source foundation or project because of what they said on twitter?

Has she made such remarks in official node.js community spaces or events? Having an example of that would make a much stronger case. However unlike many others she doesn't specify that the tweets or opinions are her own and do not represent her employers/organizations and the same excuse was pushed in the attempt to remove Rod Vagg from his position.She is completely toxic to the community and need to removed completely. I quote RT'd something she tweeted (and later deleted). Her first instinct was to call me a dingdong. Exchanged some tweets where I remained about as polite as I could after that kind of initial response, ended up getting blocked.

Just to share my experience with this person, as some don't seem to be convinced about the issue yet.

For transparency's sake: https://twitter.com/jhartikainen/status/861273711890104321I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/drama] [Autists vs SJWs on Node.js board](https://np.reddit.com/r/Drama/comments/6wp1uw/autists_vs_sjws_on_nodejs_board/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)Delicious redditears.

Y'all are about as spineless as you get. No wonder you never get laid.

p.s. https://twitter.com/maybekatz/status/902261555588247552
p.p.s. this thread is transparent as fuck and we're literally all laughing at your sorry asses behind the scenes. Yes, Node folks are doing this.I wonder what would happen if people's concerns over the CoC is taken based on how much they have contributed to Node using some quality benchmark.

Would we even be having this conversation then?CoCs are utterly stupid. Live by the sword, die by the sword.I do agree that there is a pattern of infractions - and more importantly, a pattern of stereotyping and condescending comments towards men in general.

Though i would love to see more women participate in open source projects, and would love to see them in positions of influence, that can only come about if we choose participants based on the quality of their contributions and not on the loudness of their views.Ugghhh. Great. Whole community's just up and giving into the drama now, it seems.Everyone's shit stinks, issue is if you can work with people. Only people politicking care.[removed]Does this really have to happen? I expected garbage drama like this to happen to video game subs, not here :(.

I just hope all the garbage people go away.[removed]You should get together with a moderator of this forum, or another member of the board, to ""escrow"" your identity. Verify it to trusted individuals, yet protected in general.

It just occurred to me that the EFF might just be the organization. Relevant to the topic, able to protect your identity (with attorney/client priviledge no less), yet will add credibility to the charges filed.

There are a lot of organizations that completely and utterly ignore complaints made in anonymity, regardless of their weight or veracity. 

[edit] https://github.com/nodejs/board/issues/69#issue-252985590 shows rules to the debate that will allow a complete handwave dismissal of any topic other than the ""merge"".

> comments that do not do this, and/or are argumentative or attempt to address the details of the current situation that are not then constructed into a question for the board will be considered off topic and moderated.

You're going to have to push hard to get any traction on this. They'll try to lump it in to the same timeframe/discussion and dismiss it based on this unilaterally written, yet reasonable sounding rule.This drama shit is why node will struggle to be taken seriously in enterprise. I wish this was posted somewhere public so I could share itHaha haha. Ha!


Haha haha!This structure is very reminiscent of CCP destabilizing and shaming tactics. No way you're a national is there? I'm going to make it clear that I don't find views against power dominant demographics to be ""racist"" or ""sexist,"" as those terms refer to actions that support larger societal biases. However, a ton of these messages are intentionally incendiary and not at all becoming of someone of her role. I'm a proud intersectional feminist, but there's a difference between bringing attention to social issues facing marginalized people and being an edgelord.

________

Also, I just want to highlight that a couple of these examples are pretty thin and I think distract from what I consider to be your focal argument:

> ""i get mad almost every day about how we sterilize male animals in the wild, but insist that human women take birth control not human men""

This doesn't read as a desire to sterilize men at all. She's talking about social expectation of women being responsible for birth control, which I think is a reasonable position to hold. The message regarding sterilization is only pointing out the dichotomy of having the expectation that male animals be sterilized, whereas female humans should take precautions for being effectively ""sterilized."" And trying to tie that to compulsory sterilization of POC is ridiculous and actually pretty fucked up. I would ditch that complaint.

> ""i am tired of and angry with @nodejs leadership. inclusive spaces are within your reach. at this point, it is clear you dont want them.""

How is this relevant to your CoC violations? There's nothing wrong with a board member questioning the leadership of the organization they're involved in and there's nothing really incendiary in here at all.A code of conduct was not designed for this kind of witch hunt and this is a witch hunt.

Source: I'm an open source maintainer with 548 million+ downloads.
As a white tech dude, I do not feel horribly offended or threatened by this person's tweets.

In the current context of things, what I'm picking is basically a pissing contest.

Let 'em downvotes start.This is like fighting stupid with stupid.  It doesn't matter if she hates men or dogs or tuna casserole, people are allowed to have opinions.  But when a person becomes a problem in the workplace, like when they publicly go after a coworker because of some personal grudge, they need to be dealt with.This thread is a joke, right? You've searched for ""abuse"" and come up with this? 

Also, most of her recent comments regarding the TSC have been made by other white male peers who you haven't picked on. 

As a white man I'm truly embarrassed by most of the top comments in this thread. I wish those dudes were called Rod Wiggum and Ralph Vagg instead.Free speech should have some limits, but nobody should be restricted from making harmless comments such as the above. 

This ""Political Correctness"" nonsense has gone way too far.

> ""I disapprove of what you say, but I will defend to the death your right to say it""Feeling insecure as a white dudeI'm gonna be the dissenting voice here. This is literally the first time I've seen any of this drama, and my takeaway from these quotes is that this is about a billion times less bad than the misogynistic shit that real misogynists spout. A lot of this could be construed as sarcasm or hyperbole because it seems mixed in with a lot of shit that really isn't that bad.

Again, just an outsiders opinion.ah the old pointing out sexism & racism==sex & racism trope. Let me guess none of you even see color?From a fellow node-contributor and NPM author, and a non-whiny white dude, I stand by Ashely. These are baseless allegations,

> ""never underestimate the wrath of a mildly inconvenienced white dude (and yes it is all dudes complaining)""

You know how many white dudes left node because of that statement? 0. Precisely 0. She's exactly right and this post is evidence of it. You're mildly irritated; in the mean time, transfolks and women in software engineering are sexually harassed and belittled. The climate is made so unwelcoming that they just leave FOSS entirely.

> remember how you thought that white dudes conflating their opportunity with merit in tech was awful? literally the same thing in capitalism

That's also true. I'm a programmer because my dad struck gold moving to Texas and opening up a stereo store. It's privilege to start at a young age, not skill; and, it's a game that requires early admission. That's why India, Brazil, and China has emerged as a software powerhouse, their middle class can now afford to equip their children with computers.

All this whiny nonsense from other white guys that have no perspective on wordly problems. And, most of it is the predictable outcome of the failed attempt to get Rod Vagg removed.""Additionally, it is likely Ashley will be participating in an override vote on August 28, 2017 regarding the complaints filed against Rod Vagg.""

""Unfortunately, this is submitted anonymously due to the risk of becoming the target of dishonest slander, mis-characterization and harassment.""

Imagine how awful it is to have anecdotal tweets taken out of context and then posted online to discredit your position. Imagine when the purpose is to remove your right to vote out someone who violated the CoC on a heinous level.If you start off by claiming ""never underestimate the wrath of a mildly inconvenienced white dude (and yes it is all dudes complaining)"" is ""hateful speech towards 'white dudes'"" I'm gonna have a hard time taking your grievances seriously.

I mean, it's almost like you're proving your point for her, actually... seriously, just go back and re-read your assertion and you'll probably see the painful irony.

Speaking as a white dude, I'm always kind of ashamed by how we, as a group, behave in online spaces. We still dominate these spaces, and until we learn to make room for others it's pretty natural we catch some flak for it - that's not racism/sexism, that's not even ""reverse racism/sexism"" (which is not a thing, anymore than self-defense against an attacker is ""reverse murder""). It's just as preposterous as Trump's ""many sides"" gaffe - equating those who fight for white male supremacy and those who fight against it for ""both being racist/sexist"" is ridiculous. You can find more inflammatory comments in MLK's writings, for crying out loud!

Fellow white dudes, please, I'm begging you: let's be better than this. Let's recognize we're cheating others and ourselves by keeping up the big ""girlz keep out!"" sign on the treehouse door. We need to grow up, already! There's plenty of tech jobs for everyone, and our industry will be better with a fairer playing field. People always claim women in tech who don't like sexist harassment just need to ""toughen up"" or ""grow thicker skin"" - maybe it's the other way 'round, and it's us who needs to stop crying about ""reverse sexism"" just because we get called out for our fragility/defensiveness/complicity on sexism. It's not asking too much, is it?[deleted]This is fairly well trod ground at this point, but the reason Ashley can say these things is because they're completely harmless. We (I'm a white dude too), don't have our identity/demographic used against us. If you're being practical about this, what she's expressing in these tweets is only mildly socially unpleasant. By contrast, the monolith of presumption that women face *on an hourly basis* rules their entire lives, and their entire careers. This kind of eye-for-an-eye reasoning doesn't work because, realistically, the stakes are overwhelmingly asymmetric.

Yes, I think this kind of overt anger and frustration is counterproductive, but again, I'm a white guy and I have the privilege of being objective by virtue of being personally unaffected by the issues Ashley is reacting against.No such thing as sexism against men, what is wrong with all of you> trying to have a dialectic

congrats on doing mraxismRelated: https://www.reddit.com/r/node/comments/6wmve6/coc_violation_reported_about_kat_march%C3%A1n/[removed]You're really grasping at straws for most of these points. I'm having a hard time taking this seriously. Then again, you did sign this ""Ralph Wiggum"".> Unfortunately, this is submitted anonymously due to the risk of becoming the target of dishonest slander, mis-characterization and harassment when trying to have a dialectic about difficult and nuanced issues in the Node.js community.

You mean, you could potentially open yourself up to the same treatment you're giving her?I see the nodejs community is being taken over by alt-right moronsWhat the hell is going on? This post is trying to incite an internet mob against a private individual. This is blatantly against Reddit's terms of service, why the hell is this here?

**EVERYONE READING THIS**: Please click report on the OP at the top of the page.Some of you have a brain disorder preventing you from observing obvious power asymmetry in society. My god, she said she doesn't like men? The horror! Get this person censured ASAP. 

How do you people function in the real world?grow up.Burn the witch!";"You should get together with a moderator of this forum, or another member of the board, to ""escrow"" your identity. Verify it to trusted individuals, yet protected in general.

It just occurred to me that the EFF might just be the organization. Relevant to the topic, able to protect your identity (with attorney/client priviledge no less), yet will add credibility to the charges filed.

There are a lot of organizations that completely and utterly ignore complaints made in anonymity, regardless of their weight or veracity. 

[edit] https://github.com/nodejs/board/issues/69#issue-252985590 shows rules to the debate that will allow a complete handwave dismissal of any topic other than the ""merge"".

> comments that do not do this, and/or are argumentative or attempt to address the details of the current situation that are not then constructed into a question for the board will be considered off topic and moderated.

You're going to have to push hard to get any traction on this. They'll try to lump it in to the same timeframe/discussion and dismiss it based on this unilaterally written, yet reasonable sounding rule.";node
2017-08-24 13:21:15;Node.js Board Statement on TSC Action;"Honestly, both sides of this just seem to be backwards. We are tech and a community. We need to keep moving forward, especially with JavaScript. 

Crap, have you seen the stuff Linus says and yet he still is in charge. I'm sorry, but if we are going to be a system that abides by a democratic system or a charter, then we should abide by it. If someone does something you don't like then do what the individual at Ayo did. But if the market doesn't follow suit then that is the decision of the masses.

I am sorry but from all evidence, this is the lightest I have ever seen a tech person do to be basically thrown overboard for. Come on everyone, we are better than this!Goddamn, why is this even an issue? Fuck 'em and get back to work.So what'd this guy do to piss people off?ayo is screwed from the outset.
> 
> I'd be open to re-merging if and when the problems plaguing Node.js are resolved. Problematic people removed; use of ""policy"" as an excuse ended; power structures reorganized to emphasize community over tech.  So far though it seems like there's little desire to fix these problems from those with the power to do so.

https://github.com/ayojs/ayo/issues/4#issuecomment-324090791

tl;dr The TSC needs to vote again on whether to evict Rod Vagg and if the right result is not reached, the board will transfer CoC enforcement to someone else, possibly themselves.I would rather you just evict the SJW people and keep writing code.

I do not care about their politics and no one else should.

The tech community has been fine for decades. They're the ones showing up and telling us we have to change. That's not how that worksMoral puritans will always find something to moralize over. Social justice is cancer.They need a second foundation Did node shit the bed again?For those wondering what this is all about. I've compiled a listing of all the related events from what I can gather:
https://gist.github.com/balupton/d6531a2f48dba896a1bced86e8b1636c";"ayo is screwed from the outset.
> 
> I'd be open to re-merging if and when the problems plaguing Node.js are resolved. Problematic people removed; use of ""policy"" as an excuse ended; power structures reorganized to emphasize community over tech.  So far though it seems like there's little desire to fix these problems from those with the power to do so.

https://github.com/ayojs/ayo/issues/4#issuecomment-324090791

";node
2017-09-05 11:14:52;It’s OK to not use Yarn;"The post starts out with:

> As the months rolled by, I saw it showing up more and more in the install instructions for npm packages. Angular, Webpack, Prettier, Babel-loader, Bootsrap — all will inform you of the option to yarn add ...

> I should be content to let the people be excited about the hot new thing. It’s really none of my business. And mind my own business I did, until I heard this: “we use Yarn because it’s more deterministic than npm”. I gasped, but luckily was able to cover my mouth in time so I don’t think they noticed.

And then goes on to talk about how you don't need yarn.  The thing is, he's using npm5 to justify this position, but npm5 wasn't around for those ""months"" that rolled by.

npm5 attempts to address some of the issues that yarn fixed, but it took a long time getting here and that's why people were excited about yarn during those ""months.""

Having switched to yarn I'm not going to switch back, especially since it's still significantly faster for every project I have measured.I experienced many random issues over time. Then I personally switched to yarn when faced an issue with npm 5.3, see this https://github.com/npm/npm/issues/18340

Then when you start using yarn, you find out that's much more fast and reliable than npm.I love the YAT unit of measurement described in this article. That warrants its own post. A fun experiment would be to take apart popular open source projects and measure their YAT score.I'm having so many issues with npm 5 that it's unusable. I can't even get just a regular `npm install [packagename]` to work half the time. NPM 5 is completely broken right now. And fails to install on a lot of our projects. NPM 3 and Yarn work perfectly fine. Anecdotal evidence, I know. But this is why we still use Yarn.I must be using npm all wrong, because I never had any problems with it, including 5.x. It sure isn't very fast, but it kind of just works for me.Some things to remember about NPM at the time yarn came out.

* It was SLOOOOW. If you turned off progress bars it was slightly faster. But yarn was significantly faster.
* Shrinkwrap (the lockfile format at the time) was not intuitive and was not deterministic. If packages were listed in package.json and not in shrinkwrap.json it would install the extra packages.
* npm install would put dependencies in different locations depending on if you were initially adding the dependency (with an already existing node_modules folder) or doing a fresh install.
* Lifecycle scripts were broken almost the entire major version 3. Preinstall fired AFTER install, for instance.

There is less of a ""need"" to move to yarn nowadays with npm 5 but I think a lot of people moved to yarn and have not looked back. Yarn, in my experience, has introduced far less breaking changes since v0.16.0 (first lts release) than NPM. Early versions of NPM 5 simply did not work for me on many occasions, but that's just personal experience.

Yarn has recently added workspaces so there is potential for much nicer mono-repo support. There is also yarn create which allows you to build tooling similar to create-react-app.

But again if all you need to do is install dependencies reliably and quickly you are perfectly fine with either solution!

Competition has definitely helped both projects to continuously improve.";"I experienced many random issues over time. Then I personally switched to yarn when faced an issue with npm 5.3, see this https://github.com/npm/npm/issues/18340

Then when you start using yarn, you find out that's much more fast and reliable than npm.";node
